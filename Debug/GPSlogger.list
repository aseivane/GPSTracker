
GPSlogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008478  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d0  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009654  08009654  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009654  08009654  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009654  08009654  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800965c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b68  200001f4  08009850  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d5c  08009850  00022d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00097a13  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007466  00000000  00000000  000b7c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0003a195  00000000  00000000  000bf096  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002cd8  00000000  00000000  000f9230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004488  00000000  00000000  000fbf08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001ce7b  00000000  00000000  00100390  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00020bfe  00000000  00000000  0011d20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009d6d7  00000000  00000000  0013de09  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001db4e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1a0  00000000  00000000  001db55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f4 	.word	0x200001f4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800856c 	.word	0x0800856c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f8 	.word	0x200001f8
 8000148:	0800856c 	.word	0x0800856c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <update_GPS_from_NMEA>:
extern DMA_HandleTypeDef hdma_usart1_rx;
extern uint8_t time_updated;
extern uint8_t date_updated;

void update_GPS_from_NMEA()
{
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
	RTC_TimeTypeDef Time;
	RTC_DateTypeDef Date;
	extern uint8_t usart_rx_dma_buffer[];
	uint8_t copy_buffer1[MAX_NMEA_LEN];

	memcpy(copy_buffer1, usart_rx_dma_buffer, MAX_NMEA_LEN);
 800066a:	f240 228a 	movw	r2, #650	; 0x28a
 800066e:	4943      	ldr	r1, [pc, #268]	; (800077c <update_GPS_from_NMEA+0x118>)
 8000670:	a87f      	add	r0, sp, #508	; 0x1fc
 8000672:	f007 faab 	bl	8007bcc <memcpy>

	ptrSentence = get_sentence_ptr(copy_buffer1, "GNGGA", NULL);
 8000676:	a87f      	add	r0, sp, #508	; 0x1fc
 8000678:	2200      	movs	r2, #0
 800067a:	4941      	ldr	r1, [pc, #260]	; (8000780 <update_GPS_from_NMEA+0x11c>)
 800067c:	f001 f93e 	bl	80018fc <get_sentence_ptr>
	if( ptrSentence != NULL )
 8000680:	b128      	cbz	r0, 800068e <update_GPS_from_NMEA+0x2a>
 8000682:	4604      	mov	r4, r0
	{
		if( is_sentence_complete(copy_buffer1, ptrSentence) )
 8000684:	4601      	mov	r1, r0
 8000686:	a87f      	add	r0, sp, #508	; 0x1fc
 8000688:	f001 f916 	bl	80018b8 <is_sentence_complete>
 800068c:	b9a0      	cbnz	r0, 80006b8 <update_GPS_from_NMEA+0x54>
			get_fields(ptrSentence , fields);
			GPS_update(&gps, fields, GNGGA);
		}
	}
	//memcpy(copy_buffer1, usart_rx_dma_buffer, MAX_NMEA_LEN);
	if(!(time_updated && date_updated))
 800068e:	4c3d      	ldr	r4, [pc, #244]	; (8000784 <update_GPS_from_NMEA+0x120>)
 8000690:	7823      	ldrb	r3, [r4, #0]
 8000692:	b113      	cbz	r3, 800069a <update_GPS_from_NMEA+0x36>
 8000694:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <update_GPS_from_NMEA+0x124>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b95b      	cbnz	r3, 80006b2 <update_GPS_from_NMEA+0x4e>
	{
		ptrSentence = get_sentence_ptr(copy_buffer1, "GNZDA", NULL);
 800069a:	2200      	movs	r2, #0
 800069c:	493b      	ldr	r1, [pc, #236]	; (800078c <update_GPS_from_NMEA+0x128>)
 800069e:	a87f      	add	r0, sp, #508	; 0x1fc
 80006a0:	f001 f92c 	bl	80018fc <get_sentence_ptr>
		if( ptrSentence != NULL )
 80006a4:	4605      	mov	r5, r0
 80006a6:	b120      	cbz	r0, 80006b2 <update_GPS_from_NMEA+0x4e>
		{
			if( is_sentence_complete(copy_buffer1, ptrSentence) )
 80006a8:	a87f      	add	r0, sp, #508	; 0x1fc
 80006aa:	4629      	mov	r1, r5
 80006ac:	f001 f904 	bl	80018b8 <is_sentence_complete>
 80006b0:	b978      	cbnz	r0, 80006d2 <update_GPS_from_NMEA+0x6e>
				  date_updated=1;
				}
			}
		}
	}
}
 80006b2:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
			field_count = coma_count(ptrSentence);
 80006b8:	4620      	mov	r0, r4
 80006ba:	f001 f8f1 	bl	80018a0 <coma_count>
			get_fields(ptrSentence , fields);
 80006be:	4620      	mov	r0, r4
 80006c0:	a91b      	add	r1, sp, #108	; 0x6c
 80006c2:	f001 f8b3 	bl	800182c <get_fields>
			GPS_update(&gps, fields, GNGGA);
 80006c6:	a91b      	add	r1, sp, #108	; 0x6c
 80006c8:	2200      	movs	r2, #0
 80006ca:	4831      	ldr	r0, [pc, #196]	; (8000790 <update_GPS_from_NMEA+0x12c>)
 80006cc:	f000 f8c2 	bl	8000854 <GPS_update>
 80006d0:	e7dd      	b.n	800068e <update_GPS_from_NMEA+0x2a>
				get_fields(ptrSentence , fields);
 80006d2:	ae1b      	add	r6, sp, #108	; 0x6c
 80006d4:	4628      	mov	r0, r5
 80006d6:	4631      	mov	r1, r6
 80006d8:	f001 f8a8 	bl	800182c <get_fields>
				if(strcmp(fields[0],""))
 80006dc:	7833      	ldrb	r3, [r6, #0]
 80006de:	bb0b      	cbnz	r3, 8000724 <update_GPS_from_NMEA+0xc0>
				if(strcmp(fields[1],""))
 80006e0:	7d33      	ldrb	r3, [r6, #20]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0e5      	beq.n	80006b2 <update_GPS_from_NMEA+0x4e>
				  Date.Date = (uint8_t) strtol(fields[1], NULL, 10);
 80006e6:	220a      	movs	r2, #10
 80006e8:	2100      	movs	r1, #0
 80006ea:	a820      	add	r0, sp, #128	; 0x80
 80006ec:	f007 fb1e 	bl	8007d2c <strtol>
				  Date.Month = (uint8_t) strtol(fields[2], NULL, 10);
 80006f0:	220a      	movs	r2, #10
				  Date.Date = (uint8_t) strtol(fields[1], NULL, 10);
 80006f2:	f88d 0006 	strb.w	r0, [sp, #6]
				  Date.Month = (uint8_t) strtol(fields[2], NULL, 10);
 80006f6:	2100      	movs	r1, #0
 80006f8:	a825      	add	r0, sp, #148	; 0x94
 80006fa:	f007 fb17 	bl	8007d2c <strtol>
				  Date.Year = (uint8_t) strtol(fields[3]+2, NULL, 10);
 80006fe:	220a      	movs	r2, #10
				  Date.Month = (uint8_t) strtol(fields[2], NULL, 10);
 8000700:	f88d 0005 	strb.w	r0, [sp, #5]
				  Date.Year = (uint8_t) strtol(fields[3]+2, NULL, 10);
 8000704:	2100      	movs	r1, #0
 8000706:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 800070a:	f007 fb0f 	bl	8007d2c <strtol>
				  HAL_RTC_SetDate(&hrtc, &Date,  RTC_FORMAT_BIN);
 800070e:	2200      	movs	r2, #0
				  Date.Year = (uint8_t) strtol(fields[3]+2, NULL, 10);
 8000710:	f88d 0007 	strb.w	r0, [sp, #7]
				  HAL_RTC_SetDate(&hrtc, &Date,  RTC_FORMAT_BIN);
 8000714:	a901      	add	r1, sp, #4
 8000716:	481f      	ldr	r0, [pc, #124]	; (8000794 <update_GPS_from_NMEA+0x130>)
 8000718:	f004 f8b8 	bl	800488c <HAL_RTC_SetDate>
				  date_updated=1;
 800071c:	2201      	movs	r2, #1
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <update_GPS_from_NMEA+0x124>)
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	e7c6      	b.n	80006b2 <update_GPS_from_NMEA+0x4e>
				  f_to_char[6] = '\0';
 8000724:	2500      	movs	r5, #0
				  memcpy(f_to_char,fields[0],6);
 8000726:	e896 0003 	ldmia.w	r6, {r0, r1}
				  Time.Seconds = (uint8_t) strtol((char*)f_to_char+4, NULL, 10);
 800072a:	220a      	movs	r2, #10
				  memcpy(f_to_char,fields[0],6);
 800072c:	9002      	str	r0, [sp, #8]
 800072e:	f8ad 100c 	strh.w	r1, [sp, #12]
				  Time.Seconds = (uint8_t) strtol((char*)f_to_char+4, NULL, 10);
 8000732:	a803      	add	r0, sp, #12
 8000734:	4629      	mov	r1, r5
				  f_to_char[6] = '\0';
 8000736:	f88d 500e 	strb.w	r5, [sp, #14]
				  Time.Seconds = (uint8_t) strtol((char*)f_to_char+4, NULL, 10);
 800073a:	f007 faf7 	bl	8007d2c <strtol>
				  Time.Minutes = (uint8_t) strtol((char*)f_to_char+2, NULL, 10);
 800073e:	220a      	movs	r2, #10
				  Time.Seconds = (uint8_t) strtol((char*)f_to_char+4, NULL, 10);
 8000740:	f88d 0002 	strb.w	r0, [sp, #2]
				  Time.Minutes = (uint8_t) strtol((char*)f_to_char+2, NULL, 10);
 8000744:	4629      	mov	r1, r5
 8000746:	eb0d 0002 	add.w	r0, sp, r2
				  f_to_char[4] = '\0';
 800074a:	f88d 500c 	strb.w	r5, [sp, #12]
				  Time.Minutes = (uint8_t) strtol((char*)f_to_char+2, NULL, 10);
 800074e:	f007 faed 	bl	8007d2c <strtol>
				  Time.Hours = (uint8_t) strtol((char*)f_to_char, NULL, 10) - 3;
 8000752:	4629      	mov	r1, r5
				  Time.Minutes = (uint8_t) strtol((char*)f_to_char+2, NULL, 10);
 8000754:	f88d 0001 	strb.w	r0, [sp, #1]
				  Time.Hours = (uint8_t) strtol((char*)f_to_char, NULL, 10) - 3;
 8000758:	220a      	movs	r2, #10
 800075a:	a802      	add	r0, sp, #8
				  f_to_char[2] = '\0';
 800075c:	f88d 500a 	strb.w	r5, [sp, #10]
				  Time.Hours = (uint8_t) strtol((char*)f_to_char, NULL, 10) - 3;
 8000760:	f007 fae4 	bl	8007d2c <strtol>
				  HAL_RTC_SetTime(&hrtc, &Time,  RTC_FORMAT_BIN);
 8000764:	462a      	mov	r2, r5
				  Time.Hours = (uint8_t) strtol((char*)f_to_char, NULL, 10) - 3;
 8000766:	1ec3      	subs	r3, r0, #3
				  HAL_RTC_SetTime(&hrtc, &Time,  RTC_FORMAT_BIN);
 8000768:	4669      	mov	r1, sp
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <update_GPS_from_NMEA+0x130>)
				  Time.Hours = (uint8_t) strtol((char*)f_to_char, NULL, 10) - 3;
 800076c:	f88d 3000 	strb.w	r3, [sp]
				  HAL_RTC_SetTime(&hrtc, &Time,  RTC_FORMAT_BIN);
 8000770:	f004 f812 	bl	8004798 <HAL_RTC_SetTime>
				  time_updated=1;
 8000774:	2301      	movs	r3, #1
 8000776:	7023      	strb	r3, [r4, #0]
 8000778:	e7b2      	b.n	80006e0 <update_GPS_from_NMEA+0x7c>
 800077a:	bf00      	nop
 800077c:	20000890 	.word	0x20000890
 8000780:	080085a4 	.word	0x080085a4
 8000784:	20000239 	.word	0x20000239
 8000788:	20000237 	.word	0x20000237
 800078c:	080085ac 	.word	0x080085ac
 8000790:	20000b74 	.word	0x20000b74
 8000794:	2000087c 	.word	0x2000087c

08000798 <GPS_update_GNGGA>:
    	break;
    }
}

void GPS_update_GNGGA(GPSdata * self, uint8_t fields[][FIELD_BUFF])
{
 8000798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079a:	460d      	mov	r5, r1
 800079c:	4604      	mov	r4, r0
		TIME, LATITUDE, NoS, LONGITUDE, EoW,
		FIX, SIV, HDOP, ALTTUDE_GEOID, ALTTUDE_METER,
		GEO_SEP, GEO_SEP_METER, DIFF, DIFF_REF}; //SIV = SATELLITES IN VIEW

	//self->latitude = NMEA_deg2dec( fields[LATITUDE], 2 );
	ascii_to_float(fields[LATITUDE], &(self->latitude) );
 800079e:	4601      	mov	r1, r0
 80007a0:	f105 0014 	add.w	r0, r5, #20
 80007a4:	f001 fa88 	bl	8001cb8 <ascii_to_float>
}

void NMEA_deg2dec(float* number)
{
	//if(!*number) return;
	*number/=100;
 80007a8:	6820      	ldr	r0, [r4, #0]
 80007aa:	4929      	ldr	r1, [pc, #164]	; (8000850 <GPS_update_GNGGA+0xb8>)
 80007ac:	f7ff fe98 	bl	80004e0 <__aeabi_fdiv>
 80007b0:	4607      	mov	r7, r0
	int integer = (int) *number;//grados
 80007b2:	f7ff ff31 	bl	8000618 <__aeabi_f2iz>
	*number = *number - integer;// quedan solo los minutos y sus decimales
 80007b6:	f7ff fd8b 	bl	80002d0 <__aeabi_i2f>
 80007ba:	4606      	mov	r6, r0
 80007bc:	4601      	mov	r1, r0
 80007be:	4638      	mov	r0, r7
 80007c0:	f7ff fcd0 	bl	8000164 <__aeabi_fsub>
	*number = (float) integer + (*number)*(10/6); //a los grados le agrega los minutos /60 para que sean grados
 80007c4:	4631      	mov	r1, r6
 80007c6:	f7ff fccf 	bl	8000168 <__addsf3>
 80007ca:	6020      	str	r0, [r4, #0]
	if(*(fields[NoS]) == 'S')
 80007cc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	ascii_to_float(fields[LONGITUDE], &(self->longitude) );
 80007d0:	1d21      	adds	r1, r4, #4
	if(*(fields[NoS]) == 'S')
 80007d2:	2b53      	cmp	r3, #83	; 0x53
			self->latitude = -self->latitude;
 80007d4:	bf04      	itt	eq
 80007d6:	f100 4000 	addeq.w	r0, r0, #2147483648	; 0x80000000
 80007da:	6020      	streq	r0, [r4, #0]
	ascii_to_float(fields[LONGITUDE], &(self->longitude) );
 80007dc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80007e0:	f001 fa6a 	bl	8001cb8 <ascii_to_float>
	*number/=100;
 80007e4:	491a      	ldr	r1, [pc, #104]	; (8000850 <GPS_update_GNGGA+0xb8>)
 80007e6:	6860      	ldr	r0, [r4, #4]
 80007e8:	f7ff fe7a 	bl	80004e0 <__aeabi_fdiv>
 80007ec:	4607      	mov	r7, r0
	int integer = (int) *number;//grados
 80007ee:	f7ff ff13 	bl	8000618 <__aeabi_f2iz>
	*number = *number - integer;// quedan solo los minutos y sus decimales
 80007f2:	f7ff fd6d 	bl	80002d0 <__aeabi_i2f>
 80007f6:	4606      	mov	r6, r0
 80007f8:	4601      	mov	r1, r0
 80007fa:	4638      	mov	r0, r7
 80007fc:	f7ff fcb2 	bl	8000164 <__aeabi_fsub>
	*number = (float) integer + (*number)*(10/6); //a los grados le agrega los minutos /60 para que sean grados
 8000800:	4631      	mov	r1, r6
 8000802:	f7ff fcb1 	bl	8000168 <__addsf3>
 8000806:	6060      	str	r0, [r4, #4]
	if(*(fields[EoW])== 'W')
 8000808:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
	self->GPS_fix = (uint8_t) strtol(fields[FIX], NULL, 10);
 800080c:	220a      	movs	r2, #10
	if(*(fields[EoW])== 'W')
 800080e:	2b57      	cmp	r3, #87	; 0x57
			self->longitude = -self->longitude;
 8000810:	bf04      	itt	eq
 8000812:	f100 4000 	addeq.w	r0, r0, #2147483648	; 0x80000000
 8000816:	6060      	streq	r0, [r4, #4]
	self->GPS_fix = (uint8_t) strtol(fields[FIX], NULL, 10);
 8000818:	2100      	movs	r1, #0
 800081a:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800081e:	f007 fa85 	bl	8007d2c <strtol>
	self->satellites_in_view = (uint8_t) strtol(fields[SIV], NULL, 10);
 8000822:	220a      	movs	r2, #10
	self->GPS_fix = (uint8_t) strtol(fields[FIX], NULL, 10);
 8000824:	7220      	strb	r0, [r4, #8]
	self->satellites_in_view = (uint8_t) strtol(fields[SIV], NULL, 10);
 8000826:	2100      	movs	r1, #0
 8000828:	f105 0078 	add.w	r0, r5, #120	; 0x78
 800082c:	f007 fa7e 	bl	8007d2c <strtol>
	self->HDOP = (uint8_t) strtol(fields[HDOP], NULL, 10);
 8000830:	220a      	movs	r2, #10
	self->satellites_in_view = (uint8_t) strtol(fields[SIV], NULL, 10);
 8000832:	7260      	strb	r0, [r4, #9]
	self->HDOP = (uint8_t) strtol(fields[HDOP], NULL, 10);
 8000834:	2100      	movs	r1, #0
 8000836:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 800083a:	f007 fa77 	bl	8007d2c <strtol>
	self->altitude = (uint8_t) strtol(fields[ALTTUDE_METER], NULL, 10);
 800083e:	220a      	movs	r2, #10
	self->HDOP = (uint8_t) strtol(fields[HDOP], NULL, 10);
 8000840:	72a0      	strb	r0, [r4, #10]
	self->altitude = (uint8_t) strtol(fields[ALTTUDE_METER], NULL, 10);
 8000842:	2100      	movs	r1, #0
 8000844:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 8000848:	f007 fa70 	bl	8007d2c <strtol>
 800084c:	72e0      	strb	r0, [r4, #11]
}
 800084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000850:	42c80000 	.word	0x42c80000

08000854 <GPS_update>:
    switch(talker)
 8000854:	b90a      	cbnz	r2, 800085a <GPS_update+0x6>
    	if(fields[1][0] != '\0')  GPS_update_GNGGA(self, fields);
 8000856:	7d0b      	ldrb	r3, [r1, #20]
 8000858:	b903      	cbnz	r3, 800085c <GPS_update+0x8>
}
 800085a:	4770      	bx	lr
    	if(fields[1][0] != '\0')  GPS_update_GNGGA(self, fields);
 800085c:	f7ff bf9c 	b.w	8000798 <GPS_update_GNGGA>

08000860 <open_append>:

FRESULT open_append (
    FIL* fp,            /* [OUT] File object to create */
    const char* path    /* [IN]  File name to be opened */
)
{
 8000860:	b538      	push	{r3, r4, r5, lr}
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 8000862:	2212      	movs	r2, #18
{
 8000864:	4605      	mov	r5, r0
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 8000866:	f006 f9e1 	bl	8006c2c <f_open>
    if (fr == FR_OK) {
 800086a:	4604      	mov	r4, r0
 800086c:	b108      	cbz	r0, 8000872 <open_append+0x12>
        fr = f_lseek(fp, f_size(fp));
        if (fr != FR_OK)
            f_close(fp);
    }
    return fr;
}
 800086e:	4620      	mov	r0, r4
 8000870:	bd38      	pop	{r3, r4, r5, pc}
        fr = f_lseek(fp, f_size(fp));
 8000872:	f241 030c 	movw	r3, #4108	; 0x100c
 8000876:	4628      	mov	r0, r5
 8000878:	58e9      	ldr	r1, [r5, r3]
 800087a:	f006 fd83 	bl	8007384 <f_lseek>
        if (fr != FR_OK)
 800087e:	4604      	mov	r4, r0
 8000880:	2800      	cmp	r0, #0
 8000882:	d0f4      	beq.n	800086e <open_append+0xe>
            f_close(fp);
 8000884:	4628      	mov	r0, r5
 8000886:	f006 fd4d 	bl	8007324 <f_close>
}
 800088a:	4620      	mov	r0, r4
 800088c:	bd38      	pop	{r3, r4, r5, pc}
 800088e:	bf00      	nop

08000890 <send_uart>:

void send_uart (char *string)
{
 8000890:	b510      	push	{r4, lr}
 8000892:	4604      	mov	r4, r0
	extern UART_HandleTypeDef huart1;
	uint8_t len = strlen (string);
 8000894:	f7ff fc5a 	bl	800014c <strlen>
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000898:	4621      	mov	r1, r4
}
 800089a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 800089e:	b2c2      	uxtb	r2, r0
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	4801      	ldr	r0, [pc, #4]	; (80008ac <send_uart+0x1c>)
 80008a6:	f004 bbe1 	b.w	800506c <HAL_UART_Transmit>
 80008aa:	bf00      	nop
 80008ac:	20000c9c 	.word	0x20000c9c

080008b0 <log_data>:

FRESULT log_data()
{
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 80008b6:	b086      	sub	sp, #24
  RTC_DateTypeDef Date;
  extern RTC_HandleTypeDef hrtc;
  //extern GPSdata gps;

	/* Open or create a log file and ready to append */
  fr = f_mount(&fs, "", 0);
 80008b8:	f50d 5087 	add.w	r0, sp, #4320	; 0x10e0
 80008bc:	2200      	movs	r2, #0
 80008be:	4927      	ldr	r1, [pc, #156]	; (800095c <log_data+0xac>)
 80008c0:	3008      	adds	r0, #8
 80008c2:	f006 f973 	bl	8006bac <f_mount>
	if ( fr != FR_OK )
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d13f      	bne.n	800094a <log_data+0x9a>
	{
		send_uart ("ERROR!!! in mounting SD CARD...\r\n");
		return fr;
	}
	else send_uart("SD CARD mounted successfully...\r\n");
 80008ca:	4825      	ldr	r0, [pc, #148]	; (8000960 <log_data+0xb0>)
 80008cc:	f7ff ffe0 	bl	8000890 <send_uart>

	fr = open_append(&fil, "logfile.txt");
 80008d0:	a82f      	add	r0, sp, #188	; 0xbc
 80008d2:	4924      	ldr	r1, [pc, #144]	; (8000964 <log_data+0xb4>)
 80008d4:	f7ff ffc4 	bl	8000860 <open_append>
	if (fr != FR_OK)
 80008d8:	4604      	mov	r4, r0
 80008da:	bb70      	cbnz	r0, 800093a <log_data+0x8a>
	{
		  send_uart ("ERROR!!! openning file...\r\n");
		  return fr;
	}

	send_uart ("logfile.txt opened\r\n");
 80008dc:	4822      	ldr	r0, [pc, #136]	; (8000968 <log_data+0xb8>)
 80008de:	f7ff ffd7 	bl	8000890 <send_uart>

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80008e2:	a907      	add	r1, sp, #28
 80008e4:	4622      	mov	r2, r4
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <log_data+0xbc>)
 80008e8:	f003 ffca 	bl	8004880 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80008ec:	4622      	mov	r2, r4
 80008ee:	a908      	add	r1, sp, #32
 80008f0:	481e      	ldr	r0, [pc, #120]	; (800096c <log_data+0xbc>)
 80008f2:	f004 f851 	bl	8004998 <HAL_RTC_GetDate>

	//sprintf(log, "%i:%i:%i %i/%i/%i, %f, %f, %d\r\n",Time.Hours,Time.Minutes, Time.Seconds, Date.Date, Date.Month, Date.Year, gps.latitude, gps.longitude, gps.altitude);
	sprintf(log, "%i:%i:%i %i/%i/%i, Latitud, Longitud, Altura\n",Time.Hours,Time.Minutes, Time.Seconds, Date.Date, Date.Month, Date.Year);
 80008f6:	f89d 4023 	ldrb.w	r4, [sp, #35]	; 0x23
 80008fa:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
 80008fe:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 8000902:	f89d 501e 	ldrb.w	r5, [sp, #30]
 8000906:	ae09      	add	r6, sp, #36	; 0x24
 8000908:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800090c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8000910:	e9cd 0402 	strd	r0, r4, [sp, #8]
 8000914:	9101      	str	r1, [sp, #4]
 8000916:	9500      	str	r5, [sp, #0]
 8000918:	4630      	mov	r0, r6
 800091a:	4915      	ldr	r1, [pc, #84]	; (8000970 <log_data+0xc0>)
 800091c:	9605      	str	r6, [sp, #20]
 800091e:	f007 f969 	bl	8007bf4 <siprintf>
	/* Append a line */
	f_printf(&fil, log);
 8000922:	9905      	ldr	r1, [sp, #20]
 8000924:	a82f      	add	r0, sp, #188	; 0xbc
 8000926:	f006 ff27 	bl	8007778 <f_printf>

	/* Close the file */
	f_close(&fil);
 800092a:	a82f      	add	r0, sp, #188	; 0xbc
 800092c:	f006 fcfa 	bl	8007324 <f_close>
}
 8000930:	4620      	mov	r0, r4
 8000932:	f50d 5d04 	add.w	sp, sp, #8448	; 0x2100
 8000936:	b006      	add	sp, #24
 8000938:	bd70      	pop	{r4, r5, r6, pc}
		  send_uart ("ERROR!!! openning file...\r\n");
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <log_data+0xc4>)
 800093c:	f7ff ffa8 	bl	8000890 <send_uart>
}
 8000940:	4620      	mov	r0, r4
 8000942:	f50d 5d04 	add.w	sp, sp, #8448	; 0x2100
 8000946:	b006      	add	sp, #24
 8000948:	bd70      	pop	{r4, r5, r6, pc}
 800094a:	4604      	mov	r4, r0
		send_uart ("ERROR!!! in mounting SD CARD...\r\n");
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <log_data+0xc8>)
 800094e:	f7ff ff9f 	bl	8000890 <send_uart>
}
 8000952:	4620      	mov	r0, r4
 8000954:	f50d 5d04 	add.w	sp, sp, #8448	; 0x2100
 8000958:	b006      	add	sp, #24
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	0800869c 	.word	0x0800869c
 8000960:	080085d8 	.word	0x080085d8
 8000964:	080085fc 	.word	0x080085fc
 8000968:	08008624 	.word	0x08008624
 800096c:	2000087c 	.word	0x2000087c
 8000970:	0800863c 	.word	0x0800863c
 8000974:	08008608 	.word	0x08008608
 8000978:	080085b4 	.word	0x080085b4

0800097c <u8x8_byte_stm32hal_hw_i2c>:
extern GPSdata gps;
extern RTC_HandleTypeDef hrtc;
extern uint8_t screen_number;

uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800097c:	b570      	push	{r4, r5, r6, lr}
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;


  switch(msg)
 800097e:	3914      	subs	r1, #20
{
 8000980:	b084      	sub	sp, #16
  switch(msg)
 8000982:	290c      	cmp	r1, #12
 8000984:	d836      	bhi.n	80009f4 <u8x8_byte_stm32hal_hw_i2c+0x78>
 8000986:	e8df f001 	tbb	[pc, r1]
 800098a:	3515      	.short	0x3515
 800098c:	182f0735 	.word	0x182f0735
 8000990:	35353535 	.word	0x35353535
 8000994:	3535      	.short	0x3535
 8000996:	15          	.byte	0x15
 8000997:	00          	.byte	0x00
  {
    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
        while( arg_int > 0 )
 8000998:	b162      	cbz	r2, 80009b4 <u8x8_byte_stm32hal_hw_i2c+0x38>
 800099a:	4e18      	ldr	r6, [pc, #96]	; (80009fc <u8x8_byte_stm32hal_hw_i2c+0x80>)
 800099c:	4d18      	ldr	r5, [pc, #96]	; (8000a00 <u8x8_byte_stm32hal_hw_i2c+0x84>)
 800099e:	7831      	ldrb	r1, [r6, #0]
 80009a0:	440a      	add	r2, r1
 80009a2:	b2d2      	uxtb	r2, r2
        {
			buffer[buf_idx++] = *data;
 80009a4:	f813 4b01 	ldrb.w	r4, [r3], #1
 80009a8:	1c48      	adds	r0, r1, #1
 80009aa:	546c      	strb	r4, [r5, r1]
 80009ac:	b2c1      	uxtb	r1, r0
        while( arg_int > 0 )
 80009ae:	428a      	cmp	r2, r1
 80009b0:	d1f8      	bne.n	80009a4 <u8x8_byte_stm32hal_hw_i2c+0x28>
 80009b2:	7032      	strb	r2, [r6, #0]
	}
    	break;
    default:
      return 0;
  }
  return 1;
 80009b4:	2001      	movs	r0, #1
}
 80009b6:	b004      	add	sp, #16
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iaddress<<1, &buffer[0], buf_idx, 20u);
 80009ba:	2214      	movs	r2, #20
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <u8x8_byte_stm32hal_hw_i2c+0x80>)
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <u8x8_byte_stm32hal_hw_i2c+0x84>)
 80009c4:	2178      	movs	r1, #120	; 0x78
 80009c6:	480f      	ldr	r0, [pc, #60]	; (8000a04 <u8x8_byte_stm32hal_hw_i2c+0x88>)
 80009c8:	f002 ffb6 	bl	8003938 <HAL_I2C_Master_Transmit>
		for (i = 1; i <= 500; i++);
 80009cc:	2301      	movs	r3, #1
 80009ce:	9303      	str	r3, [sp, #12]
 80009d0:	9b03      	ldr	r3, [sp, #12]
 80009d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009d6:	d8ed      	bhi.n	80009b4 <u8x8_byte_stm32hal_hw_i2c+0x38>
 80009d8:	9b03      	ldr	r3, [sp, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	9303      	str	r3, [sp, #12]
 80009de:	9b03      	ldr	r3, [sp, #12]
 80009e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009e4:	d9f8      	bls.n	80009d8 <u8x8_byte_stm32hal_hw_i2c+0x5c>
 80009e6:	e7e5      	b.n	80009b4 <u8x8_byte_stm32hal_hw_i2c+0x38>
			buf_idx = 0;
 80009e8:	2200      	movs	r2, #0
  return 1;
 80009ea:	2001      	movs	r0, #1
			buf_idx = 0;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <u8x8_byte_stm32hal_hw_i2c+0x80>)
 80009ee:	701a      	strb	r2, [r3, #0]
}
 80009f0:	b004      	add	sp, #16
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 80009f4:	2000      	movs	r0, #0
}
 80009f6:	b004      	add	sp, #16
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
 80009fa:	bf00      	nop
 80009fc:	20000210 	.word	0x20000210
 8000a00:	20000214 	.word	0x20000214
 8000a04:	20000bc4 	.word	0x20000bc4

08000a08 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000a08:	b500      	push	{lr}
  switch(msg)
 8000a0a:	3928      	subs	r1, #40	; 0x28
{
 8000a0c:	b083      	sub	sp, #12
  switch(msg)
 8000a0e:	2924      	cmp	r1, #36	; 0x24
 8000a10:	d814      	bhi.n	8000a3c <psoc_gpio_and_delay_cb+0x34>
 8000a12:	e8df f001 	tbb	[pc, r1]
 8000a16:	2c16      	.short	0x2c16
 8000a18:	161a1616 	.word	0x161a1616
 8000a1c:	13131313 	.word	0x13131313
 8000a20:	13131313 	.word	0x13131313
 8000a24:	13131313 	.word	0x13131313
 8000a28:	13131313 	.word	0x13131313
 8000a2c:	13131313 	.word	0x13131313
 8000a30:	13131313 	.word	0x13131313
 8000a34:	13131313 	.word	0x13131313
 8000a38:	1313      	.short	0x1313
 8000a3a:	16          	.byte	0x16
 8000a3b:	00          	.byte	0x00
    case U8X8_MSG_GPIO_MENU_HOME:
      u8x8_SetGPIOResult(u8x8, Chip_GPIO_GetPinState(LPC_GPIO, KEY_HOME_PORT, KEY_HOME_PIN));
      break;
*/
    default:
      u8x8_SetGPIOResult(u8x8, 1);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
      break;
  }
  return 1;
}
 8000a42:	2001      	movs	r0, #1
 8000a44:	b003      	add	sp, #12
 8000a46:	f85d fb04 	ldr.w	pc, [sp], #4
		for (i = 1; i <= arg_int*10; i++);
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a52:	9b01      	ldr	r3, [sp, #4]
 8000a54:	0052      	lsls	r2, r2, #1
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3f3      	bcc.n	8000a42 <psoc_gpio_and_delay_cb+0x3a>
 8000a5a:	9b01      	ldr	r3, [sp, #4]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	9b01      	ldr	r3, [sp, #4]
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d9f9      	bls.n	8000a5a <psoc_gpio_and_delay_cb+0x52>
}
 8000a66:	2001      	movs	r0, #1
 8000a68:	b003      	add	sp, #12
 8000a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a6e:	4610      	mov	r0, r2
      HAL_Delay(arg_int);
 8000a70:	f002 fab6 	bl	8002fe0 <HAL_Delay>
}
 8000a74:	2001      	movs	r0, #1
 8000a76:	b003      	add	sp, #12
 8000a78:	f85d fb04 	ldr.w	pc, [sp], #4

08000a7c <draw_button_line>:


uint8_t draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 8000a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a80:	b087      	sub	sp, #28
 8000a82:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000a84:	4680      	mov	r8, r0
  uint8_t is_invert;

  u8g2_uint_t d;
  u8g2_uint_t x;

  cnt = u8x8_GetStringLineCnt(s);
 8000a86:	4630      	mov	r0, r6
{
 8000a88:	468a      	mov	sl, r1
 8000a8a:	9205      	str	r2, [sp, #20]
 8000a8c:	469b      	mov	fp, r3
  cnt = u8x8_GetStringLineCnt(s);
 8000a8e:	f002 f9f3 	bl	8002e78 <u8x8_GetStringLineCnt>
 8000a92:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000a96:	0064      	lsls	r4, r4, #1
 8000a98:	3c06      	subs	r4, #6
 8000a9a:	4681      	mov	r9, r0
 8000a9c:	b2e4      	uxtb	r4, r4


  /* calculate the width of the button line */
  button_line_width = 0;
  for( i = 0; i < cnt; i++ )
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d046      	beq.n	8000b30 <draw_button_line+0xb4>
 8000aa2:	2700      	movs	r7, #0
  button_line_width = 0;
 8000aa4:	463d      	mov	r5, r7
 8000aa6:	4638      	mov	r0, r7
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	f002 f9f5 	bl	8002e98 <u8x8_GetStringLineStart>
 8000aae:	4601      	mov	r1, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	f001 fd9b 	bl	80025ec <u8g2_GetUTF8Width>
 8000ab6:	3701      	adds	r7, #1
 8000ab8:	4405      	add	r5, r0
  for( i = 0; i < cnt; i++ )
 8000aba:	b2f8      	uxtb	r0, r7
 8000abc:	4548      	cmp	r0, r9
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8000abe:	b2ed      	uxtb	r5, r5
  for( i = 0; i < cnt; i++ )
 8000ac0:	d3f2      	bcc.n	8000aa8 <draw_button_line+0x2c>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8000ac2:	442c      	add	r4, r5

  /* calculate the left offset */
  d = 0;
  if ( button_line_width < w )
 8000ac4:	9b05      	ldr	r3, [sp, #20]
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8000ac6:	b2e4      	uxtb	r4, r4
  if ( button_line_width < w )
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	d22f      	bcs.n	8000b2c <draw_button_line+0xb0>
  {
    d = w;
    d -= button_line_width;
 8000acc:	9b05      	ldr	r3, [sp, #20]
 8000ace:	1b1c      	subs	r4, r3, r4
    d /= 2;
 8000ad0:	f3c4 0446 	ubfx	r4, r4, #1, #7
  }

  /* draw the buttons */
  x = d;
  for( i = 0; i < cnt; i++ )
 8000ad4:	f1b9 0f00 	cmp.w	r9, #0
 8000ad8:	d024      	beq.n	8000b24 <draw_button_line+0xa8>
  d = 0;
 8000ada:	2700      	movs	r7, #0
 8000adc:	463d      	mov	r5, r7
  {
    is_invert = 0;
    if ( i == cursor )
      is_invert = 1;

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 8000ade:	4631      	mov	r1, r6
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	f002 f9d9 	bl	8002e98 <u8x8_GetStringLineStart>
 8000ae6:	ebab 0305 	sub.w	r3, fp, r5
 8000aea:	fab3 f383 	clz	r3, r3
 8000aee:	2201      	movs	r2, #1
 8000af0:	095b      	lsrs	r3, r3, #5
 8000af2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000af6:	4621      	mov	r1, r4
 8000af8:	2300      	movs	r3, #0
 8000afa:	4652      	mov	r2, sl
 8000afc:	9000      	str	r0, [sp, #0]
 8000afe:	4640      	mov	r0, r8
 8000b00:	f001 fe4e 	bl	80027a0 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8000b04:	4631      	mov	r1, r6
 8000b06:	4628      	mov	r0, r5
 8000b08:	f002 f9c6 	bl	8002e98 <u8x8_GetStringLineStart>
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	4640      	mov	r0, r8
 8000b10:	f001 fd6c 	bl	80025ec <u8g2_GetUTF8Width>
 8000b14:	3701      	adds	r7, #1
 8000b16:	4404      	add	r4, r0
  for( i = 0; i < cnt; i++ )
 8000b18:	b2fd      	uxtb	r5, r7
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 8000b1a:	3406      	adds	r4, #6
  for( i = 0; i < cnt; i++ )
 8000b1c:	454d      	cmp	r5, r9
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 8000b1e:	f004 04ff 	and.w	r4, r4, #255	; 0xff
  for( i = 0; i < cnt; i++ )
 8000b22:	d3dc      	bcc.n	8000ade <draw_button_line+0x62>
  }

  /* return the number of buttons */
  return cnt;
}
 8000b24:	4648      	mov	r0, r9
 8000b26:	b007      	add	sp, #28
 8000b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  d = 0;
 8000b2c:	2400      	movs	r4, #0
 8000b2e:	e7d4      	b.n	8000ada <draw_button_line+0x5e>
  if ( button_line_width < w )
 8000b30:	9b05      	ldr	r3, [sp, #20]
 8000b32:	429c      	cmp	r4, r3
 8000b34:	d3ca      	bcc.n	8000acc <draw_button_line+0x50>
 8000b36:	e7f5      	b.n	8000b24 <draw_button_line+0xa8>

08000b38 <Screen_init>:

void Screen_init(u8g2_t* u8g2)
{
 8000b38:	b510      	push	{r4, lr}
	  u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2,
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <Screen_init+0x30>)
 8000b3c:	490b      	ldr	r1, [pc, #44]	; (8000b6c <Screen_init+0x34>)
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <Screen_init+0x38>)
{
 8000b40:	4604      	mov	r4, r0
	  u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2,
 8000b42:	f001 fa6d 	bl	8002020 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			  U8G2_R0,
			  u8x8_byte_stm32hal_hw_i2c,
			  psoc_gpio_and_delay_cb);//configura pantalla y las funciones
	  u8g2_SetI2CAddress(u8g2, I2C_ADDRESS*2);// establece la direccion i2c
 8000b46:	2378      	movs	r3, #120	; 0x78
	  u8g2_InitDisplay(u8g2);
 8000b48:	4620      	mov	r0, r4
	  u8g2_SetI2CAddress(u8g2, I2C_ADDRESS*2);// establece la direccion i2c
 8000b4a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	  u8g2_InitDisplay(u8g2);
 8000b4e:	f002 f94b 	bl	8002de8 <u8x8_InitDisplay>
	  u8g2_SetPowerSave(u8g2, 0); //deshabilita el ahorro de energia
 8000b52:	4620      	mov	r0, r4
 8000b54:	2100      	movs	r1, #0
 8000b56:	f002 f94f 	bl	8002df8 <u8x8_SetPowerSave>
	  u8g2_ClearDisplay(u8g2);
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f001 fa4a 	bl	8001ff4 <u8g2_ClearDisplay>

	  screen_number = 0;
 8000b60:	2200      	movs	r2, #0
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <Screen_init+0x3c>)
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bd10      	pop	{r4, pc}
 8000b68:	0800097d 	.word	0x0800097d
 8000b6c:	08008ed4 	.word	0x08008ed4
 8000b70:	08000a09 	.word	0x08000a09
 8000b74:	20000cdc 	.word	0x20000cdc

08000b78 <draw_screen_time>:
	draw_button_line(&u8g2, u8g2_GetDisplayHeight(&u8g2)-BUTTON_OFFSET, u8g2_GetDisplayWidth(&u8g2), 3, BUTTONS);

	u8g2_SendBuffer(&u8g2);
}
void draw_screen_time()
{
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
	RTC_DateTypeDef Date;
	uint8_t* f_to_char;
	uint8_t y=11;
	uint8_t x=0;

	u8g2_ClearBuffer(&u8g2);
 8000b7a:	4d61      	ldr	r5, [pc, #388]	; (8000d00 <draw_screen_time+0x188>)
{
 8000b7c:	b083      	sub	sp, #12
	u8g2_ClearBuffer(&u8g2);
 8000b7e:	4628      	mov	r0, r5
 8000b80:	f001 f9d4 	bl	8001f2c <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000b84:	4c5f      	ldr	r4, [pc, #380]	; (8000d04 <draw_screen_time+0x18c>)
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8000b86:	4628      	mov	r0, r5
 8000b88:	2101      	movs	r1, #1
 8000b8a:	f001 fcd1 	bl	8002530 <u8g2_SetFontMode>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8000b8e:	4628      	mov	r0, r5
 8000b90:	495d      	ldr	r1, [pc, #372]	; (8000d08 <draw_screen_time+0x190>)
 8000b92:	f001 fd15 	bl	80025c0 <u8g2_SetFont>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000b96:	4669      	mov	r1, sp
 8000b98:	4620      	mov	r0, r4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f003 fe70 	bl	8004880 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	a901      	add	r1, sp, #4
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f003 fef7 	bl	8004998 <HAL_RTC_GetDate>
	//sprintf(f_to_char, "%i:%i:%i %i/%i/%i\r\n",Time.Hours,Time.Minutes, Time.Seconds, Date.Date, Date.Month, Date.Year);
	//u8g2_DrawStr(&u8g2, x, y, f_to_char);


	f_to_char = u8x8_u8toa(Time.Hours,2);
 8000baa:	2102      	movs	r1, #2
 8000bac:	f89d 0000 	ldrb.w	r0, [sp]
 8000bb0:	f002 f978 	bl	8002ea4 <u8x8_u8toa>
 8000bb4:	4604      	mov	r4, r0
	u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	220b      	movs	r2, #11
 8000bba:	4628      	mov	r0, r5
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f001 fcbb 	bl	8002538 <u8g2_DrawStr>
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	f001 fd0b 	bl	80025e0 <u8g2_GetStrWidth>
	u8g2_DrawStr(&u8g2, x, y, ":");
 8000bca:	4e50      	ldr	r6, [pc, #320]	; (8000d0c <draw_screen_time+0x194>)
 8000bcc:	220b      	movs	r2, #11
 8000bce:	4633      	mov	r3, r6
 8000bd0:	4601      	mov	r1, r0
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000bd2:	4604      	mov	r4, r0
	u8g2_DrawStr(&u8g2, x, y, ":");
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f001 fcaf 	bl	8002538 <u8g2_DrawStr>
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,":");
 8000bda:	4631      	mov	r1, r6
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f001 fcff 	bl	80025e0 <u8g2_GetStrWidth>

	f_to_char = u8x8_u8toa(Time.Minutes,2);
 8000be2:	2102      	movs	r1, #2
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,":");
 8000be4:	4404      	add	r4, r0
	f_to_char = u8x8_u8toa(Time.Minutes,2);
 8000be6:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8000bea:	f002 f95b 	bl	8002ea4 <u8x8_u8toa>
 8000bee:	4607      	mov	r7, r0
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,":");
 8000bf0:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4621      	mov	r1, r4
 8000bf6:	220b      	movs	r2, #11
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	f001 fc9d 	bl	8002538 <u8g2_DrawStr>
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000bfe:	4639      	mov	r1, r7
 8000c00:	4628      	mov	r0, r5
 8000c02:	f001 fced 	bl	80025e0 <u8g2_GetStrWidth>
 8000c06:	4404      	add	r4, r0
 8000c08:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, ":");
 8000c0a:	4633      	mov	r3, r6
 8000c0c:	220b      	movs	r2, #11
 8000c0e:	4621      	mov	r1, r4
 8000c10:	4628      	mov	r0, r5
 8000c12:	f001 fc91 	bl	8002538 <u8g2_DrawStr>
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,":");
 8000c16:	4631      	mov	r1, r6
 8000c18:	4628      	mov	r0, r5
 8000c1a:	f001 fce1 	bl	80025e0 <u8g2_GetStrWidth>

	f_to_char = u8x8_u8toa(Time.Seconds,2);
 8000c1e:	2102      	movs	r1, #2
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,":");
 8000c20:	4404      	add	r4, r0
	f_to_char = u8x8_u8toa(Time.Seconds,2);
 8000c22:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8000c26:	f002 f93d 	bl	8002ea4 <u8x8_u8toa>
 8000c2a:	4606      	mov	r6, r0
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,":");
 8000c2c:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4621      	mov	r1, r4
 8000c32:	220b      	movs	r2, #11
 8000c34:	4628      	mov	r0, r5
 8000c36:	f001 fc7f 	bl	8002538 <u8g2_DrawStr>
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000c3a:	4631      	mov	r1, r6
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f001 fccf 	bl	80025e0 <u8g2_GetStrWidth>

	u8g2_DrawStr(&u8g2, x, y, " ");
 8000c42:	4e33      	ldr	r6, [pc, #204]	; (8000d10 <draw_screen_time+0x198>)
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000c44:	4404      	add	r4, r0
 8000c46:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, " ");
 8000c48:	4633      	mov	r3, r6
 8000c4a:	220b      	movs	r2, #11
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	4628      	mov	r0, r5
 8000c50:	f001 fc72 	bl	8002538 <u8g2_DrawStr>
	x += (uint8_t) u8g2_GetStrWidth(&u8g2," ");
 8000c54:	4631      	mov	r1, r6
 8000c56:	4628      	mov	r0, r5
 8000c58:	f001 fcc2 	bl	80025e0 <u8g2_GetStrWidth>

	f_to_char = u8x8_u8toa(Date.Date,2);
 8000c5c:	2102      	movs	r1, #2
	x += (uint8_t) u8g2_GetStrWidth(&u8g2," ");
 8000c5e:	4404      	add	r4, r0
	f_to_char = u8x8_u8toa(Date.Date,2);
 8000c60:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000c64:	f002 f91e 	bl	8002ea4 <u8x8_u8toa>
 8000c68:	4606      	mov	r6, r0
	x += (uint8_t) u8g2_GetStrWidth(&u8g2," ");
 8000c6a:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4621      	mov	r1, r4
 8000c70:	220b      	movs	r2, #11
 8000c72:	4628      	mov	r0, r5
 8000c74:	f001 fc60 	bl	8002538 <u8g2_DrawStr>
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000c78:	4631      	mov	r1, r6
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	f001 fcb0 	bl	80025e0 <u8g2_GetStrWidth>
	u8g2_DrawStr(&u8g2, x, y, "/");
 8000c80:	4e24      	ldr	r6, [pc, #144]	; (8000d14 <draw_screen_time+0x19c>)
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000c82:	4404      	add	r4, r0
 8000c84:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, "/");
 8000c86:	4633      	mov	r3, r6
 8000c88:	220b      	movs	r2, #11
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f001 fc53 	bl	8002538 <u8g2_DrawStr>
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,"/");
 8000c92:	4631      	mov	r1, r6
 8000c94:	4628      	mov	r0, r5
 8000c96:	f001 fca3 	bl	80025e0 <u8g2_GetStrWidth>

	f_to_char = u8x8_u8toa(Date.Month,2);
 8000c9a:	2102      	movs	r1, #2
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,"/");
 8000c9c:	4404      	add	r4, r0
	f_to_char = u8x8_u8toa(Date.Month,2);
 8000c9e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000ca2:	f002 f8ff 	bl	8002ea4 <u8x8_u8toa>
 8000ca6:	4607      	mov	r7, r0
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,"/");
 8000ca8:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000caa:	4603      	mov	r3, r0
 8000cac:	4621      	mov	r1, r4
 8000cae:	220b      	movs	r2, #11
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f001 fc41 	bl	8002538 <u8g2_DrawStr>
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000cb6:	4639      	mov	r1, r7
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f001 fc91 	bl	80025e0 <u8g2_GetStrWidth>
 8000cbe:	4404      	add	r4, r0
 8000cc0:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, "/");
 8000cc2:	4633      	mov	r3, r6
 8000cc4:	220b      	movs	r2, #11
 8000cc6:	4621      	mov	r1, r4
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f001 fc35 	bl	8002538 <u8g2_DrawStr>
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,"/");
 8000cce:	4631      	mov	r1, r6
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	f001 fc85 	bl	80025e0 <u8g2_GetStrWidth>

	f_to_char = u8x8_u8toa(Date.Year,2);
 8000cd6:	2102      	movs	r1, #2
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,"/");
 8000cd8:	4404      	add	r4, r0
	f_to_char = u8x8_u8toa(Date.Year,2);
 8000cda:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000cde:	f002 f8e1 	bl	8002ea4 <u8x8_u8toa>
 8000ce2:	4606      	mov	r6, r0
	x += (uint8_t) u8g2_GetStrWidth(&u8g2,"/");
 8000ce4:	b2e4      	uxtb	r4, r4
	u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4621      	mov	r1, r4
 8000cea:	220b      	movs	r2, #11
 8000cec:	4628      	mov	r0, r5
 8000cee:	f001 fc23 	bl	8002538 <u8g2_DrawStr>
	x += u8g2_GetStrWidth(&u8g2,f_to_char);
 8000cf2:	4631      	mov	r1, r6
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f001 fc73 	bl	80025e0 <u8g2_GetStrWidth>

}
 8000cfa:	b003      	add	sp, #12
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000c18 	.word	0x20000c18
 8000d04:	2000087c 	.word	0x2000087c
 8000d08:	080086b8 	.word	0x080086b8
 8000d0c:	0800867c 	.word	0x0800867c
 8000d10:	08008690 	.word	0x08008690
 8000d14:	08008680 	.word	0x08008680

08000d18 <draw_screen_ubic>:

void draw_screen_ubic()
{
 8000d18:	b570      	push	{r4, r5, r6, lr}
	uint8_t f_to_char[100];
	uint8_t y=11;
	uint8_t x=0;

	u8g2_ClearBuffer(&u8g2);
 8000d1a:	4c14      	ldr	r4, [pc, #80]	; (8000d6c <draw_screen_ubic+0x54>)
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
	u8g2_SetFontDirection(&u8g2, 0);
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
    u8g2_DrawStr(&u8g2, x, y, "Lat: ");
 8000d1c:	4e14      	ldr	r6, [pc, #80]	; (8000d70 <draw_screen_ubic+0x58>)
	u8g2_ClearBuffer(&u8g2);
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f001 f904 	bl	8001f2c <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8000d24:	4620      	mov	r0, r4
 8000d26:	2101      	movs	r1, #1
 8000d28:	f001 fc02 	bl	8002530 <u8g2_SetFontMode>
	u8g2_SetFontDirection(&u8g2, 0);
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f001 fc62 	bl	80025f8 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8000d34:	4620      	mov	r0, r4
 8000d36:	490f      	ldr	r1, [pc, #60]	; (8000d74 <draw_screen_ubic+0x5c>)
 8000d38:	f001 fc42 	bl	80025c0 <u8g2_SetFont>
    //sprintf(f_to_char, "%f",gps.latitude );
    //u8g2_DrawStr(&u8g2, x, y, f_to_char);

    x=0;
    y=2*y;
    u8g2_DrawStr(&u8g2, x, y, "Lon: ");
 8000d3c:	4d0e      	ldr	r5, [pc, #56]	; (8000d78 <draw_screen_ubic+0x60>)
    u8g2_DrawStr(&u8g2, x, y, "Lat: ");
 8000d3e:	4633      	mov	r3, r6
 8000d40:	220b      	movs	r2, #11
 8000d42:	4620      	mov	r0, r4
 8000d44:	2100      	movs	r1, #0
 8000d46:	f001 fbf7 	bl	8002538 <u8g2_DrawStr>
    x+=u8g2_GetStrWidth(&u8g2,"Lat: ");
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f001 fc47 	bl	80025e0 <u8g2_GetStrWidth>
    u8g2_DrawStr(&u8g2, x, y, "Lon: ");
 8000d52:	4620      	mov	r0, r4
 8000d54:	462b      	mov	r3, r5
 8000d56:	2100      	movs	r1, #0
 8000d58:	2216      	movs	r2, #22
 8000d5a:	f001 fbed 	bl	8002538 <u8g2_DrawStr>
	x+=u8g2_GetStrWidth(&u8g2,"Lon: ");
 8000d5e:	4629      	mov	r1, r5
 8000d60:	4620      	mov	r0, r4
    //sprintf(f_to_char, "%f",gps.longitude );
    //u8g2_DrawStr(&u8g2, x, y, f_to_char);
}
 8000d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	x+=u8g2_GetStrWidth(&u8g2,"Lon: ");
 8000d66:	f001 bc3b 	b.w	80025e0 <u8g2_GetStrWidth>
 8000d6a:	bf00      	nop
 8000d6c:	20000c18 	.word	0x20000c18
 8000d70:	08008684 	.word	0x08008684
 8000d74:	080086b8 	.word	0x080086b8
 8000d78:	0800868c 	.word	0x0800868c

08000d7c <Screen_update>:
{
 8000d7c:	b510      	push	{r4, lr}
	switch(screen_number)
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <Screen_update+0x40>)
{
 8000d80:	b082      	sub	sp, #8
	switch(screen_number)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b1b3      	cbz	r3, 8000db4 <Screen_update+0x38>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <Screen_update+0x12>
		  draw_screen_ubic();
 8000d8a:	f7ff ffc5 	bl	8000d18 <draw_screen_ubic>
	draw_button_line(&u8g2, u8g2_GetDisplayHeight(&u8g2)-BUTTON_OFFSET, u8g2_GetDisplayWidth(&u8g2), 3, BUTTONS);
 8000d8e:	4c0c      	ldr	r4, [pc, #48]	; (8000dc0 <Screen_update+0x44>)
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <Screen_update+0x48>)
 8000d92:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	3902      	subs	r1, #2
 8000d9a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d9e:	b2c9      	uxtb	r1, r1
 8000da0:	4620      	mov	r0, r4
 8000da2:	2303      	movs	r3, #3
 8000da4:	f7ff fe6a 	bl	8000a7c <draw_button_line>
	u8g2_SendBuffer(&u8g2);
 8000da8:	4620      	mov	r0, r4
}
 8000daa:	b002      	add	sp, #8
 8000dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	u8g2_SendBuffer(&u8g2);
 8000db0:	f001 b8c8 	b.w	8001f44 <u8g2_SendBuffer>
		  draw_screen_time();
 8000db4:	f7ff fee0 	bl	8000b78 <draw_screen_time>
		  break;
 8000db8:	e7e9      	b.n	8000d8e <Screen_update+0x12>
 8000dba:	bf00      	nop
 8000dbc:	20000cdc 	.word	0x20000cdc
 8000dc0:	20000c18 	.word	0x20000c18
 8000dc4:	0800866c 	.word	0x0800866c

08000dc8 <SPI_TxByte>:
	HAL_Delay(1);
}

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000dc8:	b500      	push	{lr}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <SPI_TxByte+0x28>)
{
 8000dcc:	b083      	sub	sp, #12
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dce:	681a      	ldr	r2, [r3, #0]
{
 8000dd0:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dd4:	6893      	ldr	r3, [r2, #8]
 8000dd6:	079b      	lsls	r3, r3, #30
 8000dd8:	d5fc      	bpl.n	8000dd4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000dda:	2364      	movs	r3, #100	; 0x64
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f10d 0107 	add.w	r1, sp, #7
 8000de2:	4803      	ldr	r0, [pc, #12]	; (8000df0 <SPI_TxByte+0x28>)
 8000de4:	f003 ffd4 	bl	8004d90 <HAL_SPI_Transmit>
}
 8000de8:	b003      	add	sp, #12
 8000dea:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dee:	bf00      	nop
 8000df0:	20000b1c 	.word	0x20000b1c

08000df4 <SELECT>:
{
 8000df4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <SELECT+0x18>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	f002 fbde 	bl	80035bc <HAL_GPIO_WritePin>
}
 8000e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 b8eb 	b.w	8002fe0 <HAL_Delay>
 8000e0a:	bf00      	nop
 8000e0c:	40010800 	.word	0x40010800

08000e10 <DESELECT>:
{
 8000e10:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <DESELECT+0x18>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	2110      	movs	r1, #16
 8000e18:	f002 fbd0 	bl	80035bc <HAL_GPIO_WritePin>
}
 8000e1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f002 b8dd 	b.w	8002fe0 <HAL_Delay>
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800

08000e2c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
	uint8_t dummy, data;
	dummy = 0xFF;
 8000e2c:	22ff      	movs	r2, #255	; 0xff
{
 8000e2e:	b500      	push	{lr}

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <SPI_RxByte+0x34>)
{
 8000e32:	b085      	sub	sp, #20
	dummy = 0xFF;
 8000e34:	f88d 200e 	strb.w	r2, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	6893      	ldr	r3, [r2, #8]
 8000e3c:	079b      	lsls	r3, r3, #30
 8000e3e:	d5fc      	bpl.n	8000e3a <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e40:	2264      	movs	r2, #100	; 0x64
 8000e42:	2301      	movs	r3, #1
 8000e44:	9200      	str	r2, [sp, #0]
 8000e46:	f10d 010e 	add.w	r1, sp, #14
 8000e4a:	f10d 020f 	add.w	r2, sp, #15
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <SPI_RxByte+0x34>)
 8000e50:	f004 f864 	bl	8004f1c <HAL_SPI_TransmitReceive>

	return data;
}
 8000e54:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000e58:	b005      	add	sp, #20
 8000e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e5e:	bf00      	nop
 8000e60:	20000b1c 	.word	0x20000b1c

08000e64 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void) 
{
 8000e64:	b510      	push	{r4, lr}
 8000e66:	b082      	sub	sp, #8
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
 8000e68:	f7ff ffd2 	bl	8000e10 <DESELECT>
 8000e6c:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++)
	{
		SPI_TxByte(0xFF);
 8000e6e:	20ff      	movs	r0, #255	; 0xff
 8000e70:	f7ff ffaa 	bl	8000dc8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e74:	3c01      	subs	r4, #1
 8000e76:	d1fa      	bne.n	8000e6e <SD_PowerOn+0xa>
	}

	/* slave select */
	SELECT();
 8000e78:	f7ff ffbc 	bl	8000df4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e7c:	2140      	movs	r1, #64	; 0x40
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
 8000e7e:	f44f 4315 	mov.w	r3, #38144	; 0x9500
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <SD_PowerOn+0x60>)
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e84:	9100      	str	r1, [sp, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e86:	6812      	ldr	r2, [r2, #0]
	args[3] = 0;
 8000e88:	f8ad 3004 	strh.w	r3, [sp, #4]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e8c:	6893      	ldr	r3, [r2, #8]
 8000e8e:	079b      	lsls	r3, r3, #30
 8000e90:	d5fc      	bpl.n	8000e8c <SD_PowerOn+0x28>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	2206      	movs	r2, #6
 8000e96:	4669      	mov	r1, sp
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <SD_PowerOn+0x60>)
 8000e9a:	f003 ff79 	bl	8004d90 <HAL_SPI_Transmit>
 8000e9e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8000ea2:	e001      	b.n	8000ea8 <SD_PowerOn+0x44>
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ea4:	3c01      	subs	r4, #1
 8000ea6:	d003      	beq.n	8000eb0 <SD_PowerOn+0x4c>
 8000ea8:	f7ff ffc0 	bl	8000e2c <SPI_RxByte>
 8000eac:	2801      	cmp	r0, #1
 8000eae:	d1f9      	bne.n	8000ea4 <SD_PowerOn+0x40>
	{
		cnt--;
	}

	DESELECT();
 8000eb0:	f7ff ffae 	bl	8000e10 <DESELECT>
	SPI_TxByte(0XFF);
 8000eb4:	20ff      	movs	r0, #255	; 0xff
 8000eb6:	f7ff ff87 	bl	8000dc8 <SPI_TxByte>

	PowerFlag = 1;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <SD_PowerOn+0x64>)
 8000ebe:	701a      	strb	r2, [r3, #0]
}
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd10      	pop	{r4, pc}
 8000ec4:	20000b1c 	.word	0x20000b1c
 8000ec8:	20000235 	.word	0x20000235

08000ecc <SD_TxDataBlock>:
	Timer2 = 500;
 8000ecc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
}

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
	Timer2 = 500;
 8000ed2:	4c1e      	ldr	r4, [pc, #120]	; (8000f4c <SD_TxDataBlock+0x80>)
{
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	460d      	mov	r5, r1
	Timer2 = 500;
 8000ed8:	8023      	strh	r3, [r4, #0]
 8000eda:	e002      	b.n	8000ee2 <SD_TxDataBlock+0x16>
	} while ((res != 0xFF) && Timer2);
 8000edc:	8820      	ldrh	r0, [r4, #0]
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	b398      	cbz	r0, 8000f4a <SD_TxDataBlock+0x7e>
		res = SPI_RxByte();
 8000ee2:	f7ff ffa3 	bl	8000e2c <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 8000ee6:	28ff      	cmp	r0, #255	; 0xff
 8000ee8:	d1f8      	bne.n	8000edc <SD_TxDataBlock+0x10>

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;

	/* transmit token */
	SPI_TxByte(token);
 8000eea:	4628      	mov	r0, r5
 8000eec:	f7ff ff6c 	bl	8000dc8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000ef0:	2dfd      	cmp	r5, #253	; 0xfd
 8000ef2:	d024      	beq.n	8000f3e <SD_TxDataBlock+0x72>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <SD_TxDataBlock+0x84>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	6893      	ldr	r3, [r2, #8]
 8000efa:	079b      	lsls	r3, r3, #30
 8000efc:	d5fc      	bpl.n	8000ef8 <SD_TxDataBlock+0x2c>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000efe:	4631      	mov	r1, r6
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <SD_TxDataBlock+0x84>)
 8000f08:	f003 ff42 	bl	8004d90 <HAL_SPI_Transmit>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);

		/* discard CRC */
		SPI_RxByte();
		SPI_RxByte();
 8000f0c:	2541      	movs	r5, #65	; 0x41
		SPI_RxByte();
 8000f0e:	f7ff ff8d 	bl	8000e2c <SPI_RxByte>
		SPI_RxByte();
 8000f12:	f7ff ff8b 	bl	8000e2c <SPI_RxByte>
 8000f16:	e002      	b.n	8000f1e <SD_TxDataBlock+0x52>

		/* receive response */
		while (i <= 64)
 8000f18:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8000f1c:	d007      	beq.n	8000f2e <SD_TxDataBlock+0x62>
		{
			resp = SPI_RxByte();
 8000f1e:	f7ff ff85 	bl	8000e2c <SPI_RxByte>
 8000f22:	f000 041f 	and.w	r4, r0, #31

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000f26:	2c05      	cmp	r4, #5
 8000f28:	f105 33ff 	add.w	r3, r5, #4294967295
 8000f2c:	d1f4      	bne.n	8000f18 <SD_TxDataBlock+0x4c>
			i++;
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000f2e:	f7ff ff7d 	bl	8000e2c <SPI_RxByte>
 8000f32:	b928      	cbnz	r0, 8000f40 <SD_TxDataBlock+0x74>
 8000f34:	f7ff ff7a 	bl	8000e2c <SPI_RxByte>
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d0f8      	beq.n	8000f2e <SD_TxDataBlock+0x62>
 8000f3c:	e000      	b.n	8000f40 <SD_TxDataBlock+0x74>
 8000f3e:	2400      	movs	r4, #0
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f40:	f1a4 0005 	sub.w	r0, r4, #5
 8000f44:	fab0 f080 	clz	r0, r0
 8000f48:	0940      	lsrs	r0, r0, #5

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;

	return FALSE;
}
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	20000cee 	.word	0x20000cee
 8000f50:	20000b1c 	.word	0x20000b1c

08000f54 <SD_SendCmd>:
	Timer2 = 500;
 8000f54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000f58:	b570      	push	{r4, r5, r6, lr}
	Timer2 = 500;
 8000f5a:	4c1e      	ldr	r4, [pc, #120]	; (8000fd4 <SD_SendCmd+0x80>)
{
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	460d      	mov	r5, r1
	Timer2 = 500;
 8000f60:	8023      	strh	r3, [r4, #0]
 8000f62:	e002      	b.n	8000f6a <SD_SendCmd+0x16>
	} while ((res != 0xFF) && Timer2);
 8000f64:	8823      	ldrh	r3, [r4, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b303      	cbz	r3, 8000fac <SD_SendCmd+0x58>
		res = SPI_RxByte();
 8000f6a:	f7ff ff5f 	bl	8000e2c <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 8000f6e:	28ff      	cmp	r0, #255	; 0xff
 8000f70:	d1f8      	bne.n	8000f64 <SD_SendCmd+0x10>

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000f72:	4630      	mov	r0, r6
 8000f74:	f7ff ff28 	bl	8000dc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000f78:	0e28      	lsrs	r0, r5, #24
 8000f7a:	f7ff ff25 	bl	8000dc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000f7e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8000f82:	f7ff ff21 	bl	8000dc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000f86:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8000f8a:	f7ff ff1d 	bl	8000dc8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000f8e:	b2e8      	uxtb	r0, r5
 8000f90:	f7ff ff1a 	bl	8000dc8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000f94:	2e40      	cmp	r6, #64	; 0x40
 8000f96:	d00b      	beq.n	8000fb0 <SD_SendCmd+0x5c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000f98:	2e48      	cmp	r6, #72	; 0x48
 8000f9a:	d017      	beq.n	8000fcc <SD_SendCmd+0x78>
	else crc = 1;

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff ff13 	bl	8000dc8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000fa2:	2e4c      	cmp	r6, #76	; 0x4c
 8000fa4:	d107      	bne.n	8000fb6 <SD_SendCmd+0x62>
 8000fa6:	f7ff ff41 	bl	8000e2c <SPI_RxByte>
 8000faa:	e004      	b.n	8000fb6 <SD_SendCmd+0x62>
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000fac:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
	SPI_TxByte(crc);
 8000fb0:	2095      	movs	r0, #149	; 0x95
 8000fb2:	f7ff ff09 	bl	8000dc8 <SPI_TxByte>
{
 8000fb6:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8000fb8:	f7ff ff38 	bl	8000e2c <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8000fbc:	0602      	lsls	r2, r0, #24
 8000fbe:	f104 33ff 	add.w	r3, r4, #4294967295
 8000fc2:	d5f4      	bpl.n	8000fae <SD_SendCmd+0x5a>
 8000fc4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000fc8:	d1f6      	bne.n	8000fb8 <SD_SendCmd+0x64>
}
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
	SPI_TxByte(crc);
 8000fcc:	2087      	movs	r0, #135	; 0x87
 8000fce:	f7ff fefb 	bl	8000dc8 <SPI_TxByte>
 8000fd2:	e7f0      	b.n	8000fb6 <SD_SendCmd+0x62>
 8000fd4:	20000cee 	.word	0x20000cee

08000fd8 <SD_RxDataBlock>:
	Timer1 = 200;
 8000fd8:	23c8      	movs	r3, #200	; 0xc8
{
 8000fda:	b570      	push	{r4, r5, r6, lr}
	Timer1 = 200;
 8000fdc:	4d0e      	ldr	r5, [pc, #56]	; (8001018 <SD_RxDataBlock+0x40>)
{
 8000fde:	4604      	mov	r4, r0
 8000fe0:	460e      	mov	r6, r1
	Timer1 = 200;
 8000fe2:	802b      	strh	r3, [r5, #0]
 8000fe4:	e002      	b.n	8000fec <SD_RxDataBlock+0x14>
	} while((token == 0xFF) && Timer1);
 8000fe6:	8828      	ldrh	r0, [r5, #0]
 8000fe8:	b280      	uxth	r0, r0
 8000fea:	b190      	cbz	r0, 8001012 <SD_RxDataBlock+0x3a>
		token = SPI_RxByte();
 8000fec:	f7ff ff1e 	bl	8000e2c <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 8000ff0:	28ff      	cmp	r0, #255	; 0xff
 8000ff2:	d0f8      	beq.n	8000fe6 <SD_RxDataBlock+0xe>
	if(token != 0xFE) return FALSE;
 8000ff4:	28fe      	cmp	r0, #254	; 0xfe
 8000ff6:	d10d      	bne.n	8001014 <SD_RxDataBlock+0x3c>
 8000ff8:	1c75      	adds	r5, r6, #1
 8000ffa:	4425      	add	r5, r4
	*buff = SPI_RxByte();
 8000ffc:	f7ff ff16 	bl	8000e2c <SPI_RxByte>
 8001000:	f804 0b01 	strb.w	r0, [r4], #1
	} while(len--);
 8001004:	42ac      	cmp	r4, r5
 8001006:	d1f9      	bne.n	8000ffc <SD_RxDataBlock+0x24>
	SPI_RxByte();
 8001008:	f7ff ff10 	bl	8000e2c <SPI_RxByte>
	SPI_RxByte();
 800100c:	f7ff ff0e 	bl	8000e2c <SPI_RxByte>
 8001010:	2001      	movs	r0, #1
}
 8001012:	bd70      	pop	{r4, r5, r6, pc}
	if(token != 0xFE) return FALSE;
 8001014:	2000      	movs	r0, #0
}
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	20000cec 	.word	0x20000cec

0800101c <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800101c:	b960      	cbnz	r0, 8001038 <SD_disk_initialize+0x1c>
{
 800101e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001022:	4d56      	ldr	r5, [pc, #344]	; (800117c <SD_disk_initialize+0x160>)
{
 8001024:	b082      	sub	sp, #8
	if(Stat & STA_NODISK) return Stat;
 8001026:	7829      	ldrb	r1, [r5, #0]
 8001028:	f011 0402 	ands.w	r4, r1, #2
 800102c:	d006      	beq.n	800103c <SD_disk_initialize+0x20>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 800102e:	7828      	ldrb	r0, [r5, #0]
 8001030:	b2c0      	uxtb	r0, r0
}
 8001032:	b002      	add	sp, #8
 8001034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(drv) return STA_NOINIT;
 8001038:	2001      	movs	r0, #1
}
 800103a:	4770      	bx	lr
	SD_PowerOn();
 800103c:	f7ff ff12 	bl	8000e64 <SD_PowerOn>
	SELECT();
 8001040:	f7ff fed8 	bl	8000df4 <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 8001044:	4621      	mov	r1, r4
 8001046:	2040      	movs	r0, #64	; 0x40
 8001048:	f7ff ff84 	bl	8000f54 <SD_SendCmd>
 800104c:	2801      	cmp	r0, #1
 800104e:	d00d      	beq.n	800106c <SD_disk_initialize+0x50>
	CardType = type;
 8001050:	2400      	movs	r4, #0
 8001052:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <SD_disk_initialize+0x164>)
 8001054:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8001056:	f7ff fedb 	bl	8000e10 <DESELECT>
	SPI_RxByte();
 800105a:	f7ff fee7 	bl	8000e2c <SPI_RxByte>
	return Stat;
 800105e:	7828      	ldrb	r0, [r5, #0]
	PowerFlag = 0;
 8001060:	4b48      	ldr	r3, [pc, #288]	; (8001184 <SD_disk_initialize+0x168>)
	return Stat;
 8001062:	b2c0      	uxtb	r0, r0
	PowerFlag = 0;
 8001064:	701c      	strb	r4, [r3, #0]
}
 8001066:	b002      	add	sp, #8
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Timer1 = 1000;
 800106c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001070:	4e45      	ldr	r6, [pc, #276]	; (8001188 <SD_disk_initialize+0x16c>)
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001072:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001076:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 8001078:	8033      	strh	r3, [r6, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800107a:	f7ff ff6b 	bl	8000f54 <SD_SendCmd>
 800107e:	2801      	cmp	r0, #1
 8001080:	d143      	bne.n	800110a <SD_disk_initialize+0xee>
 8001082:	f10d 0804 	add.w	r8, sp, #4
 8001086:	4644      	mov	r4, r8
 8001088:	af02      	add	r7, sp, #8
				ocr[n] = SPI_RxByte();
 800108a:	f7ff fecf 	bl	8000e2c <SPI_RxByte>
 800108e:	f804 0b01 	strb.w	r0, [r4], #1
			for (n = 0; n < 4; n++)
 8001092:	42bc      	cmp	r4, r7
 8001094:	d1f9      	bne.n	800108a <SD_disk_initialize+0x6e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001096:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d1d8      	bne.n	8001050 <SD_disk_initialize+0x34>
 800109e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010a2:	2baa      	cmp	r3, #170	; 0xaa
 80010a4:	d1d4      	bne.n	8001050 <SD_disk_initialize+0x34>
 80010a6:	e002      	b.n	80010ae <SD_disk_initialize+0x92>
				} while (Timer1);
 80010a8:	8833      	ldrh	r3, [r6, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b163      	cbz	r3, 80010c8 <SD_disk_initialize+0xac>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010ae:	2100      	movs	r1, #0
 80010b0:	2077      	movs	r0, #119	; 0x77
 80010b2:	f7ff ff4f 	bl	8000f54 <SD_SendCmd>
 80010b6:	2801      	cmp	r0, #1
 80010b8:	d8f6      	bhi.n	80010a8 <SD_disk_initialize+0x8c>
 80010ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010be:	2069      	movs	r0, #105	; 0x69
 80010c0:	f7ff ff48 	bl	8000f54 <SD_SendCmd>
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d1ef      	bne.n	80010a8 <SD_disk_initialize+0x8c>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80010c8:	8833      	ldrh	r3, [r6, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0bf      	beq.n	8001050 <SD_disk_initialize+0x34>
 80010d0:	2100      	movs	r1, #0
 80010d2:	207a      	movs	r0, #122	; 0x7a
 80010d4:	f7ff ff3e 	bl	8000f54 <SD_SendCmd>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d1b9      	bne.n	8001050 <SD_disk_initialize+0x34>
						ocr[n] = SPI_RxByte();
 80010dc:	f7ff fea6 	bl	8000e2c <SPI_RxByte>
 80010e0:	f808 0b01 	strb.w	r0, [r8], #1
					for (n = 0; n < 4; n++)
 80010e4:	4544      	cmp	r4, r8
 80010e6:	d1f9      	bne.n	80010dc <SD_disk_initialize+0xc0>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80010e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010ec:	065b      	lsls	r3, r3, #25
	CardType = type;
 80010ee:	bf4c      	ite	mi
 80010f0:	220c      	movmi	r2, #12
 80010f2:	2204      	movpl	r2, #4
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <SD_disk_initialize+0x164>)
 80010f6:	701a      	strb	r2, [r3, #0]
	DESELECT();
 80010f8:	f7ff fe8a 	bl	8000e10 <DESELECT>
	SPI_RxByte();
 80010fc:	f7ff fe96 	bl	8000e2c <SPI_RxByte>
		Stat &= ~STA_NOINIT;
 8001100:	782b      	ldrb	r3, [r5, #0]
 8001102:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001106:	702b      	strb	r3, [r5, #0]
 8001108:	e791      	b.n	800102e <SD_disk_initialize+0x12>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800110a:	4621      	mov	r1, r4
 800110c:	2077      	movs	r0, #119	; 0x77
 800110e:	f7ff ff21 	bl	8000f54 <SD_SendCmd>
 8001112:	2801      	cmp	r0, #1
 8001114:	d92a      	bls.n	800116c <SD_disk_initialize+0x150>
 8001116:	2401      	movs	r4, #1
 8001118:	e006      	b.n	8001128 <SD_disk_initialize+0x10c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800111a:	2041      	movs	r0, #65	; 0x41
 800111c:	f7ff ff1a 	bl	8000f54 <SD_SendCmd>
 8001120:	b188      	cbz	r0, 8001146 <SD_disk_initialize+0x12a>
			} while (Timer1);
 8001122:	8833      	ldrh	r3, [r6, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	b173      	cbz	r3, 8001146 <SD_disk_initialize+0x12a>
				if (type == CT_SD1)
 8001128:	2c02      	cmp	r4, #2
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800112a:	f04f 0100 	mov.w	r1, #0
				if (type == CT_SD1)
 800112e:	d1f4      	bne.n	800111a <SD_disk_initialize+0xfe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001130:	2077      	movs	r0, #119	; 0x77
 8001132:	f7ff ff0f 	bl	8000f54 <SD_SendCmd>
 8001136:	2801      	cmp	r0, #1
 8001138:	d8f3      	bhi.n	8001122 <SD_disk_initialize+0x106>
 800113a:	2100      	movs	r1, #0
 800113c:	2069      	movs	r0, #105	; 0x69
 800113e:	f7ff ff09 	bl	8000f54 <SD_SendCmd>
 8001142:	2800      	cmp	r0, #0
 8001144:	d1ed      	bne.n	8001122 <SD_disk_initialize+0x106>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001146:	8833      	ldrh	r3, [r6, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d080      	beq.n	8001050 <SD_disk_initialize+0x34>
 800114e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001152:	2050      	movs	r0, #80	; 0x50
 8001154:	f7ff fefe 	bl	8000f54 <SD_SendCmd>
 8001158:	2800      	cmp	r0, #0
 800115a:	f47f af79 	bne.w	8001050 <SD_disk_initialize+0x34>
	CardType = type;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <SD_disk_initialize+0x164>)
 8001160:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8001162:	f7ff fe55 	bl	8000e10 <DESELECT>
	SPI_RxByte();
 8001166:	f7ff fe61 	bl	8000e2c <SPI_RxByte>
 800116a:	e7c9      	b.n	8001100 <SD_disk_initialize+0xe4>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800116c:	4621      	mov	r1, r4
 800116e:	2069      	movs	r0, #105	; 0x69
 8001170:	f7ff fef0 	bl	8000f54 <SD_SendCmd>
 8001174:	2801      	cmp	r0, #1
 8001176:	d8ce      	bhi.n	8001116 <SD_disk_initialize+0xfa>
 8001178:	2402      	movs	r4, #2
 800117a:	e7d5      	b.n	8001128 <SD_disk_initialize+0x10c>
 800117c:	20000000 	.word	0x20000000
 8001180:	20000234 	.word	0x20000234
 8001184:	20000235 	.word	0x20000235
 8001188:	20000cec 	.word	0x20000cec

0800118c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 800118c:	b918      	cbnz	r0, 8001196 <SD_disk_status+0xa>
	return Stat;
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <SD_disk_status+0x10>)
 8001190:	7818      	ldrb	r0, [r3, #0]
 8001192:	b2c0      	uxtb	r0, r0
 8001194:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001196:	2001      	movs	r0, #1
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000000 	.word	0x20000000

080011a0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011a2:	b9e0      	cbnz	r0, 80011de <SD_disk_read+0x3e>
 80011a4:	461c      	mov	r4, r3
 80011a6:	b1d3      	cbz	r3, 80011de <SD_disk_read+0x3e>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <SD_disk_read+0x88>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	07d8      	lsls	r0, r3, #31
 80011ae:	d42a      	bmi.n	8001206 <SD_disk_read+0x66>
 80011b0:	4616      	mov	r6, r2

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <SD_disk_read+0x8c>)
 80011b4:	460d      	mov	r5, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	075b      	lsls	r3, r3, #29
 80011ba:	bf58      	it	pl
 80011bc:	0256      	lslpl	r6, r2, #9

	SELECT();
 80011be:	f7ff fe19 	bl	8000df4 <SELECT>

	if (count == 1)
 80011c2:	2c01      	cmp	r4, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80011c4:	4631      	mov	r1, r6
	if (count == 1)
 80011c6:	d021      	beq.n	800120c <SD_disk_read+0x6c>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80011c8:	2052      	movs	r0, #82	; 0x52
 80011ca:	f7ff fec3 	bl	8000f54 <SD_SendCmd>
 80011ce:	b158      	cbz	r0, 80011e8 <SD_disk_read+0x48>
 80011d0:	2401      	movs	r4, #1
			SD_SendCmd(CMD12, 0);
		}
	}

	/* Idle */
	DESELECT();
 80011d2:	f7ff fe1d 	bl	8000e10 <DESELECT>
	SPI_RxByte();
 80011d6:	f7ff fe29 	bl	8000e2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
}
 80011da:	4620      	mov	r0, r4
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
	if (pdrv || !count) return RES_PARERR;
 80011de:	2404      	movs	r4, #4
}
 80011e0:	4620      	mov	r0, r4
 80011e2:	bd70      	pop	{r4, r5, r6, pc}
			} while (--count);
 80011e4:	3c01      	subs	r4, #1
 80011e6:	d009      	beq.n	80011fc <SD_disk_read+0x5c>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011e8:	4628      	mov	r0, r5
 80011ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ee:	f7ff fef3 	bl	8000fd8 <SD_RxDataBlock>
				buff += 512;
 80011f2:	f505 7500 	add.w	r5, r5, #512	; 0x200
				if (!SD_RxDataBlock(buff, 512)) break;
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d1f4      	bne.n	80011e4 <SD_disk_read+0x44>
 80011fa:	2401      	movs	r4, #1
			SD_SendCmd(CMD12, 0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	204c      	movs	r0, #76	; 0x4c
 8001200:	f7ff fea8 	bl	8000f54 <SD_SendCmd>
 8001204:	e7e5      	b.n	80011d2 <SD_disk_read+0x32>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001206:	2403      	movs	r4, #3
}
 8001208:	4620      	mov	r0, r4
 800120a:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800120c:	2051      	movs	r0, #81	; 0x51
 800120e:	f7ff fea1 	bl	8000f54 <SD_SendCmd>
 8001212:	2800      	cmp	r0, #0
 8001214:	d1dd      	bne.n	80011d2 <SD_disk_read+0x32>
 8001216:	4628      	mov	r0, r5
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	f7ff fedc 	bl	8000fd8 <SD_RxDataBlock>
 8001220:	fab0 f480 	clz	r4, r0
 8001224:	0964      	lsrs	r4, r4, #5
 8001226:	e7d4      	b.n	80011d2 <SD_disk_read+0x32>
 8001228:	20000000 	.word	0x20000000
 800122c:	20000234 	.word	0x20000234

08001230 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001232:	bb10      	cbnz	r0, 800127a <SD_disk_write+0x4a>
 8001234:	461c      	mov	r4, r3
 8001236:	b303      	cbz	r3, 800127a <SD_disk_write+0x4a>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <SD_disk_write+0xb4>)
 800123a:	4616      	mov	r6, r2
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	07d5      	lsls	r5, r2, #31
 8001240:	d432      	bmi.n	80012a8 <SD_disk_write+0x78>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	0758      	lsls	r0, r3, #29
 8001246:	d432      	bmi.n	80012ae <SD_disk_write+0x7e>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001248:	4f27      	ldr	r7, [pc, #156]	; (80012e8 <SD_disk_write+0xb8>)
 800124a:	460d      	mov	r5, r1
 800124c:	783b      	ldrb	r3, [r7, #0]
 800124e:	075a      	lsls	r2, r3, #29
 8001250:	bf58      	it	pl
 8001252:	0276      	lslpl	r6, r6, #9

	SELECT();
 8001254:	f7ff fdce 	bl	8000df4 <SELECT>

	if (count == 1)
 8001258:	2c01      	cmp	r4, #1
 800125a:	d034      	beq.n	80012c6 <SD_disk_write+0x96>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800125c:	783b      	ldrb	r3, [r7, #0]
 800125e:	079b      	lsls	r3, r3, #30
 8001260:	d428      	bmi.n	80012b4 <SD_disk_write+0x84>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001262:	4631      	mov	r1, r6
 8001264:	2059      	movs	r0, #89	; 0x59
 8001266:	f7ff fe75 	bl	8000f54 <SD_SendCmd>
 800126a:	b158      	cbz	r0, 8001284 <SD_disk_write+0x54>
 800126c:	2401      	movs	r4, #1
			}
		}
	}

	/* Idle */
	DESELECT();
 800126e:	f7ff fdcf 	bl	8000e10 <DESELECT>
	SPI_RxByte();
 8001272:	f7ff fddb 	bl	8000e2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
}
 8001276:	4620      	mov	r0, r4
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pdrv || !count) return RES_PARERR;
 800127a:	2404      	movs	r4, #4
}
 800127c:	4620      	mov	r0, r4
 800127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			} while (--count);
 8001280:	3c01      	subs	r4, #1
 8001282:	d007      	beq.n	8001294 <SD_disk_write+0x64>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001284:	4628      	mov	r0, r5
 8001286:	21fc      	movs	r1, #252	; 0xfc
 8001288:	f7ff fe20 	bl	8000ecc <SD_TxDataBlock>
				buff += 512;
 800128c:	f505 7500 	add.w	r5, r5, #512	; 0x200
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001290:	2800      	cmp	r0, #0
 8001292:	d1f5      	bne.n	8001280 <SD_disk_write+0x50>
			if(!SD_TxDataBlock(0, 0xFD))
 8001294:	21fd      	movs	r1, #253	; 0xfd
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fe18 	bl	8000ecc <SD_TxDataBlock>
 800129c:	2800      	cmp	r0, #0
 800129e:	d0e5      	beq.n	800126c <SD_disk_write+0x3c>
 80012a0:	3400      	adds	r4, #0
 80012a2:	bf18      	it	ne
 80012a4:	2401      	movne	r4, #1
 80012a6:	e7e2      	b.n	800126e <SD_disk_write+0x3e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012a8:	2403      	movs	r4, #3
}
 80012aa:	4620      	mov	r0, r4
 80012ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80012ae:	2402      	movs	r4, #2
}
 80012b0:	4620      	mov	r0, r4
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			SD_SendCmd(CMD55, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2077      	movs	r0, #119	; 0x77
 80012b8:	f7ff fe4c 	bl	8000f54 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80012bc:	4621      	mov	r1, r4
 80012be:	2057      	movs	r0, #87	; 0x57
 80012c0:	f7ff fe48 	bl	8000f54 <SD_SendCmd>
 80012c4:	e7cd      	b.n	8001262 <SD_disk_write+0x32>
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80012c6:	4631      	mov	r1, r6
 80012c8:	2058      	movs	r0, #88	; 0x58
 80012ca:	f7ff fe43 	bl	8000f54 <SD_SendCmd>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d1cc      	bne.n	800126c <SD_disk_write+0x3c>
 80012d2:	4628      	mov	r0, r5
 80012d4:	21fe      	movs	r1, #254	; 0xfe
 80012d6:	f7ff fdf9 	bl	8000ecc <SD_TxDataBlock>
 80012da:	fab0 f480 	clz	r4, r0
 80012de:	0964      	lsrs	r4, r4, #5
 80012e0:	e7c5      	b.n	800126e <SD_disk_write+0x3e>
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000234 	.word	0x20000234

080012ec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	b086      	sub	sp, #24
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012f0:	b9f8      	cbnz	r0, 8001332 <SD_disk_ioctl+0x46>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 80012f2:	2905      	cmp	r1, #5
 80012f4:	460c      	mov	r4, r1
 80012f6:	4615      	mov	r5, r2
 80012f8:	d010      	beq.n	800131c <SD_disk_ioctl+0x30>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012fa:	4b52      	ldr	r3, [pc, #328]	; (8001444 <SD_disk_ioctl+0x158>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	07db      	lsls	r3, r3, #31
 8001300:	d41b      	bmi.n	800133a <SD_disk_ioctl+0x4e>

		SELECT();
 8001302:	f7ff fd77 	bl	8000df4 <SELECT>

		switch (ctrl)
 8001306:	2c0d      	cmp	r4, #13
 8001308:	d82d      	bhi.n	8001366 <SD_disk_ioctl+0x7a>
 800130a:	e8df f004 	tbb	[pc, r4]
 800130e:	6152      	.short	0x6152
 8001310:	2c2c2c38 	.word	0x2c2c2c38
 8001314:	2c2c2c2c 	.word	0x2c2c2c2c
 8001318:	20443d2c 	.word	0x20443d2c
		switch (*ptr)
 800131c:	7813      	ldrb	r3, [r2, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00f      	beq.n	8001342 <SD_disk_ioctl+0x56>
 8001322:	d328      	bcc.n	8001376 <SD_disk_ioctl+0x8a>
 8001324:	2b02      	cmp	r3, #2
 8001326:	d104      	bne.n	8001332 <SD_disk_ioctl+0x46>
	return PowerFlag;
 8001328:	4b47      	ldr	r3, [pc, #284]	; (8001448 <SD_disk_ioctl+0x15c>)
			res = RES_OK;		/* Power Check */
 800132a:	4604      	mov	r4, r0
			*(ptr + 1) = SD_CheckPower();
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	7053      	strb	r3, [r2, #1]
			break;
 8001330:	e000      	b.n	8001334 <SD_disk_ioctl+0x48>
			res = RES_PARERR;
 8001332:	2404      	movs	r4, #4
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 8001334:	4620      	mov	r0, r4
 8001336:	b006      	add	sp, #24
 8001338:	bd70      	pop	{r4, r5, r6, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800133a:	2403      	movs	r4, #3
}
 800133c:	4620      	mov	r0, r4
 800133e:	b006      	add	sp, #24
 8001340:	bd70      	pop	{r4, r5, r6, pc}
 8001342:	9001      	str	r0, [sp, #4]
			SD_PowerOn();		/* Power On */
 8001344:	f7ff fd8e 	bl	8000e64 <SD_PowerOn>
			res = RES_OK;
 8001348:	9801      	ldr	r0, [sp, #4]
 800134a:	4604      	mov	r4, r0
			break;
 800134c:	e7f2      	b.n	8001334 <SD_disk_ioctl+0x48>
			if (SD_SendCmd(CMD58, 0) == 0)
 800134e:	2100      	movs	r1, #0
 8001350:	207a      	movs	r0, #122	; 0x7a
 8001352:	f7ff fdff 	bl	8000f54 <SD_SendCmd>
 8001356:	b930      	cbnz	r0, 8001366 <SD_disk_ioctl+0x7a>
 8001358:	1d2c      	adds	r4, r5, #4
					*ptr++ = SPI_RxByte();
 800135a:	f7ff fd67 	bl	8000e2c <SPI_RxByte>
 800135e:	f805 0b01 	strb.w	r0, [r5], #1
				for (n = 0; n < 4; n++)
 8001362:	42ac      	cmp	r4, r5
 8001364:	d1f9      	bne.n	800135a <SD_disk_ioctl+0x6e>
			res = RES_PARERR;
 8001366:	2404      	movs	r4, #4
		DESELECT();
 8001368:	f7ff fd52 	bl	8000e10 <DESELECT>
		SPI_RxByte();
 800136c:	f7ff fd5e 	bl	8000e2c <SPI_RxByte>
}
 8001370:	4620      	mov	r0, r4
 8001372:	b006      	add	sp, #24
 8001374:	bd70      	pop	{r4, r5, r6, pc}
	PowerFlag = 0;
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <SD_disk_ioctl+0x15c>)
			res = RES_OK;
 8001378:	4604      	mov	r4, r0
	PowerFlag = 0;
 800137a:	7018      	strb	r0, [r3, #0]
			break;
 800137c:	e7da      	b.n	8001334 <SD_disk_ioctl+0x48>
			*(WORD*) buff = 512;
 800137e:	f44f 7300 	mov.w	r3, #512	; 0x200
			res = RES_OK;
 8001382:	2400      	movs	r4, #0
			*(WORD*) buff = 512;
 8001384:	802b      	strh	r3, [r5, #0]
			break;
 8001386:	e7ef      	b.n	8001368 <SD_disk_ioctl+0x7c>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001388:	2100      	movs	r1, #0
 800138a:	2049      	movs	r0, #73	; 0x49
 800138c:	f7ff fde2 	bl	8000f54 <SD_SendCmd>
 8001390:	b138      	cbz	r0, 80013a2 <SD_disk_ioctl+0xb6>
	res = RES_ERROR;
 8001392:	2401      	movs	r4, #1
 8001394:	e7e8      	b.n	8001368 <SD_disk_ioctl+0x7c>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001396:	2100      	movs	r1, #0
 8001398:	204a      	movs	r0, #74	; 0x4a
 800139a:	f7ff fddb 	bl	8000f54 <SD_SendCmd>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d1f7      	bne.n	8001392 <SD_disk_ioctl+0xa6>
 80013a2:	4628      	mov	r0, r5
 80013a4:	2110      	movs	r1, #16
 80013a6:	f7ff fe17 	bl	8000fd8 <SD_RxDataBlock>
	res = RES_ERROR;
 80013aa:	fab0 f480 	clz	r4, r0
 80013ae:	0964      	lsrs	r4, r4, #5
 80013b0:	e7da      	b.n	8001368 <SD_disk_ioctl+0x7c>
	Timer2 = 500;
 80013b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013b6:	4c25      	ldr	r4, [pc, #148]	; (800144c <SD_disk_ioctl+0x160>)
 80013b8:	8023      	strh	r3, [r4, #0]
 80013ba:	e003      	b.n	80013c4 <SD_disk_ioctl+0xd8>
	} while ((res != 0xFF) && Timer2);
 80013bc:	8823      	ldrh	r3, [r4, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0e6      	beq.n	8001392 <SD_disk_ioctl+0xa6>
		res = SPI_RxByte();
 80013c4:	f7ff fd32 	bl	8000e2c <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 80013c8:	28ff      	cmp	r0, #255	; 0xff
 80013ca:	d1f7      	bne.n	80013bc <SD_disk_ioctl+0xd0>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80013cc:	2400      	movs	r4, #0
 80013ce:	e7cb      	b.n	8001368 <SD_disk_ioctl+0x7c>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013d0:	2100      	movs	r1, #0
 80013d2:	2049      	movs	r0, #73	; 0x49
 80013d4:	f7ff fdbe 	bl	8000f54 <SD_SendCmd>
 80013d8:	4604      	mov	r4, r0
 80013da:	2800      	cmp	r0, #0
 80013dc:	d1d9      	bne.n	8001392 <SD_disk_ioctl+0xa6>
 80013de:	2110      	movs	r1, #16
 80013e0:	a802      	add	r0, sp, #8
 80013e2:	f7ff fdf9 	bl	8000fd8 <SD_RxDataBlock>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d0d3      	beq.n	8001392 <SD_disk_ioctl+0xa6>
				if ((csd[0] >> 6) == 1)
 80013ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80013ee:	f89d 1011 	ldrb.w	r1, [sp, #17]
 80013f2:	0992      	lsrs	r2, r2, #6
 80013f4:	2a01      	cmp	r2, #1
 80013f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80013fa:	d01b      	beq.n	8001434 <SD_disk_ioctl+0x148>
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013fc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001400:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8001404:	f002 020f 	and.w	r2, r2, #15
 8001408:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800140c:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8001410:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001414:	099b      	lsrs	r3, r3, #6
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001416:	0049      	lsls	r1, r1, #1
 8001418:	f001 0106 	and.w	r1, r1, #6
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800141c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001420:	0280      	lsls	r0, r0, #10
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001422:	440a      	add	r2, r1
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001424:	3301      	adds	r3, #1
 8001426:	f400 6140 	and.w	r1, r0, #3072	; 0xc00
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800142a:	3a07      	subs	r2, #7
 800142c:	440b      	add	r3, r1
 800142e:	4093      	lsls	r3, r2
 8001430:	602b      	str	r3, [r5, #0]
 8001432:	e799      	b.n	8001368 <SD_disk_ioctl+0x7c>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001434:	3101      	adds	r1, #1
 8001436:	eb01 2303 	add.w	r3, r1, r3, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 800143a:	b29b      	uxth	r3, r3
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	e792      	b.n	8001368 <SD_disk_ioctl+0x7c>
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000
 8001448:	20000235 	.word	0x20000235
 800144c:	20000cee 	.word	0x20000cee

08001450 <HAL_UART_RxIdleCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 8001450:	b508      	push	{r3, lr}
	/*uint32_t mili; //contador en milisegundos
	mili = HAL_GetTick();
	char tiempo[sizeof(uint32_t)*8+1];*/


	update_GPS_from_NMEA();
 8001452:	f7ff f907 	bl	8000664 <update_GPS_from_NMEA>
	Screen_update();

	/*
	sprintf(tiempo, "%lu",HAL_GetTick()-mili);
	HAL_UART_Transmit(huart, (uint8_t *)tiempo, strlen(tiempo),1000);*/
}
 8001456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Screen_update();
 800145a:	f7ff bc8f 	b.w	8000d7c <Screen_update>
 800145e:	bf00      	nop

08001460 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001460:	b510      	push	{r4, lr}
 8001462:	4604      	mov	r4, r0
	longPress = HAL_GetTick();
 8001464:	f001 fdb6 	bl	8002fd4 <HAL_GetTick>
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_GPIO_EXTI_Callback+0x24>)
	switch(GPIO_Pin)
 800146a:	2c02      	cmp	r4, #2
	longPress = HAL_GetTick();
 800146c:	6018      	str	r0, [r3, #0]
	switch(GPIO_Pin)
 800146e:	d005      	beq.n	800147c <HAL_GPIO_EXTI_Callback+0x1c>
 8001470:	2c04      	cmp	r4, #4
 8001472:	d102      	bne.n	800147a <HAL_GPIO_EXTI_Callback+0x1a>
		case GPIO_PIN_1:
			button_pressed = SIG_BUTTON;
			break;

		case GPIO_PIN_2:
			button_pressed = SEL_BUTTON;
 8001474:	2202      	movs	r2, #2
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_GPIO_EXTI_Callback+0x28>)
 8001478:	701a      	strb	r2, [r3, #0]
			break;
	}
}
 800147a:	bd10      	pop	{r4, pc}
			button_pressed = SIG_BUTTON;
 800147c:	2201      	movs	r2, #1
 800147e:	4b02      	ldr	r3, [pc, #8]	; (8001488 <HAL_GPIO_EXTI_Callback+0x28>)
 8001480:	701a      	strb	r2, [r3, #0]
}
 8001482:	bd10      	pop	{r4, pc}
 8001484:	20000ce8 	.word	0x20000ce8
 8001488:	20000236 	.word	0x20000236

0800148c <check_buttons>:

void check_buttons()
{
 800148c:	b538      	push	{r3, r4, r5, lr}
	switch(button_pressed)
 800148e:	4d15      	ldr	r5, [pc, #84]	; (80014e4 <check_buttons+0x58>)
 8001490:	782b      	ldrb	r3, [r5, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d116      	bne.n	80014c4 <check_buttons+0x38>
	{
		case SIG_BUTTON:
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET );
 8001496:	4c14      	ldr	r4, [pc, #80]	; (80014e8 <check_buttons+0x5c>)
 8001498:	2102      	movs	r1, #2
 800149a:	4620      	mov	r0, r4
 800149c:	f002 f888 	bl	80035b0 <HAL_GPIO_ReadPin>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d0f9      	beq.n	8001498 <check_buttons+0xc>
			if( ( HAL_GetTick() - longPress < LONG_TIME_PRESS) )
 80014a4:	f001 fd96 	bl	8002fd4 <HAL_GetTick>
 80014a8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <check_buttons+0x60>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ac0      	subs	r0, r0, r3
 80014b2:	4290      	cmp	r0, r2
 80014b4:	d809      	bhi.n	80014ca <check_buttons+0x3e>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <check_buttons+0x64>)
 80014b8:	7813      	ldrb	r3, [r2, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	bf0c      	ite	eq
 80014be:	2300      	moveq	r3, #0
 80014c0:	3301      	addne	r3, #1
 80014c2:	7013      	strb	r3, [r2, #0]

		case SEL_BUTTON:
			button_pressed = SEL_BUTTON;
			break;
	}
	button_pressed = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	702b      	strb	r3, [r5, #0]
}
 80014c8:	bd38      	pop	{r3, r4, r5, pc}
					screen_power ^= 1 << 1;
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <check_buttons+0x68>)
					u8g2_SetPowerSave(&u8g2, screen_power);
 80014cc:	480a      	ldr	r0, [pc, #40]	; (80014f8 <check_buttons+0x6c>)
					screen_power ^= 1 << 1;
 80014ce:	7813      	ldrb	r3, [r2, #0]
 80014d0:	f083 0302 	eor.w	r3, r3, #2
					u8g2_SetPowerSave(&u8g2, screen_power);
 80014d4:	4619      	mov	r1, r3
					screen_power ^= 1 << 1;
 80014d6:	7013      	strb	r3, [r2, #0]
					u8g2_SetPowerSave(&u8g2, screen_power);
 80014d8:	f001 fc8e 	bl	8002df8 <u8x8_SetPowerSave>
	button_pressed = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	702b      	strb	r3, [r5, #0]
}
 80014e0:	bd38      	pop	{r3, r4, r5, pc}
 80014e2:	bf00      	nop
 80014e4:	20000236 	.word	0x20000236
 80014e8:	40010800 	.word	0x40010800
 80014ec:	20000ce8 	.word	0x20000ce8
 80014f0:	20000cdc 	.word	0x20000cdc
 80014f4:	20000238 	.word	0x20000238
 80014f8:	20000c18 	.word	0x20000c18

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001508:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 800150c:	b094      	sub	sp, #80	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001510:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001512:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	930d      	str	r3, [sp, #52]	; 0x34
 8001518:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001520:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001524:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001528:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152a:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	e9cd 5211 	strd	r5, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001534:	9113      	str	r1, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f002 faed 	bl	8003b14 <HAL_RCC_OscConfig>
 800153a:	b108      	cbz	r0, 8001540 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
 800153e:	e7fe      	b.n	800153e <SystemClock_Config+0x42>
 8001540:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001548:	a805      	add	r0, sp, #20
 800154a:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154c:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	9605      	str	r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001554:	9208      	str	r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001556:	f002 fd0b 	bl	8003f70 <HAL_RCC_ClockConfig>
 800155a:	b108      	cbz	r0, 8001560 <SystemClock_Config+0x64>
 800155c:	b672      	cpsid	i
 800155e:	e7fe      	b.n	800155e <SystemClock_Config+0x62>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001560:	f44f 7340 	mov.w	r3, #768	; 0x300
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001566:	e9cd 4301 	strd	r4, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156a:	f002 fdc1 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	b108      	cbz	r0, 8001574 <SystemClock_Config+0x78>
 8001570:	b672      	cpsid	i
 8001572:	e7fe      	b.n	8001572 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
}
 8001574:	b014      	add	sp, #80	; 0x50
 8001576:	bd70      	pop	{r4, r5, r6, pc}

08001578 <main>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	2500      	movs	r5, #0
{
 800157a:	b580      	push	{r7, lr}

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	4c7c      	ldr	r4, [pc, #496]	; (8001770 <main+0x1f8>)
{
 800157e:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001580:	f001 fd0a 	bl	8002f98 <HAL_Init>
  SystemClock_Config();
 8001584:	f7ff ffba 	bl	80014fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800158a:	2106      	movs	r1, #6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	61a3      	str	r3, [r4, #24]
 8001596:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001598:	4a76      	ldr	r2, [pc, #472]	; (8001774 <main+0x1fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	4874      	ldr	r0, [pc, #464]	; (8001778 <main+0x200>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	f043 0320 	orr.w	r3, r3, #32
 80015aa:	61a3      	str	r3, [r4, #24]
 80015ac:	69a3      	ldr	r3, [r4, #24]
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	9303      	str	r3, [sp, #12]
 80015b4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	69a3      	ldr	r3, [r4, #24]
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	61a3      	str	r3, [r4, #24]
 80015be:	69a3      	ldr	r3, [r4, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	69a3      	ldr	r3, [r4, #24]
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	61a3      	str	r3, [r4, #24]
 80015d0:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015d2:	9106      	str	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015de:	e9cd 2607 	strd	r2, r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f001 feeb 	bl	80033bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015e6:	462a      	mov	r2, r5
 80015e8:	4629      	mov	r1, r5
 80015ea:	2007      	movs	r0, #7
 80015ec:	f001 fd1c 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015f0:	2007      	movs	r0, #7
 80015f2:	f001 fd4f 	bl	8003094 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015f6:	462a      	mov	r2, r5
 80015f8:	4629      	mov	r1, r5
 80015fa:	2008      	movs	r0, #8
 80015fc:	f001 fd14 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001600:	2008      	movs	r0, #8
 8001602:	f001 fd47 	bl	8003094 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001606:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001608:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160a:	4333      	orrs	r3, r6
 800160c:	6163      	str	r3, [r4, #20]
 800160e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001610:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001612:	4033      	ands	r3, r6
 8001614:	9306      	str	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001616:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001618:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800161a:	f001 fd05 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800161e:	200f      	movs	r0, #15
 8001620:	f001 fd38 	bl	8003094 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001624:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8001628:	4b54      	ldr	r3, [pc, #336]	; (800177c <main+0x204>)
  hi2c1.Init.ClockSpeed = 400000;
 800162a:	4955      	ldr	r1, [pc, #340]	; (8001780 <main+0x208>)
  hi2c1.Instance = I2C1;
 800162c:	f5a4 34de 	sub.w	r4, r4, #113664	; 0x1bc00
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001630:	4618      	mov	r0, r3
  hi2c1.Init.OwnAddress1 = 0;
 8001632:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001636:	e9c3 5505 	strd	r5, r5, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163a:	e9c3 5507 	strd	r5, r5, [r3, #28]
  hi2c1.Init.ClockSpeed = 400000;
 800163e:	e9c3 4100 	strd	r4, r1, [r3]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001642:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001644:	f002 f8b8 	bl	80037b8 <HAL_I2C_Init>
 8001648:	b108      	cbz	r0, 800164e <main+0xd6>
 800164a:	b672      	cpsid	i
 800164c:	e7fe      	b.n	800164c <main+0xd4>
 800164e:	4603      	mov	r3, r0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 8001652:	f44f 5516 	mov.w	r5, #9600	; 0x2580
  huart1.Instance = USART1;
 8001656:	4c4b      	ldr	r4, [pc, #300]	; (8001784 <main+0x20c>)
 8001658:	494b      	ldr	r1, [pc, #300]	; (8001788 <main+0x210>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	4620      	mov	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165c:	e9c4 5301 	strd	r5, r3, [r4, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001660:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart1.Instance = USART1;
 8001668:	6021      	str	r1, [r4, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800166a:	6162      	str	r2, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166c:	f003 fcce 	bl	800500c <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	b108      	cbz	r0, 8001678 <main+0x100>
 8001674:	b672      	cpsid	i
 8001676:	e7fe      	b.n	8001676 <main+0xfe>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800167c:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE); 			// enable idle line interrupt
 8001680:	6821      	ldr	r1, [r4, #0]
  hrtc.Instance = RTC;
 8001682:	4d42      	ldr	r5, [pc, #264]	; (800178c <main+0x214>)
  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE); 			// enable idle line interrupt
 8001684:	68ca      	ldr	r2, [r1, #12]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001686:	6068      	str	r0, [r5, #4]
  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE); 			// enable idle line interrupt
 8001688:	f042 0210 	orr.w	r2, r2, #16
 800168c:	60ca      	str	r2, [r1, #12]
  hrtc.Instance = RTC;
 800168e:	4a40      	ldr	r2, [pc, #256]	; (8001790 <main+0x218>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001690:	4628      	mov	r0, r5
  RTC_TimeTypeDef sTime = {0};
 8001692:	f8ad 3000 	strh.w	r3, [sp]
  RTC_DateTypeDef DateToUpdate = {0};
 8001696:	9301      	str	r3, [sp, #4]
  RTC_TimeTypeDef sTime = {0};
 8001698:	f88d 3002 	strb.w	r3, [sp, #2]
  hrtc.Instance = RTC;
 800169c:	602a      	str	r2, [r5, #0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800169e:	60ae      	str	r6, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016a0:	f003 f81e 	bl	80046e0 <HAL_RTC_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b108      	cbz	r0, 80016ac <main+0x134>
 80016a8:	b672      	cpsid	i
 80016aa:	e7fe      	b.n	80016aa <main+0x132>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80016ac:	4602      	mov	r2, r0
 80016ae:	4669      	mov	r1, sp
 80016b0:	4628      	mov	r0, r5
  sTime.Hours = 0;
 80016b2:	f8ad 3000 	strh.w	r3, [sp]
  sTime.Minutes = 0;
 80016b6:	f88d 3002 	strb.w	r3, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80016ba:	f003 f86d 	bl	8004798 <HAL_RTC_SetTime>
 80016be:	4602      	mov	r2, r0
 80016c0:	b108      	cbz	r0, 80016c6 <main+0x14e>
 80016c2:	b672      	cpsid	i
 80016c4:	e7fe      	b.n	80016c4 <main+0x14c>
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <main+0x21c>)
 80016c8:	a90a      	add	r1, sp, #40	; 0x28
 80016ca:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80016ce:	4628      	mov	r0, r5
 80016d0:	f003 f8dc 	bl	800488c <HAL_RTC_SetDate>
 80016d4:	b108      	cbz	r0, 80016da <main+0x162>
 80016d6:	b672      	cpsid	i
 80016d8:	e7fe      	b.n	80016d8 <main+0x160>
  MX_FATFS_Init();
 80016da:	f003 fed3 	bl	8005484 <MX_FATFS_Init>
  hcrc.Instance = CRC;
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <main+0x220>)
 80016e0:	4a2e      	ldr	r2, [pc, #184]	; (800179c <main+0x224>)
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016e2:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 80016e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016e6:	f001 fcfb 	bl	80030e0 <HAL_CRC_Init>
 80016ea:	b108      	cbz	r0, 80016f0 <main+0x178>
 80016ec:	b672      	cpsid	i
 80016ee:	e7fe      	b.n	80016ee <main+0x176>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f0:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016f4:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016f8:	2120      	movs	r1, #32
  hspi1.Init.CRCPolynomial = 10;
 80016fa:	220a      	movs	r2, #10
  hspi1.Instance = SPI1;
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <main+0x228>)
 80016fe:	4e29      	ldr	r6, [pc, #164]	; (80017a4 <main+0x22c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001700:	e9c3 7001 	strd	r7, r0, [r3, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001704:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001708:	6158      	str	r0, [r3, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170e:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001710:	4618      	mov	r0, r3
  hspi1.Instance = SPI1;
 8001712:	601e      	str	r6, [r3, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001714:	e9c3 5106 	strd	r5, r1, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171a:	f003 fadf 	bl	8004cdc <HAL_SPI_Init>
 800171e:	b108      	cbz	r0, 8001724 <main+0x1ac>
 8001720:	b672      	cpsid	i
 8001722:	e7fe      	b.n	8001722 <main+0x1aa>
  Screen_init(&u8g2);
 8001724:	4820      	ldr	r0, [pc, #128]	; (80017a8 <main+0x230>)
 8001726:	f7ff fa07 	bl	8000b38 <Screen_init>
  HAL_UART_Receive_DMA(&huart1, usart_rx_dma_buffer, MAX_NMEA_LEN);
 800172a:	f240 228a 	movw	r2, #650	; 0x28a
 800172e:	491f      	ldr	r1, [pc, #124]	; (80017ac <main+0x234>)
 8001730:	4620      	mov	r0, r4
 8001732:	f003 fcff 	bl	8005134 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, "logged\r\n", strlen("logged\r\n"),1000);
 8001736:	4626      	mov	r6, r4
 8001738:	4d1d      	ldr	r5, [pc, #116]	; (80017b0 <main+0x238>)
	__HAL_UART_DISABLE_IT(UART1, UART_IT_IDLE);
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	68d3      	ldr	r3, [r2, #12]
 800173e:	f023 0310 	bic.w	r3, r3, #16
 8001742:	60d3      	str	r3, [r2, #12]
	log_data();
 8001744:	f7ff f8b4 	bl	80008b0 <log_data>
	HAL_UART_Transmit(&huart1, "logged\r\n", strlen("logged\r\n"),1000);
 8001748:	4629      	mov	r1, r5
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	2208      	movs	r2, #8
 8001750:	4630      	mov	r0, r6
 8001752:	f003 fc8b 	bl	800506c <HAL_UART_Transmit>
	__HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);
 8001756:	6822      	ldr	r2, [r4, #0]
 8001758:	68d3      	ldr	r3, [r2, #12]
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	60d3      	str	r3, [r2, #12]
	check_buttons();
 8001760:	f7ff fe94 	bl	800148c <check_buttons>
	HAL_Delay(2000);
 8001764:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001768:	f001 fc3a 	bl	8002fe0 <HAL_Delay>
 800176c:	e7e5      	b.n	800173a <main+0x1c2>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	10210000 	.word	0x10210000
 8001778:	40010800 	.word	0x40010800
 800177c:	20000bc4 	.word	0x20000bc4
 8001780:	00061a80 	.word	0x00061a80
 8001784:	20000c9c 	.word	0x20000c9c
 8001788:	40013800 	.word	0x40013800
 800178c:	2000087c 	.word	0x2000087c
 8001790:	40002800 	.word	0x40002800
 8001794:	15010105 	.word	0x15010105
 8001798:	20000ce0 	.word	0x20000ce0
 800179c:	40023000 	.word	0x40023000
 80017a0:	20000b1c 	.word	0x20000b1c
 80017a4:	40013000 	.word	0x40013000
 80017a8:	20000c18 	.word	0x20000c18
 80017ac:	20000890 	.word	0x20000890
 80017b0:	08008694 	.word	0x08008694

080017b4 <Error_Handler>:
 80017b4:	b672      	cpsid	i
 80017b6:	e7fe      	b.n	80017b6 <Error_Handler+0x2>

080017b8 <get_value>:


void get_value(uint8_t** fields, uint8_t field_count , uint8_t dest[FIELD_BUFF][FIELD_BUFF])
{
	uint8_t index;
	for(index = 0; index<field_count;index++)
 80017b8:	2900      	cmp	r1, #0
 80017ba:	d036      	beq.n	800182a <get_value+0x72>
 80017bc:	3901      	subs	r1, #1
{
 80017be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c0:	b2c9      	uxtb	r1, r1
 80017c2:	1d07      	adds	r7, r0, #4
 80017c4:	4605      	mov	r5, r0
 80017c6:	4613      	mov	r3, r2
	{
		//limpia el buffer
		memset(dest[index], END_OF_STRING, FIELD_BUFF);
 80017c8:	2400      	movs	r4, #0
 80017ca:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80017ce:	e017      	b.n	8001800 <get_value+0x48>

		if( fields[index] == NULL) return;

		if (! fields[index+1] ) //si el siguiente es nulo busca hasta el asterisco
 80017d0:	6868      	ldr	r0, [r5, #4]
 80017d2:	3504      	adds	r5, #4
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
				dest[index][i] = fields[index][i];
			return;
		}
		//si no hay valor sale
		if( ( fields[index+1] - fields[index] ) < 1 ) return;
 80017d4:	eba0 0c01 	sub.w	ip, r0, r1
		//copia lo que esta entre las dos comas al buffer
		memcpy(dest[index], fields[index], fields[index+1] - fields[index] -1 );
 80017d8:	f10c 32ff 	add.w	r2, ip, #4294967295
		if (! fields[index+1] ) //si el siguiente es nulo busca hasta el asterisco
 80017dc:	b1d0      	cbz	r0, 8001814 <get_value+0x5c>
		if( ( fields[index+1] - fields[index] ) < 1 ) return;
 80017de:	f1bc 0f00 	cmp.w	ip, #0
 80017e2:	dd16      	ble.n	8001812 <get_value+0x5a>
		memcpy(dest[index], fields[index], fields[index+1] - fields[index] -1 );
 80017e4:	4618      	mov	r0, r3
 80017e6:	f006 f9f1 	bl	8007bcc <memcpy>
 80017ea:	4603      	mov	r3, r0
		dest[index][fields[index+1] - fields[index]] = '\0';//agrega el fin de cadena
 80017ec:	6872      	ldr	r2, [r6, #4]
 80017ee:	f855 1c04 	ldr.w	r1, [r5, #-4]
	for(index = 0; index<field_count;index++)
 80017f2:	42bd      	cmp	r5, r7
		dest[index][fields[index+1] - fields[index]] = '\0';//agrega el fin de cadena
 80017f4:	eba2 0201 	sub.w	r2, r2, r1
 80017f8:	5484      	strb	r4, [r0, r2]
 80017fa:	f103 0314 	add.w	r3, r3, #20
	for(index = 0; index<field_count;index++)
 80017fe:	d008      	beq.n	8001812 <get_value+0x5a>
		memset(dest[index], END_OF_STRING, FIELD_BUFF);
 8001800:	601c      	str	r4, [r3, #0]
 8001802:	605c      	str	r4, [r3, #4]
 8001804:	609c      	str	r4, [r3, #8]
 8001806:	60dc      	str	r4, [r3, #12]
 8001808:	611c      	str	r4, [r3, #16]
		if( fields[index] == NULL) return;
 800180a:	6829      	ldr	r1, [r5, #0]
 800180c:	462e      	mov	r6, r5
 800180e:	2900      	cmp	r1, #0
 8001810:	d1de      	bne.n	80017d0 <get_value+0x18>
	}
}
 8001812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
 8001814:	780a      	ldrb	r2, [r1, #0]
 8001816:	2a2a      	cmp	r2, #42	; 0x2a
 8001818:	d0fb      	beq.n	8001812 <get_value+0x5a>
				dest[index][i] = fields[index][i];
 800181a:	541a      	strb	r2, [r3, r0]
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
 800181c:	6832      	ldr	r2, [r6, #0]
 800181e:	3001      	adds	r0, #1
 8001820:	b2c0      	uxtb	r0, r0
 8001822:	5c12      	ldrb	r2, [r2, r0]
 8001824:	2a2a      	cmp	r2, #42	; 0x2a
 8001826:	d1f8      	bne.n	800181a <get_value+0x62>
}
 8001828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800182a:	4770      	bx	lr

0800182c <get_fields>:


void  get_fields(uint8_t* line, uint8_t fields_array[FIELD_BUFF][FIELD_BUFF] )
{
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	b094      	sub	sp, #80	; 0x50
 8001830:	460a      	mov	r2, r1
 8001832:	466e      	mov	r6, sp
	uint8_t i;
	uint8_t* fields[FIELD_BUFF];

	for(i = 0; i<FIELD_BUFF; i++)
		fields[i] = NULL;
 8001834:	2500      	movs	r5, #0
 8001836:	f1ad 0304 	sub.w	r3, sp, #4
 800183a:	ac13      	add	r4, sp, #76	; 0x4c
 800183c:	f843 5f04 	str.w	r5, [r3, #4]!
	for(i = 0; i<FIELD_BUFF; i++)
 8001840:	42a3      	cmp	r3, r4
 8001842:	d1fb      	bne.n	800183c <get_fields+0x10>
 8001844:	4604      	mov	r4, r0
{
	uint8_t count;
	//aumenta el puntero hasta que encuentra una coma. Cuando la encuettra avanza
	//count y se va separando del inicio del puntero. Cuando no encuentra la coma
	//sigue aumentando el puntero hasta lelgar al final.
	for (count=0; string[count] != END_STAR; string[count]==COMA ? count++ : *string++);
 8001846:	2100      	movs	r1, #0
 8001848:	e004      	b.n	8001854 <get_fields+0x28>
 800184a:	2b2c      	cmp	r3, #44	; 0x2c
 800184c:	bf06      	itte	eq
 800184e:	3101      	addeq	r1, #1
 8001850:	b2c9      	uxtbeq	r1, r1
 8001852:	3401      	addne	r4, #1
 8001854:	5c63      	ldrb	r3, [r4, r1]
 8001856:	2b2a      	cmp	r3, #42	; 0x2a
 8001858:	d1f7      	bne.n	800184a <get_fields+0x1e>
	line++; //avanza la primer coma
 800185a:	3001      	adds	r0, #1
	for(i = 0; i< field_count; i++)
 800185c:	b1a1      	cbz	r1, 8001888 <get_fields+0x5c>
 800185e:	1e4c      	subs	r4, r1, #1
 8001860:	b2e3      	uxtb	r3, r4
 8001862:	ac01      	add	r4, sp, #4
 8001864:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		for(line; !( (*line) == COMA || (*line) == END_STAR); line++);
 8001868:	7803      	ldrb	r3, [r0, #0]
		fields[i] = line;
 800186a:	f846 0b04 	str.w	r0, [r6], #4
		for(line; !( (*line) == COMA || (*line) == END_STAR); line++);
 800186e:	2b2c      	cmp	r3, #44	; 0x2c
 8001870:	d104      	bne.n	800187c <get_fields+0x50>
 8001872:	e005      	b.n	8001880 <get_fields+0x54>
 8001874:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8001878:	2b2c      	cmp	r3, #44	; 0x2c
 800187a:	d001      	beq.n	8001880 <get_fields+0x54>
 800187c:	2b2a      	cmp	r3, #42	; 0x2a
 800187e:	d1f9      	bne.n	8001874 <get_fields+0x48>
	for(i = 0; i< field_count; i++)
 8001880:	42a6      	cmp	r6, r4
		line++;
 8001882:	f100 0001 	add.w	r0, r0, #1
	for(i = 0; i< field_count; i++)
 8001886:	d1ef      	bne.n	8001868 <get_fields+0x3c>
	fields[i] = NULL;
 8001888:	2400      	movs	r4, #0
 800188a:	ab14      	add	r3, sp, #80	; 0x50
 800188c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	get_value(fields, field_count , fields_array);
 8001890:	4668      	mov	r0, sp
	fields[i] = NULL;
 8001892:	f843 4c50 	str.w	r4, [r3, #-80]
	get_value(fields, field_count , fields_array);
 8001896:	f7ff ff8f 	bl	80017b8 <get_value>
}
 800189a:	b014      	add	sp, #80	; 0x50
 800189c:	bd70      	pop	{r4, r5, r6, pc}
 800189e:	bf00      	nop

080018a0 <coma_count>:
	for (count=0; string[count] != END_STAR; string[count]==COMA ? count++ : *string++);
 80018a0:	2200      	movs	r2, #0
 80018a2:	e004      	b.n	80018ae <coma_count+0xe>
 80018a4:	2b2c      	cmp	r3, #44	; 0x2c
 80018a6:	bf06      	itte	eq
 80018a8:	3201      	addeq	r2, #1
 80018aa:	b2d2      	uxtbeq	r2, r2
 80018ac:	3001      	addne	r0, #1
 80018ae:	5c83      	ldrb	r3, [r0, r2]
 80018b0:	2b2a      	cmp	r3, #42	; 0x2a
 80018b2:	d1f7      	bne.n	80018a4 <coma_count+0x4>
	return count;
}
 80018b4:	4610      	mov	r0, r2
 80018b6:	4770      	bx	lr

080018b8 <is_sentence_complete>:
uint8_t is_sentence_complete(uint8_t *message, uint8_t *tok)
{
	uint8_t* aux;
	//checkea que la frase este completa
	for(aux = tok;
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 80018b8:	780b      	ldrb	r3, [r1, #0]
	for(aux = tok;
 80018ba:	2b0d      	cmp	r3, #13
 80018bc:	d016      	beq.n	80018ec <is_sentence_complete+0x34>
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 80018be:	b1db      	cbz	r3, 80018f8 <is_sentence_complete+0x40>
{
 80018c0:	b410      	push	{r4}
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 80018c2:	1a0a      	subs	r2, r1, r0
 80018c4:	f240 2489 	movw	r4, #649	; 0x289
 80018c8:	e006      	b.n	80018d8 <is_sentence_complete+0x20>
 80018ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
	for(aux = tok;
 80018ce:	2b0d      	cmp	r3, #13
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 80018d0:	eba1 0200 	sub.w	r2, r1, r0
	for(aux = tok;
 80018d4:	d002      	beq.n	80018dc <is_sentence_complete+0x24>
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 80018d6:	b133      	cbz	r3, 80018e6 <is_sentence_complete+0x2e>
 80018d8:	42a2      	cmp	r2, r4
 80018da:	ddf6      	ble.n	80018ca <is_sentence_complete+0x12>
			aux++);
	//si llego al final, devuelve NULL
	if((aux-message) == DMA_BUFF_SIZE || *aux == END_OF_STRING)
 80018dc:	f240 238a 	movw	r3, #650	; 0x28a
		return FALSE;
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	bf18      	it	ne
 80018e4:	2301      	movne	r3, #1
	else return TRUE;

}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bc10      	pop	{r4}
 80018ea:	4770      	bx	lr
	if((aux-message) == DMA_BUFF_SIZE || *aux == END_OF_STRING)
 80018ec:	f240 238a 	movw	r3, #650	; 0x28a
 80018f0:	1a0a      	subs	r2, r1, r0
		return FALSE;
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	bf18      	it	ne
 80018f6:	2301      	movne	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	4770      	bx	lr

080018fc <get_sentence_ptr>:

uint8_t* get_sentence_ptr(uint8_t *message, const char *type,  uint8_t *init_ptr)
{
 80018fc:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t* tok;
	uint8_t* aux;
	const char * aux_type;

	if(init_ptr == NULL) tok = message;
 80018fe:	2a00      	cmp	r2, #0
 8001900:	bf08      	it	eq
 8001902:	4602      	moveq	r2, r0
{
 8001904:	4607      	mov	r7, r0
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
 8001906:	f240 2689 	movw	r6, #649	; 0x289
	if((tok-message) == DMA_BUFF_SIZE )
 800190a:	f240 2c8a 	movw	ip, #650	; 0x28a
	for( tok = message;
 800190e:	7813      	ldrb	r3, [r2, #0]
 8001910:	4615      	mov	r5, r2
 8001912:	2b24      	cmp	r3, #36	; 0x24
 8001914:	d102      	bne.n	800191c <get_sentence_ptr+0x20>
 8001916:	e008      	b.n	800192a <get_sentence_ptr+0x2e>
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
 8001918:	42b3      	cmp	r3, r6
 800191a:	dc04      	bgt.n	8001926 <get_sentence_ptr+0x2a>
			tok++);
 800191c:	3201      	adds	r2, #1
	for( tok = message;
 800191e:	7814      	ldrb	r4, [r2, #0]
 8001920:	1b53      	subs	r3, r2, r5
 8001922:	2c24      	cmp	r4, #36	; 0x24
 8001924:	d1f8      	bne.n	8001918 <get_sentence_ptr+0x1c>
	if((tok-message) == DMA_BUFF_SIZE )
 8001926:	4563      	cmp	r3, ip
 8001928:	d011      	beq.n	800194e <get_sentence_ptr+0x52>
	aux_type= type;

	do
	{
	  type = aux_type;
	  if( !(tok = start_sentence_ptr(tok) ) ) return NULL;
 800192a:	1c50      	adds	r0, r2, #1
 800192c:	d010      	beq.n	8001950 <get_sentence_ptr+0x54>

	  while((*tok) == (*type))
 800192e:	7852      	ldrb	r2, [r2, #1]
 8001930:	780b      	ldrb	r3, [r1, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	4602      	mov	r2, r0
 8001936:	d106      	bne.n	8001946 <get_sentence_ptr+0x4a>
 8001938:	460c      	mov	r4, r1
 800193a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800193e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001942:	429d      	cmp	r5, r3
 8001944:	d0f9      	beq.n	800193a <get_sentence_ptr+0x3e>
	  {
		  tok++;
		  type++;
	  }
	}while ((*type) != END_OF_STRING &&
			(tok-message) < DMA_BUFF_SIZE);
 8001946:	b12b      	cbz	r3, 8001954 <get_sentence_ptr+0x58>
 8001948:	1bd3      	subs	r3, r2, r7
	}while ((*type) != END_OF_STRING &&
 800194a:	42b3      	cmp	r3, r6
 800194c:	dddf      	ble.n	800190e <get_sentence_ptr+0x12>
	  if( !(tok = start_sentence_ptr(tok) ) ) return NULL;
 800194e:	2000      	movs	r0, #0
        //printf("get_sentence CRC incorrecto\r\n");
        return NULL;
    }*/


}
 8001950:	bcf0      	pop	{r4, r5, r6, r7}
 8001952:	4770      	bx	lr
 8001954:	4610      	mov	r0, r2
 8001956:	bcf0      	pop	{r4, r5, r6, r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_MspInit+0x3c>)
{
 800195e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001960:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001962:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	619a      	str	r2, [r3, #24]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	f002 0201 	and.w	r2, r2, #1
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197a:	61da      	str	r2, [r3, #28]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001986:	684b      	ldr	r3, [r1, #4]
 8001988:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800198c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001990:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	b002      	add	sp, #8
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000

080019a0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80019a0:	6802      	ldr	r2, [r0, #0]
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_CRC_MspInit+0x28>)
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d000      	beq.n	80019aa <HAL_CRC_MspInit+0xa>
 80019a8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019aa:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80019ae:	695a      	ldr	r2, [r3, #20]
{
 80019b0:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80019b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019c2:	b002      	add	sp, #8
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023000 	.word	0x40023000

080019cc <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	2300      	movs	r3, #0
{
 80019ce:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 80019d0:	6801      	ldr	r1, [r0, #0]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_I2C_MspInit+0x58>)
{
 80019d4:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 80019d6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80019dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 80019e0:	d001      	beq.n	80019e6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019e2:	b007      	add	sp, #28
 80019e4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e6:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e8:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ea:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4c0e      	ldr	r4, [pc, #56]	; (8001a28 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	69a3      	ldr	r3, [r4, #24]
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	61a3      	str	r3, [r4, #24]
 80019f8:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019fa:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	480a      	ldr	r0, [pc, #40]	; (8001a2c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a06:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a08:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f001 fcd7 	bl	80033bc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0e:	69e3      	ldr	r3, [r4, #28]
 8001a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a14:	61e3      	str	r3, [r4, #28]
 8001a16:	69e3      	ldr	r3, [r4, #28]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
}
 8001a20:	b007      	add	sp, #28
 8001a22:	bd30      	pop	{r4, r5, pc}
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010c00 	.word	0x40010c00

08001a30 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001a30:	6802      	ldr	r2, [r0, #0]
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RTC_MspInit+0x34>)
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d000      	beq.n	8001a3a <HAL_RTC_MspInit+0xa>
 8001a38:	4770      	bx	lr
{
 8001a3a:	b500      	push	{lr}
 8001a3c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001a3e:	f002 f863 	bl	8003b08 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a42:	2001      	movs	r0, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_RTC_MspInit+0x38>)
    __HAL_RCC_RTC_ENABLE();
 8001a46:	4909      	ldr	r1, [pc, #36]	; (8001a6c <HAL_RTC_MspInit+0x3c>)
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001a4e:	61da      	str	r2, [r3, #28]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001a5a:	6008      	str	r0, [r1, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a5c:	b003      	add	sp, #12
 8001a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a62:	bf00      	nop
 8001a64:	40002800 	.word	0x40002800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	4242043c 	.word	0x4242043c

08001a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a70:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8001a74:	6802      	ldr	r2, [r0, #0]
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_SPI_MspInit+0x6c>)
{
 8001a78:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8001a7a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001a80:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 8001a84:	d001      	beq.n	8001a8a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a86:	b006      	add	sp, #24
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001a8a:	21b0      	movs	r1, #176	; 0xb0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8e:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a90:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001a94:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	4812      	ldr	r0, [pc, #72]	; (8001ae0 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001aa4:	9200      	str	r2, [sp, #0]
 8001aa6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	f042 0204 	orr.w	r2, r2, #4
 8001aae:	619a      	str	r2, [r3, #24]
 8001ab0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001ab2:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f001 fc7b 	bl	80033bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ac6:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	a902      	add	r1, sp, #8
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ad0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f001 fc73 	bl	80033bc <HAL_GPIO_Init>
}
 8001ad6:	b006      	add	sp, #24
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	bf00      	nop
 8001adc:	40013000 	.word	0x40013000
 8001ae0:	40010800 	.word	0x40010800

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001ae8:	6802      	ldr	r2, [r0, #0]
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_UART_MspInit+0xac>)
{
 8001aec:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8001aee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001af4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8001af8:	d001      	beq.n	8001afe <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001afa:	b006      	add	sp, #24
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b02:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b06:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b08:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b1a:	9200      	str	r2, [sp, #0]
 8001b1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	f042 0204 	orr.w	r2, r2, #4
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b28:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	4817      	ldr	r0, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b38:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f001 fc3f 	bl	80033bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	a902      	add	r1, sp, #8
 8001b44:	4813      	ldr	r0, [pc, #76]	; (8001b94 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f001 fc36 	bl	80033bc <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b50:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b52:	2320      	movs	r3, #32
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b54:	4d10      	ldr	r5, [pc, #64]	; (8001b98 <HAL_UART_MspInit+0xb4>)
 8001b56:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_UART_MspInit+0xb8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b58:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b5a:	60e9      	str	r1, [r5, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5c:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b60:	e9c5 4404 	strd	r4, r4, [r5, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b64:	61ec      	str	r4, [r5, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b66:	602a      	str	r2, [r5, #0]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b68:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b6a:	f001 facd 	bl	8003108 <HAL_DMA_Init>
 8001b6e:	b958      	cbnz	r0, 8001b88 <HAL_UART_MspInit+0xa4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b72:	6375      	str	r5, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b74:	4611      	mov	r1, r2
 8001b76:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b78:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b7a:	f001 fa55 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7e:	2025      	movs	r0, #37	; 0x25
 8001b80:	f001 fa88 	bl	8003094 <HAL_NVIC_EnableIRQ>
}
 8001b84:	b006      	add	sp, #24
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001b88:	f7ff fe14 	bl	80017b4 <Error_Handler>
 8001b8c:	e7f0      	b.n	8001b70 <HAL_UART_MspInit+0x8c>
 8001b8e:	bf00      	nop
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40010800 	.word	0x40010800
 8001b98:	20000b80 	.word	0x20000b80
 8001b9c:	40020058 	.word	0x40020058

08001ba0 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8001ba0:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <SDTimer_Handler+0x24>)
 8001ba2:	8813      	ldrh	r3, [r2, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b11b      	cbz	r3, 8001bb0 <SDTimer_Handler+0x10>
    Timer1--;
 8001ba8:	8813      	ldrh	r3, [r2, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	8013      	strh	r3, [r2, #0]

  if(Timer2 > 0)
 8001bb0:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SDTimer_Handler+0x28>)
 8001bb2:	8813      	ldrh	r3, [r2, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b11b      	cbz	r3, 8001bc0 <SDTimer_Handler+0x20>
    Timer2--;
 8001bb8:	8813      	ldrh	r3, [r2, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	8013      	strh	r3, [r2, #0]
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000cec 	.word	0x20000cec
 8001bc8:	20000cee 	.word	0x20000cee

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler>
 8001bce:	bf00      	nop

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	e7fe      	b.n	8001bd0 <HardFault_Handler>
 8001bd2:	bf00      	nop

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler>
 8001bd6:	bf00      	nop

08001bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd8:	e7fe      	b.n	8001bd8 <BusFault_Handler>
 8001bda:	bf00      	nop

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler>
 8001bde:	bf00      	nop

08001be0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop

08001be4 <DebugMon_Handler>:
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <PendSV_Handler>:
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <SysTick_Handler+0x24>)
 8001bf0:	7813      	ldrb	r3, [r2, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	7013      	strb	r3, [r2, #0]
  if(FatFsCnt >= 10)
 8001bf8:	7813      	ldrb	r3, [r2, #0]
 8001bfa:	2b09      	cmp	r3, #9
 8001bfc:	d903      	bls.n	8001c06 <SysTick_Handler+0x1a>
  {
	FatFsCnt = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	7013      	strb	r3, [r2, #0]
	SDTimer_Handler();
 8001c02:	f7ff ffcd 	bl	8001ba0 <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8001c0a:	f001 b9d7 	b.w	8002fbc <HAL_IncTick>
 8001c0e:	bf00      	nop
 8001c10:	2000023a 	.word	0x2000023a

08001c14 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c14:	2002      	movs	r0, #2
 8001c16:	f001 bcd5 	b.w	80035c4 <HAL_GPIO_EXTI_IRQHandler>
 8001c1a:	bf00      	nop

08001c1c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f001 bcd1 	b.w	80035c4 <HAL_GPIO_EXTI_IRQHandler>
 8001c22:	bf00      	nop

08001c24 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c24:	4801      	ldr	r0, [pc, #4]	; (8001c2c <DMA1_Channel5_IRQHandler+0x8>)
 8001c26:	f001 bb33 	b.w	8003290 <HAL_DMA_IRQHandler>
 8001c2a:	bf00      	nop
 8001c2c:	20000b80 	.word	0x20000b80

08001c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c32:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <USART1_IRQHandler+0x38>)
{
 8001c34:	b082      	sub	sp, #8
  HAL_UART_IRQHandler(&huart1);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f003 fb5e 	bl	80052f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) != RESET))
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	06d1      	lsls	r1, r2, #27
 8001c42:	d502      	bpl.n	8001c4a <USART1_IRQHandler+0x1a>
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	06d2      	lsls	r2, r2, #27
 8001c48:	d401      	bmi.n	8001c4e <USART1_IRQHandler+0x1e>
	  HAL_UART_RxIdleCallback(&huart1);
  }


  /* USER CODE END USART1_IRQn 1 */
}
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd10      	pop	{r4, pc}
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001c4e:	2200      	movs	r2, #0
	  HAL_UART_RxIdleCallback(&huart1);
 8001c50:	4620      	mov	r0, r4
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001c52:	9201      	str	r2, [sp, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	9201      	str	r2, [sp, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	9b01      	ldr	r3, [sp, #4]
}
 8001c5e:	b002      	add	sp, #8
 8001c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_UART_RxIdleCallback(&huart1);
 8001c64:	f7ff bbf4 	b.w	8001450 <HAL_UART_RxIdleCallback>
 8001c68:	20000c9c 	.word	0x20000c9c

08001c6c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	490d      	ldr	r1, [pc, #52]	; (8001ca4 <_sbrk+0x38>)
{
 8001c6e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <_sbrk+0x3c>)
 8001c72:	4c0e      	ldr	r4, [pc, #56]	; (8001cac <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001c74:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c76:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001c78:	b12b      	cbz	r3, 8001c86 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4418      	add	r0, r3
 8001c7c:	4290      	cmp	r0, r2
 8001c7e:	d808      	bhi.n	8001c92 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c80:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001c86:	4c0a      	ldr	r4, [pc, #40]	; (8001cb0 <_sbrk+0x44>)
 8001c88:	4623      	mov	r3, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4418      	add	r0, r3
 8001c8c:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 8001c8e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001c90:	d9f6      	bls.n	8001c80 <_sbrk+0x14>
    errno = ENOMEM;
 8001c92:	f005 ff71 	bl	8007b78 <__errno>
 8001c96:	220c      	movs	r2, #12
    return (void *)-1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 8001c9c:	6002      	str	r2, [r0, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000023c 	.word	0x2000023c
 8001ca8:	20005000 	.word	0x20005000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20002d60 	.word	0x20002d60

08001cb4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <ascii_to_float>:
    uint8_t coma;
    uint8_t size;
    uint8_t entero;
    uint8_t* str=ptrstr;

    *num = 0;
 8001cb8:	2300      	movs	r3, #0
{
 8001cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *num = 0;
 8001cbe:	600b      	str	r3, [r1, #0]

    if(str[0] == '-') str++;
 8001cc0:	7803      	ldrb	r3, [r0, #0]
{
 8001cc2:	b083      	sub	sp, #12
    if(str[0] == '-') str++;
 8001cc4:	2b2d      	cmp	r3, #45	; 0x2d
 8001cc6:	bf08      	it	eq
 8001cc8:	7843      	ldrbeq	r3, [r0, #1]
{
 8001cca:	4688      	mov	r8, r1
 8001ccc:	4681      	mov	r9, r0
    if(str[0] == '-') str++;
 8001cce:	bf0c      	ite	eq
 8001cd0:	1c47      	addeq	r7, r0, #1
 8001cd2:	4607      	movne	r7, r0

    for (size = 0; str[size] != '\0'; size++);
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8095 	beq.w	8001e04 <ascii_to_float+0x14c>
 8001cda:	2500      	movs	r5, #0
 8001cdc:	e000      	b.n	8001ce0 <ascii_to_float+0x28>
 8001cde:	461d      	mov	r5, r3
 8001ce0:	1c6e      	adds	r6, r5, #1
 8001ce2:	b2f3      	uxtb	r3, r6
 8001ce4:	5cfa      	ldrb	r2, [r7, r3]
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d1f9      	bne.n	8001cde <ascii_to_float+0x26>
    size--;

    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001cea:	5d7a      	ldrb	r2, [r7, r5]
 8001cec:	2a2e      	cmp	r2, #46	; 0x2e
 8001cee:	f000 8091 	beq.w	8001e14 <ascii_to_float+0x15c>
        *num += (str[size-coma] - 48)*pow_10(coma);
 8001cf2:	f04f 0a00 	mov.w	sl, #0
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001cf6:	2400      	movs	r4, #0
    if(!n) return 1;
 8001cf8:	2001      	movs	r0, #1
        *num += (str[size-coma] - 48)*pow_10(coma);
 8001cfa:	3a30      	subs	r2, #48	; 0x30
 8001cfc:	fb02 f000 	mul.w	r0, r2, r0
 8001d00:	f7fe fae6 	bl	80002d0 <__aeabi_i2f>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4650      	mov	r0, sl
 8001d08:	f7fe fa2e 	bl	8000168 <__addsf3>
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001d0c:	1c63      	adds	r3, r4, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	1aea      	subs	r2, r5, r3
        *num += (str[size-coma] - 48)*pow_10(coma);
 8001d12:	f8c8 0000 	str.w	r0, [r8]
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001d16:	5cba      	ldrb	r2, [r7, r2]
        *num += (str[size-coma] - 48)*pow_10(coma);
 8001d18:	4682      	mov	sl, r0
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001d1a:	2a2e      	cmp	r2, #46	; 0x2e
 8001d1c:	d010      	beq.n	8001d40 <ascii_to_float+0x88>
        *num += (str[size-coma] - 48)*pow_10(coma);
 8001d1e:	3a30      	subs	r2, #48	; 0x30
    if(!n) return 1;
 8001d20:	b15b      	cbz	r3, 8001d3a <ascii_to_float+0x82>
    int power = 10;
 8001d22:	200a      	movs	r0, #10
    while(n)
 8001d24:	b13c      	cbz	r4, 8001d36 <ascii_to_float+0x7e>
        n--;
 8001d26:	3c01      	subs	r4, #1
        power*=10;
 8001d28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    while(n)
 8001d2c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        power*=10;
 8001d30:	ea4f 0040 	mov.w	r0, r0, lsl #1
    while(n)
 8001d34:	d1f7      	bne.n	8001d26 <ascii_to_float+0x6e>
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001d36:	461c      	mov	r4, r3
 8001d38:	e7e0      	b.n	8001cfc <ascii_to_float+0x44>
    if(!n) return 1;
 8001d3a:	2001      	movs	r0, #1
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001d3c:	461c      	mov	r4, r3
 8001d3e:	e7dd      	b.n	8001cfc <ascii_to_float+0x44>
    coma++;
 8001d40:	f104 0b02 	add.w	fp, r4, #2
 8001d44:	fa5f fb8b 	uxtb.w	fp, fp
 8001d48:	465a      	mov	r2, fp
    if(!n) return 1;
 8001d4a:	b19b      	cbz	r3, 8001d74 <ascii_to_float+0xbc>
    while(n)
 8001d4c:	2c00      	cmp	r4, #0
 8001d4e:	d04f      	beq.n	8001df0 <ascii_to_float+0x138>
    int power = 10;
 8001d50:	200a      	movs	r0, #10
        n--;
 8001d52:	3c01      	subs	r4, #1
        power*=10;
 8001d54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    while(n)
 8001d58:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        power*=10;
 8001d5c:	ea4f 0040 	mov.w	r0, r0, lsl #1
    while(n)
 8001d60:	d1f7      	bne.n	8001d52 <ascii_to_float+0x9a>
 8001d62:	9201      	str	r2, [sp, #4]
 8001d64:	f7fe fab4 	bl	80002d0 <__aeabi_i2f>
 8001d68:	4601      	mov	r1, r0
 8001d6a:	4650      	mov	r0, sl
 8001d6c:	f7fe fbb8 	bl	80004e0 <__aeabi_fdiv>
 8001d70:	4682      	mov	sl, r0
 8001d72:	9a01      	ldr	r2, [sp, #4]

    *num = (*num)/pow_10(coma-1);

    for ( entero = coma ; (size+1) != entero; entero++)
 8001d74:	4296      	cmp	r6, r2
    *num = (*num)/pow_10(coma-1);
 8001d76:	f8c8 a000 	str.w	sl, [r8]
    for ( entero = coma ; (size+1) != entero; entero++)
 8001d7a:	d02c      	beq.n	8001dd6 <ascii_to_float+0x11e>
        *num += (str[size-entero] - 48)*pow_10(entero-coma);
 8001d7c:	2400      	movs	r4, #0
    if(!n) return 1;
 8001d7e:	2001      	movs	r0, #1
        *num += (str[size-entero] - 48)*pow_10(entero-coma);
 8001d80:	1aaa      	subs	r2, r5, r2
 8001d82:	5cba      	ldrb	r2, [r7, r2]
 8001d84:	3a30      	subs	r2, #48	; 0x30
 8001d86:	fb02 f000 	mul.w	r0, r2, r0
 8001d8a:	f7fe faa1 	bl	80002d0 <__aeabi_i2f>
 8001d8e:	4601      	mov	r1, r0
 8001d90:	4650      	mov	r0, sl
 8001d92:	f7fe f9e9 	bl	8000168 <__addsf3>
    for ( entero = coma ; (size+1) != entero; entero++)
 8001d96:	f10b 0b01 	add.w	fp, fp, #1
 8001d9a:	fa5f fb8b 	uxtb.w	fp, fp
 8001d9e:	45b3      	cmp	fp, r6
        *num += (str[size-entero] - 48)*pow_10(entero-coma);
 8001da0:	4682      	mov	sl, r0
 8001da2:	f8c8 0000 	str.w	r0, [r8]
    for ( entero = coma ; (size+1) != entero; entero++)
 8001da6:	d016      	beq.n	8001dd6 <ascii_to_float+0x11e>
        *num += (str[size-entero] - 48)*pow_10(entero-coma);
 8001da8:	eba5 030b 	sub.w	r3, r5, fp
 8001dac:	5cfa      	ldrb	r2, [r7, r3]
 8001dae:	b2e3      	uxtb	r3, r4
    if(!n) return 1;
 8001db0:	2bff      	cmp	r3, #255	; 0xff
        *num += (str[size-entero] - 48)*pow_10(entero-coma);
 8001db2:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
    if(!n) return 1;
 8001db6:	d00b      	beq.n	8001dd0 <ascii_to_float+0x118>
    int power = 10;
 8001db8:	200a      	movs	r0, #10
    while(n)
 8001dba:	b13b      	cbz	r3, 8001dcc <ascii_to_float+0x114>
        n--;
 8001dbc:	3b01      	subs	r3, #1
        power*=10;
 8001dbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    while(n)
 8001dc2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        power*=10;
 8001dc6:	ea4f 0040 	mov.w	r0, r0, lsl #1
    while(n)
 8001dca:	d1f7      	bne.n	8001dbc <ascii_to_float+0x104>
 8001dcc:	3401      	adds	r4, #1
 8001dce:	e7da      	b.n	8001d86 <ascii_to_float+0xce>
    if(!n) return 1;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	3401      	adds	r4, #1
 8001dd4:	e7d7      	b.n	8001d86 <ascii_to_float+0xce>

    if(ptrstr[0]=='-') *num = -*num;
 8001dd6:	f899 3000 	ldrb.w	r3, [r9]
 8001dda:	2b2d      	cmp	r3, #45	; 0x2d
 8001ddc:	d105      	bne.n	8001dea <ascii_to_float+0x132>
 8001dde:	f8d8 3000 	ldr.w	r3, [r8]
 8001de2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001de6:	f8c8 3000 	str.w	r3, [r8]
}
 8001dea:	b003      	add	sp, #12
 8001dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001df0:	4910      	ldr	r1, [pc, #64]	; (8001e34 <ascii_to_float+0x17c>)
 8001df2:	f8cd b004 	str.w	fp, [sp, #4]
 8001df6:	f7fe fb73 	bl	80004e0 <__aeabi_fdiv>
    coma++;
 8001dfa:	f04f 0b02 	mov.w	fp, #2
 8001dfe:	4682      	mov	sl, r0
 8001e00:	9a01      	ldr	r2, [sp, #4]
 8001e02:	e7b7      	b.n	8001d74 <ascii_to_float+0xbc>
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001e04:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8001e08:	2a2e      	cmp	r2, #46	; 0x2e
 8001e0a:	d008      	beq.n	8001e1e <ascii_to_float+0x166>
 8001e0c:	25ff      	movs	r5, #255	; 0xff
 8001e0e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001e12:	e76e      	b.n	8001cf2 <ascii_to_float+0x3a>
 8001e14:	2201      	movs	r2, #1
 8001e16:	f04f 0a00 	mov.w	sl, #0
    coma++;
 8001e1a:	4693      	mov	fp, r2
 8001e1c:	e7aa      	b.n	8001d74 <ascii_to_float+0xbc>
    *num = (*num)/pow_10(coma-1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f04f 0a00 	mov.w	sl, #0
    coma++;
 8001e24:	4693      	mov	fp, r2
    *num = (*num)/pow_10(coma-1);
 8001e26:	f8c8 a000 	str.w	sl, [r8]
 8001e2a:	25ff      	movs	r5, #255	; 0xff
 8001e2c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001e30:	e7a4      	b.n	8001d7c <ascii_to_float+0xc4>
 8001e32:	bf00      	nop
 8001e34:	41200000 	.word	0x41200000

08001e38 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001e42:	b19d      	cbz	r5, 8001e6c <u8g2_DrawBox+0x34>
 8001e44:	4606      	mov	r6, r0
 8001e46:	460f      	mov	r7, r1
 8001e48:	4614      	mov	r4, r2
 8001e4a:	4698      	mov	r8, r3
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001e4c:	f04f 0900 	mov.w	r9, #0
 8001e50:	4415      	add	r5, r2
 8001e52:	b2ed      	uxtb	r5, r5
 8001e54:	4622      	mov	r2, r4
    y++;    
 8001e56:	3401      	adds	r4, #1
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001e58:	f8cd 9000 	str.w	r9, [sp]
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	4639      	mov	r1, r7
 8001e60:	4630      	mov	r0, r6
    y++;    
 8001e62:	b2e4      	uxtb	r4, r4
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001e64:	f000 fc3e 	bl	80026e4 <u8g2_DrawHVLine>
  while( h != 0 )
 8001e68:	42ac      	cmp	r4, r5
 8001e6a:	d1f3      	bne.n	8001e54 <u8g2_DrawBox+0x1c>
    h--;
  }
}
 8001e6c:	b003      	add	sp, #12
 8001e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e72:	bf00      	nop

08001e74 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001e78:	f04f 0900 	mov.w	r9, #0
{
 8001e7c:	4606      	mov	r6, r0
 8001e7e:	460f      	mov	r7, r1
 8001e80:	4614      	mov	r4, r2
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001e82:	f04f 0a01 	mov.w	sl, #1
{
 8001e86:	4698      	mov	r8, r3
 8001e88:	b082      	sub	sp, #8
 8001e8a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001e8e:	f8cd 9000 	str.w	r9, [sp]
 8001e92:	f000 fc27 	bl	80026e4 <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001e96:	462b      	mov	r3, r5
 8001e98:	4622      	mov	r2, r4
 8001e9a:	4639      	mov	r1, r7
 8001e9c:	4630      	mov	r0, r6
 8001e9e:	f8cd a000 	str.w	sl, [sp]
 8001ea2:	f000 fc1f 	bl	80026e4 <u8g2_DrawHVLine>
  x+=w;
  x--;
 8001ea6:	f108 31ff 	add.w	r1, r8, #4294967295
 8001eaa:	4439      	add	r1, r7
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001eac:	462b      	mov	r3, r5
 8001eae:	4622      	mov	r2, r4
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f8cd a000 	str.w	sl, [sp]
 8001eb6:	b2c9      	uxtb	r1, r1
 8001eb8:	f000 fc14 	bl	80026e4 <u8g2_DrawHVLine>
  y+=h;
  y--;
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	4639      	mov	r1, r7
 8001ec0:	4630      	mov	r0, r6
  y--;
 8001ec2:	1e6a      	subs	r2, r5, #1
 8001ec4:	4422      	add	r2, r4
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
}
 8001ecc:	b002      	add	sp, #8
 8001ece:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001ed2:	f000 bc07 	b.w	80026e4 <u8g2_DrawHVLine>
 8001ed6:	bf00      	nop

08001ed8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001edc:	6803      	ldr	r3, [r0, #0]
{
 8001ede:	b083      	sub	sp, #12
 8001ee0:	4606      	mov	r6, r0
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001ee2:	2500      	movs	r5, #0
  src_max = u8g2->tile_buf_height;
 8001ee4:	f890 803c 	ldrb.w	r8, [r0, #60]	; 0x3c
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001ee8:	f893 9011 	ldrb.w	r9, [r3, #17]
  dest_row = u8g2->tile_curr_row;
 8001eec:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8001ef0:	e002      	b.n	8001ef8 <u8g2_send_buffer+0x20>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8001ef2:	4599      	cmp	r9, r3
 8001ef4:	d917      	bls.n	8001f26 <u8g2_send_buffer+0x4e>
 8001ef6:	6833      	ldr	r3, [r6, #0]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001ef8:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
 8001efa:	b2a9      	uxth	r1, r5
  offset *= 8;
 8001efc:	00da      	lsls	r2, r3, #3
 8001efe:	fb02 f201 	mul.w	r2, r2, r1
  ptr = u8g2->tile_buf_ptr;
 8001f02:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001f04:	b2ec      	uxtb	r4, r5
  ptr += offset;
 8001f06:	b292      	uxth	r2, r2
 8001f08:	4411      	add	r1, r2
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f0a:	193a      	adds	r2, r7, r4
  } while( src_row < src_max && dest_row < dest_max );
 8001f0c:	3401      	adds	r4, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f0e:	9100      	str	r1, [sp, #0]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	2100      	movs	r1, #0
 8001f14:	4630      	mov	r0, r6
 8001f16:	3501      	adds	r5, #1
  } while( src_row < src_max && dest_row < dest_max );
 8001f18:	b2e4      	uxtb	r4, r4
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f1a:	f000 ff49 	bl	8002db0 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 8001f1e:	197b      	adds	r3, r7, r5
 8001f20:	45a0      	cmp	r8, r4
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	d8e5      	bhi.n	8001ef2 <u8g2_send_buffer+0x1a>
}
 8001f26:	b003      	add	sp, #12
 8001f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001f2c <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f2c:	6802      	ldr	r2, [r0, #0]
  cnt *= u8g2->tile_buf_height;
 8001f2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f32:	7c12      	ldrb	r2, [r2, #16]
  cnt *= 8;
 8001f34:	00db      	lsls	r3, r3, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f36:	fb02 f203 	mul.w	r2, r2, r3
 8001f3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f005 be50 	b.w	8007be2 <memset>
 8001f42:	bf00      	nop

08001f44 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001f44:	b510      	push	{r4, lr}
 8001f46:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 8001f48:	f7ff ffc6 	bl	8001ed8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001f4c:	4620      	mov	r0, r4
}
 8001f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001f52:	f000 bf59 	b.w	8002e08 <u8x8_RefreshDisplay>
 8001f56:	bf00      	nop

08001f58 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 8001f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->tile_curr_row = row;
 8001f5e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f68:	4620      	mov	r0, r4
}
 8001f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4718      	bx	r3
 8001f72:	bf00      	nop

08001f74 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001f74:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8001f76:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
{
 8001f7a:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 8001f7c:	b153      	cbz	r3, 8001f94 <u8g2_FirstPage+0x20>
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f7e:	6802      	ldr	r2, [r0, #0]
  cnt *= u8g2->tile_buf_height;
 8001f80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f84:	7c12      	ldrb	r2, [r2, #16]
  cnt *= 8;
 8001f86:	00db      	lsls	r3, r3, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f88:	fb02 f203 	mul.w	r2, r2, r3
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f90:	f005 fe27 	bl	8007be2 <memset>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001f94:	4620      	mov	r0, r4
}
 8001f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f7ff bfdc 	b.w	8001f58 <u8g2_SetBufferCurrTileRow>

08001fa0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001fa0:	b538      	push	{r3, r4, r5, lr}
 8001fa2:	4605      	mov	r5, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001fa4:	f7ff ff98 	bl	8001ed8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001fa8:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
  row += u8g2->tile_buf_height;
 8001fac:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fb0:	682a      	ldr	r2, [r5, #0]
  row += u8g2->tile_buf_height;
 8001fb2:	441c      	add	r4, r3
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fb4:	7c51      	ldrb	r1, [r2, #17]
  row += u8g2->tile_buf_height;
 8001fb6:	b2e4      	uxtb	r4, r4
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fb8:	42a1      	cmp	r1, r4
 8001fba:	d916      	bls.n	8001fea <u8g2_NextPage+0x4a>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 8001fbc:	f895 1082 	ldrb.w	r1, [r5, #130]	; 0x82
 8001fc0:	b929      	cbnz	r1, 8001fce <u8g2_NextPage+0x2e>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	f7ff ffc7 	bl	8001f58 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001fca:	2001      	movs	r0, #1
}
 8001fcc:	bd38      	pop	{r3, r4, r5, pc}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001fce:	7c12      	ldrb	r2, [r2, #16]
  cnt *= 8;
 8001fd0:	00db      	lsls	r3, r3, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001fd2:	fb02 f203 	mul.w	r2, r2, r3
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001fda:	f005 fe02 	bl	8007be2 <memset>
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001fde:	4628      	mov	r0, r5
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	f7ff ffb9 	bl	8001f58 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	e7f0      	b.n	8001fcc <u8g2_NextPage+0x2c>
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001fea:	4628      	mov	r0, r5
 8001fec:	f000 ff0c 	bl	8002e08 <u8x8_RefreshDisplay>
    return 0;
 8001ff0:	2000      	movs	r0, #0
}
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}

08001ff4 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 8001ff8:	f7ff ffbc 	bl	8001f74 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff ffcf 	bl	8001fa0 <u8g2_NextPage>
 8002002:	2800      	cmp	r0, #0
 8002004:	d1fa      	bne.n	8001ffc <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002006:	4601      	mov	r1, r0
 8002008:	4620      	mov	r0, r4
}
 800200a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800200e:	f7ff bfa3 	b.w	8001f58 <u8g2_SetBufferCurrTileRow>
 8002012:	bf00      	nop

08002014 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002014:	2308      	movs	r3, #8
 8002016:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 8002018:	4800      	ldr	r0, [pc, #0]	; (800201c <u8g2_m_16_8_f+0x8>)
 800201a:	4770      	bx	lr
 800201c:	20000240 	.word	0x20000240

08002020 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002020:	b530      	push	{r4, r5, lr}
 8002022:	b085      	sub	sp, #20
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002024:	9300      	str	r3, [sp, #0]
{
 8002026:	460d      	mov	r5, r1
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002028:	4613      	mov	r3, r2
 800202a:	4909      	ldr	r1, [pc, #36]	; (8002050 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x30>)
 800202c:	4a09      	ldr	r2, [pc, #36]	; (8002054 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x34>)
{
 800202e:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002030:	f000 fef8 	bl	8002e24 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002034:	f10d 000f 	add.w	r0, sp, #15
 8002038:	f7ff ffec 	bl	8002014 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800203c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002040:	4601      	mov	r1, r0
 8002042:	9500      	str	r5, [sp, #0]
 8002044:	4620      	mov	r0, r4
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x38>)
 8002048:	f000 fc72 	bl	8002930 <u8g2_SetupBuffer>
}
 800204c:	b005      	add	sp, #20
 800204e:	bd30      	pop	{r4, r5, pc}
 8002050:	08002d05 	.word	0x08002d05
 8002054:	08002b55 	.word	0x08002b55
 8002058:	08002709 	.word	0x08002709

0800205c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 800205c:	1843      	adds	r3, r0, r1
    pos = u8x8_pgm_read( font );
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 800205e:	785b      	ldrb	r3, [r3, #1]
    pos = u8x8_pgm_read( font );
 8002060:	5c40      	ldrb	r0, [r0, r1]
    pos += u8x8_pgm_read( font);
 8002062:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    return pos;
}
 8002066:	b280      	uxth	r0, r0
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  decode->decode_ptr = glyph_data;
  decode->decode_bit_pos = 0;
 800206c:	2300      	movs	r3, #0
{
 800206e:	b470      	push	{r4, r5, r6}
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002070:	f890 5068 	ldrb.w	r5, [r0, #104]	; 0x68
  decode->decode_ptr = glyph_data;
 8002074:	6541      	str	r1, [r0, #84]	; 0x54
  decode->decode_bit_pos = 0;
 8002076:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
  if ( bit_pos_plus_cnt >= 8 )
 800207a:	2d07      	cmp	r5, #7
  val = u8x8_pgm_read( f->decode_ptr );  
 800207c:	780a      	ldrb	r2, [r1, #0]
  if ( bit_pos_plus_cnt >= 8 )
 800207e:	d936      	bls.n	80020ee <u8g2_font_setup_decode+0x82>
    f->decode_ptr++;
 8002080:	3101      	adds	r1, #1
    bit_pos_plus_cnt -= 8;
 8002082:	f1a5 0308 	sub.w	r3, r5, #8
    f->decode_ptr++;
 8002086:	6541      	str	r1, [r0, #84]	; 0x54
    bit_pos_plus_cnt -= 8;
 8002088:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 800208a:	f04f 34ff 	mov.w	r4, #4294967295
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800208e:	f890 6069 	ldrb.w	r6, [r0, #105]	; 0x69
  val &= (1U<<cnt)-1;
 8002092:	40ac      	lsls	r4, r5
 8002094:	ea22 0204 	bic.w	r2, r2, r4
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002098:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800209c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
  bit_pos_plus_cnt += cnt;
 80020a0:	18f4      	adds	r4, r6, r3
  val >>= bit_pos;
 80020a2:	780d      	ldrb	r5, [r1, #0]
  bit_pos_plus_cnt += cnt;
 80020a4:	b2e4      	uxtb	r4, r4
  if ( bit_pos_plus_cnt >= 8 )
 80020a6:	2c07      	cmp	r4, #7
  val >>= bit_pos;
 80020a8:	fa45 f503 	asr.w	r5, r5, r3
  if ( bit_pos_plus_cnt >= 8 )
 80020ac:	d921      	bls.n	80020f2 <u8g2_font_setup_decode+0x86>
    f->decode_ptr++;
 80020ae:	1c4a      	adds	r2, r1, #1
 80020b0:	6542      	str	r2, [r0, #84]	; 0x54
    s -= bit_pos;
 80020b2:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80020b6:	784a      	ldrb	r2, [r1, #1]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
    bit_pos_plus_cnt -= 8;
 80020be:	3c08      	subs	r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80020c0:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 80020c2:	b2e4      	uxtb	r4, r4
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80020c4:	b2db      	uxtb	r3, r3
  
  decode->fg_color = u8g2->draw_color;
 80020c6:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  val &= (1U<<cnt)-1;
 80020ca:	f04f 31ff 	mov.w	r1, #4294967295
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80020ce:	fab5 f285 	clz	r2, r5
  val &= (1U<<cnt)-1;
 80020d2:	40b1      	lsls	r1, r6
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80020d4:	0952      	lsrs	r2, r2, #5
  val &= (1U<<cnt)-1;
 80020d6:	ea23 0301 	bic.w	r3, r3, r1
  f->decode_bit_pos = bit_pos_plus_cnt;
 80020da:	f880 405e 	strb.w	r4, [r0, #94]	; 0x5e
  decode->fg_color = u8g2->draw_color;
 80020de:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80020e2:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80020e6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 80020ea:	bc70      	pop	{r4, r5, r6}
 80020ec:	4770      	bx	lr
  if ( bit_pos_plus_cnt >= 8 )
 80020ee:	462b      	mov	r3, r5
 80020f0:	e7cb      	b.n	800208a <u8g2_font_setup_decode+0x1e>
  val >>= bit_pos;
 80020f2:	b2eb      	uxtb	r3, r5
 80020f4:	e7e7      	b.n	80020c6 <u8g2_font_setup_decode+0x5a>
 80020f6:	bf00      	nop

080020f8 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 80020f8:	2000      	movs	r0, #0
 80020fa:	4770      	bx	lr

080020fc <u8g2_read_font_info>:
{
 80020fc:	4602      	mov	r2, r0
 80020fe:	b510      	push	{r4, lr}
 8002100:	460c      	mov	r4, r1
  return u8x8_pgm_read( font );  
 8002102:	780b      	ldrb	r3, [r1, #0]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002104:	4608      	mov	r0, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002106:	7013      	strb	r3, [r2, #0]
  return u8x8_pgm_read( font );  
 8002108:	784b      	ldrb	r3, [r1, #1]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800210a:	2111      	movs	r1, #17
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800210c:	7053      	strb	r3, [r2, #1]
  return u8x8_pgm_read( font );  
 800210e:	78a3      	ldrb	r3, [r4, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002110:	7093      	strb	r3, [r2, #2]
  return u8x8_pgm_read( font );  
 8002112:	78e3      	ldrb	r3, [r4, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002114:	70d3      	strb	r3, [r2, #3]
  return u8x8_pgm_read( font );  
 8002116:	7923      	ldrb	r3, [r4, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002118:	7113      	strb	r3, [r2, #4]
  return u8x8_pgm_read( font );  
 800211a:	7963      	ldrb	r3, [r4, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800211c:	7153      	strb	r3, [r2, #5]
  return u8x8_pgm_read( font );  
 800211e:	79a3      	ldrb	r3, [r4, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002120:	7193      	strb	r3, [r2, #6]
  return u8x8_pgm_read( font );  
 8002122:	79e3      	ldrb	r3, [r4, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002124:	71d3      	strb	r3, [r2, #7]
  return u8x8_pgm_read( font );  
 8002126:	7a23      	ldrb	r3, [r4, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002128:	7213      	strb	r3, [r2, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800212a:	7a63      	ldrb	r3, [r4, #9]
 800212c:	7253      	strb	r3, [r2, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800212e:	7aa3      	ldrb	r3, [r4, #10]
 8002130:	7293      	strb	r3, [r2, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002132:	7ae3      	ldrb	r3, [r4, #11]
 8002134:	72d3      	strb	r3, [r2, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002136:	7b23      	ldrb	r3, [r4, #12]
 8002138:	7313      	strb	r3, [r2, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800213a:	7b63      	ldrb	r3, [r4, #13]
 800213c:	7353      	strb	r3, [r2, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800213e:	7ba3      	ldrb	r3, [r4, #14]
 8002140:	7393      	strb	r3, [r2, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002142:	7be3      	ldrb	r3, [r4, #15]
 8002144:	73d3      	strb	r3, [r2, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002146:	7c23      	ldrb	r3, [r4, #16]
 8002148:	7413      	strb	r3, [r2, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800214a:	f7ff ff87 	bl	800205c <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800214e:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002150:	8250      	strh	r0, [r2, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff ff82 	bl	800205c <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002158:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800215a:	8290      	strh	r0, [r2, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff ff7d 	bl	800205c <u8g2_font_get_word>
 8002162:	82d0      	strh	r0, [r2, #22]
}
 8002164:	bd10      	pop	{r4, pc}
 8002166:	bf00      	nop

08002168 <u8g2_font_decode_get_signed_bits>:
{
 8002168:	b470      	push	{r4, r5, r6}
  uint8_t bit_pos = f->decode_bit_pos;
 800216a:	7a84      	ldrb	r4, [r0, #10]
  val = u8x8_pgm_read( f->decode_ptr );  
 800216c:	6806      	ldr	r6, [r0, #0]
  bit_pos_plus_cnt += cnt;
 800216e:	190a      	adds	r2, r1, r4
  val >>= bit_pos;
 8002170:	7833      	ldrb	r3, [r6, #0]
  bit_pos_plus_cnt += cnt;
 8002172:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8002174:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8002176:	fa43 f504 	asr.w	r5, r3, r4
  if ( bit_pos_plus_cnt >= 8 )
 800217a:	d919      	bls.n	80021b0 <u8g2_font_decode_get_signed_bits+0x48>
    f->decode_ptr++;
 800217c:	1c73      	adds	r3, r6, #1
 800217e:	6003      	str	r3, [r0, #0]
    s -= bit_pos;
 8002180:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002184:	7873      	ldrb	r3, [r6, #1]
 8002186:	b2e4      	uxtb	r4, r4
 8002188:	40a3      	lsls	r3, r4
    bit_pos_plus_cnt -= 8;
 800218a:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800218c:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 800218e:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002190:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 8002192:	f04f 35ff 	mov.w	r5, #4294967295
  d <<= cnt;
 8002196:	2401      	movs	r4, #1
  val &= (1U<<cnt)-1;
 8002198:	408d      	lsls	r5, r1
  cnt--;
 800219a:	3901      	subs	r1, #1
  d <<= cnt;
 800219c:	b2c9      	uxtb	r1, r1
  val &= (1U<<cnt)-1;
 800219e:	ea23 0305 	bic.w	r3, r3, r5
  d <<= cnt;
 80021a2:	fa04 f101 	lsl.w	r1, r4, r1
  f->decode_bit_pos = bit_pos_plus_cnt;
 80021a6:	7282      	strb	r2, [r0, #10]
  v -= d;
 80021a8:	1a5b      	subs	r3, r3, r1
}
 80021aa:	b258      	sxtb	r0, r3
 80021ac:	bc70      	pop	{r4, r5, r6}
 80021ae:	4770      	bx	lr
  val >>= bit_pos;
 80021b0:	b2eb      	uxtb	r3, r5
 80021b2:	e7ee      	b.n	8002192 <u8g2_font_decode_get_signed_bits+0x2a>

080021b4 <u8g2_font_decode_len>:
{
 80021b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021b8:	4605      	mov	r5, r0
 80021ba:	b082      	sub	sp, #8
 80021bc:	460e      	mov	r6, r1
 80021be:	4691      	mov	r9, r2
      u8g2_DrawHVLine(u8g2, 
 80021c0:	f04f 0a00 	mov.w	sl, #0
  lx = decode->x;
 80021c4:	f890 805a 	ldrb.w	r8, [r0, #90]	; 0x5a
  ly = decode->y;
 80021c8:	f890 705b 	ldrb.w	r7, [r0, #91]	; 0x5b
 80021cc:	e00c      	b.n	80021e8 <u8g2_font_decode_len+0x34>
    else if ( decode->is_transparent == 0 )    
 80021ce:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
 80021d2:	b3a0      	cbz	r0, 800223e <u8g2_font_decode_len+0x8a>
    if ( cnt < rem )
 80021d4:	42a6      	cmp	r6, r4
    ly++;
 80021d6:	f107 0301 	add.w	r3, r7, #1
    cnt -= rem;
 80021da:	eba6 0404 	sub.w	r4, r6, r4
    if ( cnt < rem )
 80021de:	d326      	bcc.n	800222e <u8g2_font_decode_len+0x7a>
    lx = 0;
 80021e0:	f04f 0800 	mov.w	r8, #0
    cnt -= rem;
 80021e4:	b2e6      	uxtb	r6, r4
    ly++;
 80021e6:	b2df      	uxtb	r7, r3
    rem = decode->glyph_width;
 80021e8:	f895 405c 	ldrb.w	r4, [r5, #92]	; 0x5c
    x = decode->target_x;
 80021ec:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
    y = decode->target_y;
 80021f0:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
    rem -= lx;
 80021f4:	eba4 0408 	sub.w	r4, r4, r8
 80021f8:	b2e4      	uxtb	r4, r4
    x += lx;
 80021fa:	4441      	add	r1, r8
    y += ly;
 80021fc:	443a      	add	r2, r7
 80021fe:	42a6      	cmp	r6, r4
 8002200:	4633      	mov	r3, r6
    x += lx;
 8002202:	b2c9      	uxtb	r1, r1
 8002204:	bf28      	it	cs
 8002206:	4623      	movcs	r3, r4
    y += ly;
 8002208:	b2d2      	uxtb	r2, r2
    if ( is_foreground )
 800220a:	f1b9 0f00 	cmp.w	r9, #0
 800220e:	d0de      	beq.n	80021ce <u8g2_font_decode_len+0x1a>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002210:	f895 0060 	ldrb.w	r0, [r5, #96]	; 0x60
      u8g2_DrawHVLine(u8g2, 
 8002214:	f8cd a000 	str.w	sl, [sp]
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002218:	f885 0081 	strb.w	r0, [r5, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 800221c:	4628      	mov	r0, r5
 800221e:	f000 fa61 	bl	80026e4 <u8g2_DrawHVLine>
    if ( cnt < rem )
 8002222:	42a6      	cmp	r6, r4
    ly++;
 8002224:	f107 0301 	add.w	r3, r7, #1
    cnt -= rem;
 8002228:	eba6 0404 	sub.w	r4, r6, r4
    if ( cnt < rem )
 800222c:	d2d8      	bcs.n	80021e0 <u8g2_font_decode_len+0x2c>
  lx += cnt;
 800222e:	4446      	add	r6, r8
  decode->x = lx;
 8002230:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
  decode->y = ly;
 8002234:	f885 705b 	strb.w	r7, [r5, #91]	; 0x5b
}
 8002238:	b002      	add	sp, #8
 800223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800223e:	f895 0061 	ldrb.w	r0, [r5, #97]	; 0x61
      u8g2_DrawHVLine(u8g2, 
 8002242:	f8cd 9000 	str.w	r9, [sp]
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002246:	f885 0081 	strb.w	r0, [r5, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 800224a:	4628      	mov	r0, r5
 800224c:	f000 fa4a 	bl	80026e4 <u8g2_DrawHVLine>
 8002250:	e7c0      	b.n	80021d4 <u8g2_font_decode_len+0x20>
 8002252:	bf00      	nop

08002254 <u8g2_font_decode_glyph>:
{
 8002254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002258:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800225a:	f100 0754 	add.w	r7, r0, #84	; 0x54
  u8g2_font_setup_decode(u8g2, glyph_data);
 800225e:	f7ff ff05 	bl	800206c <u8g2_font_setup_decode>
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002262:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 8002266:	4638      	mov	r0, r7
  h = u8g2->font_decode.glyph_height;
 8002268:	f994 805d 	ldrsb.w	r8, [r4, #93]	; 0x5d
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800226c:	f7ff ff7c 	bl	8002168 <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002270:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002274:	4605      	mov	r5, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002276:	4638      	mov	r0, r7
 8002278:	f7ff ff76 	bl	8002168 <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800227c:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002280:	4606      	mov	r6, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002282:	4638      	mov	r0, r7
 8002284:	f7ff ff70 	bl	8002168 <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 8002288:	f994 305c 	ldrsb.w	r3, [r4, #92]	; 0x5c
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800228c:	4681      	mov	r9, r0
  if ( decode->glyph_width > 0 )
 800228e:	2b00      	cmp	r3, #0
 8002290:	dd68      	ble.n	8002364 <u8g2_font_decode_glyph+0x110>
    decode->x = 0;
 8002292:	2300      	movs	r3, #0
  val &= (1U<<cnt)-1;
 8002294:	f04f 37ff 	mov.w	r7, #4294967295
    decode->target_y -= h+y;
 8002298:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    decode->x = 0;
 800229c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    decode->target_x += x;
 80022a0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    decode->target_y -= h+y;
 80022a4:	eba0 0008 	sub.w	r0, r0, r8
    decode->target_x += x;
 80022a8:	441d      	add	r5, r3
    decode->target_y -= h+y;
 80022aa:	1b80      	subs	r0, r0, r6
 80022ac:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80022b0:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
    decode->target_x += x;
 80022b4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80022b8:	f894 c066 	ldrb.w	ip, [r4, #102]	; 0x66
  val = u8x8_pgm_read( f->decode_ptr );  
 80022bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
  bit_pos_plus_cnt += cnt;
 80022be:	eb0c 0203 	add.w	r2, ip, r3
  val >>= bit_pos;
 80022c2:	780e      	ldrb	r6, [r1, #0]
  bit_pos_plus_cnt += cnt;
 80022c4:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 80022c6:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 80022c8:	fa46 f503 	asr.w	r5, r6, r3
  if ( bit_pos_plus_cnt >= 8 )
 80022cc:	d85b      	bhi.n	8002386 <u8g2_font_decode_glyph+0x132>
  val >>= bit_pos;
 80022ce:	b2ee      	uxtb	r6, r5
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80022d0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
  f->decode_bit_pos = bit_pos_plus_cnt;
 80022d4:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
  bit_pos_plus_cnt += cnt;
 80022d8:	1883      	adds	r3, r0, r2
  val >>= bit_pos;
 80022da:	780d      	ldrb	r5, [r1, #0]
  bit_pos_plus_cnt += cnt;
 80022dc:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 80022de:	fa07 fc0c 	lsl.w	ip, r7, ip
  if ( bit_pos_plus_cnt >= 8 )
 80022e2:	2b07      	cmp	r3, #7
  val &= (1U<<cnt)-1;
 80022e4:	ea26 060c 	bic.w	r6, r6, ip
  val >>= bit_pos;
 80022e8:	fa45 fc02 	asr.w	ip, r5, r2
  if ( bit_pos_plus_cnt >= 8 )
 80022ec:	d83d      	bhi.n	800236a <u8g2_font_decode_glyph+0x116>
  val >>= bit_pos;
 80022ee:	fa5f f58c 	uxtb.w	r5, ip
  val &= (1U<<cnt)-1;
 80022f2:	fa07 f000 	lsl.w	r0, r7, r0
 80022f6:	ea25 0500 	bic.w	r5, r5, r0
  f->decode_bit_pos = bit_pos_plus_cnt;
 80022fa:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
 80022fe:	e005      	b.n	800230c <u8g2_font_decode_glyph+0xb8>
  val >>= bit_pos;
 8002300:	fa5f f28c 	uxtb.w	r2, ip
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002304:	07d2      	lsls	r2, r2, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002306:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800230a:	d523      	bpl.n	8002354 <u8g2_font_decode_glyph+0x100>
	u8g2_font_decode_len(u8g2, a, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	4631      	mov	r1, r6
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff ff4f 	bl	80021b4 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	4629      	mov	r1, r5
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff ff4a 	bl	80021b4 <u8g2_font_decode_len>
  uint8_t bit_pos = f->decode_bit_pos;
 8002320:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  val = u8x8_pgm_read( f->decode_ptr );  
 8002324:	6d60      	ldr	r0, [r4, #84]	; 0x54
  bit_pos_plus_cnt += cnt;
 8002326:	1c4b      	adds	r3, r1, #1
  val >>= bit_pos;
 8002328:	7802      	ldrb	r2, [r0, #0]
  bit_pos_plus_cnt += cnt;
 800232a:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 800232c:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 800232e:	fa42 fc01 	asr.w	ip, r2, r1
  if ( bit_pos_plus_cnt >= 8 )
 8002332:	d9e5      	bls.n	8002300 <u8g2_font_decode_glyph+0xac>
    f->decode_ptr++;
 8002334:	1c43      	adds	r3, r0, #1
 8002336:	6563      	str	r3, [r4, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002338:	7842      	ldrb	r2, [r0, #1]
    s -= bit_pos;
 800233a:	f1c1 0308 	rsb	r3, r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800233e:	b2db      	uxtb	r3, r3
 8002340:	409a      	lsls	r2, r3
 8002342:	ea42 020c 	orr.w	r2, r2, ip
    bit_pos_plus_cnt -= 8;
 8002346:	1fcb      	subs	r3, r1, #7
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002348:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 800234a:	b2db      	uxtb	r3, r3
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800234c:	07d2      	lsls	r2, r2, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 800234e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002352:	d4db      	bmi.n	800230c <u8g2_font_decode_glyph+0xb8>
      if ( decode->y >= h )
 8002354:	f994 205b 	ldrsb.w	r2, [r4, #91]	; 0x5b
 8002358:	4542      	cmp	r2, r8
 800235a:	dbad      	blt.n	80022b8 <u8g2_font_decode_glyph+0x64>
    u8g2->draw_color = decode->fg_color;
 800235c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8002360:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8002364:	4648      	mov	r0, r9
 8002366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f->decode_ptr++;
 800236a:	1c4d      	adds	r5, r1, #1
 800236c:	6565      	str	r5, [r4, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800236e:	784d      	ldrb	r5, [r1, #1]
    s -= bit_pos;
 8002370:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	fa05 f202 	lsl.w	r2, r5, r2
    bit_pos_plus_cnt -= 8;
 800237a:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800237c:	ea42 050c 	orr.w	r5, r2, ip
    bit_pos_plus_cnt -= 8;
 8002380:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002382:	b2ed      	uxtb	r5, r5
 8002384:	e7b5      	b.n	80022f2 <u8g2_font_decode_glyph+0x9e>
    f->decode_ptr++;
 8002386:	1c4e      	adds	r6, r1, #1
 8002388:	6566      	str	r6, [r4, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800238a:	7848      	ldrb	r0, [r1, #1]
    bit_pos_plus_cnt -= 8;
 800238c:	4631      	mov	r1, r6
    s -= bit_pos;
 800238e:	f1c3 0608 	rsb	r6, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002392:	b2f6      	uxtb	r6, r6
 8002394:	fa00 f606 	lsl.w	r6, r0, r6
    bit_pos_plus_cnt -= 8;
 8002398:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800239a:	432e      	orrs	r6, r5
    bit_pos_plus_cnt -= 8;
 800239c:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800239e:	b2f6      	uxtb	r6, r6
 80023a0:	e796      	b.n	80022d0 <u8g2_font_decode_glyph+0x7c>
 80023a2:	bf00      	nop

080023a4 <u8g2_font_get_glyph_data>:
  const uint8_t *font = u8g2->font;
 80023a4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  if ( encoding <= 255 )
 80023a6:	29ff      	cmp	r1, #255	; 0xff
{
 80023a8:	b538      	push	{r3, r4, r5, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80023aa:	f102 0317 	add.w	r3, r2, #23
  if ( encoding <= 255 )
 80023ae:	d80e      	bhi.n	80023ce <u8g2_font_get_glyph_data+0x2a>
    if ( encoding >= 'a' )
 80023b0:	2960      	cmp	r1, #96	; 0x60
 80023b2:	d930      	bls.n	8002416 <u8g2_font_get_glyph_data+0x72>
      font += u8g2->font_info.start_pos_lower_a;
 80023b4:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
 80023b8:	4413      	add	r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80023ba:	7858      	ldrb	r0, [r3, #1]
 80023bc:	b130      	cbz	r0, 80023cc <u8g2_font_get_glyph_data+0x28>
      if ( u8x8_pgm_read( font ) == encoding )
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	428a      	cmp	r2, r1
 80023c2:	d02e      	beq.n	8002422 <u8g2_font_get_glyph_data+0x7e>
      font += u8x8_pgm_read( font + 1 );
 80023c4:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80023c6:	7858      	ldrb	r0, [r3, #1]
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d1f8      	bne.n	80023be <u8g2_font_get_glyph_data+0x1a>
}
 80023cc:	bd38      	pop	{r3, r4, r5, pc}
    font += u8g2->font_info.start_pos_unicode;
 80023ce:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 80023d2:	460d      	mov	r5, r1
 80023d4:	441a      	add	r2, r3
    unicode_lookup_table = font; 
 80023d6:	4614      	mov	r4, r2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80023d8:	2100      	movs	r1, #0
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff fe3e 	bl	800205c <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80023e0:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80023e2:	4402      	add	r2, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7ff fe39 	bl	800205c <u8g2_font_get_word>
    } while( e < encoding );
 80023ea:	4285      	cmp	r5, r0
      unicode_lookup_table+=4;
 80023ec:	f104 0404 	add.w	r4, r4, #4
    } while( e < encoding );
 80023f0:	d8f2      	bhi.n	80023d8 <u8g2_font_get_glyph_data+0x34>
 80023f2:	8810      	ldrh	r0, [r2, #0]
 80023f4:	ba40      	rev16	r0, r0
 80023f6:	b280      	uxth	r0, r0
      if ( e == 0 )
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d0e7      	beq.n	80023cc <u8g2_font_get_glyph_data+0x28>
      if ( e == encoding )
 80023fc:	4285      	cmp	r5, r0
 80023fe:	d008      	beq.n	8002412 <u8g2_font_get_glyph_data+0x6e>
      font += u8x8_pgm_read( font + 2 );
 8002400:	7893      	ldrb	r3, [r2, #2]
 8002402:	441a      	add	r2, r3
 8002404:	8810      	ldrh	r0, [r2, #0]
 8002406:	ba40      	rev16	r0, r0
 8002408:	b280      	uxth	r0, r0
      if ( e == 0 )
 800240a:	2800      	cmp	r0, #0
 800240c:	d0de      	beq.n	80023cc <u8g2_font_get_glyph_data+0x28>
      if ( e == encoding )
 800240e:	4285      	cmp	r5, r0
 8002410:	d1f6      	bne.n	8002400 <u8g2_font_get_glyph_data+0x5c>
	return font+3;	/* skip encoding and glyph size */
 8002412:	1cd0      	adds	r0, r2, #3
}
 8002414:	bd38      	pop	{r3, r4, r5, pc}
    else if ( encoding >= 'A' )
 8002416:	2940      	cmp	r1, #64	; 0x40
 8002418:	d9d5      	bls.n	80023c6 <u8g2_font_get_glyph_data+0x22>
      font += u8g2->font_info.start_pos_upper_A;
 800241a:	f8b0 2076 	ldrh.w	r2, [r0, #118]	; 0x76
 800241e:	4413      	add	r3, r2
 8002420:	e7d1      	b.n	80023c6 <u8g2_font_get_glyph_data+0x22>
	return font+2;	/* skip encoding and glyph size */
 8002422:	1c98      	adds	r0, r3, #2
}
 8002424:	bd38      	pop	{r3, r4, r5, pc}
 8002426:	bf00      	nop

08002428 <u8g2_draw_string>:
{
 8002428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242c:	461f      	mov	r7, r3
 800242e:	460e      	mov	r6, r1
 8002430:	4693      	mov	fp, r2
 8002432:	4604      	mov	r4, r0
  sum = 0;
 8002434:	f04f 0800 	mov.w	r8, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002438:	f000 faee 	bl	8002a18 <u8x8_utf8_init>
    if ( e == 0x0ffff )
 800243c:	f64f 79ff 	movw	r9, #65535	; 0xffff
    if ( e != 0x0fffe )
 8002440:	f64f 7afe 	movw	sl, #65534	; 0xfffe
 8002444:	3f01      	subs	r7, #1
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002446:	6863      	ldr	r3, [r4, #4]
 8002448:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800244c:	4620      	mov	r0, r4
 800244e:	4798      	blx	r3
    if ( e == 0x0ffff )
 8002450:	4548      	cmp	r0, r9
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002452:	4605      	mov	r5, r0
    if ( e == 0x0ffff )
 8002454:	d01a      	beq.n	800248c <u8g2_draw_string+0x64>
    if ( e != 0x0fffe )
 8002456:	4550      	cmp	r0, sl
 8002458:	d0f5      	beq.n	8002446 <u8g2_draw_string+0x1e>
  y += u8g2->font_calc_vref(u8g2);
 800245a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800245c:	4620      	mov	r0, r4
 800245e:	4798      	blx	r3
 8002460:	4458      	add	r0, fp
  u8g2->font_decode.target_y = y;
 8002462:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
  u8g2->font_decode.target_x = x;
 8002466:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800246a:	4629      	mov	r1, r5
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff ff99 	bl	80023a4 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8002472:	2800      	cmp	r0, #0
 8002474:	d0e7      	beq.n	8002446 <u8g2_draw_string+0x1e>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002476:	4601      	mov	r1, r0
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff feeb 	bl	8002254 <u8g2_font_decode_glyph>
 800247e:	b2c0      	uxtb	r0, r0
 8002480:	4406      	add	r6, r0
 8002482:	4480      	add	r8, r0
 8002484:	b2f6      	uxtb	r6, r6
 8002486:	fa5f f888 	uxtb.w	r8, r8
 800248a:	e7dc      	b.n	8002446 <u8g2_draw_string+0x1e>
}
 800248c:	4640      	mov	r0, r8
 800248e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002492:	bf00      	nop

08002494 <u8g2_GetGlyphWidth>:
{
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	4604      	mov	r4, r0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8002498:	f7ff ff84 	bl	80023a4 <u8g2_font_get_glyph_data>
  if ( glyph_data == NULL )
 800249c:	b1c0      	cbz	r0, 80024d0 <u8g2_GetGlyphWidth+0x3c>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800249e:	f104 0554 	add.w	r5, r4, #84	; 0x54
 80024a2:	4601      	mov	r1, r0
  u8g2_font_setup_decode(u8g2, glyph_data);
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff fde1 	bl	800206c <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80024aa:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 80024ae:	4628      	mov	r0, r5
 80024b0:	f7ff fe5a 	bl	8002168 <u8g2_font_decode_get_signed_bits>
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80024b4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80024b8:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80024bc:	4628      	mov	r0, r5
 80024be:	f7ff fe53 	bl	8002168 <u8g2_font_decode_get_signed_bits>
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80024c2:	4628      	mov	r0, r5
 80024c4:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
}
 80024c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80024cc:	f7ff be4c 	b.w	8002168 <u8g2_font_decode_get_signed_bits>
}
 80024d0:	bd38      	pop	{r3, r4, r5, pc}
 80024d2:	bf00      	nop

080024d4 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80024d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 80024d8:	2300      	movs	r3, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
  dx = 0;
 80024da:	461f      	mov	r7, r3
{
 80024dc:	460d      	mov	r5, r1
  u8g2->font_decode.glyph_width = 0;
 80024de:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
{
 80024e2:	4604      	mov	r4, r0
  w = 0;
 80024e4:	463e      	mov	r6, r7
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80024e6:	f000 fa97 	bl	8002a18 <u8x8_utf8_init>
  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 80024ea:	f64f 78ff 	movw	r8, #65535	; 0xffff
      break;
    str++;
    if ( e != 0x0fffe )
 80024ee:	f64f 79fe 	movw	r9, #65534	; 0xfffe
 80024f2:	3d01      	subs	r5, #1
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80024fa:	4620      	mov	r0, r4
 80024fc:	4798      	blx	r3
    if ( e == 0x0ffff )
 80024fe:	4540      	cmp	r0, r8
 8002500:	d009      	beq.n	8002516 <u8g2_string_width+0x42>
    if ( e != 0x0fffe )
 8002502:	4548      	cmp	r0, r9
 8002504:	d0f6      	beq.n	80024f4 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002506:	4601      	mov	r1, r0
 8002508:	4620      	mov	r0, r4
 800250a:	f7ff ffc3 	bl	8002494 <u8g2_GetGlyphWidth>
 800250e:	b2c7      	uxtb	r7, r0
      w += dx;
 8002510:	443e      	add	r6, r7
 8002512:	b2f6      	uxtb	r6, r6
 8002514:	e7ee      	b.n	80024f4 <u8g2_string_width+0x20>
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8002516:	f994 205c 	ldrsb.w	r2, [r4, #92]	; 0x5c
 800251a:	b132      	cbz	r2, 800252a <u8g2_string_width+0x56>
 800251c:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8002520:	4413      	add	r3, r2
 8002522:	441e      	add	r6, r3
  {
    w -= dx;
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8002524:	1bf6      	subs	r6, r6, r7
 8002526:	f006 06ff 	and.w	r6, r6, #255	; 0xff
  }
  // printf("w=%d \n", w);
  
  return w;  
}
 800252a:	4630      	mov	r0, r6
 800252c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002530 <u8g2_SetFontMode>:
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8002530:	f880 105f 	strb.w	r1, [r0, #95]	; 0x5f
}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <u8g2_DrawStr>:
{
 8002538:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800253a:	4c02      	ldr	r4, [pc, #8]	; (8002544 <u8g2_DrawStr+0xc>)
 800253c:	6044      	str	r4, [r0, #4]
}
 800253e:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 8002540:	f7ff bf72 	b.w	8002428 <u8g2_draw_string>
 8002544:	08002971 	.word	0x08002971

08002548 <u8g2_DrawUTF8>:
{
 8002548:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800254a:	4c02      	ldr	r4, [pc, #8]	; (8002554 <u8g2_DrawUTF8+0xc>)
 800254c:	6044      	str	r4, [r0, #4]
}
 800254e:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 8002550:	f7ff bf6a 	b.w	8002428 <u8g2_draw_string>
 8002554:	08002981 	.word	0x08002981

08002558 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 8002558:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800255a:	b1e3      	cbz	r3, 8002596 <u8g2_UpdateRefHeight+0x3e>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800255c:	f990 2071 	ldrsb.w	r2, [r0, #113]	; 0x71
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002560:	f990 3072 	ldrsb.w	r3, [r0, #114]	; 0x72
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002564:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002568:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800256c:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002570:	b189      	cbz	r1, 8002596 <u8g2_UpdateRefHeight+0x3e>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002572:	2901      	cmp	r1, #1
 8002574:	d010      	beq.n	8002598 <u8g2_UpdateRefHeight+0x40>
{
 8002576:	b410      	push	{r4}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002578:	f990 106e 	ldrsb.w	r1, [r0, #110]	; 0x6e
 800257c:	f990 4070 	ldrsb.w	r4, [r0, #112]	; 0x70
 8002580:	4421      	add	r1, r4
 8002582:	428a      	cmp	r2, r1
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002584:	bfb8      	it	lt
 8002586:	f880 107d 	strblt.w	r1, [r0, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800258a:	42a3      	cmp	r3, r4
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800258c:	bfc8      	it	gt
 800258e:	f880 407e 	strbgt.w	r4, [r0, #126]	; 0x7e
}
 8002592:	bc10      	pop	{r4}
 8002594:	4770      	bx	lr
 8002596:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002598:	f990 1073 	ldrsb.w	r1, [r0, #115]	; 0x73
 800259c:	428a      	cmp	r2, r1
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800259e:	f990 2074 	ldrsb.w	r2, [r0, #116]	; 0x74
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80025a2:	bfb8      	it	lt
 80025a4:	f880 107d 	strblt.w	r1, [r0, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80025a8:	4293      	cmp	r3, r2
 80025aa:	ddf4      	ble.n	8002596 <u8g2_UpdateRefHeight+0x3e>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80025ac:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop

080025b4 <u8g2_SetFontPosBaseline>:
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80025b4:	4b01      	ldr	r3, [pc, #4]	; (80025bc <u8g2_SetFontPosBaseline+0x8>)
 80025b6:	6503      	str	r3, [r0, #80]	; 0x50
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	080020f9 	.word	0x080020f9

080025c0 <u8g2_SetFont>:
  if ( u8g2->font != font )
 80025c0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80025c2:	428a      	cmp	r2, r1
 80025c4:	d00a      	beq.n	80025dc <u8g2_SetFont+0x1c>
{
 80025c6:	b510      	push	{r4, lr}
 80025c8:	4604      	mov	r4, r0
    u8g2_read_font_info(&(u8g2->font_info), font);
 80025ca:	3064      	adds	r0, #100	; 0x64
    u8g2->font = font;
 80025cc:	64e1      	str	r1, [r4, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80025ce:	f7ff fd95 	bl	80020fc <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80025d2:	4620      	mov	r0, r4
}
 80025d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_UpdateRefHeight(u8g2);
 80025d8:	f7ff bfbe 	b.w	8002558 <u8g2_UpdateRefHeight>
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop

080025e0 <u8g2_GetStrWidth>:



u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80025e0:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <u8g2_GetStrWidth+0x8>)
 80025e2:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, s);
 80025e4:	f7ff bf76 	b.w	80024d4 <u8g2_string_width>
 80025e8:	08002971 	.word	0x08002971

080025ec <u8g2_GetUTF8Width>:
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80025ec:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <u8g2_GetUTF8Width+0x8>)
 80025ee:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, str);
 80025f0:	f7ff bf70 	b.w	80024d4 <u8g2_string_width>
 80025f4:	08002981 	.word	0x08002981

080025f8 <u8g2_SetFontDirection>:
void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
#endif
}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop

080025fc <u8g2_DrawHVLine.part.0>:
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
 80025fc:	b470      	push	{r4, r5, r6}
 80025fe:	f89d 400c 	ldrb.w	r4, [sp, #12]
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002602:	2b01      	cmp	r3, #1
 8002604:	f004 0501 	and.w	r5, r4, #1
 8002608:	d903      	bls.n	8002612 <u8g2_DrawHVLine.part.0+0x16>
      {
	if ( dir == 2 )
 800260a:	2c02      	cmp	r4, #2
 800260c:	d028      	beq.n	8002660 <u8g2_DrawHVLine.part.0+0x64>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
 800260e:	2c03      	cmp	r4, #3
 8002610:	d041      	beq.n	8002696 <u8g2_DrawHVLine.part.0+0x9a>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 8002612:	b345      	cbz	r5, 8002666 <u8g2_DrawHVLine.part.0+0x6a>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002614:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002618:	428c      	cmp	r4, r1
 800261a:	d83a      	bhi.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
	  return;
	if ( x >= u8g2->user_x1 )
 800261c:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
 8002620:	428c      	cmp	r4, r1
 8002622:	d936      	bls.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
  b += *len;
 8002624:	4413      	add	r3, r2
 8002626:	b2db      	uxtb	r3, r3
  if ( a > b )
 8002628:	4293      	cmp	r3, r2
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800262a:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
 800262e:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
  if ( a > b )
 8002632:	d239      	bcs.n	80026a8 <u8g2_DrawHVLine.part.0+0xac>
    if ( a < d )
 8002634:	4294      	cmp	r4, r2
 8002636:	d936      	bls.n	80026a6 <u8g2_DrawHVLine.part.0+0xaa>
      b--;
 8002638:	1e63      	subs	r3, r4, #1
 800263a:	b2db      	uxtb	r3, r3
  if ( b <= c )
 800263c:	429e      	cmp	r6, r3
 800263e:	d228      	bcs.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
 8002640:	42b2      	cmp	r2, r6
 8002642:	bf38      	it	cc
 8002644:	4632      	movcc	r2, r6
  b -= a;
 8002646:	429c      	cmp	r4, r3
 8002648:	bf94      	ite	ls
 800264a:	ebc2 0304 	rsbls	r3, r2, r4
 800264e:	ebc2 0303 	rsbhi	r3, r2, r3
 8002652:	b2db      	uxtb	r3, r3
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002654:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002656:	9503      	str	r5, [sp, #12]
 8002658:	68a4      	ldr	r4, [r4, #8]
 800265a:	46a4      	mov	ip, r4
    }
}
 800265c:	bc70      	pop	{r4, r5, r6}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800265e:	4760      	bx	ip
	  x++;
 8002660:	3101      	adds	r1, #1
 8002662:	1ac9      	subs	r1, r1, r3
 8002664:	b2c9      	uxtb	r1, r1
	if ( y < u8g2->user_y0 )
 8002666:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
 800266a:	4294      	cmp	r4, r2
 800266c:	d811      	bhi.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
	if ( y >= u8g2->user_y1 )
 800266e:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 8002672:	4294      	cmp	r4, r2
 8002674:	d90d      	bls.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
  b += *len;
 8002676:	440b      	add	r3, r1
 8002678:	b2db      	uxtb	r3, r3
  if ( a > b )
 800267a:	428b      	cmp	r3, r1
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800267c:	f890 6045 	ldrb.w	r6, [r0, #69]	; 0x45
 8002680:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
  if ( a > b )
 8002684:	d214      	bcs.n	80026b0 <u8g2_DrawHVLine.part.0+0xb4>
    if ( a < d )
 8002686:	428c      	cmp	r4, r1
 8002688:	d911      	bls.n	80026ae <u8g2_DrawHVLine.part.0+0xb2>
      b--;
 800268a:	1e63      	subs	r3, r4, #1
 800268c:	b2db      	uxtb	r3, r3
  if ( b <= c )
 800268e:	429e      	cmp	r6, r3
 8002690:	d311      	bcc.n	80026b6 <u8g2_DrawHVLine.part.0+0xba>
}
 8002692:	bc70      	pop	{r4, r5, r6}
 8002694:	4770      	bx	lr
	if ( x < u8g2->user_x0 )
 8002696:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
	  y++;
 800269a:	3201      	adds	r2, #1
 800269c:	1ad2      	subs	r2, r2, r3
	if ( x < u8g2->user_x0 )
 800269e:	428c      	cmp	r4, r1
	  y++;
 80026a0:	b2d2      	uxtb	r2, r2
	if ( x < u8g2->user_x0 )
 80026a2:	d9bb      	bls.n	800261c <u8g2_DrawHVLine.part.0+0x20>
 80026a4:	e7f5      	b.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80026a6:	4632      	mov	r2, r6
  if ( a >= d )
 80026a8:	4294      	cmp	r4, r2
 80026aa:	d9f2      	bls.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
 80026ac:	e7c6      	b.n	800263c <u8g2_DrawHVLine.part.0+0x40>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80026ae:	4631      	mov	r1, r6
  if ( a >= d )
 80026b0:	428c      	cmp	r4, r1
 80026b2:	d9ee      	bls.n	8002692 <u8g2_DrawHVLine.part.0+0x96>
 80026b4:	e7eb      	b.n	800268e <u8g2_DrawHVLine.part.0+0x92>
 80026b6:	42b1      	cmp	r1, r6
 80026b8:	bf38      	it	cc
 80026ba:	4631      	movcc	r1, r6
  b -= a;
 80026bc:	429c      	cmp	r4, r3
 80026be:	bf94      	ite	ls
 80026c0:	ebc1 0304 	rsbls	r3, r1, r4
 80026c4:	ebc1 0303 	rsbhi	r3, r1, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e7c3      	b.n	8002654 <u8g2_DrawHVLine.part.0+0x58>

080026cc <u8g2_draw_hv_line_2dir>:
{
 80026cc:	b470      	push	{r4, r5, r6}
  y -= u8g2->pixel_curr_row;
 80026ce:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
{
 80026d2:	f89d 600c 	ldrb.w	r6, [sp, #12]
  y -= u8g2->pixel_curr_row;
 80026d6:	1b12      	subs	r2, r2, r4
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80026d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80026da:	9603      	str	r6, [sp, #12]
 80026dc:	46a4      	mov	ip, r4
}
 80026de:	bc70      	pop	{r4, r5, r6}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4760      	bx	ip

080026e4 <u8g2_DrawHVLine>:
{
 80026e4:	b410      	push	{r4}
 80026e6:	f89d 4004 	ldrb.w	r4, [sp, #4]
    if ( len != 0 )
 80026ea:	b11b      	cbz	r3, 80026f4 <u8g2_DrawHVLine+0x10>
 80026ec:	9401      	str	r4, [sp, #4]
}
 80026ee:	bc10      	pop	{r4}
 80026f0:	f7ff bf84 	b.w	80025fc <u8g2_DrawHVLine.part.0>
 80026f4:	bc10      	pop	{r4}
 80026f6:	4770      	bx	lr

080026f8 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
 80026f8:	2902      	cmp	r1, #2
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80026fa:	bf8a      	itet	hi
 80026fc:	2301      	movhi	r3, #1
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80026fe:	f880 1081 	strbls.w	r1, [r0, #129]	; 0x81
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002702:	f880 3081 	strbhi.w	r3, [r0, #129]	; 0x81
}
 8002706:	4770      	bx	lr

08002708 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 800270a:	2401      	movs	r4, #1

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 800270c:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002710:	f002 0607 	and.w	r6, r2, #7
  mask <<= bit_pos;
 8002714:	40b4      	lsls	r4, r6
  if ( u8g2->draw_color <= 1 )
 8002716:	2d01      	cmp	r5, #1
  mask <<= bit_pos;
 8002718:	b2e4      	uxtb	r4, r4
{
 800271a:	f89d 7014 	ldrb.w	r7, [sp, #20]
  if ( u8g2->draw_color <= 1 )
 800271e:	d93b      	bls.n	8002798 <u8g2_ll_hvline_vertical_top_lsb+0x90>
  or_mask = 0;
 8002720:	2500      	movs	r5, #0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8002722:	f002 0cf8 	and.w	ip, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002726:	6802      	ldr	r2, [r0, #0]
 8002728:	f892 e010 	ldrb.w	lr, [r2, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 800272c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800272e:	fb0e 110c 	mla	r1, lr, ip, r1
 8002732:	4411      	add	r1, r2
  
  if ( dir == 0 )
 8002734:	b97f      	cbnz	r7, 8002756 <u8g2_ll_hvline_vertical_top_lsb+0x4e>
 8002736:	1e5a      	subs	r2, r3, #1
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	3201      	adds	r2, #1
 800273c:	440a      	add	r2, r1
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800273e:	780b      	ldrb	r3, [r1, #0]
 8002740:	432b      	orrs	r3, r5
	*ptr ^= xor_mask;
 8002742:	4063      	eors	r3, r4
 8002744:	f801 3b01 	strb.w	r3, [r1], #1
	ptr++;
	len--;
      } while( len != 0 );
 8002748:	4291      	cmp	r1, r2
 800274a:	d1f8      	bne.n	800273e <u8g2_ll_hvline_vertical_top_lsb+0x36>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	or_mask <<= 1;
 800274e:	b2fd      	uxtb	r5, r7
	xor_mask <<= 1;
 8002750:	b2d4      	uxtb	r4, r2
    } while( len != 0 );
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0fa      	beq.n	800274c <u8g2_ll_hvline_vertical_top_lsb+0x44>
      *ptr |= or_mask;
 8002756:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 8002758:	3601      	adds	r6, #1
      *ptr |= or_mask;
 800275a:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 800275c:	4062      	eors	r2, r4
      len--;
 800275e:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 8002760:	f016 0607 	ands.w	r6, r6, #7
      *ptr ^= xor_mask;
 8002764:	700a      	strb	r2, [r1, #0]
      len--;
 8002766:	b2db      	uxtb	r3, r3
	or_mask <<= 1;
 8002768:	ea4f 0745 	mov.w	r7, r5, lsl #1
	xor_mask <<= 1;
 800276c:	ea4f 0244 	mov.w	r2, r4, lsl #1
      if ( bit_pos == 0 )
 8002770:	d1ed      	bne.n	800274e <u8g2_ll_hvline_vertical_top_lsb+0x46>
	if ( u8g2->draw_color <= 1 )
 8002772:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002776:	f890 703e 	ldrb.w	r7, [r0, #62]	; 0x3e
	if ( u8g2->draw_color <= 1 )
 800277a:	2a01      	cmp	r2, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800277c:	4439      	add	r1, r7
	if ( u8g2->draw_color <= 1 )
 800277e:	d903      	bls.n	8002788 <u8g2_ll_hvline_vertical_top_lsb+0x80>
	  xor_mask = 1;
 8002780:	2401      	movs	r4, #1
    } while( len != 0 );
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e7      	bne.n	8002756 <u8g2_ll_hvline_vertical_top_lsb+0x4e>
 8002786:	e7e1      	b.n	800274c <u8g2_ll_hvline_vertical_top_lsb+0x44>
	  or_mask  = 1;
 8002788:	bf08      	it	eq
 800278a:	4615      	moveq	r5, r2
	if ( u8g2->draw_color != 1 )
 800278c:	d0e1      	beq.n	8002752 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
	  xor_mask = 1;
 800278e:	2401      	movs	r4, #1
	  or_mask  = 1;
 8002790:	4625      	mov	r5, r4
    } while( len != 0 );
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1df      	bne.n	8002756 <u8g2_ll_hvline_vertical_top_lsb+0x4e>
 8002796:	e7d9      	b.n	800274c <u8g2_ll_hvline_vertical_top_lsb+0x44>
    or_mask  = mask;
 8002798:	4625      	mov	r5, r4
  xor_mask = 0;
 800279a:	bf08      	it	eq
 800279c:	2400      	moveq	r4, #0
 800279e:	e7c0      	b.n	8002722 <u8g2_ll_hvline_vertical_top_lsb+0x1a>

080027a0 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a4:	4606      	mov	r6, r0
 80027a6:	b087      	sub	sp, #28
 80027a8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80027aa:	461d      	mov	r5, r3
 80027ac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80027b0:	468a      	mov	sl, r1
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 80027b2:	2100      	movs	r1, #0
{
 80027b4:	4614      	mov	r4, r2
 80027b6:	9705      	str	r7, [sp, #20]
 80027b8:	9303      	str	r3, [sp, #12]
 80027ba:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
  u8g2_SetFontDirection(u8g2, 0);
 80027be:	f7ff ff1b 	bl	80025f8 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 80027c2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80027c4:	4630      	mov	r0, r6
 80027c6:	4798      	blx	r3
 80027c8:	4404      	add	r4, r0

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 80027ca:	4639      	mov	r1, r7
  y += u8g2->font_calc_vref(u8g2);   
 80027cc:	b2e3      	uxtb	r3, r4
  str_width = u8g2_GetUTF8Width(u8g2, s);
 80027ce:	4630      	mov	r0, r6
  y += u8g2->font_calc_vref(u8g2);   
 80027d0:	9302      	str	r3, [sp, #8]
  str_width = u8g2_GetUTF8Width(u8g2, s);
 80027d2:	f7ff ff0b 	bl	80025ec <u8g2_GetUTF8Width>

  /* calculate delta d within the box */
  d = 0;
  if ( str_width < w )
 80027d6:	42a8      	cmp	r0, r5
  str_width = u8g2_GetUTF8Width(u8g2, s);
 80027d8:	4607      	mov	r7, r0
  if ( str_width < w )
 80027da:	d24f      	bcs.n	800287c <u8g2_DrawUTF8Line+0xdc>
  {
    d = w;
    d -=str_width;
 80027dc:	1a2f      	subs	r7, r5, r0
    d /= 2;
 80027de:	f3c7 0746 	ubfx	r7, r7, #1, #7
 80027e2:	4457      	add	r7, sl
 80027e4:	b2fb      	uxtb	r3, r7
 80027e6:	462f      	mov	r7, r5
 80027e8:	9304      	str	r3, [sp, #16]
    w = str_width;
  }

  /* caluclate text box */
  fx = x;
  fy = y - u8g2_GetAscent(u8g2) ;
 80027ea:	f896 807d 	ldrb.w	r8, [r6, #125]	; 0x7d
  fw = w;
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 80027ee:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
  fy = y - u8g2_GetAscent(u8g2) ;
 80027f2:	9a02      	ldr	r2, [sp, #8]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 80027f4:	2101      	movs	r1, #1
 80027f6:	4630      	mov	r0, r6
  fy = y - u8g2_GetAscent(u8g2) ;
 80027f8:	eba2 0b08 	sub.w	fp, r2, r8
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 80027fc:	eba8 0803 	sub.w	r8, r8, r3
  u8g2_SetDrawColor(u8g2, 1);
 8002800:	f7ff ff7a 	bl	80026f8 <u8g2_SetDrawColor>
  if ( is_invert )
 8002804:	9b03      	ldr	r3, [sp, #12]
  fy = y - u8g2_GetAscent(u8g2) ;
 8002806:	fa5f fb8b 	uxtb.w	fp, fp
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 800280a:	fa5f f888 	uxtb.w	r8, r8
  if ( is_invert )
 800280e:	2b00      	cmp	r3, #0
 8002810:	d137      	bne.n	8002882 <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
  }

  /* draw the frame */
  while( border_size > 0 )
 8002812:	f1b9 0f00 	cmp.w	r9, #0
 8002816:	d020      	beq.n	800285a <u8g2_DrawUTF8Line+0xba>
 8002818:	463d      	mov	r5, r7
 800281a:	4654      	mov	r4, sl
 800281c:	ebaa 0909 	sub.w	r9, sl, r9
 8002820:	fa5f f989 	uxtb.w	r9, r9
  {
    fx--;
    fy--;
    fw +=2;
 8002824:	3502      	adds	r5, #2
 8002826:	b2ed      	uxtb	r5, r5
    fx--;
 8002828:	3c01      	subs	r4, #1
 800282a:	b2e4      	uxtb	r4, r4
    fh +=2;
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 800282c:	eb08 0305 	add.w	r3, r8, r5
 8002830:	1bdb      	subs	r3, r3, r7
 8002832:	eba4 020a 	sub.w	r2, r4, sl
 8002836:	b2db      	uxtb	r3, r3
 8002838:	445a      	add	r2, fp
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	462b      	mov	r3, r5
 8002840:	4621      	mov	r1, r4
 8002842:	4630      	mov	r0, r6
 8002844:	f7ff fb16 	bl	8001e74 <u8g2_DrawFrame>
  while( border_size > 0 )
 8002848:	454c      	cmp	r4, r9
 800284a:	d1eb      	bne.n	8002824 <u8g2_DrawUTF8Line+0x84>
    border_size--;
  }

  if ( is_invert )
 800284c:	9b03      	ldr	r3, [sp, #12]
 800284e:	b123      	cbz	r3, 800285a <u8g2_DrawUTF8Line+0xba>
  {
    u8g2_SetDrawColor(u8g2, 0);
 8002850:	2100      	movs	r1, #0
 8002852:	4630      	mov	r0, r6
 8002854:	f7ff ff50 	bl	80026f8 <u8g2_SetDrawColor>
 8002858:	e003      	b.n	8002862 <u8g2_DrawUTF8Line+0xc2>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 800285a:	2101      	movs	r1, #1
 800285c:	4630      	mov	r0, r6
 800285e:	f7ff ff4b 	bl	80026f8 <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 8002862:	9904      	ldr	r1, [sp, #16]
 8002864:	9b05      	ldr	r3, [sp, #20]
 8002866:	9a02      	ldr	r2, [sp, #8]
 8002868:	4630      	mov	r0, r6
 800286a:	f7ff fe6d 	bl	8002548 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 800286e:	4630      	mov	r0, r6
 8002870:	2101      	movs	r1, #1

}
 8002872:	b007      	add	sp, #28
 8002874:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8g2_SetDrawColor(u8g2, 1);
 8002878:	f7ff bf3e 	b.w	80026f8 <u8g2_SetDrawColor>
 800287c:	f8cd a010 	str.w	sl, [sp, #16]
 8002880:	e7b3      	b.n	80027ea <u8g2_DrawUTF8Line+0x4a>
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8002882:	f8cd 8000 	str.w	r8, [sp]
 8002886:	463b      	mov	r3, r7
 8002888:	465a      	mov	r2, fp
 800288a:	4651      	mov	r1, sl
 800288c:	4630      	mov	r0, r6
 800288e:	f7ff fad3 	bl	8001e38 <u8g2_DrawBox>
  while( border_size > 0 )
 8002892:	f1b9 0f00 	cmp.w	r9, #0
 8002896:	d1bf      	bne.n	8002818 <u8g2_DrawUTF8Line+0x78>
 8002898:	e7da      	b.n	8002850 <u8g2_DrawUTF8Line+0xb0>
 800289a:	bf00      	nop

0800289c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800289c:	b470      	push	{r4, r5, r6}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800289e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80028a2:	6804      	ldr	r4, [r0, #0]
  t *= 8;
 80028a4:	00eb      	lsls	r3, r5, #3
 80028a6:	b2db      	uxtb	r3, r3
  u8g2->pixel_buf_height = t;
 80028a8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
  
  t = display_info->tile_width;
 80028ac:	7c21      	ldrb	r1, [r4, #16]
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
 80028ae:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 80028b2:	291f      	cmp	r1, #31
 80028b4:	bf28      	it	cs
 80028b6:	211f      	movcs	r1, #31
  t *= 8;
 80028b8:	00f2      	lsls	r2, r6, #3
  t *= 8;
 80028ba:	00c9      	lsls	r1, r1, #3
  t *= 8;
 80028bc:	b2d2      	uxtb	r2, r2
  u8g2->pixel_buf_width = t;
 80028be:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  u8g2->pixel_curr_row = t;
 80028c2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80028c6:	7c61      	ldrb	r1, [r4, #17]
 80028c8:	4435      	add	r5, r6
 80028ca:	428d      	cmp	r5, r1
 80028cc:	dd02      	ble.n	80028d4 <u8g2_update_dimension_common+0x38>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80028ce:	1b8b      	subs	r3, r1, r6
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	b2db      	uxtb	r3, r3
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80028d4:	21f0      	movs	r1, #240	; 0xf0
  u8g2->buf_y1 += t;
 80028d6:	4413      	add	r3, r2
  u8g2->width = 240;
 80028d8:	f880 1043 	strb.w	r1, [r0, #67]	; 0x43
  u8g2->buf_y1 += t;
 80028dc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80028e0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  if ( display_info->pixel_width <= 240 )
 80028e4:	8aa3      	ldrh	r3, [r4, #20]
 80028e6:	428b      	cmp	r3, r1
    u8g2->width = display_info->pixel_width;
 80028e8:	bf98      	it	ls
 80028ea:	f880 3043 	strbls.w	r3, [r0, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 80028ee:	8ae3      	ldrh	r3, [r4, #22]
#endif

}
 80028f0:	bc70      	pop	{r4, r5, r6}
  u8g2->height = display_info->pixel_height;
 80028f2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
}
 80028f6:	4770      	bx	lr

080028f8 <u8g2_update_dimension_r0>:
/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);  
 80028f8:	f7ff bfd0 	b.w	800289c <u8g2_update_dimension_common>

080028fc <u8g2_update_page_win_r0>:
}

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80028fc:	b410      	push	{r4}
  u8g2->user_x0 = 0;
 80028fe:	2400      	movs	r4, #0
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002900:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002904:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  u8g2->user_y1 = u8g2->buf_y1;
 8002908:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  u8g2->user_x0 = 0;
 800290c:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002910:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
  u8g2->user_y0 = u8g2->buf_y0;
 8002914:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002918:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800291c:	bc10      	pop	{r4}
 800291e:	4770      	bx	lr

08002920 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002920:	b410      	push	{r4}
 8002922:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002926:	9401      	str	r4, [sp, #4]
}
 8002928:	bc10      	pop	{r4}
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800292a:	f7ff becf 	b.w	80026cc <u8g2_draw_hv_line_2dir>
 800292e:	bf00      	nop

08002930 <u8g2_SetupBuffer>:
{
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u8g2->font = NULL;
 8002932:	2500      	movs	r5, #0
  u8g2->bitmap_transparency = 0;
 8002934:	f44f 7780 	mov.w	r7, #256	; 0x100
  u8g2->draw_color = 1;
 8002938:	2601      	movs	r6, #1
{
 800293a:	4604      	mov	r4, r0
  u8g2->tile_buf_height = tile_buf_height;
 800293c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
{
 8002940:	9a06      	ldr	r2, [sp, #24]
  u8g2->bitmap_transparency = 0;
 8002942:	f8a0 7080 	strh.w	r7, [r0, #128]	; 0x80
  u8g2->draw_color = 1;
 8002946:	f880 6082 	strb.w	r6, [r0, #130]	; 0x82
  u8g2->tile_curr_row = 0;
 800294a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800294e:	f880 505f 	strb.w	r5, [r0, #95]	; 0x5f
  u8g2->ll_hvline = ll_hvline_cb;
 8002952:	6303      	str	r3, [r0, #48]	; 0x30
  u8g2->tile_buf_ptr = buf;
 8002954:	6381      	str	r1, [r0, #56]	; 0x38
  u8g2->font = NULL;
 8002956:	64c5      	str	r5, [r0, #76]	; 0x4c
  u8g2->cb = u8g2_cb;
 8002958:	6342      	str	r2, [r0, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800295a:	6813      	ldr	r3, [r2, #0]
 800295c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800295e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002960:	4620      	mov	r0, r4
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4798      	blx	r3
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002966:	4620      	mov	r0, r4
}
 8002968:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800296c:	f7ff be22 	b.w	80025b4 <u8g2_SetFontPosBaseline>

08002970 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002970:	b119      	cbz	r1, 800297a <u8x8_ascii_next+0xa>
 8002972:	290a      	cmp	r1, #10
 8002974:	d001      	beq.n	800297a <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8002976:	b288      	uxth	r0, r1
 8002978:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 800297a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800297e:	4770      	bx	lr

08002980 <u8x8_utf8_next>:
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002980:	b321      	cbz	r1, 80029cc <u8x8_utf8_next+0x4c>
 8002982:	290a      	cmp	r1, #10
 8002984:	d022      	beq.n	80029cc <u8x8_utf8_next+0x4c>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
  if ( u8x8->utf8_state == 0 )
 8002986:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800298a:	b95b      	cbnz	r3, 80029a4 <u8x8_utf8_next+0x24>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800298c:	29fb      	cmp	r1, #251	; 0xfb
 800298e:	d821      	bhi.n	80029d4 <u8x8_utf8_next+0x54>
    {
      u8x8->utf8_state = 5;
      b &= 1;
    }
    else if ( b >= 0xf8 )
 8002990:	29f7      	cmp	r1, #247	; 0xf7
 8002992:	d829      	bhi.n	80029e8 <u8x8_utf8_next+0x68>
    {
      u8x8->utf8_state = 4;
      b &= 3;
    }
    else if ( b >= 0xf0 )
 8002994:	29ef      	cmp	r1, #239	; 0xef
 8002996:	d833      	bhi.n	8002a00 <u8x8_utf8_next+0x80>
    {
      u8x8->utf8_state = 3;
      b &= 7;      
    }
    else if ( b >= 0xe0 )
 8002998:	29df      	cmp	r1, #223	; 0xdf
 800299a:	d837      	bhi.n	8002a0c <u8x8_utf8_next+0x8c>
    {
      u8x8->utf8_state = 2;
      b &= 15;
    }
    else if ( b >= 0xc0 )
 800299c:	29bf      	cmp	r1, #191	; 0xbf
 800299e:	d829      	bhi.n	80029f4 <u8x8_utf8_next+0x74>
      b &= 0x01f;
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80029a0:	b289      	uxth	r1, r1
 80029a2:	e015      	b.n	80029d0 <u8x8_utf8_next+0x50>
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
    b &= 0x03f;
    u8x8->encoding |= b;
    if ( u8x8->utf8_state != 0 )
      return 0x0fffe;	/* nothing to do yet */
 80029a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
{
 80029a8:	b410      	push	{r4}
    u8x8->encoding<<=6;
 80029aa:	8c04      	ldrh	r4, [r0, #32]
    u8x8->encoding |= b;
 80029ac:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029b0:	ea41 1184 	orr.w	r1, r1, r4, lsl #6
    u8x8->utf8_state--;
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b2db      	uxtb	r3, r3
    u8x8->encoding |= b;
 80029b8:	b289      	uxth	r1, r1
 80029ba:	8401      	strh	r1, [r0, #32]
      return 0x0fffe;	/* nothing to do yet */
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf18      	it	ne
 80029c0:	4611      	movne	r1, r2
    u8x8->utf8_state--;
 80029c2:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
  }
  return u8x8->encoding;
}
 80029c6:	bc10      	pop	{r4}
 80029c8:	4608      	mov	r0, r1
 80029ca:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80029cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
}
 80029d0:	4608      	mov	r0, r1
 80029d2:	4770      	bx	lr
      u8x8->utf8_state = 5;
 80029d4:	2305      	movs	r3, #5
      b &= 1;
 80029d6:	f001 0101 	and.w	r1, r1, #1
      u8x8->utf8_state = 5;
 80029da:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    u8x8->encoding = b;
 80029de:	8401      	strh	r1, [r0, #32]
    return 0x0fffe;
 80029e0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
}
 80029e4:	4608      	mov	r0, r1
 80029e6:	4770      	bx	lr
      u8x8->utf8_state = 4;
 80029e8:	2304      	movs	r3, #4
      b &= 3;
 80029ea:	f001 0103 	and.w	r1, r1, #3
      u8x8->utf8_state = 4;
 80029ee:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 80029f2:	e7f4      	b.n	80029de <u8x8_utf8_next+0x5e>
      u8x8->utf8_state = 1;
 80029f4:	2301      	movs	r3, #1
      b &= 0x01f;
 80029f6:	f001 011f 	and.w	r1, r1, #31
      u8x8->utf8_state = 1;
 80029fa:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 80029fe:	e7ee      	b.n	80029de <u8x8_utf8_next+0x5e>
      u8x8->utf8_state = 3;
 8002a00:	2303      	movs	r3, #3
      b &= 7;      
 8002a02:	f001 0107 	and.w	r1, r1, #7
      u8x8->utf8_state = 3;
 8002a06:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 8002a0a:	e7e8      	b.n	80029de <u8x8_utf8_next+0x5e>
      u8x8->utf8_state = 2;
 8002a0c:	2302      	movs	r3, #2
      b &= 15;
 8002a0e:	f001 010f 	and.w	r1, r1, #15
      u8x8->utf8_state = 2;
 8002a12:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 8002a16:	e7e2      	b.n	80029de <u8x8_utf8_next+0x5e>

08002a18 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 8002a1e:	4770      	bx	lr

08002a20 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002a20:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002a22:	6904      	ldr	r4, [r0, #16]
 8002a24:	4613      	mov	r3, r2
 8002a26:	46a4      	mov	ip, r4
 8002a28:	460a      	mov	r2, r1
}
 8002a2a:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002a2c:	2117      	movs	r1, #23
 8002a2e:	4760      	bx	ip

08002a30 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002a30:	b500      	push	{lr}
 8002a32:	b083      	sub	sp, #12
 8002a34:	aa02      	add	r2, sp, #8
 8002a36:	f802 1d01 	strb.w	r1, [r2, #-1]!
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	f7ff fff0 	bl	8002a20 <u8x8_byte_SendBytes>
}
 8002a40:	b003      	add	sp, #12
 8002a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a46:	bf00      	nop

08002a48 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002a48:	2300      	movs	r3, #0
{
 8002a4a:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002a4c:	6904      	ldr	r4, [r0, #16]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	46a4      	mov	ip, r4
 8002a52:	2118      	movs	r1, #24
}
 8002a54:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002a56:	4760      	bx	ip

08002a58 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002a58:	2300      	movs	r3, #0
{
 8002a5a:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002a5c:	6904      	ldr	r4, [r0, #16]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	46a4      	mov	ip, r4
 8002a62:	2119      	movs	r1, #25
}
 8002a64:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002a66:	4760      	bx	ip

08002a68 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4616      	mov	r6, r2
 8002a6e:	460d      	mov	r5, r1
    u8x8_byte_StartTransfer(u8x8);    
 8002a70:	f7ff ffea 	bl	8002a48 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002a74:	4620      	mov	r0, r4
 8002a76:	2140      	movs	r1, #64	; 0x40
 8002a78:	f7ff ffda 	bl	8002a30 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002a7c:	4633      	mov	r3, r6
 8002a7e:	462a      	mov	r2, r5
 8002a80:	4620      	mov	r0, r4
 8002a82:	6925      	ldr	r5, [r4, #16]
 8002a84:	2117      	movs	r1, #23
 8002a86:	47a8      	blx	r5
    u8x8_byte_EndTransfer(u8x8);
 8002a88:	4620      	mov	r0, r4
}
 8002a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    u8x8_byte_EndTransfer(u8x8);
 8002a8e:	f7ff bfe3 	b.w	8002a58 <u8x8_byte_EndTransfer>
 8002a92:	bf00      	nop

08002a94 <u8x8_cad_SendCmd>:
{
 8002a94:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002a96:	68c4      	ldr	r4, [r0, #12]
 8002a98:	460a      	mov	r2, r1
 8002a9a:	46a4      	mov	ip, r4
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2115      	movs	r1, #21
}
 8002aa0:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002aa2:	4760      	bx	ip

08002aa4 <u8x8_cad_SendArg>:
{
 8002aa4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002aa6:	68c4      	ldr	r4, [r0, #12]
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	46a4      	mov	ip, r4
 8002aac:	2300      	movs	r3, #0
 8002aae:	2116      	movs	r1, #22
}
 8002ab0:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002ab2:	4760      	bx	ip

08002ab4 <u8x8_cad_SendData>:
{
 8002ab4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002ab6:	68c4      	ldr	r4, [r0, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	46a4      	mov	ip, r4
 8002abc:	460a      	mov	r2, r1
}
 8002abe:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002ac0:	2117      	movs	r1, #23
 8002ac2:	4760      	bx	ip

08002ac4 <u8x8_cad_StartTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ac4:	2300      	movs	r3, #0
{
 8002ac6:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ac8:	68c4      	ldr	r4, [r0, #12]
 8002aca:	461a      	mov	r2, r3
 8002acc:	46a4      	mov	ip, r4
 8002ace:	2118      	movs	r1, #24
}
 8002ad0:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ad2:	4760      	bx	ip

08002ad4 <u8x8_cad_EndTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002ad4:	2300      	movs	r3, #0
{
 8002ad6:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002ad8:	68c4      	ldr	r4, [r0, #12]
 8002ada:	461a      	mov	r2, r3
 8002adc:	46a4      	mov	ip, r4
 8002ade:	2119      	movs	r1, #25
}
 8002ae0:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002ae2:	4760      	bx	ip

08002ae4 <u8x8_cad_SendSequence>:
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	4605      	mov	r5, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	b082      	sub	sp, #8
    cmd = *data;
 8002aec:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 8002aee:	2917      	cmp	r1, #23
 8002af0:	d010      	beq.n	8002b14 <u8x8_cad_SendSequence+0x30>
 8002af2:	d91a      	bls.n	8002b2a <u8x8_cad_SendSequence+0x46>
 8002af4:	2919      	cmp	r1, #25
 8002af6:	d925      	bls.n	8002b44 <u8x8_cad_SendSequence+0x60>
 8002af8:	29fe      	cmp	r1, #254	; 0xfe
 8002afa:	d121      	bne.n	8002b40 <u8x8_cad_SendSequence+0x5c>
	  v = *data;
 8002afc:	7863      	ldrb	r3, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002afe:	2129      	movs	r1, #41	; 0x29
 8002b00:	461a      	mov	r2, r3
 8002b02:	4628      	mov	r0, r5
	  data++;
 8002b04:	3402      	adds	r4, #2
	  v = *data;
 8002b06:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002b0a:	f000 f985 	bl	8002e18 <u8x8_gpio_call>
    cmd = *data;
 8002b0e:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 8002b10:	2917      	cmp	r1, #23
 8002b12:	d1ee      	bne.n	8002af2 <u8x8_cad_SendSequence+0xe>
	  v = *data;
 8002b14:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002b16:	f10d 0207 	add.w	r2, sp, #7
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4628      	mov	r0, r5
	  v = *data;
 8002b1e:	f88d 3007 	strb.w	r3, [sp, #7]
	  data++;
 8002b22:	3402      	adds	r4, #2
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002b24:	f7ff ffc6 	bl	8002ab4 <u8x8_cad_SendData>
	  break;
 8002b28:	e7e0      	b.n	8002aec <u8x8_cad_SendSequence+0x8>
    switch( cmd )
 8002b2a:	2915      	cmp	r1, #21
 8002b2c:	d308      	bcc.n	8002b40 <u8x8_cad_SendSequence+0x5c>
	  v = *data;
 8002b2e:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002b30:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8002b32:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002b36:	2300      	movs	r3, #0
 8002b38:	4628      	mov	r0, r5
	  data++;
 8002b3a:	3402      	adds	r4, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002b3c:	47b0      	blx	r6
	  break;
 8002b3e:	e7d5      	b.n	8002aec <u8x8_cad_SendSequence+0x8>
}
 8002b40:	b002      	add	sp, #8
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002b44:	2300      	movs	r3, #0
 8002b46:	68ee      	ldr	r6, [r5, #12]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4628      	mov	r0, r5
    data++;
 8002b4c:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002b4e:	47b0      	blx	r6
	  break;
 8002b50:	e7cc      	b.n	8002aec <u8x8_cad_SendSequence+0x8>
 8002b52:	bf00      	nop

08002b54 <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002b54:	3914      	subs	r1, #20
{
 8002b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	461d      	mov	r5, r3
  switch(msg)
 8002b60:	2905      	cmp	r1, #5
 8002b62:	d858      	bhi.n	8002c16 <u8x8_cad_ssd13xx_fast_i2c+0xc2>
 8002b64:	e8df f001 	tbb	[pc, r1]
 8002b68:	342e1a0c 	.word	0x342e1a0c
 8002b6c:	034b      	.short	0x034b
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002b6e:	4f2b      	ldr	r7, [pc, #172]	; (8002c1c <u8x8_cad_ssd13xx_fast_i2c+0xc8>)
 8002b70:	783b      	ldrb	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d149      	bne.n	8002c0a <u8x8_cad_ssd13xx_fast_i2c+0xb6>
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
 8002b76:	2300      	movs	r3, #0
      break;
    default:
      return 0;
  }
  return 1;
 8002b78:	2001      	movs	r0, #1
      in_transfer = 0;
 8002b7a:	703b      	strb	r3, [r7, #0]
}
 8002b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( u8x8->i2c_address == 255 )
 8002b80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002b84:	6904      	ldr	r4, [r0, #16]
      if ( u8x8->i2c_address == 255 )
 8002b86:	2bff      	cmp	r3, #255	; 0xff
	u8x8->i2c_address = 0x078;
 8002b88:	bf04      	itt	eq
 8002b8a:	2378      	moveq	r3, #120	; 0x78
 8002b8c:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002b90:	46a4      	mov	ip, r4
 8002b92:	462b      	mov	r3, r5
}
 8002b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002b98:	2114      	movs	r1, #20
 8002b9a:	4760      	bx	ip
      if ( in_transfer != 0 )
 8002b9c:	4f1f      	ldr	r7, [pc, #124]	; (8002c1c <u8x8_cad_ssd13xx_fast_i2c+0xc8>)
 8002b9e:	783b      	ldrb	r3, [r7, #0]
 8002ba0:	b10b      	cbz	r3, 8002ba6 <u8x8_cad_ssd13xx_fast_i2c+0x52>
	 u8x8_byte_EndTransfer(u8x8); 
 8002ba2:	f7ff ff59 	bl	8002a58 <u8x8_byte_EndTransfer>
      u8x8_byte_StartTransfer(u8x8);
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	f7ff ff4e 	bl	8002a48 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002bac:	2100      	movs	r1, #0
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f7ff ff3e 	bl	8002a30 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	f7ff ff3a 	bl	8002a30 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	7038      	strb	r0, [r7, #0]
}
 8002bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SendByte(u8x8, arg_int);
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	f7ff ff33 	bl	8002a30 <u8x8_byte_SendByte>
  return 1;
 8002bca:	2001      	movs	r0, #1
}
 8002bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( in_transfer != 0 )
 8002bd0:	4f12      	ldr	r7, [pc, #72]	; (8002c1c <u8x8_cad_ssd13xx_fast_i2c+0xc8>)
 8002bd2:	783b      	ldrb	r3, [r7, #0]
 8002bd4:	b13b      	cbz	r3, 8002be6 <u8x8_cad_ssd13xx_fast_i2c+0x92>
 8002bd6:	e01b      	b.n	8002c10 <u8x8_cad_ssd13xx_fast_i2c+0xbc>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002bd8:	2118      	movs	r1, #24
 8002bda:	4630      	mov	r0, r6
 8002bdc:	f7ff ff44 	bl	8002a68 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002be0:	3c18      	subs	r4, #24
 8002be2:	b2e4      	uxtb	r4, r4
	p+=24;
 8002be4:	3518      	adds	r5, #24
       while( arg_int > 24 )
 8002be6:	2c18      	cmp	r4, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002be8:	462a      	mov	r2, r5
       while( arg_int > 24 )
 8002bea:	d8f5      	bhi.n	8002bd8 <u8x8_cad_ssd13xx_fast_i2c+0x84>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002bec:	4630      	mov	r0, r6
 8002bee:	4621      	mov	r1, r4
 8002bf0:	f7ff ff3a 	bl	8002a68 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	703b      	strb	r3, [r7, #0]
  return 1;
 8002bf8:	2001      	movs	r0, #1
}
 8002bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      in_transfer = 0;
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <u8x8_cad_ssd13xx_fast_i2c+0xc8>)
  return 1;
 8002c02:	2001      	movs	r0, #1
      in_transfer = 0;
 8002c04:	701a      	strb	r2, [r3, #0]
}
 8002c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	u8x8_byte_EndTransfer(u8x8); 
 8002c0a:	f7ff ff25 	bl	8002a58 <u8x8_byte_EndTransfer>
 8002c0e:	e7b2      	b.n	8002b76 <u8x8_cad_ssd13xx_fast_i2c+0x22>
	u8x8_byte_EndTransfer(u8x8); 
 8002c10:	f7ff ff22 	bl	8002a58 <u8x8_byte_EndTransfer>
 8002c14:	e7e7      	b.n	8002be6 <u8x8_cad_ssd13xx_fast_i2c+0x92>
      return 0;
 8002c16:	2000      	movs	r0, #0
 8002c18:	e7b0      	b.n	8002b7c <u8x8_cad_ssd13xx_fast_i2c+0x28>
 8002c1a:	bf00      	nop
 8002c1c:	20000640 	.word	0x20000640

08002c20 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002c20:	390b      	subs	r1, #11
{
 8002c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c24:	4606      	mov	r6, r0
 8002c26:	4614      	mov	r4, r2
 8002c28:	461d      	mov	r5, r3
  switch(msg)
 8002c2a:	2904      	cmp	r1, #4
 8002c2c:	d852      	bhi.n	8002cd4 <u8x8_d_ssd1306_sh1106_generic+0xb4>
 8002c2e:	e8df f001 	tbb	[pc, r1]
 8002c32:	5141      	.short	0x5141
 8002c34:	3247      	.short	0x3247
 8002c36:	03          	.byte	0x03
 8002c37:	00          	.byte	0x00
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002c38:	f7ff ff44 	bl	8002ac4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002c3c:	796b      	ldrb	r3, [r5, #5]
      x *= 8;
      x += u8x8->x_offset;
 8002c3e:	f896 7022 	ldrb.w	r7, [r6, #34]	; 0x22
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002c42:	2140      	movs	r1, #64	; 0x40
      x += u8x8->x_offset;
 8002c44:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8002c48:	f007 07ff 	and.w	r7, r7, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	f7ff ff21 	bl	8002a94 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002c52:	0939      	lsrs	r1, r7, #4
 8002c54:	f041 0110 	orr.w	r1, r1, #16
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f7ff ff1b 	bl	8002a94 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8002c5e:	f007 010f 	and.w	r1, r7, #15
 8002c62:	4630      	mov	r0, r6
 8002c64:	f7ff ff1e 	bl	8002aa4 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002c68:	79a9      	ldrb	r1, [r5, #6]
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8002c70:	f7ff ff18 	bl	8002aa4 <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002c74:	7929      	ldrb	r1, [r5, #4]
 8002c76:	682a      	ldr	r2, [r5, #0]
 8002c78:	00c9      	lsls	r1, r1, #3
 8002c7a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8002c7e:	4630      	mov	r0, r6
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002c80:	3c01      	subs	r4, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002c82:	f7ff ff17 	bl	8002ab4 <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8002c86:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002c8a:	d1f3      	bne.n	8002c74 <u8x8_d_ssd1306_sh1106_generic+0x54>
      
      u8x8_cad_EndTransfer(u8x8);
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7ff ff21 	bl	8002ad4 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
 8002c92:	2001      	movs	r0, #1
}
 8002c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_cad_StartTransfer(u8x8);
 8002c96:	f7ff ff15 	bl	8002ac4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002c9a:	2181      	movs	r1, #129	; 0x81
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f7ff fef9 	bl	8002a94 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f7ff fefd 	bl	8002aa4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002caa:	4630      	mov	r0, r6
 8002cac:	f7ff ff12 	bl	8002ad4 <u8x8_cad_EndTransfer>
  return 1;
 8002cb0:	2001      	movs	r0, #1
}
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 8002cb4:	b9ca      	cbnz	r2, 8002cea <u8x8_d_ssd1306_sh1106_generic+0xca>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002cb6:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <u8x8_d_ssd1306_sh1106_generic+0xd4>)
 8002cb8:	f7ff ff14 	bl	8002ae4 <u8x8_cad_SendSequence>
  return 1;
 8002cbc:	2001      	movs	r0, #1
}
 8002cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 8002cc0:	b952      	cbnz	r2, 8002cd8 <u8x8_d_ssd1306_sh1106_generic+0xb8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002cc2:	490d      	ldr	r1, [pc, #52]	; (8002cf8 <u8x8_d_ssd1306_sh1106_generic+0xd8>)
 8002cc4:	f7ff ff0e 	bl	8002ae4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002cc8:	6833      	ldr	r3, [r6, #0]
  return 1;
 8002cca:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002ccc:	7c9b      	ldrb	r3, [r3, #18]
 8002cce:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
}
 8002cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return 0;
 8002cd4:	2000      	movs	r0, #0
}
 8002cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002cd8:	4908      	ldr	r1, [pc, #32]	; (8002cfc <u8x8_d_ssd1306_sh1106_generic+0xdc>)
 8002cda:	f7ff ff03 	bl	8002ae4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002cde:	6833      	ldr	r3, [r6, #0]
  return 1;
 8002ce0:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002ce2:	7cdb      	ldrb	r3, [r3, #19]
 8002ce4:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
}
 8002ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002cea:	4905      	ldr	r1, [pc, #20]	; (8002d00 <u8x8_d_ssd1306_sh1106_generic+0xe0>)
 8002cec:	f7ff fefa 	bl	8002ae4 <u8x8_cad_SendSequence>
  return 1;
 8002cf0:	2001      	movs	r0, #1
}
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf4:	08008f28 	.word	0x08008f28
 8002cf8:	08008ee0 	.word	0x08008ee0
 8002cfc:	08008ee8 	.word	0x08008ee8
 8002d00:	08008f30 	.word	0x08008f30

08002d04 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4605      	mov	r5, r0
 8002d08:	460c      	mov	r4, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002d0a:	f7ff ff89 	bl	8002c20 <u8x8_d_ssd1306_sh1106_generic>
 8002d0e:	b960      	cbnz	r0, 8002d2a <u8x8_d_ssd1306_128x64_noname+0x26>
    return 1;
  
  switch(msg)
 8002d10:	2c09      	cmp	r4, #9
 8002d12:	d00c      	beq.n	8002d2e <u8x8_d_ssd1306_128x64_noname+0x2a>
 8002d14:	2c0a      	cmp	r4, #10
 8002d16:	d107      	bne.n	8002d28 <u8x8_d_ssd1306_128x64_noname+0x24>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f000 f819 	bl	8002d50 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002d1e:	4628      	mov	r0, r5
 8002d20:	4906      	ldr	r1, [pc, #24]	; (8002d3c <u8x8_d_ssd1306_128x64_noname+0x38>)
 8002d22:	f7ff fedf 	bl	8002ae4 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002d26:	2001      	movs	r0, #1
}
 8002d28:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 8002d2a:	2001      	movs	r0, #1
}
 8002d2c:	bd38      	pop	{r3, r4, r5, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002d2e:	4628      	mov	r0, r5
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <u8x8_d_ssd1306_128x64_noname+0x3c>)
 8002d32:	f000 f807 	bl	8002d44 <u8x8_d_helper_display_setup_memory>
  return 1;
 8002d36:	2001      	movs	r0, #1
}
 8002d38:	bd38      	pop	{r3, r4, r5, pc}
 8002d3a:	bf00      	nop
 8002d3c:	08008ef0 	.word	0x08008ef0
 8002d40:	08008f38 	.word	0x08008f38

08002d44 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002d44:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002d46:	7c8b      	ldrb	r3, [r1, #18]
 8002d48:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop

08002d50 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002d50:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002d52:	2300      	movs	r3, #0
 8002d54:	6945      	ldr	r5, [r0, #20]
 8002d56:	461a      	mov	r2, r3
 8002d58:	2128      	movs	r1, #40	; 0x28
{
 8002d5a:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 8002d5c:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	68e5      	ldr	r5, [r4, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4620      	mov	r0, r4
 8002d66:	2114      	movs	r1, #20
 8002d68:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	214b      	movs	r1, #75	; 0x4b
 8002d70:	f000 f852 	bl	8002e18 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	4620      	mov	r0, r4
 8002d78:	791a      	ldrb	r2, [r3, #4]
 8002d7a:	2129      	movs	r1, #41	; 0x29
 8002d7c:	f000 f84c 	bl	8002e18 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002d80:	4620      	mov	r0, r4
 8002d82:	2200      	movs	r2, #0
 8002d84:	214b      	movs	r1, #75	; 0x4b
 8002d86:	f000 f847 	bl	8002e18 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	791a      	ldrb	r2, [r3, #4]
 8002d90:	2129      	movs	r1, #41	; 0x29
 8002d92:	f000 f841 	bl	8002e18 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002d96:	4620      	mov	r0, r4
 8002d98:	2201      	movs	r2, #1
 8002d9a:	214b      	movs	r1, #75	; 0x4b
 8002d9c:	f000 f83c 	bl	8002e18 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	4620      	mov	r0, r4
 8002da4:	795a      	ldrb	r2, [r3, #5]
 8002da6:	2129      	movs	r1, #41	; 0x29
}    
 8002da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002dac:	f000 b834 	b.w	8002e18 <u8x8_gpio_call>

08002db0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002db0:	b530      	push	{r4, r5, lr}
 8002db2:	b083      	sub	sp, #12
 8002db4:	9d06      	ldr	r5, [sp, #24]
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
 8002db6:	ac02      	add	r4, sp, #8
 8002db8:	f844 5d08 	str.w	r5, [r4, #-8]!
  tile.x_pos = x;
 8002dbc:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 8002dc0:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
 8002dc4:	f88d 3004 	strb.w	r3, [sp, #4]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002dc8:	6885      	ldr	r5, [r0, #8]
 8002dca:	4623      	mov	r3, r4
 8002dcc:	2201      	movs	r2, #1
 8002dce:	210f      	movs	r1, #15
 8002dd0:	47a8      	blx	r5
}
 8002dd2:	b003      	add	sp, #12
 8002dd4:	bd30      	pop	{r4, r5, pc}
 8002dd6:	bf00      	nop

08002dd8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002dd8:	2300      	movs	r3, #0
{
 8002dda:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002ddc:	6884      	ldr	r4, [r0, #8]
 8002dde:	461a      	mov	r2, r3
 8002de0:	46a4      	mov	ip, r4
 8002de2:	2109      	movs	r1, #9
}
 8002de4:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002de6:	4760      	bx	ip

08002de8 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002de8:	2300      	movs	r3, #0
{
 8002dea:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002dec:	6884      	ldr	r4, [r0, #8]
 8002dee:	461a      	mov	r2, r3
 8002df0:	46a4      	mov	ip, r4
 8002df2:	210a      	movs	r1, #10
}
 8002df4:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002df6:	4760      	bx	ip

08002df8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002df8:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002dfa:	6884      	ldr	r4, [r0, #8]
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	46a4      	mov	ip, r4
 8002e00:	2300      	movs	r3, #0
 8002e02:	210b      	movs	r1, #11
}
 8002e04:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002e06:	4760      	bx	ip

08002e08 <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002e08:	2300      	movs	r3, #0
{
 8002e0a:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002e0c:	6884      	ldr	r4, [r0, #8]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	46a4      	mov	ip, r4
 8002e12:	2110      	movs	r1, #16
}
 8002e14:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002e16:	4760      	bx	ip

08002e18 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002e18:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002e1a:	6944      	ldr	r4, [r0, #20]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	46a4      	mov	ip, r4
}
 8002e20:	bc10      	pop	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002e22:	4760      	bx	ip

08002e24 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002e24:	b470      	push	{r4, r5, r6}
    u8x8->display_info = NULL;
 8002e26:	2500      	movs	r5, #0
    u8x8->i2c_address = 255;
 8002e28:	26ff      	movs	r6, #255	; 0xff
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
 8002e2a:	e9c0 1202 	strd	r1, r2, [r0, #8]
{
 8002e2e:	9a03      	ldr	r2, [sp, #12]
    u8x8->display_info = NULL;
 8002e30:	6005      	str	r5, [r0, #0]
    u8x8->is_font_inverse_mode = 0;
 8002e32:	f880 5023 	strb.w	r5, [r0, #35]	; 0x23
    u8x8->device_address = 0;
 8002e36:	84c5      	strh	r5, [r0, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002e38:	6185      	str	r5, [r0, #24]
    u8x8->i2c_address = 255;
 8002e3a:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002e3e:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002e42:	e9c0 3204 	strd	r3, r2, [r0, #16]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 8002e46:	bc70      	pop	{r4, r5, r6}
  u8x8_SetupMemory(u8x8);
 8002e48:	f7ff bfc6 	b.w	8002dd8 <u8x8_SetupMemory>

08002e4c <u8x8_GetStringLineStart.part.1>:
    Returns the string at index "line_idx". First strng has line_idx = 0
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
 8002e4c:	b410      	push	{r4}
{
  char e;
  uint8_t line_cnt = 1;
 8002e4e:	2201      	movs	r2, #1
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
 8002e50:	4604      	mov	r4, r0
  if ( line_idx == 0 )
    return str;

  for(;;)
  {
    e = *str;
 8002e52:	f811 3b01 	ldrb.w	r3, [r1], #1
    if ( e == '\0' )
 8002e56:	b15b      	cbz	r3, 8002e70 <u8x8_GetStringLineStart.part.1+0x24>
      break;
    str++;
    if ( e == '\n' )
 8002e58:	2b0a      	cmp	r3, #10
    str++;
 8002e5a:	4608      	mov	r0, r1
    if ( e == '\n' )
 8002e5c:	d1f9      	bne.n	8002e52 <u8x8_GetStringLineStart.part.1+0x6>
    {
      if ( line_cnt == line_idx )
 8002e5e:	42a2      	cmp	r2, r4
	return str;
      line_cnt++;
 8002e60:	f102 0201 	add.w	r2, r2, #1
      if ( line_cnt == line_idx )
 8002e64:	d005      	beq.n	8002e72 <u8x8_GetStringLineStart.part.1+0x26>
    e = *str;
 8002e66:	f811 3b01 	ldrb.w	r3, [r1], #1
      line_cnt++;
 8002e6a:	b2d2      	uxtb	r2, r2
    if ( e == '\0' )
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f3      	bne.n	8002e58 <u8x8_GetStringLineStart.part.1+0xc>
    }
  }
  return NULL;	/* line not found */
 8002e70:	4618      	mov	r0, r3
}
 8002e72:	bc10      	pop	{r4}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop

08002e78 <u8x8_GetStringLineCnt>:
  if ( str == NULL )
 8002e78:	4602      	mov	r2, r0
 8002e7a:	b160      	cbz	r0, 8002e96 <u8x8_GetStringLineCnt+0x1e>
  uint8_t line_cnt = 1;
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	3a01      	subs	r2, #1
    e = *str;
 8002e80:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    if ( e == '\0' )
 8002e84:	b13b      	cbz	r3, 8002e96 <u8x8_GetStringLineCnt+0x1e>
    if ( e == '\n' )
 8002e86:	2b0a      	cmp	r3, #10
 8002e88:	d1fa      	bne.n	8002e80 <u8x8_GetStringLineCnt+0x8>
    e = *str;
 8002e8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
      line_cnt++;
 8002e8e:	3001      	adds	r0, #1
 8002e90:	b2c0      	uxtb	r0, r0
    if ( e == '\0' )
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f7      	bne.n	8002e86 <u8x8_GetStringLineCnt+0xe>
}
 8002e96:	4770      	bx	lr

08002e98 <u8x8_GetStringLineStart>:
  if ( line_idx == 0 )
 8002e98:	b108      	cbz	r0, 8002e9e <u8x8_GetStringLineStart+0x6>
 8002e9a:	f7ff bfd7 	b.w	8002e4c <u8x8_GetStringLineStart.part.1>
}
 8002e9e:	4608      	mov	r0, r1
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop

08002ea4 <u8x8_u8toa>:

/* v = value, d = number of digits */
const char *u8x8_u8toa(uint8_t v, uint8_t d)
{
  static char buf[4];
  d = 3-d;
 8002ea4:	f1c1 0103 	rsb	r1, r1, #3
      while( v >= c )
 8002ea8:	2863      	cmp	r0, #99	; 0x63
{
 8002eaa:	b410      	push	{r4}
  d = 3-d;
 8002eac:	b2c9      	uxtb	r1, r1
      while( v >= c )
 8002eae:	d922      	bls.n	8002ef6 <u8x8_u8toa+0x52>
	v -= c;
 8002eb0:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
 8002eb4:	b2db      	uxtb	r3, r3
      while( v >= c )
 8002eb6:	2b63      	cmp	r3, #99	; 0x63
 8002eb8:	d91f      	bls.n	8002efa <u8x8_u8toa+0x56>
	d++;
 8002eba:	2332      	movs	r3, #50	; 0x32
	v -= c;
 8002ebc:	3038      	adds	r0, #56	; 0x38
 8002ebe:	b2c0      	uxtb	r0, r0
      dest[pos] = d;
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <u8x8_u8toa+0x5c>)
      while( v >= c )
 8002ec2:	2809      	cmp	r0, #9
      dest[pos] = d;
 8002ec4:	7013      	strb	r3, [r2, #0]
      d = '0';
 8002ec6:	f04f 0330 	mov.w	r3, #48	; 0x30
      while( v >= c )
 8002eca:	d905      	bls.n	8002ed8 <u8x8_u8toa+0x34>
	v -= c;
 8002ecc:	380a      	subs	r0, #10
 8002ece:	b2c0      	uxtb	r0, r0
	d++;
 8002ed0:	3301      	adds	r3, #1
      while( v >= c )
 8002ed2:	2809      	cmp	r0, #9
	d++;
 8002ed4:	b2db      	uxtb	r3, r3
      while( v >= c )
 8002ed6:	d8f9      	bhi.n	8002ecc <u8x8_u8toa+0x28>
      dest[pos] = d;
 8002ed8:	7053      	strb	r3, [r2, #1]
      d = '0';
 8002eda:	2330      	movs	r3, #48	; 0x30
      while( v >= c )
 8002edc:	b128      	cbz	r0, 8002eea <u8x8_u8toa+0x46>
	v -= c;
 8002ede:	3801      	subs	r0, #1
	d++;
 8002ee0:	3301      	adds	r3, #1
      while( v >= c )
 8002ee2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	d++;
 8002ee6:	b2db      	uxtb	r3, r3
      while( v >= c )
 8002ee8:	d1f9      	bne.n	8002ede <u8x8_u8toa+0x3a>
  dest[3] = '\0';
 8002eea:	2400      	movs	r4, #0
      dest[pos] = d;
 8002eec:	7093      	strb	r3, [r2, #2]
  dest[3] = '\0';
 8002eee:	70d4      	strb	r4, [r2, #3]
  return u8x8_u8toap(buf, v) + d;
}
 8002ef0:	1850      	adds	r0, r2, r1
 8002ef2:	bc10      	pop	{r4}
 8002ef4:	4770      	bx	lr
      d = '0';
 8002ef6:	2330      	movs	r3, #48	; 0x30
 8002ef8:	e7e2      	b.n	8002ec0 <u8x8_u8toa+0x1c>
      while( v >= c )
 8002efa:	4618      	mov	r0, r3
	d++;
 8002efc:	2331      	movs	r3, #49	; 0x31
 8002efe:	e7df      	b.n	8002ec0 <u8x8_u8toa+0x1c>
 8002f00:	20000644 	.word	0x20000644

08002f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f06:	e003      	b.n	8002f10 <LoopCopyDataInit>

08002f08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f0e:	3104      	adds	r1, #4

08002f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f10:	480a      	ldr	r0, [pc, #40]	; (8002f3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f18:	d3f6      	bcc.n	8002f08 <CopyDataInit>
  ldr r2, =_sbss
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f1c:	e002      	b.n	8002f24 <LoopFillZerobss>

08002f1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f20:	f842 3b04 	str.w	r3, [r2], #4

08002f24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f28:	d3f9      	bcc.n	8002f1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f2a:	f7fe fec3 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f004 fe29 	bl	8007b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f32:	f7fe fb21 	bl	8001578 <main>
  bx lr
 8002f36:	4770      	bx	lr
  ldr r3, =_sidata
 8002f38:	0800965c 	.word	0x0800965c
  ldr r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f40:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002f44:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002f48:	20002d5c 	.word	0x20002d5c

08002f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_2_IRQHandler>
	...

08002f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f56:	490d      	ldr	r1, [pc, #52]	; (8002f8c <HAL_InitTick+0x3c>)
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_InitTick+0x40>)
 8002f5a:	7809      	ldrb	r1, [r1, #0]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8002f62:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f64:	fbb2 f0f3 	udiv	r0, r2, r3
 8002f68:	f000 f8a2 	bl	80030b0 <HAL_SYSTICK_Config>
 8002f6c:	b908      	cbnz	r0, 8002f72 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6e:	2d0f      	cmp	r5, #15
 8002f70:	d901      	bls.n	8002f76 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002f72:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002f74:	bd38      	pop	{r3, r4, r5, pc}
 8002f76:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f000 f852 	bl	8003028 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_InitTick+0x44>)
 8002f86:	4620      	mov	r0, r4
 8002f88:	601d      	str	r5, [r3, #0]
}
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	20000004 	.word	0x20000004
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_Init+0x20>)
{
 8002f9a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa0:	f043 0310 	orr.w	r3, r3, #16
 8002fa4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa6:	f000 f82d 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7ff ffd0 	bl	8002f50 <HAL_InitTick>
  HAL_MspInit();
 8002fb0:	f7fe fcd4 	bl	800195c <HAL_MspInit>
}
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	bd08      	pop	{r3, pc}
 8002fb8:	40022000 	.word	0x40022000

08002fbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002fbc:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <HAL_IncTick+0x10>)
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_IncTick+0x14>)
 8002fc0:	6811      	ldr	r1, [r2, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	440b      	add	r3, r1
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000cf0 	.word	0x20000cf0
 8002fd0:	20000008 	.word	0x20000008

08002fd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <HAL_GetTick+0x8>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000cf0 	.word	0x20000cf0

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff fff6 	bl	8002fd4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002fea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002fec:	d002      	beq.n	8002ff4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fee:	4b04      	ldr	r3, [pc, #16]	; (8003000 <HAL_Delay+0x20>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	1b40      	subs	r0, r0, r5
 8002ffa:	42a0      	cmp	r0, r4
 8002ffc:	d3fa      	bcc.n	8002ff4 <HAL_Delay+0x14>
  {
  }
}
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	20000008 	.word	0x20000008

08003004 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003004:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800300a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800300e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	400b      	ands	r3, r1
 8003014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800301c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800301e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302a:	b430      	push	{r4, r5}
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003032:	f1c3 0507 	rsb	r5, r3, #7
 8003036:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003038:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800303c:	bf28      	it	cs
 800303e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003040:	2c06      	cmp	r4, #6
 8003042:	d919      	bls.n	8003078 <HAL_NVIC_SetPriority+0x50>
 8003044:	f04f 34ff 	mov.w	r4, #4294967295
 8003048:	3b03      	subs	r3, #3
 800304a:	409c      	lsls	r4, r3
 800304c:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	40aa      	lsls	r2, r5
 8003056:	ea21 0102 	bic.w	r1, r1, r2
 800305a:	fa01 f203 	lsl.w	r2, r1, r3
 800305e:	4322      	orrs	r2, r4
 8003060:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8003062:	2800      	cmp	r0, #0
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	db0a      	blt.n	800307e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800306c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003070:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003074:	bc30      	pop	{r4, r5}
 8003076:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003078:	2400      	movs	r4, #0
 800307a:	4623      	mov	r3, r4
 800307c:	e7e8      	b.n	8003050 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_NVIC_SetPriority+0x68>)
 8003080:	f000 000f 	and.w	r0, r0, #15
 8003084:	4403      	add	r3, r0
 8003086:	761a      	strb	r2, [r3, #24]
 8003088:	bc30      	pop	{r4, r5}
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00
 8003090:	e000ecfc 	.word	0xe000ecfc

08003094 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003094:	2800      	cmp	r0, #0
 8003096:	db07      	blt.n	80030a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003098:	2301      	movs	r3, #1
 800309a:	f000 011f 	and.w	r1, r0, #31
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <HAL_NVIC_EnableIRQ+0x18>)
 80030a0:	408b      	lsls	r3, r1
 80030a2:	0940      	lsrs	r0, r0, #5
 80030a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	3801      	subs	r0, #1
 80030b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80030b6:	d20d      	bcs.n	80030d4 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b8:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030bc:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030be:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c2:	4c06      	ldr	r4, [pc, #24]	; (80030dc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ca:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80030cc:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d0:	6019      	str	r1, [r3, #0]
 80030d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80030d4:	2001      	movs	r0, #1
 80030d6:	4770      	bx	lr
 80030d8:	e000e010 	.word	0xe000e010
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030e0:	b180      	cbz	r0, 8003104 <HAL_CRC_Init+0x24>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030e2:	7943      	ldrb	r3, [r0, #5]
{
 80030e4:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030ea:	4604      	mov	r4, r0
 80030ec:	b11b      	cbz	r3, 80030f6 <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030ee:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80030f0:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80030f2:	7163      	strb	r3, [r4, #5]
}
 80030f4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80030f6:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80030f8:	f7fe fc52 	bl	80019a0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 80030fc:	2301      	movs	r3, #1
  return HAL_OK;
 80030fe:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8003100:	7163      	strb	r3, [r4, #5]
}
 8003102:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003104:	2001      	movs	r0, #1
}
 8003106:	4770      	bx	lr

08003108 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003108:	b350      	cbz	r0, 8003160 <HAL_DMA_Init+0x58>
 800310a:	4602      	mov	r2, r0
{
 800310c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800310e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003112:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003114:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8003116:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003118:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800311a:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311c:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800311e:	4911      	ldr	r1, [pc, #68]	; (8003164 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003120:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003122:	4f11      	ldr	r7, [pc, #68]	; (8003168 <HAL_DMA_Init+0x60>)
 8003124:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003128:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800312a:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312e:	4333      	orrs	r3, r6
 8003130:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8003132:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003134:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8003136:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003138:	0909      	lsrs	r1, r1, #4
 800313a:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800313c:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003140:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003142:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003146:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003148:	4908      	ldr	r1, [pc, #32]	; (800316c <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 800314a:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 800314c:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800314e:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8003150:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003152:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003154:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8003158:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 800315c:	bcf0      	pop	{r4, r5, r6, r7}
 800315e:	4770      	bx	lr
    return HAL_ERROR;
 8003160:	2001      	movs	r0, #1
}
 8003162:	4770      	bx	lr
 8003164:	bffdfff8 	.word	0xbffdfff8
 8003168:	cccccccd 	.word	0xcccccccd
 800316c:	40020000 	.word	0x40020000

08003170 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003170:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003172:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003176:	2c01      	cmp	r4, #1
 8003178:	d032      	beq.n	80031e0 <HAL_DMA_Start_IT+0x70>
 800317a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003180:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003184:	42a5      	cmp	r5, r4
 8003186:	d125      	bne.n	80031d4 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003188:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800318a:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800318e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003190:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8003192:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003194:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8003196:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800319a:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 800319c:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031a0:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 80031a2:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 80031a6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031a8:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 80031ac:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 80031ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b0:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031b2:	bf0b      	itete	eq
 80031b4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80031b6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80031b8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80031ba:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80031bc:	b19b      	cbz	r3, 80031e6 <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	f043 030e 	orr.w	r3, r3, #14
 80031c4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 80031c8:	6822      	ldr	r2, [r4, #0]
}
 80031ca:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	6022      	str	r2, [r4, #0]
}
 80031d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 80031d4:	2200      	movs	r2, #0
    status = HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 80031d8:	f880 2020 	strb.w	r2, [r0, #32]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80031e0:	2302      	movs	r3, #2
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	f043 030a 	orr.w	r3, r3, #10
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	e7e6      	b.n	80031c6 <HAL_DMA_Start_IT+0x56>

080031f8 <HAL_DMA_Abort_IT>:
{  
 80031f8:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031fa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d004      	beq.n	800320c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003202:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8003204:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003206:	6382      	str	r2, [r0, #56]	; 0x38
}
 8003208:	4620      	mov	r0, r4
 800320a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800320c:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800320e:	491d      	ldr	r1, [pc, #116]	; (8003284 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003210:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003212:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003214:	f022 020e 	bic.w	r2, r2, #14
 8003218:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003222:	d021      	beq.n	8003268 <HAL_DMA_Abort_IT+0x70>
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_DMA_Abort_IT+0x90>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01c      	beq.n	8003264 <HAL_DMA_Abort_IT+0x6c>
 800322a:	3214      	adds	r2, #20
 800322c:	4293      	cmp	r3, r2
 800322e:	d01d      	beq.n	800326c <HAL_DMA_Abort_IT+0x74>
 8003230:	3214      	adds	r2, #20
 8003232:	4293      	cmp	r3, r2
 8003234:	d01d      	beq.n	8003272 <HAL_DMA_Abort_IT+0x7a>
 8003236:	3214      	adds	r2, #20
 8003238:	4293      	cmp	r3, r2
 800323a:	d01d      	beq.n	8003278 <HAL_DMA_Abort_IT+0x80>
 800323c:	3214      	adds	r2, #20
 800323e:	4293      	cmp	r3, r2
 8003240:	bf0c      	ite	eq
 8003242:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003246:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 800324a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 800324c:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800324e:	4d0f      	ldr	r5, [pc, #60]	; (800328c <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 8003250:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003252:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003254:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003258:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800325c:	b17a      	cbz	r2, 800327e <HAL_DMA_Abort_IT+0x86>
      hdma->XferAbortCallback(hdma);
 800325e:	4790      	blx	r2
}
 8003260:	4620      	mov	r0, r4
 8003262:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003264:	2310      	movs	r3, #16
 8003266:	e7f0      	b.n	800324a <HAL_DMA_Abort_IT+0x52>
 8003268:	2301      	movs	r3, #1
 800326a:	e7ee      	b.n	800324a <HAL_DMA_Abort_IT+0x52>
 800326c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003270:	e7eb      	b.n	800324a <HAL_DMA_Abort_IT+0x52>
 8003272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003276:	e7e8      	b.n	800324a <HAL_DMA_Abort_IT+0x52>
 8003278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327c:	e7e5      	b.n	800324a <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	4614      	mov	r4, r2
 8003280:	e7c2      	b.n	8003208 <HAL_DMA_Abort_IT+0x10>
 8003282:	bf00      	nop
 8003284:	40020008 	.word	0x40020008
 8003288:	4002001c 	.word	0x4002001c
 800328c:	40020000 	.word	0x40020000

08003290 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003290:	2204      	movs	r2, #4
{
 8003292:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003294:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003298:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800329a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800329c:	408a      	lsls	r2, r1
 800329e:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80032a0:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032a2:	d01f      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x54>
 80032a4:	076a      	lsls	r2, r5, #29
 80032a6:	d51d      	bpl.n	80032e4 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	0691      	lsls	r1, r2, #26
 80032ac:	d403      	bmi.n	80032b6 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032b6:	4a3f      	ldr	r2, [pc, #252]	; (80033b4 <HAL_DMA_IRQHandler+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d05c      	beq.n	8003376 <HAL_DMA_IRQHandler+0xe6>
 80032bc:	3214      	adds	r2, #20
 80032be:	4293      	cmp	r3, r2
 80032c0:	d061      	beq.n	8003386 <HAL_DMA_IRQHandler+0xf6>
 80032c2:	3214      	adds	r2, #20
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d068      	beq.n	800339a <HAL_DMA_IRQHandler+0x10a>
 80032c8:	3214      	adds	r2, #20
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d06b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x116>
 80032ce:	3214      	adds	r2, #20
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d05d      	beq.n	8003390 <HAL_DMA_IRQHandler+0x100>
 80032d4:	3214      	adds	r2, #20
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bf0c      	ite	eq
 80032da:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80032de:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80032e2:	e049      	b.n	8003378 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032e4:	2202      	movs	r2, #2
 80032e6:	408a      	lsls	r2, r1
 80032e8:	4222      	tst	r2, r4
 80032ea:	d022      	beq.n	8003332 <HAL_DMA_IRQHandler+0xa2>
 80032ec:	07aa      	lsls	r2, r5, #30
 80032ee:	d520      	bpl.n	8003332 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	0691      	lsls	r1, r2, #26
 80032f4:	d406      	bmi.n	8003304 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 80032f6:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f022 020a 	bic.w	r2, r2, #10
 80032fe:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003300:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003304:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <HAL_DMA_IRQHandler+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d02b      	beq.n	8003362 <HAL_DMA_IRQHandler+0xd2>
 800330a:	3214      	adds	r2, #20
 800330c:	4293      	cmp	r3, r2
 800330e:	d042      	beq.n	8003396 <HAL_DMA_IRQHandler+0x106>
 8003310:	3214      	adds	r2, #20
 8003312:	4293      	cmp	r3, r2
 8003314:	d044      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x110>
 8003316:	3214      	adds	r2, #20
 8003318:	4293      	cmp	r3, r2
 800331a:	d036      	beq.n	800338a <HAL_DMA_IRQHandler+0xfa>
 800331c:	3214      	adds	r2, #20
 800331e:	4293      	cmp	r3, r2
 8003320:	d044      	beq.n	80033ac <HAL_DMA_IRQHandler+0x11c>
 8003322:	3214      	adds	r2, #20
 8003324:	4293      	cmp	r3, r2
 8003326:	bf0c      	ite	eq
 8003328:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800332c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8003330:	e018      	b.n	8003364 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003332:	2208      	movs	r2, #8
 8003334:	408a      	lsls	r2, r1
 8003336:	4222      	tst	r2, r4
 8003338:	d01b      	beq.n	8003372 <HAL_DMA_IRQHandler+0xe2>
 800333a:	072a      	lsls	r2, r5, #28
 800333c:	d519      	bpl.n	8003372 <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800333e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8003340:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003342:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003344:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003348:	f024 040e 	bic.w	r4, r4, #14
 800334c:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 800334e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003350:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003352:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003354:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003358:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800335c:	b14b      	cbz	r3, 8003372 <HAL_DMA_IRQHandler+0xe2>
}
 800335e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003360:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003362:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8003364:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003366:	4c14      	ldr	r4, [pc, #80]	; (80033b8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8003368:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800336a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 800336c:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003370:	b93a      	cbnz	r2, 8003382 <HAL_DMA_IRQHandler+0xf2>
}
 8003372:	bc70      	pop	{r4, r5, r6}
 8003374:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003376:	2304      	movs	r3, #4
 8003378:	490f      	ldr	r1, [pc, #60]	; (80033b8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 800337a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800337c:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800337e:	2a00      	cmp	r2, #0
 8003380:	d0f7      	beq.n	8003372 <HAL_DMA_IRQHandler+0xe2>
}
 8003382:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003384:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003386:	2340      	movs	r3, #64	; 0x40
 8003388:	e7f6      	b.n	8003378 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800338a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800338e:	e7e9      	b.n	8003364 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003390:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003394:	e7f0      	b.n	8003378 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003396:	2320      	movs	r3, #32
 8003398:	e7e4      	b.n	8003364 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800339a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800339e:	e7eb      	b.n	8003378 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a4:	e7de      	b.n	8003364 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033aa:	e7e5      	b.n	8003378 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b0:	e7d8      	b.n	8003364 <HAL_DMA_IRQHandler+0xd4>
 80033b2:	bf00      	nop
 80033b4:	40020008 	.word	0x40020008
 80033b8:	40020000 	.word	0x40020000

080033bc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033bc:	680a      	ldr	r2, [r1, #0]
 80033be:	2a00      	cmp	r2, #0
 80033c0:	f000 80dc 	beq.w	800357c <HAL_GPIO_Init+0x1c0>
{
 80033c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 80033c8:	f04f 0a00 	mov.w	sl, #0
{
 80033cc:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 80033ce:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033d0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80035a4 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033d4:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80035a8 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033d8:	4f6d      	ldr	r7, [pc, #436]	; (8003590 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033da:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80035ac <HAL_GPIO_Init+0x1f0>
 80033de:	e003      	b.n	80033e8 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80033e0:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e2:	fa32 f305 	lsrs.w	r3, r2, r5
 80033e6:	d079      	beq.n	80034dc <HAL_GPIO_Init+0x120>
    ioposition = (0x01uL << position);
 80033e8:	2301      	movs	r3, #1
 80033ea:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ec:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 80033f0:	42a3      	cmp	r3, r4
 80033f2:	d1f5      	bne.n	80033e0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80033f4:	684a      	ldr	r2, [r1, #4]
 80033f6:	2a12      	cmp	r2, #18
 80033f8:	f000 809f 	beq.w	800353a <HAL_GPIO_Init+0x17e>
 80033fc:	f200 8088 	bhi.w	8003510 <HAL_GPIO_Init+0x154>
 8003400:	2a02      	cmp	r2, #2
 8003402:	f000 809e 	beq.w	8003542 <HAL_GPIO_Init+0x186>
 8003406:	d97d      	bls.n	8003504 <HAL_GPIO_Init+0x148>
 8003408:	2a03      	cmp	r2, #3
 800340a:	d06a      	beq.n	80034e2 <HAL_GPIO_Init+0x126>
 800340c:	2a11      	cmp	r2, #17
 800340e:	d102      	bne.n	8003416 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003410:	68cb      	ldr	r3, [r1, #12]
 8003412:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003416:	2cff      	cmp	r4, #255	; 0xff
 8003418:	d867      	bhi.n	80034ea <HAL_GPIO_Init+0x12e>
 800341a:	4681      	mov	r9, r0
 800341c:	6803      	ldr	r3, [r0, #0]
 800341e:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003420:	260f      	movs	r6, #15
 8003422:	fa06 fb02 	lsl.w	fp, r6, r2
 8003426:	ea23 030b 	bic.w	r3, r3, fp
 800342a:	fa0a f202 	lsl.w	r2, sl, r2
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003434:	684a      	ldr	r2, [r1, #4]
 8003436:	00d3      	lsls	r3, r2, #3
 8003438:	d562      	bpl.n	8003500 <HAL_GPIO_Init+0x144>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800343a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800343e:	f025 0303 	bic.w	r3, r5, #3
 8003442:	f049 0901 	orr.w	r9, r9, #1
 8003446:	f8cc 9018 	str.w	r9, [ip, #24]
 800344a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800344e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003452:	f009 0901 	and.w	r9, r9, #1
 8003456:	f8cd 900c 	str.w	r9, [sp, #12]
 800345a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800345e:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003462:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003466:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800346a:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800346e:	fa06 f609 	lsl.w	r6, r6, r9
 8003472:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003476:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003478:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800347a:	d011      	beq.n	80034a0 <HAL_GPIO_Init+0xe4>
 800347c:	4540      	cmp	r0, r8
 800347e:	d064      	beq.n	800354a <HAL_GPIO_Init+0x18e>
 8003480:	4e44      	ldr	r6, [pc, #272]	; (8003594 <HAL_GPIO_Init+0x1d8>)
 8003482:	42b0      	cmp	r0, r6
 8003484:	d07b      	beq.n	800357e <HAL_GPIO_Init+0x1c2>
 8003486:	4e44      	ldr	r6, [pc, #272]	; (8003598 <HAL_GPIO_Init+0x1dc>)
 8003488:	42b0      	cmp	r0, r6
 800348a:	bf0c      	ite	eq
 800348c:	f04f 0b03 	moveq.w	fp, #3
 8003490:	f04f 0b04 	movne.w	fp, #4
 8003494:	9e01      	ldr	r6, [sp, #4]
 8003496:	fa0b f909 	lsl.w	r9, fp, r9
 800349a:	ea46 0609 	orr.w	r6, r6, r9
 800349e:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80034a0:	9e01      	ldr	r6, [sp, #4]
 80034a2:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80034a4:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034a6:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80034a8:	bf4c      	ite	mi
 80034aa:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034ac:	43a3      	bicpl	r3, r4
 80034ae:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80034b0:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034b2:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80034b4:	bf4c      	ite	mi
 80034b6:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034b8:	43a3      	bicpl	r3, r4
 80034ba:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80034bc:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034be:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80034c0:	bf4c      	ite	mi
 80034c2:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034c4:	43a3      	bicpl	r3, r4
 80034c6:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034c8:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034cc:	d515      	bpl.n	80034fa <HAL_GPIO_Init+0x13e>
          SET_BIT(EXTI->FTSR, iocurrent);
 80034ce:	431c      	orrs	r4, r3
 80034d0:	60fc      	str	r4, [r7, #12]
 80034d2:	680a      	ldr	r2, [r1, #0]
	position++;
 80034d4:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d6:	fa32 f305 	lsrs.w	r3, r2, r5
 80034da:	d185      	bne.n	80033e8 <HAL_GPIO_Init+0x2c>
  }
}
 80034dc:	b005      	add	sp, #20
 80034de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034e2:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034e4:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034e8:	d997      	bls.n	800341a <HAL_GPIO_Init+0x5e>
 80034ea:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 80034ee:	3a08      	subs	r2, #8
 80034f0:	6843      	ldr	r3, [r0, #4]
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	f100 0904 	add.w	r9, r0, #4
 80034f8:	e792      	b.n	8003420 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034fa:	ea23 0404 	bic.w	r4, r3, r4
 80034fe:	60fc      	str	r4, [r7, #12]
 8003500:	680a      	ldr	r2, [r1, #0]
 8003502:	e76d      	b.n	80033e0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8003504:	b1a2      	cbz	r2, 8003530 <HAL_GPIO_Init+0x174>
 8003506:	2a01      	cmp	r2, #1
 8003508:	d185      	bne.n	8003416 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800350a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800350e:	e782      	b.n	8003416 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8003510:	4e22      	ldr	r6, [pc, #136]	; (800359c <HAL_GPIO_Init+0x1e0>)
 8003512:	42b2      	cmp	r2, r6
 8003514:	d00c      	beq.n	8003530 <HAL_GPIO_Init+0x174>
 8003516:	d920      	bls.n	800355a <HAL_GPIO_Init+0x19e>
 8003518:	4e21      	ldr	r6, [pc, #132]	; (80035a0 <HAL_GPIO_Init+0x1e4>)
 800351a:	42b2      	cmp	r2, r6
 800351c:	d008      	beq.n	8003530 <HAL_GPIO_Init+0x174>
 800351e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8003522:	42b2      	cmp	r2, r6
 8003524:	d004      	beq.n	8003530 <HAL_GPIO_Init+0x174>
 8003526:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800352a:	42b2      	cmp	r2, r6
 800352c:	f47f af73 	bne.w	8003416 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	b9e2      	cbnz	r2, 800356e <HAL_GPIO_Init+0x1b2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003534:	f04f 0a04 	mov.w	sl, #4
 8003538:	e76d      	b.n	8003416 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800353a:	68cb      	ldr	r3, [r1, #12]
 800353c:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8003540:	e769      	b.n	8003416 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003542:	68cb      	ldr	r3, [r1, #12]
 8003544:	f103 0a08 	add.w	sl, r3, #8
          break;
 8003548:	e765      	b.n	8003416 <HAL_GPIO_Init+0x5a>
 800354a:	f04f 0b01 	mov.w	fp, #1
 800354e:	fa0b f909 	lsl.w	r9, fp, r9
 8003552:	ea46 0609 	orr.w	r6, r6, r9
 8003556:	9601      	str	r6, [sp, #4]
 8003558:	e7a2      	b.n	80034a0 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 800355a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800355e:	42b2      	cmp	r2, r6
 8003560:	d0e6      	beq.n	8003530 <HAL_GPIO_Init+0x174>
 8003562:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8003566:	42b2      	cmp	r2, r6
 8003568:	f47f af55 	bne.w	8003416 <HAL_GPIO_Init+0x5a>
 800356c:	e7e0      	b.n	8003530 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800356e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8003570:	bf0c      	ite	eq
 8003572:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8003574:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003576:	f04f 0a08 	mov.w	sl, #8
 800357a:	e74c      	b.n	8003416 <HAL_GPIO_Init+0x5a>
 800357c:	4770      	bx	lr
 800357e:	f04f 0b02 	mov.w	fp, #2
 8003582:	9e01      	ldr	r6, [sp, #4]
 8003584:	fa0b f909 	lsl.w	r9, fp, r9
 8003588:	ea46 0609 	orr.w	r6, r6, r9
 800358c:	9601      	str	r6, [sp, #4]
 800358e:	e787      	b.n	80034a0 <HAL_GPIO_Init+0xe4>
 8003590:	40010400 	.word	0x40010400
 8003594:	40011000 	.word	0x40011000
 8003598:	40011400 	.word	0x40011400
 800359c:	10210000 	.word	0x10210000
 80035a0:	10310000 	.word	0x10310000
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40010800 	.word	0x40010800
 80035ac:	40010c00 	.word	0x40010c00

080035b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035b0:	6883      	ldr	r3, [r0, #8]
 80035b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80035b4:	bf14      	ite	ne
 80035b6:	2001      	movne	r0, #1
 80035b8:	2000      	moveq	r0, #0
 80035ba:	4770      	bx	lr

080035bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035bc:	b902      	cbnz	r2, 80035c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035be:	0409      	lsls	r1, r1, #16
 80035c0:	6101      	str	r1, [r0, #16]
  }
}
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80035c6:	6951      	ldr	r1, [r2, #20]
 80035c8:	4201      	tst	r1, r0
 80035ca:	d100      	bne.n	80035ce <HAL_GPIO_EXTI_IRQHandler+0xa>
 80035cc:	4770      	bx	lr
{
 80035ce:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d2:	f7fd ff45 	bl	8001460 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d6:	bd08      	pop	{r3, pc}
 80035d8:	40010400 	.word	0x40010400

080035dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e0:	4607      	mov	r7, r0
 80035e2:	4616      	mov	r6, r2
 80035e4:	4698      	mov	r8, r3
 80035e6:	b28d      	uxth	r5, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e8:	683c      	ldr	r4, [r7, #0]
 80035ea:	e004      	b.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ec:	6961      	ldr	r1, [r4, #20]
 80035ee:	054a      	lsls	r2, r1, #21
 80035f0:	d407      	bmi.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x26>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	1c73      	adds	r3, r6, #1
 80035f4:	d11c      	bne.n	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f6:	6960      	ldr	r0, [r4, #20]
 80035f8:	ea35 0000 	bics.w	r0, r5, r0
 80035fc:	d1f6      	bne.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 80035fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003604:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003610:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003612:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003614:	633a      	str	r2, [r7, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003616:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361a:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800361e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003620:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
      return HAL_ERROR;
 800362a:	2001      	movs	r0, #1
}
 800362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003630:	f7ff fcd0 	bl	8002fd4 <HAL_GetTick>
 8003634:	eba0 0008 	sub.w	r0, r0, r8
 8003638:	42b0      	cmp	r0, r6
 800363a:	d801      	bhi.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 800363c:	2e00      	cmp	r6, #0
 800363e:	d1d3      	bne.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003640:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003642:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003644:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003646:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364a:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003650:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	f043 0320 	orr.w	r3, r3, #32
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 800365a:	2001      	movs	r0, #1
 800365c:	e7cf      	b.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x22>
 800365e:	bf00      	nop

08003660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	4606      	mov	r6, r0
 8003664:	460d      	mov	r5, r1
 8003666:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003668:	6830      	ldr	r0, [r6, #0]
 800366a:	e004      	b.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x16>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366c:	6944      	ldr	r4, [r0, #20]
 800366e:	0562      	lsls	r2, r4, #21
 8003670:	d407      	bmi.n	8003682 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8003672:	1c6b      	adds	r3, r5, #1
 8003674:	d116      	bne.n	80036a4 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003676:	6943      	ldr	r3, [r0, #20]
 8003678:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800367c:	d0f6      	beq.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  return HAL_OK;
 800367e:	2000      	movs	r0, #0
}
 8003680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003688:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800368a:	6333      	str	r3, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800368c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003690:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003694:	6c32      	ldr	r2, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003696:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800369a:	f042 0204 	orr.w	r2, r2, #4
 800369e:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 80036a0:	2001      	movs	r0, #1
}
 80036a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7ff fc96 	bl	8002fd4 <HAL_GetTick>
 80036a8:	1bc0      	subs	r0, r0, r7
 80036aa:	42a8      	cmp	r0, r5
 80036ac:	d801      	bhi.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 80036ae:	2d00      	cmp	r5, #0
 80036b0:	d1da      	bne.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036b2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80036b4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036b6:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036b8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036bc:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c0:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80036c2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c6:	f043 0320 	orr.w	r3, r3, #32
 80036ca:	6433      	str	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80036cc:	2001      	movs	r0, #1
}
 80036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036d0 <I2C_WaitOnFlagUntilTimeout>:
{
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4681      	mov	r9, r0
 80036d6:	4690      	mov	r8, r2
 80036d8:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036da:	0c0f      	lsrs	r7, r1, #16
 80036dc:	b28c      	uxth	r4, r1
 80036de:	f8d9 5000 	ldr.w	r5, [r9]
 80036e2:	e009      	b.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0x28>
 80036e4:	69a9      	ldr	r1, [r5, #24]
 80036e6:	ea34 0301 	bics.w	r3, r4, r1
 80036ea:	bf0c      	ite	eq
 80036ec:	2001      	moveq	r0, #1
 80036ee:	2000      	movne	r0, #0
 80036f0:	4580      	cmp	r8, r0
 80036f2:	d10b      	bne.n	800370c <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	1c73      	adds	r3, r6, #1
 80036f6:	d10c      	bne.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f8:	2f01      	cmp	r7, #1
 80036fa:	d1f3      	bne.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0x14>
 80036fc:	696b      	ldr	r3, [r5, #20]
 80036fe:	ea34 0303 	bics.w	r3, r4, r3
 8003702:	bf0c      	ite	eq
 8003704:	2001      	moveq	r0, #1
 8003706:	2000      	movne	r0, #0
 8003708:	4580      	cmp	r8, r0
 800370a:	d0f3      	beq.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800370c:	2000      	movs	r0, #0
}
 800370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7ff fc5f 	bl	8002fd4 <HAL_GetTick>
 8003716:	9b08      	ldr	r3, [sp, #32]
 8003718:	1ac0      	subs	r0, r0, r3
 800371a:	42b0      	cmp	r0, r6
 800371c:	d801      	bhi.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x52>
 800371e:	2e00      	cmp	r6, #0
 8003720:	d1dd      	bne.n	80036de <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003722:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003724:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003726:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800372a:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800372e:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003732:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003736:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800373a:	f043 0320 	orr.w	r3, r3, #32
 800373e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003742:	2001      	movs	r0, #1
 8003744:	e7e3      	b.n	800370e <I2C_WaitOnFlagUntilTimeout+0x3e>
 8003746:	bf00      	nop

08003748 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	4606      	mov	r6, r0
 800374c:	460d      	mov	r5, r1
 800374e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003750:	6830      	ldr	r0, [r6, #0]
 8003752:	e004      	b.n	800375e <I2C_WaitOnBTFFlagUntilTimeout+0x16>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	6944      	ldr	r4, [r0, #20]
 8003756:	0562      	lsls	r2, r4, #21
 8003758:	d407      	bmi.n	800376a <I2C_WaitOnBTFFlagUntilTimeout+0x22>
    if (Timeout != HAL_MAX_DELAY)
 800375a:	1c6b      	adds	r3, r5, #1
 800375c:	d116      	bne.n	800378c <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375e:	6943      	ldr	r3, [r0, #20]
 8003760:	f013 0304 	ands.w	r3, r3, #4
 8003764:	d0f6      	beq.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
  return HAL_OK;
 8003766:	2000      	movs	r0, #0
}
 8003768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800376e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	6333      	str	r3, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800377c:	6c32      	ldr	r2, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800377e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003782:	f042 0204 	orr.w	r2, r2, #4
 8003786:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 8003788:	2001      	movs	r0, #1
}
 800378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378c:	f7ff fc22 	bl	8002fd4 <HAL_GetTick>
 8003790:	1bc0      	subs	r0, r0, r7
 8003792:	42a8      	cmp	r0, r5
 8003794:	d801      	bhi.n	800379a <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 8003796:	2d00      	cmp	r5, #0
 8003798:	d1da      	bne.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800379a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800379c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800379e:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037a0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037a4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80037aa:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ae:	f043 0320 	orr.w	r3, r3, #32
 80037b2:	6433      	str	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80037b4:	2001      	movs	r0, #1
}
 80037b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f000 809f 	beq.w	80038fc <HAL_I2C_Init+0x144>
{
 80037be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037c4:	4604      	mov	r4, r0
 80037c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 808f 	beq.w	80038ee <HAL_I2C_Init+0x136>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d0:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80037d2:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f000 fc5e 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f4:	6862      	ldr	r2, [r4, #4]
 80037f6:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <HAL_I2C_Init+0x16c>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d84b      	bhi.n	8003894 <HAL_I2C_Init+0xdc>
 80037fc:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_I2C_Init+0x170>)
 80037fe:	4298      	cmp	r0, r3
 8003800:	d97a      	bls.n	80038f8 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003802:	1e43      	subs	r3, r0, #1
 8003804:	0052      	lsls	r2, r2, #1
 8003806:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 800380a:	4948      	ldr	r1, [pc, #288]	; (800392c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380c:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800380e:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003812:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003814:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003816:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800381a:	4301      	orrs	r1, r0
 800381c:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800381e:	6a19      	ldr	r1, [r3, #32]
 8003820:	3001      	adds	r0, #1
 8003822:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003826:	4308      	orrs	r0, r1
 8003828:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800382a:	1c50      	adds	r0, r2, #1
 800382c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003830:	2804      	cmp	r0, #4
 8003832:	bf38      	it	cc
 8003834:	2004      	movcc	r0, #4
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800383c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003842:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003844:	4308      	orrs	r0, r1
 8003846:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 800384e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003852:	4302      	orrs	r2, r0
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 800385e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003862:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003866:	4302      	orrs	r2, r0
 8003868:	430a      	orrs	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800386c:	68d9      	ldr	r1, [r3, #12]
 800386e:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8003872:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003876:	4302      	orrs	r2, r0
 8003878:	430a      	orrs	r2, r1
 800387a:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 800387c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800387e:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003886:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003888:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388c:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8003892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <HAL_I2C_Init+0x178>)
 8003896:	4298      	cmp	r0, r3
 8003898:	d92e      	bls.n	80038f8 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800389a:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800389e:	4d23      	ldr	r5, [pc, #140]	; (800392c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038a0:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80038a2:	fba5 6500 	umull	r6, r5, r5, r0
 80038a6:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038a8:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ac:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ae:	4f21      	ldr	r7, [pc, #132]	; (8003934 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038b0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b4:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038b8:	4335      	orrs	r5, r6
 80038ba:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038bc:	6a1d      	ldr	r5, [r3, #32]
 80038be:	0989      	lsrs	r1, r1, #6
 80038c0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80038c4:	3101      	adds	r1, #1
 80038c6:	4329      	orrs	r1, r5
 80038c8:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ca:	69d9      	ldr	r1, [r3, #28]
 80038cc:	68a5      	ldr	r5, [r4, #8]
 80038ce:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80038d2:	3801      	subs	r0, #1
 80038d4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80038d8:	b995      	cbnz	r5, 8003900 <HAL_I2C_Init+0x148>
 80038da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80038de:	fbb0 f0f2 	udiv	r0, r0, r2
 80038e2:	3001      	adds	r0, #1
 80038e4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80038e8:	b9c0      	cbnz	r0, 800391c <HAL_I2C_Init+0x164>
 80038ea:	2001      	movs	r0, #1
 80038ec:	e7a8      	b.n	8003840 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 80038ee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80038f2:	f7fe f86b 	bl	80019cc <HAL_I2C_MspInit>
 80038f6:	e76b      	b.n	80037d0 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
}
 80038fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
}
 80038fe:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003900:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003904:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003908:	fbb0 f0f2 	udiv	r0, r0, r2
 800390c:	3001      	adds	r0, #1
 800390e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003912:	2800      	cmp	r0, #0
 8003914:	d0e9      	beq.n	80038ea <HAL_I2C_Init+0x132>
 8003916:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800391a:	e791      	b.n	8003840 <HAL_I2C_Init+0x88>
 800391c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003920:	e78e      	b.n	8003840 <HAL_I2C_Init+0x88>
 8003922:	bf00      	nop
 8003924:	000186a0 	.word	0x000186a0
 8003928:	001e847f 	.word	0x001e847f
 800392c:	431bde83 	.word	0x431bde83
 8003930:	003d08ff 	.word	0x003d08ff
 8003934:	10624dd3 	.word	0x10624dd3

08003938 <HAL_I2C_Master_Transmit>:
{
 8003938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800393c:	4604      	mov	r4, r0
 800393e:	b084      	sub	sp, #16
 8003940:	4698      	mov	r8, r3
 8003942:	460e      	mov	r6, r1
 8003944:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7ff fb45 	bl	8002fd4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800394a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800394e:	2b20      	cmp	r3, #32
 8003950:	d004      	beq.n	800395c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8003952:	2602      	movs	r6, #2
}
 8003954:	4630      	mov	r0, r6
 8003956:	b004      	add	sp, #16
 8003958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800395c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	2319      	movs	r3, #25
 8003962:	2201      	movs	r2, #1
 8003964:	4964      	ldr	r1, [pc, #400]	; (8003af8 <HAL_I2C_Master_Transmit+0x1c0>)
 8003966:	4620      	mov	r0, r4
 8003968:	f7ff feb2 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 800396c:	2800      	cmp	r0, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8003970:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d0ec      	beq.n	8003952 <HAL_I2C_Master_Transmit+0x1a>
 8003978:	2201      	movs	r2, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800397a:	6823      	ldr	r3, [r4, #0]
    __HAL_LOCK(hi2c);
 800397c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	07d2      	lsls	r2, r2, #31
 8003984:	d403      	bmi.n	800398e <HAL_I2C_Master_Transmit+0x56>
      __HAL_I2C_ENABLE(hi2c);
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800398e:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003990:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003994:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399c:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800399e:	4a57      	ldr	r2, [pc, #348]	; (8003afc <HAL_I2C_Master_Transmit+0x1c4>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039a0:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039a4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039a8:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80039aa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ae:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b0:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80039b4:	6267      	str	r7, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039b6:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 80039b8:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ba:	d007      	beq.n	80039cc <HAL_I2C_Master_Transmit+0x94>
 80039bc:	2a01      	cmp	r2, #1
 80039be:	d005      	beq.n	80039cc <HAL_I2C_Master_Transmit+0x94>
 80039c0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80039c4:	d002      	beq.n	80039cc <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80039c8:	2a12      	cmp	r2, #18
 80039ca:	d103      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d2:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d4:	9500      	str	r5, [sp, #0]
 80039d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039d8:	2200      	movs	r2, #0
 80039da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fe76 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 80039e4:	b180      	cbz	r0, 8003a08 <HAL_I2C_Master_Transmit+0xd0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	05db      	lsls	r3, r3, #23
 80039ec:	d507      	bpl.n	80039fe <HAL_I2C_Master_Transmit+0xc6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ee:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80039f2:	2601      	movs	r6, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f4:	6423      	str	r3, [r4, #64]	; 0x40
 80039f6:	e7ad      	b.n	8003954 <HAL_I2C_Master_Transmit+0x1c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d062      	beq.n	8003ac4 <HAL_I2C_Master_Transmit+0x18c>
      return HAL_ERROR;
 80039fe:	2601      	movs	r6, #1
}
 8003a00:	4630      	mov	r0, r6
 8003a02:	b004      	add	sp, #16
 8003a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a10:	d15f      	bne.n	8003ad2 <HAL_I2C_Master_Transmit+0x19a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a12:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003a16:	6116      	str	r6, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a18:	462b      	mov	r3, r5
 8003a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a1c:	4938      	ldr	r1, [pc, #224]	; (8003b00 <HAL_I2C_Master_Transmit+0x1c8>)
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7ff fddc 	bl	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a24:	4606      	mov	r6, r0
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d1e9      	bne.n	80039fe <HAL_I2C_Master_Transmit+0xc6>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	9003      	str	r0, [sp, #12]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	9203      	str	r2, [sp, #12]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	9303      	str	r3, [sp, #12]
 8003a36:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003a38:	e034      	b.n	8003aa4 <HAL_I2C_Master_Transmit+0x16c>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3a:	462a      	mov	r2, r5
 8003a3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7ff fe0e 	bl	8003660 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1d7      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a48:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8003a4c:	6827      	ldr	r7, [r4, #0]
 8003a4e:	46e0      	mov	r8, ip
 8003a50:	f818 3b01 	ldrb.w	r3, [r8], #1
      hi2c->XferSize--;
 8003a54:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a58:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8003a5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a5c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a66:	f8d7 8014 	ldr.w	r8, [r7, #20]
      hi2c->XferSize--;
 8003a6a:	f10e 33ff 	add.w	r3, lr, #4294967295
 8003a6e:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a70:	f018 0f04 	tst.w	r8, #4
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a74:	462a      	mov	r2, r5
 8003a76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a78:	4620      	mov	r0, r4
      hi2c->XferSize--;
 8003a7a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a7c:	d00e      	beq.n	8003a9c <HAL_I2C_Master_Transmit+0x164>
 8003a7e:	b16b      	cbz	r3, 8003a9c <HAL_I2C_Master_Transmit+0x164>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a80:	f89c 3001 	ldrb.w	r3, [ip, #1]
        hi2c->XferSize--;
 8003a84:	f1ae 0e02 	sub.w	lr, lr, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a88:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8003a8a:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003a8c:	f10c 0302 	add.w	r3, ip, #2
        hi2c->XferCount--;
 8003a90:	3f01      	subs	r7, #1
 8003a92:	b2bf      	uxth	r7, r7
        hi2c->XferSize--;
 8003a94:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003a98:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003a9a:	8567      	strh	r7, [r4, #42]	; 0x2a
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9c:	f7ff fe54 	bl	8003748 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d1a9      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0xc0>
    while (hi2c->XferSize > 0U)
 8003aa4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1c7      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0x102>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	6821      	ldr	r1, [r4, #0]
 8003aae:	680a      	ldr	r2, [r1, #0]
 8003ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab4:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003aba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003ac2:	e747      	b.n	8003954 <HAL_I2C_Master_Transmit+0x1c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8003ac6:	2601      	movs	r6, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	6813      	ldr	r3, [r2, #0]
 8003aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e740      	b.n	8003954 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad2:	11f3      	asrs	r3, r6, #7
 8003ad4:	f003 0306 	and.w	r3, r3, #6
 8003ad8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003adc:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ade:	4909      	ldr	r1, [pc, #36]	; (8003b04 <HAL_I2C_Master_Transmit+0x1cc>)
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f7ff fd79 	bl	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d187      	bne.n	80039fe <HAL_I2C_Master_Transmit+0xc6>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	b2f6      	uxtb	r6, r6
 8003af2:	611e      	str	r6, [r3, #16]
 8003af4:	e790      	b.n	8003a18 <HAL_I2C_Master_Transmit+0xe0>
 8003af6:	bf00      	nop
 8003af8:	00100002 	.word	0x00100002
 8003afc:	ffff0000 	.word	0xffff0000
 8003b00:	00010002 	.word	0x00010002
 8003b04:	00010008 	.word	0x00010008

08003b08 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4b01      	ldr	r3, [pc, #4]	; (8003b10 <HAL_PWR_EnableBkUpAccess+0x8>)
 8003b0c:	601a      	str	r2, [r3, #0]
}
 8003b0e:	4770      	bx	lr
 8003b10:	420e0020 	.word	0x420e0020

08003b14 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b14:	2800      	cmp	r0, #0
 8003b16:	f000 8155 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x2b0>
{
 8003b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	6803      	ldr	r3, [r0, #0]
{
 8003b20:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	07dd      	lsls	r5, r3, #31
 8003b24:	4604      	mov	r4, r0
 8003b26:	d535      	bpl.n	8003b94 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b28:	49a8      	ldr	r1, [pc, #672]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003b2a:	684a      	ldr	r2, [r1, #4]
 8003b2c:	f002 020c 	and.w	r2, r2, #12
 8003b30:	2a04      	cmp	r2, #4
 8003b32:	f000 8105 	beq.w	8003d40 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b36:	684a      	ldr	r2, [r1, #4]
 8003b38:	f002 020c 	and.w	r2, r2, #12
 8003b3c:	2a08      	cmp	r2, #8
 8003b3e:	f000 80fb 	beq.w	8003d38 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b42:	6863      	ldr	r3, [r4, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d010      	beq.n	8003b6c <HAL_RCC_OscConfig+0x58>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8120 	beq.w	8003d90 <HAL_RCC_OscConfig+0x27c>
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b54:	f000 8178 	beq.w	8003e48 <HAL_RCC_OscConfig+0x334>
 8003b58:	4b9c      	ldr	r3, [pc, #624]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e004      	b.n	8003b76 <HAL_RCC_OscConfig+0x62>
 8003b6c:	4a97      	ldr	r2, [pc, #604]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7ff fa2d 	bl	8002fd4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4d94      	ldr	r5, [pc, #592]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8003b7c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7ff fa28 	bl	8002fd4 <HAL_GetTick>
 8003b84:	1b80      	subs	r0, r0, r6
 8003b86:	2864      	cmp	r0, #100	; 0x64
 8003b88:	f200 80f5 	bhi.w	8003d76 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	039a      	lsls	r2, r3, #14
 8003b90:	d5f6      	bpl.n	8003b80 <HAL_RCC_OscConfig+0x6c>
 8003b92:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b94:	079f      	lsls	r7, r3, #30
 8003b96:	d44d      	bmi.n	8003c34 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b98:	071a      	lsls	r2, r3, #28
 8003b9a:	d522      	bpl.n	8003be2 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9c:	69a3      	ldr	r3, [r4, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80ba 	beq.w	8003d18 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4b8a      	ldr	r3, [pc, #552]	; (8003dd0 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba8:	4d88      	ldr	r5, [pc, #544]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8003baa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003bac:	f7ff fa12 	bl	8002fd4 <HAL_GetTick>
 8003bb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e005      	b.n	8003bc0 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7ff fa0e 	bl	8002fd4 <HAL_GetTick>
 8003bb8:	1b80      	subs	r0, r0, r6
 8003bba:	2802      	cmp	r0, #2
 8003bbc:	f200 80db 	bhi.w	8003d76 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bc2:	079b      	lsls	r3, r3, #30
 8003bc4:	d5f6      	bpl.n	8003bb4 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bc6:	4b83      	ldr	r3, [pc, #524]	; (8003dd4 <HAL_RCC_OscConfig+0x2c0>)
 8003bc8:	4a83      	ldr	r2, [pc, #524]	; (8003dd8 <HAL_RCC_OscConfig+0x2c4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	0a5b      	lsrs	r3, r3, #9
 8003bd2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003bd4:	bf00      	nop
  }
  while (Delay --);
 8003bd6:	9b01      	ldr	r3, [sp, #4]
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	9201      	str	r2, [sp, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f9      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xc0>
 8003be0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be2:	075d      	lsls	r5, r3, #29
 8003be4:	d569      	bpl.n	8003cba <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	00d0      	lsls	r0, r2, #3
 8003bec:	f100 80ec 	bmi.w	8003dc8 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8003bf0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b75      	ldr	r3, [pc, #468]	; (8003ddc <HAL_RCC_OscConfig+0x2c8>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	05d1      	lsls	r1, r2, #23
 8003c0a:	f140 80a3 	bpl.w	8003d54 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0e:	68e3      	ldr	r3, [r4, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d037      	beq.n	8003c84 <HAL_RCC_OscConfig+0x170>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80e7 	beq.w	8003de8 <HAL_RCC_OscConfig+0x2d4>
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	4b6b      	ldr	r3, [pc, #428]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	f000 811f 	beq.w	8003e62 <HAL_RCC_OscConfig+0x34e>
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	621a      	str	r2, [r3, #32]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	f022 0204 	bic.w	r2, r2, #4
 8003c30:	621a      	str	r2, [r3, #32]
 8003c32:	e02c      	b.n	8003c8e <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c34:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003c36:	6851      	ldr	r1, [r2, #4]
 8003c38:	f011 0f0c 	tst.w	r1, #12
 8003c3c:	d061      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c3e:	6851      	ldr	r1, [r2, #4]
 8003c40:	f001 010c 	and.w	r1, r1, #12
 8003c44:	2908      	cmp	r1, #8
 8003c46:	d059      	beq.n	8003cfc <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c48:	6923      	ldr	r3, [r4, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80eb 	beq.w	8003e26 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8003c50:	2201      	movs	r2, #1
 8003c52:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4d5d      	ldr	r5, [pc, #372]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8003c56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c58:	f7ff f9bc 	bl	8002fd4 <HAL_GetTick>
 8003c5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	e005      	b.n	8003c6c <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c60:	f7ff f9b8 	bl	8002fd4 <HAL_GetTick>
 8003c64:	1b80      	subs	r0, r0, r6
 8003c66:	2802      	cmp	r0, #2
 8003c68:	f200 8085 	bhi.w	8003d76 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	0798      	lsls	r0, r3, #30
 8003c70:	d5f6      	bpl.n	8003c60 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	6962      	ldr	r2, [r4, #20]
 8003c76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c7e:	602b      	str	r3, [r5, #0]
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	e789      	b.n	8003b98 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c84:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003c86:	6a13      	ldr	r3, [r2, #32]
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003c8e:	f7ff f9a1 	bl	8002fd4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	4e4e      	ldr	r6, [pc, #312]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8003c94:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7ff f99a 	bl	8002fd4 <HAL_GetTick>
 8003ca0:	eba0 0008 	sub.w	r0, r0, r8
 8003ca4:	42b8      	cmp	r0, r7
 8003ca6:	d866      	bhi.n	8003d76 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	6a33      	ldr	r3, [r6, #32]
 8003caa:	079b      	lsls	r3, r3, #30
 8003cac:	d5f6      	bpl.n	8003c9c <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8003cae:	b125      	cbz	r5, 8003cba <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4a46      	ldr	r2, [pc, #280]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003cb2:	69d3      	ldr	r3, [r2, #28]
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cba:	69e0      	ldr	r0, [r4, #28]
 8003cbc:	b1d0      	cbz	r0, 8003cf4 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cbe:	4d43      	ldr	r5, [pc, #268]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003cc0:	686a      	ldr	r2, [r5, #4]
 8003cc2:	f002 020c 	and.w	r2, r2, #12
 8003cc6:	2a08      	cmp	r2, #8
 8003cc8:	f000 80d3 	beq.w	8003e72 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ccc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	4a44      	ldr	r2, [pc, #272]	; (8003de4 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd4:	f000 80de 	beq.w	8003e94 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8003cd8:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8003cda:	f7ff f97b 	bl	8002fd4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cde:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003ce0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	e004      	b.n	8003cee <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7ff f976 	bl	8002fd4 <HAL_GetTick>
 8003ce8:	1b40      	subs	r0, r0, r5
 8003cea:	2802      	cmp	r0, #2
 8003cec:	d843      	bhi.n	8003d76 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	d4f7      	bmi.n	8003ce4 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8003cf4:	2000      	movs	r0, #0
}
 8003cf6:	b002      	add	sp, #8
 8003cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cfc:	6852      	ldr	r2, [r2, #4]
 8003cfe:	03d6      	lsls	r6, r2, #15
 8003d00:	d4a2      	bmi.n	8003c48 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4a32      	ldr	r2, [pc, #200]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	0795      	lsls	r5, r2, #30
 8003d08:	d539      	bpl.n	8003d7e <HAL_RCC_OscConfig+0x26a>
 8003d0a:	6922      	ldr	r2, [r4, #16]
 8003d0c:	2a01      	cmp	r2, #1
 8003d0e:	d036      	beq.n	8003d7e <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
}
 8003d12:	b002      	add	sp, #8
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003d18:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1a:	4d2c      	ldr	r5, [pc, #176]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8003d1c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003d1e:	f7ff f959 	bl	8002fd4 <HAL_GetTick>
 8003d22:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	e004      	b.n	8003d30 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d26:	f7ff f955 	bl	8002fd4 <HAL_GetTick>
 8003d2a:	1b80      	subs	r0, r0, r6
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	d822      	bhi.n	8003d76 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d32:	079f      	lsls	r7, r3, #30
 8003d34:	d4f7      	bmi.n	8003d26 <HAL_RCC_OscConfig+0x212>
 8003d36:	e753      	b.n	8003be0 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d38:	684a      	ldr	r2, [r1, #4]
 8003d3a:	03d0      	lsls	r0, r2, #15
 8003d3c:	f57f af01 	bpl.w	8003b42 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	0391      	lsls	r1, r2, #14
 8003d46:	f57f af25 	bpl.w	8003b94 <HAL_RCC_OscConfig+0x80>
 8003d4a:	6862      	ldr	r2, [r4, #4]
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	f47f af21 	bne.w	8003b94 <HAL_RCC_OscConfig+0x80>
 8003d52:	e7dd      	b.n	8003d10 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d54:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d5e:	f7ff f939 	bl	8002fd4 <HAL_GetTick>
 8003d62:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d64:	6833      	ldr	r3, [r6, #0]
 8003d66:	05da      	lsls	r2, r3, #23
 8003d68:	f53f af51 	bmi.w	8003c0e <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7ff f932 	bl	8002fd4 <HAL_GetTick>
 8003d70:	1bc0      	subs	r0, r0, r7
 8003d72:	2864      	cmp	r0, #100	; 0x64
 8003d74:	d9f6      	bls.n	8003d64 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8003d76:	2003      	movs	r0, #3
}
 8003d78:	b002      	add	sp, #8
 8003d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4913      	ldr	r1, [pc, #76]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003d80:	6960      	ldr	r0, [r4, #20]
 8003d82:	680a      	ldr	r2, [r1, #0]
 8003d84:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003d88:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003d8c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	e703      	b.n	8003b98 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d94:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003d98:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003da8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003daa:	f7ff f913 	bl	8002fd4 <HAL_GetTick>
 8003dae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db0:	e004      	b.n	8003dbc <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db2:	f7ff f90f 	bl	8002fd4 <HAL_GetTick>
 8003db6:	1b80      	subs	r0, r0, r6
 8003db8:	2864      	cmp	r0, #100	; 0x64
 8003dba:	d8dc      	bhi.n	8003d76 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	039b      	lsls	r3, r3, #14
 8003dc0:	d4f7      	bmi.n	8003db2 <HAL_RCC_OscConfig+0x29e>
 8003dc2:	e6e6      	b.n	8003b92 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8003dc4:	2001      	movs	r0, #1
}
 8003dc6:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8003dc8:	2500      	movs	r5, #0
 8003dca:	e71b      	b.n	8003c04 <HAL_RCC_OscConfig+0xf0>
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	42420480 	.word	0x42420480
 8003dd4:	20000004 	.word	0x20000004
 8003dd8:	10624dd3 	.word	0x10624dd3
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42420000 	.word	0x42420000
 8003de4:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003df0:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df2:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	621a      	str	r2, [r3, #32]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	f022 0204 	bic.w	r2, r2, #4
 8003e04:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8003e06:	f7ff f8e5 	bl	8002fd4 <HAL_GetTick>
 8003e0a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0c:	e004      	b.n	8003e18 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7ff f8e1 	bl	8002fd4 <HAL_GetTick>
 8003e12:	1bc0      	subs	r0, r0, r7
 8003e14:	4540      	cmp	r0, r8
 8003e16:	d8ae      	bhi.n	8003d76 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	6a33      	ldr	r3, [r6, #32]
 8003e1a:	0798      	lsls	r0, r3, #30
 8003e1c:	d4f7      	bmi.n	8003e0e <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	f43f af4b 	beq.w	8003cba <HAL_RCC_OscConfig+0x1a6>
 8003e24:	e744      	b.n	8003cb0 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e28:	4d34      	ldr	r5, [pc, #208]	; (8003efc <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8003e2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e2c:	f7ff f8d2 	bl	8002fd4 <HAL_GetTick>
 8003e30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	e004      	b.n	8003e3e <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e34:	f7ff f8ce 	bl	8002fd4 <HAL_GetTick>
 8003e38:	1b80      	subs	r0, r0, r6
 8003e3a:	2802      	cmp	r0, #2
 8003e3c:	d89b      	bhi.n	8003d76 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	0799      	lsls	r1, r3, #30
 8003e42:	d4f7      	bmi.n	8003e34 <HAL_RCC_OscConfig+0x320>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	e6a7      	b.n	8003b98 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e4c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e689      	b.n	8003b76 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e62:	f042 0204 	orr.w	r2, r2, #4
 8003e66:	621a      	str	r2, [r3, #32]
 8003e68:	6a1a      	ldr	r2, [r3, #32]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	621a      	str	r2, [r3, #32]
 8003e70:	e70d      	b.n	8003c8e <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e72:	2801      	cmp	r0, #1
 8003e74:	f43f af4d 	beq.w	8003d12 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8003e78:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	6a22      	ldr	r2, [r4, #32]
 8003e7c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003e80:	4291      	cmp	r1, r2
 8003e82:	f47f af45 	bne.w	8003d10 <HAL_RCC_OscConfig+0x1fc>
 8003e86:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003e8c:	1a18      	subs	r0, r3, r0
 8003e8e:	bf18      	it	ne
 8003e90:	2001      	movne	r0, #1
 8003e92:	e73e      	b.n	8003d12 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8003e94:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8003e96:	f7ff f89d 	bl	8002fd4 <HAL_GetTick>
 8003e9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9c:	e005      	b.n	8003eaa <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7ff f899 	bl	8002fd4 <HAL_GetTick>
 8003ea2:	1b80      	subs	r0, r0, r6
 8003ea4:	2802      	cmp	r0, #2
 8003ea6:	f63f af66 	bhi.w	8003d76 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	0199      	lsls	r1, r3, #6
 8003eae:	d4f6      	bmi.n	8003e9e <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003eb0:	6a22      	ldr	r2, [r4, #32]
 8003eb2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eb8:	686b      	ldr	r3, [r5, #4]
 8003eba:	68a1      	ldr	r1, [r4, #8]
 8003ebc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <HAL_RCC_OscConfig+0x3e8>)
 8003ec8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	4302      	orrs	r2, r0
 8003ece:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003ed2:	480b      	ldr	r0, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ed8:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eda:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8003edc:	f7ff f87a 	bl	8002fd4 <HAL_GetTick>
 8003ee0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee2:	e005      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7ff f876 	bl	8002fd4 <HAL_GetTick>
 8003ee8:	1b40      	subs	r0, r0, r5
 8003eea:	2802      	cmp	r0, #2
 8003eec:	f63f af43 	bhi.w	8003d76 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	019a      	lsls	r2, r3, #6
 8003ef4:	d5f6      	bpl.n	8003ee4 <HAL_RCC_OscConfig+0x3d0>
 8003ef6:	e6fd      	b.n	8003cf4 <HAL_RCC_OscConfig+0x1e0>
 8003ef8:	42420000 	.word	0x42420000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	42420060 	.word	0x42420060

08003f04 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f04:	f240 2201 	movw	r2, #513	; 0x201
{
 8003f08:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003f0c:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f10:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f16:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8003f1a:	4912      	ldr	r1, [pc, #72]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x60>)
 8003f1c:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	2a08      	cmp	r2, #8
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003f26:	4810      	ldr	r0, [pc, #64]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003f28:	b006      	add	sp, #24
 8003f2a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f2c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003f30:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f32:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f34:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f38:	d404      	bmi.n	8003f44 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f3a:	480c      	ldr	r0, [pc, #48]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x68>)
 8003f3c:	fb00 f002 	mul.w	r0, r0, r2
}
 8003f40:	b006      	add	sp, #24
 8003f42:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f44:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f46:	4808      	ldr	r0, [pc, #32]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f48:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f4c:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f50:	4463      	add	r3, ip
 8003f52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f56:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003f5a:	b006      	add	sp, #24
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	08008584 	.word	0x08008584
 8003f64:	40021000 	.word	0x40021000
 8003f68:	007a1200 	.word	0x007a1200
 8003f6c:	003d0900 	.word	0x003d0900

08003f70 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003f70:	b178      	cbz	r0, 8003f92 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f72:	4a4a      	ldr	r2, [pc, #296]	; (800409c <HAL_RCC_ClockConfig+0x12c>)
 8003f74:	6813      	ldr	r3, [r2, #0]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	428b      	cmp	r3, r1
 8003f7c:	d20b      	bcs.n	8003f96 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	f023 0307 	bic.w	r3, r3, #7
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f88:	6813      	ldr	r3, [r2, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
}
 8003f94:	4770      	bx	lr
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f96:	6803      	ldr	r3, [r0, #0]
{
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	079d      	lsls	r5, r3, #30
 8003f9e:	d514      	bpl.n	8003fca <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	075c      	lsls	r4, r3, #29
 8003fa2:	d504      	bpl.n	8003fae <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4c3e      	ldr	r4, [pc, #248]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003fac:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	071a      	lsls	r2, r3, #28
 8003fb0:	d504      	bpl.n	8003fbc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb2:	4c3b      	ldr	r4, [pc, #236]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
 8003fb4:	6862      	ldr	r2, [r4, #4]
 8003fb6:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003fba:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4c38      	ldr	r4, [pc, #224]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
 8003fbe:	6885      	ldr	r5, [r0, #8]
 8003fc0:	6862      	ldr	r2, [r4, #4]
 8003fc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003fc6:	432a      	orrs	r2, r5
 8003fc8:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fca:	07df      	lsls	r7, r3, #31
 8003fcc:	4604      	mov	r4, r0
 8003fce:	460d      	mov	r5, r1
 8003fd0:	d520      	bpl.n	8004014 <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd8:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	d056      	beq.n	800408a <HAL_RCC_ClockConfig+0x11a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fdc:	2a02      	cmp	r2, #2
 8003fde:	d059      	beq.n	8004094 <HAL_RCC_ClockConfig+0x124>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	0799      	lsls	r1, r3, #30
 8003fe2:	d527      	bpl.n	8004034 <HAL_RCC_ClockConfig+0xc4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fe4:	4e2e      	ldr	r6, [pc, #184]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	6873      	ldr	r3, [r6, #4]
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003ff4:	f7fe ffee 	bl	8002fd4 <HAL_GetTick>
 8003ff8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	e004      	b.n	8004006 <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fe ffea 	bl	8002fd4 <HAL_GetTick>
 8004000:	1bc0      	subs	r0, r0, r7
 8004002:	4540      	cmp	r0, r8
 8004004:	d844      	bhi.n	8004090 <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	6873      	ldr	r3, [r6, #4]
 8004008:	6862      	ldr	r2, [r4, #4]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004012:	d1f3      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <HAL_RCC_ClockConfig+0x12c>)
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	42ab      	cmp	r3, r5
 800401e:	d90c      	bls.n	800403a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	432b      	orrs	r3, r5
 8004028:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	42ab      	cmp	r3, r5
 8004032:	d002      	beq.n	800403a <HAL_RCC_ClockConfig+0xca>
    return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
}
 8004036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	075a      	lsls	r2, r3, #29
 800403e:	d506      	bpl.n	800404e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004040:	4917      	ldr	r1, [pc, #92]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
 8004042:	68e0      	ldr	r0, [r4, #12]
 8004044:	684a      	ldr	r2, [r1, #4]
 8004046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800404a:	4302      	orrs	r2, r0
 800404c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404e:	071b      	lsls	r3, r3, #28
 8004050:	d412      	bmi.n	8004078 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004052:	f7ff ff57 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
 8004058:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <HAL_RCC_ClockConfig+0x134>)
 800405a:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 800405c:	4912      	ldr	r1, [pc, #72]	; (80040a8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800405e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004062:	5cd3      	ldrb	r3, [r2, r3]
 8004064:	4a11      	ldr	r2, [pc, #68]	; (80040ac <HAL_RCC_ClockConfig+0x13c>)
 8004066:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 800406a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800406c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800406e:	f7fe ff6f 	bl	8002f50 <HAL_InitTick>
  return HAL_OK;
 8004072:	2000      	movs	r0, #0
}
 8004074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x130>)
 800407a:	6921      	ldr	r1, [r4, #16]
 800407c:	6853      	ldr	r3, [r2, #4]
 800407e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004082:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004086:	6053      	str	r3, [r2, #4]
 8004088:	e7e3      	b.n	8004052 <HAL_RCC_ClockConfig+0xe2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	039e      	lsls	r6, r3, #14
 800408c:	d4aa      	bmi.n	8003fe4 <HAL_RCC_ClockConfig+0x74>
 800408e:	e7d1      	b.n	8004034 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 8004090:	2003      	movs	r0, #3
 8004092:	e7ef      	b.n	8004074 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004094:	0198      	lsls	r0, r3, #6
 8004096:	d4a5      	bmi.n	8003fe4 <HAL_RCC_ClockConfig+0x74>
 8004098:	e7cc      	b.n	8004034 <HAL_RCC_ClockConfig+0xc4>
 800409a:	bf00      	nop
 800409c:	40022000 	.word	0x40022000
 80040a0:	40021000 	.word	0x40021000
 80040a4:	080086a0 	.word	0x080086a0
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	20000004 	.word	0x20000004

080040b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80040b2:	4905      	ldr	r1, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80040b4:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80040b6:	4a05      	ldr	r2, [pc, #20]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	6810      	ldr	r0, [r2, #0]
}
 80040c0:	40d8      	lsrs	r0, r3
 80040c2:	4770      	bx	lr
 80040c4:	40021000 	.word	0x40021000
 80040c8:	080086b0 	.word	0x080086b0
 80040cc:	20000004 	.word	0x20000004

080040d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80040d2:	4905      	ldr	r1, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80040d4:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040d8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80040dc:	5ccb      	ldrb	r3, [r1, r3]
 80040de:	6810      	ldr	r0, [r2, #0]
}
 80040e0:	40d8      	lsrs	r0, r3
 80040e2:	4770      	bx	lr
 80040e4:	40021000 	.word	0x40021000
 80040e8:	080086b0 	.word	0x080086b0
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040f6:	6800      	ldr	r0, [r0, #0]
{
 80040f8:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040fa:	07c5      	lsls	r5, r0, #31
 80040fc:	d52a      	bpl.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fe:	4b3a      	ldr	r3, [pc, #232]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	00d1      	lsls	r1, r2, #3
 8004104:	d53d      	bpl.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8004108:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	05d2      	lsls	r2, r2, #23
 800410e:	d546      	bpl.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004110:	4935      	ldr	r1, [pc, #212]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004112:	6860      	ldr	r0, [r4, #4]
 8004114:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004116:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800411a:	d00f      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800411c:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004124:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004126:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004128:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800412a:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800412c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004130:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004132:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004134:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004136:	07d8      	lsls	r0, r3, #31
 8004138:	d445      	bmi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800413a:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413c:	4a2a      	ldr	r2, [pc, #168]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800413e:	6a13      	ldr	r3, [r2, #32]
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	4303      	orrs	r3, r0
 8004146:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004148:	b11d      	cbz	r5, 8004152 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414a:	69d3      	ldr	r3, [r2, #28]
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004150:	61d3      	str	r3, [r2, #28]
 8004152:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004154:	0783      	lsls	r3, r0, #30
 8004156:	d506      	bpl.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004158:	4a23      	ldr	r2, [pc, #140]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800415a:	68a1      	ldr	r1, [r4, #8]
 800415c:	6853      	ldr	r3, [r2, #4]
 800415e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004162:	430b      	orrs	r3, r1
 8004164:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004166:	f010 0010 	ands.w	r0, r0, #16
 800416a:	d007      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800416c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004170:	68e1      	ldr	r1, [r4, #12]
 8004172:	6853      	ldr	r3, [r2, #4]
 8004174:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004178:	430b      	orrs	r3, r1
 800417a:	6053      	str	r3, [r2, #4]
}
 800417c:	b002      	add	sp, #8
 800417e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004184:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004186:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800418a:	61da      	str	r2, [r3, #28]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	05d2      	lsls	r2, r2, #23
 800419c:	d4b8      	bmi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419e:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80041a8:	f7fe ff14 	bl	8002fd4 <HAL_GetTick>
 80041ac:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	6833      	ldr	r3, [r6, #0]
 80041b0:	05db      	lsls	r3, r3, #23
 80041b2:	d4ad      	bmi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b4:	f7fe ff0e 	bl	8002fd4 <HAL_GetTick>
 80041b8:	1bc0      	subs	r0, r0, r7
 80041ba:	2864      	cmp	r0, #100	; 0x64
 80041bc:	d9f7      	bls.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80041be:	2003      	movs	r0, #3
}
 80041c0:	b002      	add	sp, #8
 80041c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c6:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 80041c8:	f7fe ff04 	bl	8002fd4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041cc:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80041d0:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	6a33      	ldr	r3, [r6, #32]
 80041d4:	079a      	lsls	r2, r3, #30
 80041d6:	d4b0      	bmi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fe fefc 	bl	8002fd4 <HAL_GetTick>
 80041dc:	eba0 0008 	sub.w	r0, r0, r8
 80041e0:	42b8      	cmp	r0, r7
 80041e2:	d9f6      	bls.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041e4:	e7eb      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xce>
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40007000 	.word	0x40007000
 80041f0:	42420440 	.word	0x42420440

080041f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041f4:	b510      	push	{r4, lr}
 80041f6:	4604      	mov	r4, r0
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041f8:	f240 2201 	movw	r2, #513	; 0x201
{
 80041fc:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041fe:	4b34      	ldr	r3, [pc, #208]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8004200:	f10d 0c18 	add.w	ip, sp, #24
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004204:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004206:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800420a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800420c:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  switch (PeriphClk)
 8004210:	d042      	beq.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8004212:	2c10      	cmp	r4, #16
 8004214:	d01c      	beq.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004216:	2c01      	cmp	r4, #1
 8004218:	d002      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  uint32_t temp_reg = 0U, frequency = 0U;
 800421a:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 800421c:	b006      	add	sp, #24
 800421e:	bd10      	pop	{r4, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004220:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8004224:	492b      	ldr	r1, [pc, #172]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8004226:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004228:	401a      	ands	r2, r3
 800422a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800422e:	d04b      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d03a      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800423a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423e:	d1ec      	bne.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8004240:	680b      	ldr	r3, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8004242:	f24f 4024 	movw	r0, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004246:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        frequency = HSE_VALUE / 128U;
 800424a:	bf08      	it	eq
 800424c:	2000      	moveq	r0, #0
 800424e:	e7e5      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      temp_reg = RCC->CFGR;
 8004250:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8004252:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800425a:	d0df      	beq.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800425c:	a806      	add	r0, sp, #24
 800425e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8004262:	4402      	add	r2, r0
 8004264:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004268:	03ca      	lsls	r2, r1, #15
 800426a:	d529      	bpl.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	a906      	add	r1, sp, #24
 8004270:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004274:	440b      	add	r3, r1
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004278:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	fb00 f003 	mul.w	r0, r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	025b      	lsls	r3, r3, #9
 800428a:	d4c7      	bmi.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          frequency = (pllclk * 2) / 3;
 800428c:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 800428e:	0040      	lsls	r0, r0, #1
 8004290:	fba3 3000 	umull	r3, r0, r3, r0
 8004294:	0840      	lsrs	r0, r0, #1
 8004296:	e7c1      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004298:	f7ff ff1a 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80042a4:	3301      	adds	r3, #1
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80042ac:	b006      	add	sp, #24
 80042ae:	bd10      	pop	{r4, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 80042b2:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042b6:	f013 0f02 	tst.w	r3, #2
        frequency = LSI_VALUE;
 80042ba:	bf08      	it	eq
 80042bc:	2000      	moveq	r0, #0
 80042be:	e7ad      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80042c2:	fb03 f000 	mul.w	r0, r3, r0
 80042c6:	e7dd      	b.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
        frequency = LSE_VALUE;
 80042c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042cc:	e7a6      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80042ce:	bf00      	nop
 80042d0:	08008594 	.word	0x08008594
 80042d4:	40021000 	.word	0x40021000
 80042d8:	007a1200 	.word	0x007a1200
 80042dc:	aaaaaaab 	.word	0xaaaaaaab
 80042e0:	003d0900 	.word	0x003d0900

080042e4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80042e4:	b430      	push	{r4, r5}
 80042e6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80042ea:	4c17      	ldr	r4, [pc, #92]	; (8004348 <RTC_WeekDayNum+0x64>)
 80042ec:	ebc1 03c3 	rsb	r3, r1, r3, lsl #3
 80042f0:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 80042f4:	2902      	cmp	r1, #2
 80042f6:	ea4f 0453 	mov.w	r4, r3, lsr #1
  year = 2000U + nYear;
 80042fa:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80042fe:	4913      	ldr	r1, [pc, #76]	; (800434c <RTC_WeekDayNum+0x68>)
  if (nMonth < 3U)
 8004300:	d917      	bls.n	8004332 <RTC_WeekDayNum+0x4e>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004302:	3202      	adds	r2, #2
 8004304:	fba1 3105 	umull	r3, r1, r1, r5
 8004308:	1953      	adds	r3, r2, r5
 800430a:	4423      	add	r3, r4
 800430c:	eb03 0395 	add.w	r3, r3, r5, lsr #2
 8004310:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8004314:	480e      	ldr	r0, [pc, #56]	; (8004350 <RTC_WeekDayNum+0x6c>)
 8004316:	eba3 1351 	sub.w	r3, r3, r1, lsr #5
 800431a:	fba0 2003 	umull	r2, r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800431e:	bc30      	pop	{r4, r5}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004320:	1a1a      	subs	r2, r3, r0
 8004322:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8004326:	0880      	lsrs	r0, r0, #2
 8004328:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800432c:	1a18      	subs	r0, r3, r0
}
 800432e:	b2c0      	uxtb	r0, r0
 8004330:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004332:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8004336:	3204      	adds	r2, #4
 8004338:	fba1 3100 	umull	r3, r1, r1, r0
 800433c:	1953      	adds	r3, r2, r5
 800433e:	4423      	add	r3, r4
 8004340:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8004344:	e7e4      	b.n	8004310 <RTC_WeekDayNum+0x2c>
 8004346:	bf00      	nop
 8004348:	38e38e39 	.word	0x38e38e39
 800434c:	51eb851f 	.word	0x51eb851f
 8004350:	24924925 	.word	0x24924925

08004354 <RTC_EnterInitMode>:
{
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8004358:	f7fe fe3c 	bl	8002fd4 <HAL_GetTick>
 800435c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800435e:	e005      	b.n	800436c <RTC_EnterInitMode+0x18>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004360:	f7fe fe38 	bl	8002fd4 <HAL_GetTick>
 8004364:	1b40      	subs	r0, r0, r5
 8004366:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800436a:	d809      	bhi.n	8004380 <RTC_EnterInitMode+0x2c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	0692      	lsls	r2, r2, #26
 8004372:	d5f5      	bpl.n	8004360 <RTC_EnterInitMode+0xc>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004374:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;
 8004376:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004378:	f042 0210 	orr.w	r2, r2, #16
 800437c:	605a      	str	r2, [r3, #4]
}
 800437e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8004380:	2003      	movs	r0, #3
}
 8004382:	bd38      	pop	{r3, r4, r5, pc}

08004384 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004384:	6802      	ldr	r2, [r0, #0]
{
 8004386:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004388:	6853      	ldr	r3, [r2, #4]
{
 800438a:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800438c:	f023 0310 	bic.w	r3, r3, #16
 8004390:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004392:	f7fe fe1f 	bl	8002fd4 <HAL_GetTick>
 8004396:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004398:	e005      	b.n	80043a6 <RTC_ExitInitMode+0x22>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800439a:	f7fe fe1b 	bl	8002fd4 <HAL_GetTick>
 800439e:	1b40      	subs	r0, r0, r5
 80043a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043a4:	d805      	bhi.n	80043b2 <RTC_ExitInitMode+0x2e>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	069b      	lsls	r3, r3, #26
 80043ac:	d5f5      	bpl.n	800439a <RTC_ExitInitMode+0x16>
  return HAL_OK;
 80043ae:	2000      	movs	r0, #0
}
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80043b2:	2003      	movs	r0, #3
}
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
 80043b6:	bf00      	nop

080043b8 <RTC_WriteTimeCounter>:
{
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	460c      	mov	r4, r1
 80043bc:	4605      	mov	r5, r0
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043be:	f7ff ffc9 	bl	8004354 <RTC_EnterInitMode>
 80043c2:	b108      	cbz	r0, 80043c8 <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 80043c4:	2001      	movs	r0, #1
}
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80043cc:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80043ce:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043d0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80043d2:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043d4:	f7ff ffd6 	bl	8004384 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80043d8:	3000      	adds	r0, #0
 80043da:	bf18      	it	ne
 80043dc:	2001      	movne	r0, #1
}
 80043de:	bd38      	pop	{r3, r4, r5, pc}

080043e0 <RTC_WriteAlarmCounter>:
{
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	460c      	mov	r4, r1
 80043e4:	4605      	mov	r5, r0
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043e6:	f7ff ffb5 	bl	8004354 <RTC_EnterInitMode>
 80043ea:	b108      	cbz	r0, 80043f0 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 80043ec:	2001      	movs	r0, #1
}
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80043f4:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80043f6:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043f8:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80043fa:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043fc:	f7ff ffc2 	bl	8004384 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8004400:	3000      	adds	r0, #0
 8004402:	bf18      	it	ne
 8004404:	2001      	movne	r0, #1
}
 8004406:	bd38      	pop	{r3, r4, r5, pc}

08004408 <HAL_RTC_GetTime.part.2>:
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 8004408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800440c:	6807      	ldr	r7, [r0, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	075c      	lsls	r4, r3, #29
 8004412:	d44d      	bmi.n	80044b0 <HAL_RTC_GetTime.part.2+0xa8>
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004414:	69bc      	ldr	r4, [r7, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004416:	69fd      	ldr	r5, [r7, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004418:	69bb      	ldr	r3, [r7, #24]
  if (high1 != high2)
 800441a:	fa1f fc84 	uxth.w	ip, r4
 800441e:	b29e      	uxth	r6, r3
 8004420:	45b4      	cmp	ip, r6
 8004422:	d07a      	beq.n	800451a <HAL_RTC_GetTime.part.2+0x112>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004424:	69fd      	ldr	r5, [r7, #28]
 8004426:	b2ad      	uxth	r5, r5
 8004428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800442c:	460c      	mov	r4, r1
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800442e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  hours = counter_time / 3600U;
 8004432:	4b98      	ldr	r3, [pc, #608]	; (8004694 <HAL_RTC_GetTime.part.2+0x28c>)
 8004434:	4680      	mov	r8, r0
 8004436:	fba3 0305 	umull	r0, r3, r3, r5
 800443a:	0adb      	lsrs	r3, r3, #11
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800443c:	fb01 5113 	mls	r1, r1, r3, r5
 8004440:	4616      	mov	r6, r2
 8004442:	4a95      	ldr	r2, [pc, #596]	; (8004698 <HAL_RTC_GetTime.part.2+0x290>)
  if (hours >= 24U)
 8004444:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004446:	fba2 0201 	umull	r0, r2, r2, r1
 800444a:	ea4f 1252 	mov.w	r2, r2, lsr #5
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800444e:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 8004452:	eba1 0180 	sub.w	r1, r1, r0, lsl #2
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004456:	7062      	strb	r2, [r4, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004458:	70a1      	strb	r1, [r4, #2]
  if (hours >= 24U)
 800445a:	d92c      	bls.n	80044b6 <HAL_RTC_GetTime.part.2+0xae>
    sTime->Hours = (hours % 24U);
 800445c:	4a8f      	ldr	r2, [pc, #572]	; (800469c <HAL_RTC_GetTime.part.2+0x294>)
 800445e:	4990      	ldr	r1, [pc, #576]	; (80046a0 <HAL_RTC_GetTime.part.2+0x298>)
 8004460:	fba2 0203 	umull	r0, r2, r2, r3
 8004464:	0912      	lsrs	r2, r2, #4
 8004466:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800446a:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
 800446e:	7023      	strb	r3, [r4, #0]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004470:	6a38      	ldr	r0, [r7, #32]
 8004472:	fba1 2305 	umull	r2, r3, r1, r5
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004478:	4a8a      	ldr	r2, [pc, #552]	; (80046a4 <HAL_RTC_GetTime.part.2+0x29c>)
  return (((uint32_t) high1 << 16U) | low);
 800447a:	fa1f f981 	uxth.w	r9, r1
 800447e:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8004482:	0c1f      	lsrs	r7, r3, #16
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004484:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004488:	fb02 5717 	mls	r7, r2, r7, r5
 800448c:	d04c      	beq.n	8004528 <HAL_RTC_GetTime.part.2+0x120>
 800448e:	454d      	cmp	r5, r9
 8004490:	d24a      	bcs.n	8004528 <HAL_RTC_GetTime.part.2+0x120>
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004492:	4639      	mov	r1, r7
 8004494:	4640      	mov	r0, r8
 8004496:	f7ff ff8f 	bl	80043b8 <RTC_WriteTimeCounter>
 800449a:	b948      	cbnz	r0, 80044b0 <HAL_RTC_GetTime.part.2+0xa8>
      counter_alarm -= counter_time;
 800449c:	eba9 0105 	sub.w	r1, r9, r5
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80044a0:	1c4b      	adds	r3, r1, #1
 80044a2:	d047      	beq.n	8004534 <HAL_RTC_GetTime.part.2+0x12c>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044a4:	4439      	add	r1, r7
 80044a6:	4640      	mov	r0, r8
 80044a8:	f7ff ff9a 	bl	80043e0 <RTC_WriteAlarmCounter>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d048      	beq.n	8004542 <HAL_RTC_GetTime.part.2+0x13a>
    return HAL_ERROR;
 80044b0:	2001      	movs	r0, #1
}
 80044b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sTime->Hours = hours;
 80044b6:	7023      	strb	r3, [r4, #0]
  if (Format != RTC_FORMAT_BIN)
 80044b8:	b39e      	cbz	r6, 8004522 <HAL_RTC_GetTime.part.2+0x11a>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80044ba:	7823      	ldrb	r3, [r4, #0]
  while (Value >= 10U)
 80044bc:	2b09      	cmp	r3, #9
 80044be:	f240 80b8 	bls.w	8004632 <HAL_RTC_GetTime.part.2+0x22a>
  uint32_t bcdhigh = 0U;
 80044c2:	2200      	movs	r2, #0
    Value -= 10U;
 80044c4:	3b0a      	subs	r3, #10
 80044c6:	b2db      	uxtb	r3, r3
  while (Value >= 10U)
 80044c8:	2b09      	cmp	r3, #9
    bcdhigh++;
 80044ca:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 80044ce:	d8f9      	bhi.n	80044c4 <HAL_RTC_GetTime.part.2+0xbc>
 80044d0:	0112      	lsls	r2, r2, #4
 80044d2:	b2d1      	uxtb	r1, r2
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80044d4:	7862      	ldrb	r2, [r4, #1]
  return ((uint8_t)(bcdhigh << 4U) | Value);
 80044d6:	430b      	orrs	r3, r1
  while (Value >= 10U)
 80044d8:	2a09      	cmp	r2, #9
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80044da:	7023      	strb	r3, [r4, #0]
  while (Value >= 10U)
 80044dc:	f240 80a7 	bls.w	800462e <HAL_RTC_GetTime.part.2+0x226>
  uint32_t bcdhigh = 0U;
 80044e0:	2300      	movs	r3, #0
    Value -= 10U;
 80044e2:	3a0a      	subs	r2, #10
 80044e4:	b2d2      	uxtb	r2, r2
  while (Value >= 10U)
 80044e6:	2a09      	cmp	r2, #9
    bcdhigh++;
 80044e8:	f103 0301 	add.w	r3, r3, #1
  while (Value >= 10U)
 80044ec:	d8f9      	bhi.n	80044e2 <HAL_RTC_GetTime.part.2+0xda>
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	b2d9      	uxtb	r1, r3
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80044f2:	78a3      	ldrb	r3, [r4, #2]
  return ((uint8_t)(bcdhigh << 4U) | Value);
 80044f4:	430a      	orrs	r2, r1
  while (Value >= 10U)
 80044f6:	2b09      	cmp	r3, #9
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80044f8:	7062      	strb	r2, [r4, #1]
  uint32_t bcdhigh = 0U;
 80044fa:	f04f 0200 	mov.w	r2, #0
  while (Value >= 10U)
 80044fe:	d907      	bls.n	8004510 <HAL_RTC_GetTime.part.2+0x108>
    Value -= 10U;
 8004500:	3b0a      	subs	r3, #10
 8004502:	b2db      	uxtb	r3, r3
  while (Value >= 10U)
 8004504:	2b09      	cmp	r3, #9
    bcdhigh++;
 8004506:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 800450a:	d8f9      	bhi.n	8004500 <HAL_RTC_GetTime.part.2+0xf8>
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	b2d2      	uxtb	r2, r2
  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004510:	4313      	orrs	r3, r2
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004512:	70a3      	strb	r3, [r4, #2]
  return HAL_OK;
 8004514:	2000      	movs	r0, #0
}
 8004516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    timecounter = (((uint32_t) high1 << 16U) | low);
 800451a:	b2ad      	uxth	r5, r5
 800451c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8004520:	e784      	b.n	800442c <HAL_RTC_GetTime.part.2+0x24>
  return HAL_OK;
 8004522:	4630      	mov	r0, r6
}
 8004524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004528:	4639      	mov	r1, r7
 800452a:	4640      	mov	r0, r8
 800452c:	f7ff ff44 	bl	80043b8 <RTC_WriteTimeCounter>
 8004530:	2800      	cmp	r0, #0
 8004532:	d1bd      	bne.n	80044b0 <HAL_RTC_GetTime.part.2+0xa8>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004534:	f04f 31ff 	mov.w	r1, #4294967295
 8004538:	4640      	mov	r0, r8
 800453a:	f7ff ff51 	bl	80043e0 <RTC_WriteAlarmCounter>
 800453e:	2800      	cmp	r0, #0
 8004540:	d1b6      	bne.n	80044b0 <HAL_RTC_GetTime.part.2+0xa8>
    days_elapsed = (hours / 24U);
 8004542:	4a57      	ldr	r2, [pc, #348]	; (80046a0 <HAL_RTC_GetTime.part.2+0x298>)
  month = hrtc->DateToUpdate.Month;
 8004544:	f898 300d 	ldrb.w	r3, [r8, #13]
    days_elapsed = (hours / 24U);
 8004548:	fba2 2505 	umull	r2, r5, r2, r5
  day = hrtc->DateToUpdate.Date;
 800454c:	f898 700e 	ldrb.w	r7, [r8, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004550:	0c2d      	lsrs	r5, r5, #16
  month = hrtc->DateToUpdate.Month;
 8004552:	4619      	mov	r1, r3
  day = hrtc->DateToUpdate.Date;
 8004554:	463a      	mov	r2, r7
  year = hrtc->DateToUpdate.Year;
 8004556:	f898 000f 	ldrb.w	r0, [r8, #15]
  for (loop = 0U; loop < DayElapsed; loop++)
 800455a:	d043      	beq.n	80045e4 <HAL_RTC_GetTime.part.2+0x1dc>
 800455c:	2200      	movs	r2, #0
  if ((nYear % 100U) != 0U)
 800455e:	f04f 0964 	mov.w	r9, #100	; 0x64
  if ((nYear % 400U) == 0U)
 8004562:	f44f 7ec8 	mov.w	lr, #400	; 0x190
  if ((nYear % 100U) != 0U)
 8004566:	f8df c140 	ldr.w	ip, [pc, #320]	; 80046a8 <HAL_RTC_GetTime.part.2+0x2a0>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800456a:	2b01      	cmp	r3, #1
 800456c:	f102 0101 	add.w	r1, r2, #1
 8004570:	d04b      	beq.n	800460a <HAL_RTC_GetTime.part.2+0x202>
 8004572:	2b03      	cmp	r3, #3
 8004574:	d02d      	beq.n	80045d2 <HAL_RTC_GetTime.part.2+0x1ca>
 8004576:	2b05      	cmp	r3, #5
 8004578:	d042      	beq.n	8004600 <HAL_RTC_GetTime.part.2+0x1f8>
 800457a:	2b07      	cmp	r3, #7
 800457c:	d04f      	beq.n	800461e <HAL_RTC_GetTime.part.2+0x216>
 800457e:	2b08      	cmp	r3, #8
 8004580:	d051      	beq.n	8004626 <HAL_RTC_GetTime.part.2+0x21e>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004582:	2b0a      	cmp	r3, #10
 8004584:	d047      	beq.n	8004616 <HAL_RTC_GetTime.part.2+0x20e>
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d059      	beq.n	800463e <HAL_RTC_GetTime.part.2+0x236>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800458a:	2b04      	cmp	r3, #4
 800458c:	d053      	beq.n	8004636 <HAL_RTC_GetTime.part.2+0x22e>
 800458e:	2b06      	cmp	r3, #6
 8004590:	d051      	beq.n	8004636 <HAL_RTC_GetTime.part.2+0x22e>
 8004592:	2b09      	cmp	r3, #9
 8004594:	d04f      	beq.n	8004636 <HAL_RTC_GetTime.part.2+0x22e>
 8004596:	2b0b      	cmp	r3, #11
 8004598:	d04d      	beq.n	8004636 <HAL_RTC_GetTime.part.2+0x22e>
        if (RTC_IsLeapYear(year))
 800459a:	fa1f fb80 	uxth.w	fp, r0
  if ((nYear % 100U) != 0U)
 800459e:	fbac a20b 	umull	sl, r2, ip, fp
 80045a2:	ea4f 1a52 	mov.w	sl, r2, lsr #5
  if ((nYear % 400U) == 0U)
 80045a6:	09d2      	lsrs	r2, r2, #7
  if ((nYear % 100U) != 0U)
 80045a8:	fb09 ba1a 	mls	sl, r9, sl, fp
  if ((nYear % 400U) == 0U)
 80045ac:	fb0e b212 	mls	r2, lr, r2, fp
    else if (month == 2U)
 80045b0:	2b02      	cmp	r3, #2
  if ((nYear % 100U) != 0U)
 80045b2:	fa1f fa8a 	uxth.w	sl, sl
  if ((nYear % 400U) == 0U)
 80045b6:	b292      	uxth	r2, r2
    else if (month == 2U)
 80045b8:	d125      	bne.n	8004606 <HAL_RTC_GetTime.part.2+0x1fe>
  if ((nYear % 4U) != 0U)
 80045ba:	f00b 0303 	and.w	r3, fp, #3
      if (day < 28U)
 80045be:	2f1b      	cmp	r7, #27
 80045c0:	d94a      	bls.n	8004658 <HAL_RTC_GetTime.part.2+0x250>
      else if (day == 28U)
 80045c2:	2f1c      	cmp	r7, #28
 80045c4:	d04f      	beq.n	8004666 <HAL_RTC_GetTime.part.2+0x25e>
      else if (day == 29U)
 80045c6:	2f1d      	cmp	r7, #29
 80045c8:	d04e      	beq.n	8004668 <HAL_RTC_GetTime.part.2+0x260>
  for (loop = 0U; loop < DayElapsed; loop++)
 80045ca:	428d      	cmp	r5, r1
 80045cc:	d948      	bls.n	8004660 <HAL_RTC_GetTime.part.2+0x258>
 80045ce:	3101      	adds	r1, #1
 80045d0:	e7f5      	b.n	80045be <HAL_RTC_GetTime.part.2+0x1b6>
      if (day < 31U)
 80045d2:	2f1e      	cmp	r7, #30
 80045d4:	d916      	bls.n	8004604 <HAL_RTC_GetTime.part.2+0x1fc>
 80045d6:	2304      	movs	r3, #4
        month++;
 80045d8:	460a      	mov	r2, r1
        day = 1U;
 80045da:	2701      	movs	r7, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 80045dc:	4295      	cmp	r5, r2
 80045de:	d8c4      	bhi.n	800456a <HAL_RTC_GetTime.part.2+0x162>
 80045e0:	b2d9      	uxtb	r1, r3
 80045e2:	b2fa      	uxtb	r2, r7
  hrtc->DateToUpdate.Year = year;
 80045e4:	f888 000f 	strb.w	r0, [r8, #15]
  hrtc->DateToUpdate.Month = month;
 80045e8:	f888 100d 	strb.w	r1, [r8, #13]
  hrtc->DateToUpdate.Date = day;
 80045ec:	f888 200e 	strb.w	r2, [r8, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80045f0:	f7ff fe78 	bl	80042e4 <RTC_WeekDayNum>
 80045f4:	f888 000c 	strb.w	r0, [r8, #12]
  if (Format != RTC_FORMAT_BIN)
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	f47f af5e 	bne.w	80044ba <HAL_RTC_GetTime.part.2+0xb2>
 80045fe:	e790      	b.n	8004522 <HAL_RTC_GetTime.part.2+0x11a>
      if (day < 31U)
 8004600:	2f1e      	cmp	r7, #30
 8004602:	d806      	bhi.n	8004612 <HAL_RTC_GetTime.part.2+0x20a>
        day++;
 8004604:	3701      	adds	r7, #1
 8004606:	460a      	mov	r2, r1
 8004608:	e7e8      	b.n	80045dc <HAL_RTC_GetTime.part.2+0x1d4>
      if (day < 31U)
 800460a:	2f1e      	cmp	r7, #30
 800460c:	d9fa      	bls.n	8004604 <HAL_RTC_GetTime.part.2+0x1fc>
 800460e:	2302      	movs	r3, #2
 8004610:	e7e2      	b.n	80045d8 <HAL_RTC_GetTime.part.2+0x1d0>
 8004612:	2306      	movs	r3, #6
 8004614:	e7e0      	b.n	80045d8 <HAL_RTC_GetTime.part.2+0x1d0>
 8004616:	2f1e      	cmp	r7, #30
 8004618:	d9f4      	bls.n	8004604 <HAL_RTC_GetTime.part.2+0x1fc>
 800461a:	230b      	movs	r3, #11
 800461c:	e7dc      	b.n	80045d8 <HAL_RTC_GetTime.part.2+0x1d0>
 800461e:	2f1e      	cmp	r7, #30
 8004620:	d9f0      	bls.n	8004604 <HAL_RTC_GetTime.part.2+0x1fc>
 8004622:	2308      	movs	r3, #8
 8004624:	e7d8      	b.n	80045d8 <HAL_RTC_GetTime.part.2+0x1d0>
 8004626:	2f1e      	cmp	r7, #30
 8004628:	d9ec      	bls.n	8004604 <HAL_RTC_GetTime.part.2+0x1fc>
 800462a:	2309      	movs	r3, #9
 800462c:	e7d4      	b.n	80045d8 <HAL_RTC_GetTime.part.2+0x1d0>
  while (Value >= 10U)
 800462e:	2100      	movs	r1, #0
 8004630:	e75f      	b.n	80044f2 <HAL_RTC_GetTime.part.2+0xea>
 8004632:	2100      	movs	r1, #0
 8004634:	e74e      	b.n	80044d4 <HAL_RTC_GetTime.part.2+0xcc>
      if (day < 30U)
 8004636:	2f1d      	cmp	r7, #29
 8004638:	d9e4      	bls.n	8004604 <HAL_RTC_GetTime.part.2+0x1fc>
        month++;
 800463a:	3301      	adds	r3, #1
 800463c:	e7cc      	b.n	80045d8 <HAL_RTC_GetTime.part.2+0x1d0>
      if (day < 31U)
 800463e:	2f1e      	cmp	r7, #30
 8004640:	d9e0      	bls.n	8004604 <HAL_RTC_GetTime.part.2+0x1fc>
  for (loop = 0U; loop < DayElapsed; loop++)
 8004642:	428d      	cmp	r5, r1
          year++;
 8004644:	f100 0001 	add.w	r0, r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8004648:	d903      	bls.n	8004652 <HAL_RTC_GetTime.part.2+0x24a>
 800464a:	3202      	adds	r2, #2
 800464c:	2702      	movs	r7, #2
          month = 1U;
 800464e:	2301      	movs	r3, #1
 8004650:	e7c4      	b.n	80045dc <HAL_RTC_GetTime.part.2+0x1d4>
  for (loop = 0U; loop < DayElapsed; loop++)
 8004652:	2201      	movs	r2, #1
 8004654:	4611      	mov	r1, r2
 8004656:	e7c5      	b.n	80045e4 <HAL_RTC_GetTime.part.2+0x1dc>
 8004658:	428d      	cmp	r5, r1
        day++;
 800465a:	f107 0701 	add.w	r7, r7, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 800465e:	d8b6      	bhi.n	80045ce <HAL_RTC_GetTime.part.2+0x1c6>
 8004660:	b2fa      	uxtb	r2, r7
 8004662:	2102      	movs	r1, #2
 8004664:	e7be      	b.n	80045e4 <HAL_RTC_GetTime.part.2+0x1dc>
  if ((nYear % 4U) != 0U)
 8004666:	b12b      	cbz	r3, 8004674 <HAL_RTC_GetTime.part.2+0x26c>
  for (loop = 0U; loop < DayElapsed; loop++)
 8004668:	428d      	cmp	r5, r1
 800466a:	d90d      	bls.n	8004688 <HAL_RTC_GetTime.part.2+0x280>
 800466c:	1c4a      	adds	r2, r1, #1
          month = 1U;
 800466e:	2702      	movs	r7, #2
 8004670:	2303      	movs	r3, #3
 8004672:	e7b3      	b.n	80045dc <HAL_RTC_GetTime.part.2+0x1d4>
  if ((nYear % 100U) != 0U)
 8004674:	f1ba 0f00 	cmp.w	sl, #0
 8004678:	d003      	beq.n	8004682 <HAL_RTC_GetTime.part.2+0x27a>
  for (loop = 0U; loop < DayElapsed; loop++)
 800467a:	428d      	cmp	r5, r1
 800467c:	d907      	bls.n	800468e <HAL_RTC_GetTime.part.2+0x286>
 800467e:	3101      	adds	r1, #1
 8004680:	e7f2      	b.n	8004668 <HAL_RTC_GetTime.part.2+0x260>
  if ((nYear % 400U) == 0U)
 8004682:	2a00      	cmp	r2, #0
 8004684:	d0f9      	beq.n	800467a <HAL_RTC_GetTime.part.2+0x272>
 8004686:	e7ef      	b.n	8004668 <HAL_RTC_GetTime.part.2+0x260>
  for (loop = 0U; loop < DayElapsed; loop++)
 8004688:	2201      	movs	r2, #1
 800468a:	2103      	movs	r1, #3
 800468c:	e7aa      	b.n	80045e4 <HAL_RTC_GetTime.part.2+0x1dc>
 800468e:	221d      	movs	r2, #29
 8004690:	2102      	movs	r1, #2
 8004692:	e7a7      	b.n	80045e4 <HAL_RTC_GetTime.part.2+0x1dc>
 8004694:	91a2b3c5 	.word	0x91a2b3c5
 8004698:	88888889 	.word	0x88888889
 800469c:	aaaaaaab 	.word	0xaaaaaaab
 80046a0:	c22e4507 	.word	0xc22e4507
 80046a4:	00015180 	.word	0x00015180
 80046a8:	51eb851f 	.word	0x51eb851f

080046ac <HAL_RTC_WaitForSynchro.part.3>:
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80046ac:	6802      	ldr	r2, [r0, #0]
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
 80046ae:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80046b0:	6853      	ldr	r3, [r2, #4]
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
 80046b2:	4604      	mov	r4, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80046b4:	f023 0308 	bic.w	r3, r3, #8
 80046b8:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80046ba:	f7fe fc8b 	bl	8002fd4 <HAL_GetTick>
 80046be:	4605      	mov	r5, r0
 80046c0:	e005      	b.n	80046ce <HAL_RTC_WaitForSynchro.part.3+0x22>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80046c2:	f7fe fc87 	bl	8002fd4 <HAL_GetTick>
 80046c6:	1b40      	subs	r0, r0, r5
 80046c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80046cc:	d805      	bhi.n	80046da <HAL_RTC_WaitForSynchro.part.3+0x2e>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	071b      	lsls	r3, r3, #28
 80046d4:	d5f5      	bpl.n	80046c2 <HAL_RTC_WaitForSynchro.part.3+0x16>
  return HAL_OK;
 80046d6:	2000      	movs	r0, #0
}
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80046da:	2003      	movs	r0, #3
}
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
 80046de:	bf00      	nop

080046e0 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d04c      	beq.n	800477e <HAL_RTC_Init+0x9e>
{
 80046e4:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80046e6:	7c43      	ldrb	r3, [r0, #17]
 80046e8:	4604      	mov	r4, r0
 80046ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d03a      	beq.n	8004768 <HAL_RTC_Init+0x88>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	4620      	mov	r0, r4
 80046f6:	7463      	strb	r3, [r4, #17]
 80046f8:	f7ff ffd8 	bl	80046ac <HAL_RTC_WaitForSynchro.part.3>
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046fc:	b118      	cbz	r0, 8004706 <HAL_RTC_Init+0x26>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046fe:	2304      	movs	r3, #4
      return HAL_ERROR;
 8004700:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004702:	7463      	strb	r3, [r4, #17]
}
 8004704:	bd38      	pop	{r3, r4, r5, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff fe24 	bl	8004354 <RTC_EnterInitMode>
 800470c:	2800      	cmp	r0, #0
 800470e:	d1f6      	bne.n	80046fe <HAL_RTC_Init+0x1e>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004710:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004712:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004714:	6851      	ldr	r1, [r2, #4]
 8004716:	f021 0107 	bic.w	r1, r1, #7
 800471a:	6051      	str	r1, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800471c:	b120      	cbz	r0, 8004728 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800471e:	491d      	ldr	r1, [pc, #116]	; (8004794 <HAL_RTC_Init+0xb4>)
 8004720:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	630b      	str	r3, [r1, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004728:	491a      	ldr	r1, [pc, #104]	; (8004794 <HAL_RTC_Init+0xb4>)
 800472a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800472c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8004730:	4303      	orrs	r3, r0
 8004732:	62cb      	str	r3, [r1, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004734:	6861      	ldr	r1, [r4, #4]
 8004736:	1c4b      	adds	r3, r1, #1
 8004738:	d023      	beq.n	8004782 <HAL_RTC_Init+0xa2>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800473a:	6890      	ldr	r0, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800473c:	b28d      	uxth	r5, r1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800473e:	f020 000f 	bic.w	r0, r0, #15
 8004742:	ea40 4011 	orr.w	r0, r0, r1, lsr #16
 8004746:	6090      	str	r0, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004748:	68d3      	ldr	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800474a:	4620      	mov	r0, r4
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	432b      	orrs	r3, r5
 8004752:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004754:	f7ff fe16 	bl	8004384 <RTC_ExitInitMode>
 8004758:	2800      	cmp	r0, #0
 800475a:	d1d0      	bne.n	80046fe <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800475c:	2301      	movs	r3, #1
    hrtc->DateToUpdate.Year = 0x00U;
 800475e:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004760:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004762:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8004764:	7463      	strb	r3, [r4, #17]
}
 8004766:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004768:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800476a:	f7fd f961 	bl	8001a30 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800476e:	2302      	movs	r3, #2
 8004770:	4620      	mov	r0, r4
 8004772:	7463      	strb	r3, [r4, #17]
 8004774:	f7ff ff9a 	bl	80046ac <HAL_RTC_WaitForSynchro.part.3>
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004778:	2800      	cmp	r0, #0
 800477a:	d1c0      	bne.n	80046fe <HAL_RTC_Init+0x1e>
 800477c:	e7c3      	b.n	8004706 <HAL_RTC_Init+0x26>
    return HAL_ERROR;
 800477e:	2001      	movs	r0, #1
}
 8004780:	4770      	bx	lr
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004782:	2001      	movs	r0, #1
 8004784:	f7ff fd36 	bl	80041f4 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8004788:	2800      	cmp	r0, #0
 800478a:	d0b8      	beq.n	80046fe <HAL_RTC_Init+0x1e>
 800478c:	6822      	ldr	r2, [r4, #0]
        prescaler = prescaler - 1U;
 800478e:	1e41      	subs	r1, r0, #1
 8004790:	e7d3      	b.n	800473a <HAL_RTC_Init+0x5a>
 8004792:	bf00      	nop
 8004794:	40006c00 	.word	0x40006c00

08004798 <HAL_RTC_SetTime>:
{
 8004798:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 800479a:	2800      	cmp	r0, #0
 800479c:	d037      	beq.n	800480e <HAL_RTC_SetTime+0x76>
 800479e:	2900      	cmp	r1, #0
 80047a0:	d035      	beq.n	800480e <HAL_RTC_SetTime+0x76>
  __HAL_LOCK(hrtc);
 80047a2:	7c03      	ldrb	r3, [r0, #16]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d063      	beq.n	8004870 <HAL_RTC_SetTime+0xd8>
 80047a8:	2401      	movs	r4, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047aa:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80047ac:	7404      	strb	r4, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ae:	7443      	strb	r3, [r0, #17]
 80047b0:	780c      	ldrb	r4, [r1, #0]
 80047b2:	784b      	ldrb	r3, [r1, #1]
 80047b4:	7889      	ldrb	r1, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 80047b6:	bb6a      	cbnz	r2, 8004814 <HAL_RTC_SetTime+0x7c>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 80047bc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80047c0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047c2:	fb02 3404 	mla	r4, r2, r4, r3
 80047c6:	440c      	add	r4, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80047c8:	4621      	mov	r1, r4
 80047ca:	4606      	mov	r6, r0
 80047cc:	f7ff fdf4 	bl	80043b8 <RTC_WriteTimeCounter>
 80047d0:	4605      	mov	r5, r0
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d145      	bne.n	8004862 <HAL_RTC_SetTime+0xca>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80047d6:	6833      	ldr	r3, [r6, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	f022 0205 	bic.w	r2, r2, #5
 80047de:	605a      	str	r2, [r3, #4]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80047e0:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80047e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 80047e4:	b289      	uxth	r1, r1
 80047e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80047ea:	1c4b      	adds	r3, r1, #1
 80047ec:	d009      	beq.n	8004802 <HAL_RTC_SetTime+0x6a>
      if (counter_alarm < counter_time)
 80047ee:	428c      	cmp	r4, r1
 80047f0:	d907      	bls.n	8004802 <HAL_RTC_SetTime+0x6a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80047f2:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 80047f6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80047fa:	4630      	mov	r0, r6
 80047fc:	f7ff fdf0 	bl	80043e0 <RTC_WriteAlarmCounter>
 8004800:	bbc8      	cbnz	r0, 8004876 <HAL_RTC_SetTime+0xde>
    hrtc->State = HAL_RTC_STATE_READY;
 8004802:	2201      	movs	r2, #1
    __HAL_UNLOCK(hrtc);
 8004804:	2300      	movs	r3, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8004806:	7472      	strb	r2, [r6, #17]
    __HAL_UNLOCK(hrtc);
 8004808:	7433      	strb	r3, [r6, #16]
}
 800480a:	4628      	mov	r0, r5
 800480c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800480e:	2501      	movs	r5, #1
}
 8004810:	4628      	mov	r0, r5
 8004812:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004814:	f44f 6561 	mov.w	r5, #3600	; 0xe10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004818:	091a      	lsrs	r2, r3, #4
 800481a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004826:	0922      	lsrs	r2, r4, #4
 8004828:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800482c:	b2db      	uxtb	r3, r3
  return (tmp + (Value & (uint8_t)0x0F));
 800482e:	f004 040f 	and.w	r4, r4, #15
 8004832:	eb04 0442 	add.w	r4, r4, r2, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004836:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800483a:	b2e4      	uxtb	r4, r4
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800483c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800483e:	fb05 3304 	mla	r3, r5, r4, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004842:	090c      	lsrs	r4, r1, #4
 8004844:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004848:	f001 040f 	and.w	r4, r1, #15
 800484c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004850:	b2e4      	uxtb	r4, r4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004852:	441c      	add	r4, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004854:	4621      	mov	r1, r4
 8004856:	4606      	mov	r6, r0
 8004858:	f7ff fdae 	bl	80043b8 <RTC_WriteTimeCounter>
 800485c:	4605      	mov	r5, r0
 800485e:	2800      	cmp	r0, #0
 8004860:	d0b9      	beq.n	80047d6 <HAL_RTC_SetTime+0x3e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004862:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8004864:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004866:	2501      	movs	r5, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004868:	7472      	strb	r2, [r6, #17]
    __HAL_UNLOCK(hrtc);
 800486a:	7433      	strb	r3, [r6, #16]
}
 800486c:	4628      	mov	r0, r5
 800486e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8004870:	2502      	movs	r5, #2
}
 8004872:	4628      	mov	r0, r5
 8004874:	bd70      	pop	{r4, r5, r6, pc}
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004876:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8004878:	7435      	strb	r5, [r6, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800487a:	7473      	strb	r3, [r6, #17]
          return HAL_ERROR;
 800487c:	2501      	movs	r5, #1
 800487e:	e7c4      	b.n	800480a <HAL_RTC_SetTime+0x72>

08004880 <HAL_RTC_GetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 8004880:	b110      	cbz	r0, 8004888 <HAL_RTC_GetTime+0x8>
 8004882:	b109      	cbz	r1, 8004888 <HAL_RTC_GetTime+0x8>
 8004884:	f7ff bdc0 	b.w	8004408 <HAL_RTC_GetTime.part.2>
}
 8004888:	2001      	movs	r0, #1
 800488a:	4770      	bx	lr

0800488c <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 800488c:	b358      	cbz	r0, 80048e6 <HAL_RTC_SetDate+0x5a>
 800488e:	b351      	cbz	r1, 80048e6 <HAL_RTC_SetDate+0x5a>
  __HAL_LOCK(hrtc);
 8004890:	7c03      	ldrb	r3, [r0, #16]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d048      	beq.n	8004928 <HAL_RTC_SetDate+0x9c>
{
 8004896:	b570      	push	{r4, r5, r6, lr}
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004898:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800489a:	2401      	movs	r4, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800489c:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hrtc);
 800489e:	7404      	strb	r4, [r0, #16]
  if (Format == RTC_FORMAT_BIN)
 80048a0:	bb1a      	cbnz	r2, 80048ea <HAL_RTC_SetDate+0x5e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80048a2:	78cb      	ldrb	r3, [r1, #3]
 80048a4:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80048a6:	784e      	ldrb	r6, [r1, #1]
 80048a8:	7346      	strb	r6, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80048aa:	788a      	ldrb	r2, [r1, #2]
 80048ac:	7382      	strb	r2, [r0, #14]
 80048ae:	4604      	mov	r4, r0
 80048b0:	460d      	mov	r5, r1
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80048b2:	4618      	mov	r0, r3
 80048b4:	4631      	mov	r1, r6
 80048b6:	f7ff fd15 	bl	80042e4 <RTC_WeekDayNum>
 80048ba:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80048bc:	7028      	strb	r0, [r5, #0]
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80048be:	6821      	ldr	r1, [r4, #0]
 80048c0:	698d      	ldr	r5, [r1, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80048c2:	69ca      	ldr	r2, [r1, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80048c4:	6988      	ldr	r0, [r1, #24]
  if (high1 != high2)
 80048c6:	b2ae      	uxth	r6, r5
 80048c8:	b283      	uxth	r3, r0
 80048ca:	429e      	cmp	r6, r3
 80048cc:	d02e      	beq.n	800492c <HAL_RTC_SetDate+0xa0>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80048ce:	69cb      	ldr	r3, [r1, #28]
  if (hours > 24U)
 80048d0:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <HAL_RTC_SetDate+0x104>)
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (hours > 24U)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d82d      	bhi.n	8004938 <HAL_RTC_SetDate+0xac>
  hrtc->State = HAL_RTC_STATE_READY ;
 80048dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80048de:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 80048e0:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 80048e2:	7420      	strb	r0, [r4, #16]
}
 80048e4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80048e6:	2001      	movs	r0, #1
 80048e8:	4770      	bx	lr
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80048ea:	78ca      	ldrb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80048ec:	0913      	lsrs	r3, r2, #4
 80048ee:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80048f2:	f002 030f 	and.w	r3, r2, #15
 80048f6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80048fa:	b2db      	uxtb	r3, r3
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80048fc:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80048fe:	784a      	ldrb	r2, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004900:	0916      	lsrs	r6, r2, #4
 8004902:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004906:	f002 060f 	and.w	r6, r2, #15
 800490a:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 800490e:	b2f6      	uxtb	r6, r6
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004910:	7346      	strb	r6, [r0, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004912:	788c      	ldrb	r4, [r1, #2]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004914:	0922      	lsrs	r2, r4, #4
 8004916:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800491a:	f004 020f 	and.w	r2, r4, #15
 800491e:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 8004922:	b2d2      	uxtb	r2, r2
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004924:	7382      	strb	r2, [r0, #14]
 8004926:	e7c2      	b.n	80048ae <HAL_RTC_SetDate+0x22>
  __HAL_LOCK(hrtc);
 8004928:	2002      	movs	r0, #2
}
 800492a:	4770      	bx	lr
    timecounter = (((uint32_t) high1 << 16U) | low);
 800492c:	b293      	uxth	r3, r2
  if (hours > 24U)
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_RTC_SetDate+0x104>)
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004930:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (hours > 24U)
 8004934:	4293      	cmp	r3, r2
 8004936:	d9d1      	bls.n	80048dc <HAL_RTC_SetDate+0x50>
 8004938:	4d16      	ldr	r5, [pc, #88]	; (8004994 <HAL_RTC_SetDate+0x108>)
 800493a:	f6a2 620f 	subw	r2, r2, #3599	; 0xe0f
 800493e:	fba5 1503 	umull	r1, r5, r5, r3
 8004942:	0c2d      	lsrs	r5, r5, #16
 8004944:	fb02 3515 	mls	r5, r2, r5, r3
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f7ff fd34 	bl	80043b8 <RTC_WriteTimeCounter>
 8004950:	4606      	mov	r6, r0
 8004952:	b9b8      	cbnz	r0, 8004984 <HAL_RTC_SetDate+0xf8>
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004958:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 800495a:	b289      	uxth	r1, r1
 800495c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004960:	1c4b      	adds	r3, r1, #1
 8004962:	d0bb      	beq.n	80048dc <HAL_RTC_SetDate+0x50>
      if (counter_alarm < counter_time)
 8004964:	428d      	cmp	r5, r1
 8004966:	d9b9      	bls.n	80048dc <HAL_RTC_SetDate+0x50>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004968:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 800496c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004970:	4620      	mov	r0, r4
 8004972:	f7ff fd35 	bl	80043e0 <RTC_WriteAlarmCounter>
 8004976:	2800      	cmp	r0, #0
 8004978:	d0b0      	beq.n	80048dc <HAL_RTC_SetDate+0x50>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800497a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 800497c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800497e:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8004980:	2001      	movs	r0, #1
}
 8004982:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004984:	2204      	movs	r2, #4
      __HAL_UNLOCK(hrtc);
 8004986:	2300      	movs	r3, #0
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004988:	7462      	strb	r2, [r4, #17]
      __HAL_UNLOCK(hrtc);
 800498a:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 800498c:	2001      	movs	r0, #1
}
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	00015f8f 	.word	0x00015f8f
 8004994:	c22e4507 	.word	0xc22e4507

08004998 <HAL_RTC_GetDate>:
  RTC_TimeTypeDef stime = {0U};
 8004998:	2300      	movs	r3, #0
{
 800499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	b082      	sub	sp, #8
  RTC_TimeTypeDef stime = {0U};
 80049a0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80049a4:	f88d 3006 	strb.w	r3, [sp, #6]
  if ((hrtc == NULL) || (sDate == NULL))
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d042      	beq.n	8004a32 <HAL_RTC_GetDate+0x9a>
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d040      	beq.n	8004a32 <HAL_RTC_GetDate+0x9a>
 80049b0:	4617      	mov	r7, r2
 80049b2:	460e      	mov	r6, r1
 80049b4:	461a      	mov	r2, r3
 80049b6:	a901      	add	r1, sp, #4
 80049b8:	4680      	mov	r8, r0
 80049ba:	f7ff fd25 	bl	8004408 <HAL_RTC_GetTime.part.2>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80049be:	bbc0      	cbnz	r0, 8004a32 <HAL_RTC_GetDate+0x9a>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80049c0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80049c4:	7033      	strb	r3, [r6, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80049c6:	f898 500f 	ldrb.w	r5, [r8, #15]
 80049ca:	70f5      	strb	r5, [r6, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80049cc:	f898 400d 	ldrb.w	r4, [r8, #13]
 80049d0:	7074      	strb	r4, [r6, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80049d2:	f898 300e 	ldrb.w	r3, [r8, #14]
 80049d6:	70b3      	strb	r3, [r6, #2]
  if (Format != RTC_FORMAT_BIN)
 80049d8:	b367      	cbz	r7, 8004a34 <HAL_RTC_GetDate+0x9c>
  while (Value >= 10U)
 80049da:	2d09      	cmp	r5, #9
  uint32_t bcdhigh = 0U;
 80049dc:	4602      	mov	r2, r0
  while (Value >= 10U)
 80049de:	d907      	bls.n	80049f0 <HAL_RTC_GetDate+0x58>
    Value -= 10U;
 80049e0:	3d0a      	subs	r5, #10
 80049e2:	b2ed      	uxtb	r5, r5
  while (Value >= 10U)
 80049e4:	2d09      	cmp	r5, #9
    bcdhigh++;
 80049e6:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 80049ea:	d8f9      	bhi.n	80049e0 <HAL_RTC_GetDate+0x48>
 80049ec:	0112      	lsls	r2, r2, #4
 80049ee:	b2d2      	uxtb	r2, r2
  return ((uint8_t)(bcdhigh << 4U) | Value);
 80049f0:	4315      	orrs	r5, r2
  while (Value >= 10U)
 80049f2:	2c09      	cmp	r4, #9
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80049f4:	70f5      	strb	r5, [r6, #3]
  uint32_t bcdhigh = 0U;
 80049f6:	f04f 0200 	mov.w	r2, #0
  while (Value >= 10U)
 80049fa:	d907      	bls.n	8004a0c <HAL_RTC_GetDate+0x74>
    Value -= 10U;
 80049fc:	3c0a      	subs	r4, #10
 80049fe:	b2e4      	uxtb	r4, r4
  while (Value >= 10U)
 8004a00:	2c09      	cmp	r4, #9
    bcdhigh++;
 8004a02:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 8004a06:	d8f9      	bhi.n	80049fc <HAL_RTC_GetDate+0x64>
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	b2d2      	uxtb	r2, r2
  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004a0c:	4314      	orrs	r4, r2
  while (Value >= 10U)
 8004a0e:	2b09      	cmp	r3, #9
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004a10:	7074      	strb	r4, [r6, #1]
  uint32_t bcdhigh = 0U;
 8004a12:	f04f 0200 	mov.w	r2, #0
  while (Value >= 10U)
 8004a16:	d907      	bls.n	8004a28 <HAL_RTC_GetDate+0x90>
    Value -= 10U;
 8004a18:	3b0a      	subs	r3, #10
 8004a1a:	b2db      	uxtb	r3, r3
  while (Value >= 10U)
 8004a1c:	2b09      	cmp	r3, #9
    bcdhigh++;
 8004a1e:	f102 0201 	add.w	r2, r2, #1
  while (Value >= 10U)
 8004a22:	d8f9      	bhi.n	8004a18 <HAL_RTC_GetDate+0x80>
 8004a24:	0112      	lsls	r2, r2, #4
 8004a26:	b2d2      	uxtb	r2, r2
  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004a28:	4313      	orrs	r3, r2
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004a2a:	70b3      	strb	r3, [r6, #2]
}
 8004a2c:	b002      	add	sp, #8
 8004a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004a32:	2001      	movs	r0, #1
}
 8004a34:	b002      	add	sp, #8
 8004a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a3a:	bf00      	nop

08004a3c <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a40:	461e      	mov	r6, r3
 8004a42:	b082      	sub	sp, #8
 8004a44:	4614      	mov	r4, r2
 8004a46:	460d      	mov	r5, r1
 8004a48:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a4a:	f7fe fac3 	bl	8002fd4 <HAL_GetTick>
 8004a4e:	4426      	add	r6, r4
 8004a50:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8004a52:	f7fe fabf 	bl	8002fd4 <HAL_GetTick>
 8004a56:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xb4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004a60:	fb06 f303 	mul.w	r3, r6, r3
 8004a64:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a66:	6838      	ldr	r0, [r7, #0]
 8004a68:	e001      	b.n	8004a6e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	1c63      	adds	r3, r4, #1
 8004a6c:	d107      	bne.n	8004a7e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6e:	6883      	ldr	r3, [r0, #8]
 8004a70:	ea35 0303 	bics.w	r3, r5, r3
 8004a74:	d0f9      	beq.n	8004a6a <SPI_WaitFlagStateUntilTimeout.constprop.6+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8004a76:	2000      	movs	r0, #0
}
 8004a78:	b002      	add	sp, #8
 8004a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a7e:	f7fe faa9 	bl	8002fd4 <HAL_GetTick>
 8004a82:	eba0 0008 	sub.w	r0, r0, r8
 8004a86:	42b0      	cmp	r0, r6
 8004a88:	d208      	bcs.n	8004a9c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x60>
      if(count == 0U)
 8004a8a:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004a8c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004a8e:	2a00      	cmp	r2, #0
      count--;
 8004a90:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004a94:	bf08      	it	eq
 8004a96:	2600      	moveq	r6, #0
      count--;
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	e7e4      	b.n	8004a66 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9c:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aa0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aaa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aac:	d014      	beq.n	8004ad8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004ab4:	d007      	beq.n	8004ac6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x8a>
        hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004ab8:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004aba:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004abe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8004ac2:	2003      	movs	r0, #3
 8004ac4:	e7d8      	b.n	8004a78 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x3c>
          SPI_RESET_CRC(hspi);
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e7ee      	b.n	8004ab6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x7a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004ade:	d002      	beq.n	8004ae6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xaa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ae0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004ae4:	d1e3      	bne.n	8004aae <SPI_WaitFlagStateUntilTimeout.constprop.6+0x72>
          __HAL_SPI_DISABLE(hspi);
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e7de      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout.constprop.6+0x72>
 8004af0:	20000004 	.word	0x20000004

08004af4 <HAL_SPI_TransmitReceive.part.2>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8004af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004af8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004afa:	2001      	movs	r0, #1
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8004afc:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8004afe:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8004b02:	4691      	mov	r9, r2
 8004b04:	4698      	mov	r8, r3
 8004b06:	460f      	mov	r7, r1
 8004b08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 8004b0a:	f7fe fa63 	bl	8002fd4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004b0e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004b12:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004b14:	b2d2      	uxtb	r2, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b16:	2a01      	cmp	r2, #1
  tmp_mode            = hspi->Init.Mode;
 8004b18:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b1a:	d011      	beq.n	8004b40 <HAL_SPI_TransmitReceive.part.2+0x4c>
 8004b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b20:	d009      	beq.n	8004b36 <HAL_SPI_TransmitReceive.part.2+0x42>
    errorcode = HAL_BUSY;
 8004b22:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004b24:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004b26:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004b28:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b30:	b003      	add	sp, #12
 8004b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b36:	68a1      	ldr	r1, [r4, #8]
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	d1f2      	bne.n	8004b22 <HAL_SPI_TransmitReceive.part.2+0x2e>
 8004b3c:	2a04      	cmp	r2, #4
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_SPI_TransmitReceive.part.2+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b40:	2f00      	cmp	r7, #0
 8004b42:	d064      	beq.n	8004c0e <HAL_SPI_TransmitReceive.part.2+0x11a>
 8004b44:	f1b9 0f00 	cmp.w	r9, #0
 8004b48:	d061      	beq.n	8004c0e <HAL_SPI_TransmitReceive.part.2+0x11a>
 8004b4a:	f1b8 0f00 	cmp.w	r8, #0
 8004b4e:	d05e      	beq.n	8004c0e <HAL_SPI_TransmitReceive.part.2+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b50:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b54:	6821      	ldr	r1, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b56:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b58:	bf1c      	itt	ne
 8004b5a:	2205      	movne	r2, #5
 8004b5c:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b60:	2200      	movs	r2, #0
 8004b62:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8004b64:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004b68:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6c:	6808      	ldr	r0, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b6e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b72:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 8004b74:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b78:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b7a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8004b7e:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b82:	d546      	bpl.n	8004c12 <HAL_SPI_TransmitReceive.part.2+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b84:	68e2      	ldr	r2, [r4, #12]
 8004b86:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004b8a:	d05a      	beq.n	8004c42 <HAL_SPI_TransmitReceive.part.2+0x14e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d145      	bne.n	8004c1c <HAL_SPI_TransmitReceive.part.2+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b90:	783b      	ldrb	r3, [r7, #0]
 8004b92:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8004b94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b96:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b9c:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004b9e:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba0:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 8004ba2:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	b91a      	cbnz	r2, 8004bb2 <HAL_SPI_TransmitReceive.part.2+0xbe>
 8004baa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d038      	beq.n	8004c24 <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	6893      	ldr	r3, [r2, #8]
 8004bb6:	0798      	lsls	r0, r3, #30
 8004bb8:	d50f      	bpl.n	8004bda <HAL_SPI_TransmitReceive.part.2+0xe6>
 8004bba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b163      	cbz	r3, 8004bda <HAL_SPI_TransmitReceive.part.2+0xe6>
 8004bc0:	b15f      	cbz	r7, 8004bda <HAL_SPI_TransmitReceive.part.2+0xe6>
        txallowed = 0U;
 8004bc2:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004bca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004bce:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8004bd0:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004bd8:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bda:	6893      	ldr	r3, [r2, #8]
 8004bdc:	07d9      	lsls	r1, r3, #31
 8004bde:	d50d      	bpl.n	8004bfc <HAL_SPI_TransmitReceive.part.2+0x108>
 8004be0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	b153      	cbz	r3, 8004bfc <HAL_SPI_TransmitReceive.part.2+0x108>
        txallowed = 1U;
 8004be6:	2701      	movs	r7, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004be8:	68d2      	ldr	r2, [r2, #12]
 8004bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bec:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004bee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004bf0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8004bf6:	443a      	add	r2, r7
        hspi->RxXferCount--;
 8004bf8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004bfa:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bfc:	f7fe f9ea 	bl	8002fd4 <HAL_GetTick>
 8004c00:	1b80      	subs	r0, r0, r6
 8004c02:	4285      	cmp	r5, r0
 8004c04:	d8ce      	bhi.n	8004ba4 <HAL_SPI_TransmitReceive.part.2+0xb0>
 8004c06:	1c6b      	adds	r3, r5, #1
 8004c08:	d0cc      	beq.n	8004ba4 <HAL_SPI_TransmitReceive.part.2+0xb0>
        errorcode = HAL_TIMEOUT;
 8004c0a:	2003      	movs	r0, #3
 8004c0c:	e78a      	b.n	8004b24 <HAL_SPI_TransmitReceive.part.2+0x30>
    errorcode = HAL_ERROR;
 8004c0e:	2001      	movs	r0, #1
 8004c10:	e788      	b.n	8004b24 <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_ENABLE(hspi);
 8004c12:	680a      	ldr	r2, [r1, #0]
 8004c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c18:	600a      	str	r2, [r1, #0]
 8004c1a:	e7b3      	b.n	8004b84 <HAL_SPI_TransmitReceive.part.2+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1c:	f1b8 0f01 	cmp.w	r8, #1
 8004c20:	d1bf      	bne.n	8004ba2 <HAL_SPI_TransmitReceive.part.2+0xae>
 8004c22:	e7b5      	b.n	8004b90 <HAL_SPI_TransmitReceive.part.2+0x9c>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c24:	4633      	mov	r3, r6
 8004c26:	462a      	mov	r2, r5
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f7ff ff06 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d046      	beq.n	8004cc2 <HAL_SPI_TransmitReceive.part.2+0x1ce>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c34:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c36:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c38:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3e:	6562      	str	r2, [r4, #84]	; 0x54
 8004c40:	e770      	b.n	8004b24 <HAL_SPI_TransmitReceive.part.2+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d034      	beq.n	8004cb0 <HAL_SPI_TransmitReceive.part.2+0x1bc>
 8004c46:	f1b8 0f01 	cmp.w	r8, #1
 8004c4a:	d031      	beq.n	8004cb0 <HAL_SPI_TransmitReceive.part.2+0x1bc>
        txallowed = 1U;
 8004c4c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	b91b      	cbnz	r3, 8004c5c <HAL_SPI_TransmitReceive.part.2+0x168>
 8004c54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0e3      	beq.n	8004c24 <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	0791      	lsls	r1, r2, #30
 8004c62:	d50d      	bpl.n	8004c80 <HAL_SPI_TransmitReceive.part.2+0x18c>
 8004c64:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004c66:	b292      	uxth	r2, r2
 8004c68:	b152      	cbz	r2, 8004c80 <HAL_SPI_TransmitReceive.part.2+0x18c>
 8004c6a:	b14f      	cbz	r7, 8004c80 <HAL_SPI_TransmitReceive.part.2+0x18c>
        txallowed = 0U;
 8004c6c:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c70:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004c74:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8004c76:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c78:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	b292      	uxth	r2, r2
 8004c7e:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	07d2      	lsls	r2, r2, #31
 8004c84:	d50c      	bpl.n	8004ca0 <HAL_SPI_TransmitReceive.part.2+0x1ac>
 8004c86:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004c88:	b292      	uxth	r2, r2
 8004c8a:	b14a      	cbz	r2, 8004ca0 <HAL_SPI_TransmitReceive.part.2+0x1ac>
        txallowed = 1U;
 8004c8c:	2701      	movs	r7, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c92:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8004c96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c98:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ca0:	f7fe f998 	bl	8002fd4 <HAL_GetTick>
 8004ca4:	1b80      	subs	r0, r0, r6
 8004ca6:	42a8      	cmp	r0, r5
 8004ca8:	d3d1      	bcc.n	8004c4e <HAL_SPI_TransmitReceive.part.2+0x15a>
 8004caa:	1c6b      	adds	r3, r5, #1
 8004cac:	d0cf      	beq.n	8004c4e <HAL_SPI_TransmitReceive.part.2+0x15a>
 8004cae:	e7ac      	b.n	8004c0a <HAL_SPI_TransmitReceive.part.2+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb0:	f837 3b02 	ldrh.w	r3, [r7], #2
 8004cb4:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8004cb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb8:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004cc0:	e7c4      	b.n	8004c4c <HAL_SPI_TransmitReceive.part.2+0x158>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cc2:	68a3      	ldr	r3, [r4, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f47f af2d 	bne.w	8004b24 <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	9001      	str	r0, [sp, #4]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	9201      	str	r2, [sp, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	e724      	b.n	8004b24 <HAL_SPI_TransmitReceive.part.2+0x30>
 8004cda:	bf00      	nop

08004cdc <HAL_SPI_Init>:
  if (hspi == NULL)
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d04c      	beq.n	8004d7a <HAL_SPI_Init+0x9e>
{
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ce2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d042      	beq.n	8004d6e <HAL_SPI_Init+0x92>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ce8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cee:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cf0:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8004cf4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cf6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cf8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	d03e      	beq.n	8004d7e <HAL_SPI_Init+0xa2>
 8004d00:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d02:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d06:	2702      	movs	r7, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8004d08:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0a:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d0c:	68e1      	ldr	r1, [r4, #12]
 8004d0e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004d12:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004d16:	4303      	orrs	r3, r0
 8004d18:	6920      	ldr	r0, [r4, #16]
 8004d1a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004d1e:	4038      	ands	r0, r7
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6961      	ldr	r1, [r4, #20]
 8004d24:	4303      	orrs	r3, r0
 8004d26:	69a0      	ldr	r0, [r4, #24]
 8004d28:	4031      	ands	r1, r6
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8004d30:	430b      	orrs	r3, r1
 8004d32:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d38:	6a27      	ldr	r7, [r4, #32]
 8004d3a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8004d44:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d46:	433b      	orrs	r3, r7
 8004d48:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8004d4a:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d4c:	0c00      	lsrs	r0, r0, #16
 8004d4e:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8004d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d56:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d58:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d5a:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d5c:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 8004d5e:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d64:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d66:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d68:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8004d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6e:	6842      	ldr	r2, [r0, #4]
 8004d70:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004d74:	d0bb      	beq.n	8004cee <HAL_SPI_Init+0x12>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d76:	61c3      	str	r3, [r0, #28]
 8004d78:	e7b9      	b.n	8004cee <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 8004d7a:	2001      	movs	r0, #1
}
 8004d7c:	4770      	bx	lr
    hspi->Lock = HAL_UNLOCKED;
 8004d7e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004d82:	f7fc fe75 	bl	8001a70 <HAL_SPI_MspInit>
 8004d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d8c:	e7b9      	b.n	8004d02 <HAL_SPI_Init+0x26>
 8004d8e:	bf00      	nop

08004d90 <HAL_SPI_Transmit>:
{
 8004d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 8004d94:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 8004d98:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004d9a:	2c01      	cmp	r4, #1
 8004d9c:	d07b      	beq.n	8004e96 <HAL_SPI_Transmit+0x106>
 8004d9e:	461d      	mov	r5, r3
 8004da0:	2301      	movs	r3, #1
 8004da2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8004da6:	4604      	mov	r4, r0
 8004da8:	4617      	mov	r7, r2
 8004daa:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8004dac:	f7fe f912 	bl	8002fd4 <HAL_GetTick>
 8004db0:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004db2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004db6:	b2c0      	uxtb	r0, r0
 8004db8:	2801      	cmp	r0, #1
 8004dba:	d009      	beq.n	8004dd0 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8004dbc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004dbe:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004dc0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004dc2:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dc6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004dca:	b002      	add	sp, #8
 8004dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004dd0:	f1b8 0f00 	cmp.w	r8, #0
 8004dd4:	d0f3      	beq.n	8004dbe <HAL_SPI_Transmit+0x2e>
 8004dd6:	2f00      	cmp	r7, #0
 8004dd8:	d0f1      	beq.n	8004dbe <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dda:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ddc:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dde:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004de0:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dea:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004dec:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8004dee:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004df2:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004df4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
 8004df8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004dfa:	86a7      	strh	r7, [r4, #52]	; 0x34
 8004dfc:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfe:	d107      	bne.n	8004e10 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_DISABLE(hspi);
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e0e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	0652      	lsls	r2, r2, #25
 8004e14:	d543      	bpl.n	8004e9e <HAL_SPI_Transmit+0x10e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e16:	68e2      	ldr	r2, [r4, #12]
 8004e18:	6861      	ldr	r1, [r4, #4]
 8004e1a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004e1e:	d04f      	beq.n	8004ec0 <HAL_SPI_Transmit+0x130>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d141      	bne.n	8004ea8 <HAL_SPI_Transmit+0x118>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e24:	f898 2000 	ldrb.w	r2, [r8]
 8004e28:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8004e2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e32:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004e34:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e36:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004e38:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	b18a      	cbz	r2, 8004e62 <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	0792      	lsls	r2, r2, #30
 8004e44:	d533      	bpl.n	8004eae <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004e4c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004e50:	3a01      	subs	r2, #1
 8004e52:	b292      	uxth	r2, r2
 8004e54:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004e56:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e58:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 8004e5a:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e5c:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	d1ed      	bne.n	8004e3e <HAL_SPI_Transmit+0xae>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e62:	4633      	mov	r3, r6
 8004e64:	462a      	mov	r2, r5
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f7ff fde7 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8004e6e:	b120      	cbz	r0, 8004e7a <HAL_SPI_Transmit+0xea>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e70:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e74:	4313      	orrs	r3, r2
 8004e76:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e78:	6562      	str	r2, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e7a:	68a3      	ldr	r3, [r4, #8]
 8004e7c:	b933      	cbnz	r3, 8004e8c <HAL_SPI_Transmit+0xfc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	68d3      	ldr	r3, [r2, #12]
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	6893      	ldr	r3, [r2, #8]
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004e8e:	3000      	adds	r0, #0
 8004e90:	bf18      	it	ne
 8004e92:	2001      	movne	r0, #1
error:
 8004e94:	e793      	b.n	8004dbe <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8004e96:	2002      	movs	r0, #2
}
 8004e98:	b002      	add	sp, #8
 8004e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e7b6      	b.n	8004e16 <HAL_SPI_Transmit+0x86>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea8:	2f01      	cmp	r7, #1
 8004eaa:	d1c5      	bne.n	8004e38 <HAL_SPI_Transmit+0xa8>
 8004eac:	e7ba      	b.n	8004e24 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eae:	f7fe f891 	bl	8002fd4 <HAL_GetTick>
 8004eb2:	1b80      	subs	r0, r0, r6
 8004eb4:	42a8      	cmp	r0, r5
 8004eb6:	d3bf      	bcc.n	8004e38 <HAL_SPI_Transmit+0xa8>
 8004eb8:	1c6b      	adds	r3, r5, #1
 8004eba:	d0bd      	beq.n	8004e38 <HAL_SPI_Transmit+0xa8>
          errorcode = HAL_TIMEOUT;
 8004ebc:	2003      	movs	r0, #3
 8004ebe:	e77e      	b.n	8004dbe <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec0:	b311      	cbz	r1, 8004f08 <HAL_SPI_Transmit+0x178>
 8004ec2:	2f01      	cmp	r7, #1
 8004ec4:	d020      	beq.n	8004f08 <HAL_SPI_Transmit+0x178>
    while (hspi->TxXferCount > 0U)
 8004ec6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0c9      	beq.n	8004e62 <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	0790      	lsls	r0, r2, #30
 8004ed4:	d510      	bpl.n	8004ef8 <HAL_SPI_Transmit+0x168>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ed8:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004edc:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8004ede:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee0:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004ee8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0b8      	beq.n	8004e62 <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	0790      	lsls	r0, r2, #30
 8004ef6:	d4ee      	bmi.n	8004ed6 <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef8:	f7fe f86c 	bl	8002fd4 <HAL_GetTick>
 8004efc:	1b80      	subs	r0, r0, r6
 8004efe:	42a8      	cmp	r0, r5
 8004f00:	d3e1      	bcc.n	8004ec6 <HAL_SPI_Transmit+0x136>
 8004f02:	1c69      	adds	r1, r5, #1
 8004f04:	d0df      	beq.n	8004ec6 <HAL_SPI_Transmit+0x136>
 8004f06:	e7d9      	b.n	8004ebc <HAL_SPI_Transmit+0x12c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f08:	4641      	mov	r1, r8
 8004f0a:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004f0e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004f10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f12:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004f1a:	e7d4      	b.n	8004ec6 <HAL_SPI_Transmit+0x136>

08004f1c <HAL_SPI_TransmitReceive>:
{
 8004f1c:	b410      	push	{r4}
  __HAL_LOCK(hspi);
 8004f1e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004f22:	2c01      	cmp	r4, #1
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_TransmitReceive+0x10>
}
 8004f26:	bc10      	pop	{r4}
 8004f28:	f7ff bde4 	b.w	8004af4 <HAL_SPI_TransmitReceive.part.2>
 8004f2c:	2002      	movs	r0, #2
 8004f2e:	bc10      	pop	{r4}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f38:	6803      	ldr	r3, [r0, #0]
 8004f3a:	68c0      	ldr	r0, [r0, #12]
 8004f3c:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f3e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004f44:	4301      	orrs	r1, r0
 8004f46:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004f48:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f4a:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004f4e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f52:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004f54:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f58:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8004f62:	4912      	ldr	r1, [pc, #72]	; (8004fac <UART_SetConfig+0x78>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f68:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8004f6a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f6c:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004f6e:	d01a      	beq.n	8004fa6 <UART_SetConfig+0x72>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f70:	f7ff f89e 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f74:	6863      	ldr	r3, [r4, #4]
 8004f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f80:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f84:	2364      	movs	r3, #100	; 0x64
 8004f86:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <UART_SetConfig+0x7c>)
 8004f88:	6824      	ldr	r4, [r4, #0]
 8004f8a:	fba1 5200 	umull	r5, r2, r1, r0
 8004f8e:	0952      	lsrs	r2, r2, #5
 8004f90:	fb03 0012 	mls	r0, r3, r2, r0
 8004f94:	0100      	lsls	r0, r0, #4
 8004f96:	3032      	adds	r0, #50	; 0x32
 8004f98:	fba1 3000 	umull	r3, r0, r1, r0
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8004fa2:	60a0      	str	r0, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fa4:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fa6:	f7ff f893 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 8004faa:	e7e3      	b.n	8004f74 <UART_SetConfig+0x40>
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	51eb851f 	.word	0x51eb851f

08004fb4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8004fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb8:	4607      	mov	r7, r0
 8004fba:	460e      	mov	r6, r1
 8004fbc:	4690      	mov	r8, r2
 8004fbe:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc0:	683c      	ldr	r4, [r7, #0]
 8004fc2:	e001      	b.n	8004fc8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	1c6b      	adds	r3, r5, #1
 8004fc6:	d106      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	ea36 0300 	bics.w	r3, r6, r0
 8004fce:	d1f9      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x10>
  return HAL_OK;
 8004fd0:	2000      	movs	r0, #0
}
 8004fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fd6:	b135      	cbz	r5, 8004fe6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x32>
 8004fd8:	f7fd fffc 	bl	8002fd4 <HAL_GetTick>
 8004fdc:	eba0 0008 	sub.w	r0, r0, r8
 8004fe0:	4285      	cmp	r5, r0
 8004fe2:	d2ed      	bcs.n	8004fc0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 8004fe4:	683c      	ldr	r4, [r7, #0]
        huart->gState  = HAL_UART_STATE_READY;
 8004fe6:	2220      	movs	r2, #32
        __HAL_UNLOCK(huart);
 8004fe8:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fea:	68e3      	ldr	r3, [r4, #12]
        __HAL_UNLOCK(huart);
 8004fec:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ff2:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff4:	6963      	ldr	r3, [r4, #20]
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	6163      	str	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004ffc:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8005000:	f887 1038 	strb.w	r1, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8005004:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
 8005008:	e7e3      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>
 800500a:	bf00      	nop

0800500c <HAL_UART_Init>:
  if (huart == NULL)
 800500c:	b360      	cbz	r0, 8005068 <HAL_UART_Init+0x5c>
{
 800500e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005010:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005014:	4604      	mov	r4, r0
 8005016:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800501a:	b303      	cbz	r3, 800505e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800501e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005020:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005024:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005026:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800502e:	f7ff ff81 	bl	8004f34 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005032:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005034:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005036:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005038:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005048:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005050:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005052:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005054:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005058:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800505c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800505e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005062:	f7fc fd3f 	bl	8001ae4 <HAL_UART_MspInit>
 8005066:	e7d9      	b.n	800501c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8005068:	2001      	movs	r0, #1
}
 800506a:	4770      	bx	lr

0800506c <HAL_UART_Transmit>:
{
 800506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005070:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005072:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
{
 8005076:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8005078:	2820      	cmp	r0, #32
 800507a:	d13f      	bne.n	80050fc <HAL_UART_Transmit+0x90>
 800507c:	460d      	mov	r5, r1
    if ((pData == NULL) || (Size == 0U))
 800507e:	2900      	cmp	r1, #0
 8005080:	d040      	beq.n	8005104 <HAL_UART_Transmit+0x98>
 8005082:	9201      	str	r2, [sp, #4]
 8005084:	2a00      	cmp	r2, #0
 8005086:	d03d      	beq.n	8005104 <HAL_UART_Transmit+0x98>
 8005088:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800508a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800508e:	2b01      	cmp	r3, #1
 8005090:	d034      	beq.n	80050fc <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005092:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8005094:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005096:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 800509a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509e:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    tickstart = HAL_GetTick();
 80050a6:	f7fd ff95 	bl	8002fd4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050aa:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80050ac:	9a01      	ldr	r2, [sp, #4]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80050b2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80050b4:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80050b6:	84e2      	strh	r2, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b8:	d036      	beq.n	8005128 <HAL_UART_Transmit+0xbc>
    __HAL_UNLOCK(huart);
 80050ba:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80050bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80050be:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	b953      	cbnz	r3, 80050dc <HAL_UART_Transmit+0x70>
 80050c6:	e023      	b.n	8005110 <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80050cc:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80050ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80050d8:	b29b      	uxth	r3, r3
 80050da:	b1cb      	cbz	r3, 8005110 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050dc:	4633      	mov	r3, r6
 80050de:	463a      	mov	r2, r7
 80050e0:	2180      	movs	r1, #128	; 0x80
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7ff ff66 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80050e8:	b980      	cbnz	r0, 800510c <HAL_UART_Transmit+0xa0>
 80050ea:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	d1eb      	bne.n	80050c8 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f0:	f838 2b02 	ldrh.w	r2, [r8], #2
 80050f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	e7e8      	b.n	80050ce <HAL_UART_Transmit+0x62>
    return HAL_BUSY;
 80050fc:	2002      	movs	r0, #2
}
 80050fe:	b002      	add	sp, #8
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005104:	2001      	movs	r0, #1
}
 8005106:	b002      	add	sp, #8
 8005108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800510c:	2003      	movs	r0, #3
 800510e:	e7f6      	b.n	80050fe <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005110:	4633      	mov	r3, r6
 8005112:	463a      	mov	r2, r7
 8005114:	2140      	movs	r1, #64	; 0x40
 8005116:	4620      	mov	r0, r4
 8005118:	f7ff ff4c 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800511c:	2800      	cmp	r0, #0
 800511e:	d1f5      	bne.n	800510c <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_READY;
 8005120:	2320      	movs	r3, #32
 8005122:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8005126:	e7ea      	b.n	80050fe <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1c5      	bne.n	80050ba <HAL_UART_Transmit+0x4e>
 800512e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005130:	461d      	mov	r5, r3
 8005132:	e7c2      	b.n	80050ba <HAL_UART_Transmit+0x4e>

08005134 <HAL_UART_Receive_DMA>:
{
 8005134:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005136:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 800513a:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800513c:	2c20      	cmp	r4, #32
 800513e:	d138      	bne.n	80051b2 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8005140:	2900      	cmp	r1, #0
 8005142:	d039      	beq.n	80051b8 <HAL_UART_Receive_DMA+0x84>
 8005144:	2a00      	cmp	r2, #0
 8005146:	d037      	beq.n	80051b8 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 8005148:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800514c:	2b01      	cmp	r3, #1
 800514e:	d030      	beq.n	80051b2 <HAL_UART_Receive_DMA+0x7e>
 8005150:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005152:	2500      	movs	r5, #0
 8005154:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 8005156:	2601      	movs	r6, #1
 8005158:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800515a:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800515c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8005160:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005164:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005168:	4e15      	ldr	r6, [pc, #84]	; (80051c0 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800516a:	4916      	ldr	r1, [pc, #88]	; (80051c4 <HAL_UART_Receive_DMA+0x90>)
    huart->pRxBuffPtr = pData;
 800516c:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 800516e:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005170:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005172:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005174:	4e14      	ldr	r6, [pc, #80]	; (80051c8 <HAL_UART_Receive_DMA+0x94>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005176:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8005178:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800517a:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800517c:	3104      	adds	r1, #4
 800517e:	f7fd fff7 	bl	8003170 <HAL_DMA_Start_IT>
    return HAL_OK;
 8005182:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	9501      	str	r5, [sp, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	9201      	str	r2, [sp, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 800518e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005192:	9201      	str	r2, [sp, #4]
 8005194:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519c:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ac:	615a      	str	r2, [r3, #20]
}
 80051ae:	b002      	add	sp, #8
 80051b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80051b2:	2002      	movs	r0, #2
}
 80051b4:	b002      	add	sp, #8
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80051b8:	2001      	movs	r0, #1
}
 80051ba:	b002      	add	sp, #8
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
 80051be:	bf00      	nop
 80051c0:	080051d5 	.word	0x080051d5
 80051c4:	08005285 	.word	0x08005285
 80051c8:	08005295 	.word	0x08005295

080051cc <HAL_UART_TxCpltCallback>:
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop

080051d0 <HAL_UART_RxCpltCallback>:
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop

080051d4 <UART_DMAReceiveCplt>:
{
 80051d4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051d6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f013 0320 	ands.w	r3, r3, #32
 80051e0:	d110      	bne.n	8005204 <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 80051e2:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e4:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80051e6:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e8:	68d3      	ldr	r3, [r2, #12]
 80051ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ee:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	6953      	ldr	r3, [r2, #20]
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f8:	6953      	ldr	r3, [r2, #20]
 80051fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fe:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005200:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8005204:	f7ff ffe4 	bl	80051d0 <HAL_UART_RxCpltCallback>
}
 8005208:	bd08      	pop	{r3, pc}
 800520a:	bf00      	nop

0800520c <UART_Receive_IT.part.1>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520c:	6882      	ldr	r2, [r0, #8]
 800520e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005210:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005214:	6801      	ldr	r1, [r0, #0]
 8005216:	d029      	beq.n	800526c <UART_Receive_IT.part.1+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005218:	b16a      	cbz	r2, 8005236 <UART_Receive_IT.part.1+0x2a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800521a:	684a      	ldr	r2, [r1, #4]
 800521c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005220:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8005222:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005224:	3301      	adds	r3, #1
 8005226:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005228:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800522a:	3b01      	subs	r3, #1
 800522c:	b29b      	uxth	r3, r3
 800522e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005230:	b13b      	cbz	r3, 8005242 <UART_Receive_IT.part.1+0x36>
}
 8005232:	2000      	movs	r0, #0
 8005234:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005236:	6902      	ldr	r2, [r0, #16]
 8005238:	2a00      	cmp	r2, #0
 800523a:	d1ee      	bne.n	800521a <UART_Receive_IT.part.1+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800523c:	684a      	ldr	r2, [r1, #4]
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e7ef      	b.n	8005222 <UART_Receive_IT.part.1+0x16>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005242:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8005244:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005246:	6803      	ldr	r3, [r0, #0]
 8005248:	68d9      	ldr	r1, [r3, #12]
 800524a:	f021 0120 	bic.w	r1, r1, #32
 800524e:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005250:	68d9      	ldr	r1, [r3, #12]
 8005252:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005256:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005258:	6959      	ldr	r1, [r3, #20]
 800525a:	f021 0101 	bic.w	r1, r1, #1
 800525e:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005260:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005264:	f7ff ffb4 	bl	80051d0 <HAL_UART_RxCpltCallback>
}
 8005268:	2000      	movs	r0, #0
 800526a:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526c:	6902      	ldr	r2, [r0, #16]
 800526e:	2a00      	cmp	r2, #0
 8005270:	d1e4      	bne.n	800523c <UART_Receive_IT.part.1+0x30>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005272:	684a      	ldr	r2, [r1, #4]
 8005274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005278:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800527c:	6283      	str	r3, [r0, #40]	; 0x28
 800527e:	e7d3      	b.n	8005228 <UART_Receive_IT.part.1+0x1c>

08005280 <HAL_UART_RxHalfCpltCallback>:
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop

08005284 <UART_DMARxHalfCplt>:
{
 8005284:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8005286:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005288:	f7ff fffa 	bl	8005280 <HAL_UART_RxHalfCpltCallback>
}
 800528c:	bd08      	pop	{r3, pc}
 800528e:	bf00      	nop

08005290 <HAL_UART_ErrorCallback>:
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop

08005294 <UART_DMAError>:
{
 8005294:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005296:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800529c:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 80052a0:	2921      	cmp	r1, #33	; 0x21
 80052a2:	d01c      	beq.n	80052de <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052a4:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052a6:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80052aa:	2922      	cmp	r1, #34	; 0x22
 80052ac:	d007      	beq.n	80052be <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80052b0:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052b2:	f042 0210 	orr.w	r2, r2, #16
 80052b6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80052b8:	f7ff ffea 	bl	8005290 <HAL_UART_ErrorCallback>
}
 80052bc:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052be:	0641      	lsls	r1, r0, #25
 80052c0:	d5f5      	bpl.n	80052ae <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 80052c2:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	2020      	movs	r0, #32
    huart->RxXferCount = 0x00U;
 80052c6:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c8:	68d1      	ldr	r1, [r2, #12]
 80052ca:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80052ce:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d0:	6951      	ldr	r1, [r2, #20]
 80052d2:	f021 0101 	bic.w	r1, r1, #1
 80052d6:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 80052dc:	e7e7      	b.n	80052ae <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052de:	0600      	lsls	r0, r0, #24
 80052e0:	d5e0      	bpl.n	80052a4 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80052e2:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80052e4:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 80052e6:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052e8:	68d1      	ldr	r1, [r2, #12]
 80052ea:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80052ee:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80052f0:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 80052f4:	e7d6      	b.n	80052a4 <UART_DMAError+0x10>
 80052f6:	bf00      	nop

080052f8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052f8:	6803      	ldr	r3, [r0, #0]
{
 80052fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052fc:	681a      	ldr	r2, [r3, #0]
{
 80052fe:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8005300:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005302:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005304:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8005306:	d048      	beq.n	800539a <HAL_UART_IRQHandler+0xa2>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005308:	f011 0101 	ands.w	r1, r1, #1
 800530c:	461e      	mov	r6, r3
 800530e:	d04d      	beq.n	80053ac <HAL_UART_IRQHandler+0xb4>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005310:	07d3      	lsls	r3, r2, #31
 8005312:	d505      	bpl.n	8005320 <HAL_UART_IRQHandler+0x28>
 8005314:	05e8      	lsls	r0, r5, #23
 8005316:	d503      	bpl.n	8005320 <HAL_UART_IRQHandler+0x28>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005318:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005320:	0753      	lsls	r3, r2, #29
 8005322:	d575      	bpl.n	8005410 <HAL_UART_IRQHandler+0x118>
 8005324:	b129      	cbz	r1, 8005332 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005326:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005328:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005330:	d472      	bmi.n	8005418 <HAL_UART_IRQHandler+0x120>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005332:	0710      	lsls	r0, r2, #28
 8005334:	d503      	bpl.n	800533e <HAL_UART_IRQHandler+0x46>
 8005336:	06ab      	lsls	r3, r5, #26
 8005338:	d473      	bmi.n	8005422 <HAL_UART_IRQHandler+0x12a>
 800533a:	2900      	cmp	r1, #0
 800533c:	d171      	bne.n	8005422 <HAL_UART_IRQHandler+0x12a>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d032      	beq.n	80053aa <HAL_UART_IRQHandler+0xb2>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005344:	0690      	lsls	r0, r2, #26
 8005346:	d501      	bpl.n	800534c <HAL_UART_IRQHandler+0x54>
 8005348:	06a9      	lsls	r1, r5, #26
 800534a:	d473      	bmi.n	8005434 <HAL_UART_IRQHandler+0x13c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800534c:	6975      	ldr	r5, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800534e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005350:	0712      	lsls	r2, r2, #28
 8005352:	d402      	bmi.n	800535a <HAL_UART_IRQHandler+0x62>
 8005354:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005358:	d079      	beq.n	800544e <HAL_UART_IRQHandler+0x156>
  huart->RxState = HAL_UART_STATE_READY;
 800535a:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535c:	68f3      	ldr	r3, [r6, #12]
 800535e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005362:	60f3      	str	r3, [r6, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005364:	6973      	ldr	r3, [r6, #20]
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6173      	str	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005370:	6973      	ldr	r3, [r6, #20]
 8005372:	065b      	lsls	r3, r3, #25
 8005374:	d55a      	bpl.n	800542c <HAL_UART_IRQHandler+0x134>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005376:	6973      	ldr	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 8005378:	6b62      	ldr	r2, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537e:	6173      	str	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 8005380:	2a00      	cmp	r2, #0
 8005382:	d053      	beq.n	800542c <HAL_UART_IRQHandler+0x134>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <HAL_UART_IRQHandler+0x174>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005386:	4610      	mov	r0, r2
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005388:	6353      	str	r3, [r2, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800538a:	f7fd ff35 	bl	80031f8 <HAL_DMA_Abort_IT>
 800538e:	b160      	cbz	r0, 80053aa <HAL_UART_IRQHandler+0xb2>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005390:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005396:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005398:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800539a:	0696      	lsls	r6, r2, #26
 800539c:	d509      	bpl.n	80053b2 <HAL_UART_IRQHandler+0xba>
 800539e:	06a9      	lsls	r1, r5, #26
 80053a0:	d507      	bpl.n	80053b2 <HAL_UART_IRQHandler+0xba>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80053a6:	2b22      	cmp	r3, #34	; 0x22
 80053a8:	d04d      	beq.n	8005446 <HAL_UART_IRQHandler+0x14e>
}
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053ac:	f415 7f90 	tst.w	r5, #288	; 0x120
 80053b0:	d1ae      	bne.n	8005310 <HAL_UART_IRQHandler+0x18>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053b2:	0616      	lsls	r6, r2, #24
 80053b4:	d40e      	bmi.n	80053d4 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053b6:	0651      	lsls	r1, r2, #25
 80053b8:	d5f7      	bpl.n	80053aa <HAL_UART_IRQHandler+0xb2>
 80053ba:	066a      	lsls	r2, r5, #25
 80053bc:	d5f5      	bpl.n	80053aa <HAL_UART_IRQHandler+0xb2>
  huart->gState = HAL_UART_STATE_READY;
 80053be:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c0:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80053c2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053ca:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80053ce:	f7ff fefd 	bl	80051cc <HAL_UART_TxCpltCallback>
}
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053d4:	0628      	lsls	r0, r5, #24
 80053d6:	d5ee      	bpl.n	80053b6 <HAL_UART_IRQHandler+0xbe>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053d8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80053dc:	2a21      	cmp	r2, #33	; 0x21
 80053de:	d1e4      	bne.n	80053aa <HAL_UART_IRQHandler+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e0:	68a1      	ldr	r1, [r4, #8]
 80053e2:	6a22      	ldr	r2, [r4, #32]
 80053e4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80053e8:	d036      	beq.n	8005458 <HAL_UART_IRQHandler+0x160>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053ea:	1c51      	adds	r1, r2, #1
 80053ec:	6221      	str	r1, [r4, #32]
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80053f2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80053f4:	3a01      	subs	r2, #1
 80053f6:	b292      	uxth	r2, r2
 80053f8:	84e2      	strh	r2, [r4, #38]	; 0x26
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	d1d5      	bne.n	80053aa <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005404:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540c:	60da      	str	r2, [r3, #12]
}
 800540e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005410:	0793      	lsls	r3, r2, #30
 8005412:	d58e      	bpl.n	8005332 <HAL_UART_IRQHandler+0x3a>
 8005414:	2900      	cmp	r1, #0
 8005416:	d08c      	beq.n	8005332 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800541a:	f043 0304 	orr.w	r3, r3, #4
 800541e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005420:	e787      	b.n	8005332 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005422:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005424:	f043 0308 	orr.w	r3, r3, #8
 8005428:	63e3      	str	r3, [r4, #60]	; 0x3c
 800542a:	e788      	b.n	800533e <HAL_UART_IRQHandler+0x46>
            HAL_UART_ErrorCallback(huart);
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff ff2f 	bl	8005290 <HAL_UART_ErrorCallback>
}
 8005432:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005434:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005438:	2b22      	cmp	r3, #34	; 0x22
 800543a:	d187      	bne.n	800534c <HAL_UART_IRQHandler+0x54>
 800543c:	4620      	mov	r0, r4
 800543e:	f7ff fee5 	bl	800520c <UART_Receive_IT.part.1>
 8005442:	6826      	ldr	r6, [r4, #0]
 8005444:	e782      	b.n	800534c <HAL_UART_IRQHandler+0x54>
}
 8005446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800544a:	f7ff bedf 	b.w	800520c <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 800544e:	4620      	mov	r0, r4
 8005450:	f7ff ff1e 	bl	8005290 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8005456:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005458:	6921      	ldr	r1, [r4, #16]
 800545a:	2900      	cmp	r1, #0
 800545c:	d1c5      	bne.n	80053ea <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800545e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005462:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005466:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005468:	6222      	str	r2, [r4, #32]
 800546a:	e7c2      	b.n	80053f2 <HAL_UART_IRQHandler+0xfa>
 800546c:	08005471 	.word	0x08005471

08005470 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0x00U;
 8005470:	2200      	movs	r2, #0
{
 8005472:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005474:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005476:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8005478:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 800547a:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800547c:	f7ff ff08 	bl	8005290 <HAL_UART_ErrorCallback>
}
 8005480:	bd08      	pop	{r3, pc}
 8005482:	bf00      	nop

08005484 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005484:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005486:	4903      	ldr	r1, [pc, #12]	; (8005494 <MX_FATFS_Init+0x10>)
 8005488:	4803      	ldr	r0, [pc, #12]	; (8005498 <MX_FATFS_Init+0x14>)
 800548a:	f002 fb13 	bl	8007ab4 <FATFS_LinkDriver>
 800548e:	4b03      	ldr	r3, [pc, #12]	; (800549c <MX_FATFS_Init+0x18>)
 8005490:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005492:	bd08      	pop	{r3, pc}
 8005494:	20002d54 	.word	0x20002d54
 8005498:	20000010 	.word	0x20000010
 800549c:	20002d50 	.word	0x20002d50

080054a0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80054a0:	2000      	movs	r0, #0
 80054a2:	4770      	bx	lr

080054a4 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80054a4:	f7fb bdba 	b.w	800101c <SD_disk_initialize>

080054a8 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80054a8:	f7fb be70 	b.w	800118c <SD_disk_status>

080054ac <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80054ac:	f7fb be78 	b.w	80011a0 <SD_disk_read>

080054b0 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80054b0:	f7fb bebe 	b.w	8001230 <SD_disk_write>

080054b4 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80054b4:	f7fb bf1a 	b.w	80012ec <SD_disk_ioctl>

080054b8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054b8:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <disk_status+0x10>)
 80054ba:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80054be:	6852      	ldr	r2, [r2, #4]
 80054c0:	4403      	add	r3, r0
 80054c2:	6852      	ldr	r2, [r2, #4]
 80054c4:	7a18      	ldrb	r0, [r3, #8]
 80054c6:	4710      	bx	r2
 80054c8:	20000868 	.word	0x20000868

080054cc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <disk_initialize+0x1c>)
 80054ce:	5c1a      	ldrb	r2, [r3, r0]
 80054d0:	b942      	cbnz	r2, 80054e4 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80054d2:	2101      	movs	r1, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054d4:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80054d8:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 80054da:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054dc:	4403      	add	r3, r0
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	7a18      	ldrb	r0, [r3, #8]
 80054e2:	4710      	bx	r2
  }
  return stat;
}
 80054e4:	2000      	movs	r0, #0
 80054e6:	4770      	bx	lr
 80054e8:	20000868 	.word	0x20000868

080054ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054ec:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054ee:	4c05      	ldr	r4, [pc, #20]	; (8005504 <disk_read+0x18>)
 80054f0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80054f4:	686d      	ldr	r5, [r5, #4]
 80054f6:	4404      	add	r4, r0
 80054f8:	68ad      	ldr	r5, [r5, #8]
 80054fa:	7a20      	ldrb	r0, [r4, #8]
 80054fc:	46ac      	mov	ip, r5
  return res;
}
 80054fe:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005500:	4760      	bx	ip
 8005502:	bf00      	nop
 8005504:	20000868 	.word	0x20000868

08005508 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005508:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800550a:	4c05      	ldr	r4, [pc, #20]	; (8005520 <disk_write+0x18>)
 800550c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005510:	686d      	ldr	r5, [r5, #4]
 8005512:	4404      	add	r4, r0
 8005514:	68ed      	ldr	r5, [r5, #12]
 8005516:	7a20      	ldrb	r0, [r4, #8]
 8005518:	46ac      	mov	ip, r5
  return res;
}
 800551a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800551c:	4760      	bx	ip
 800551e:	bf00      	nop
 8005520:	20000868 	.word	0x20000868

08005524 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <disk_ioctl+0x18>)
{
 8005526:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005528:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800552c:	6864      	ldr	r4, [r4, #4]
 800552e:	4403      	add	r3, r0
 8005530:	6924      	ldr	r4, [r4, #16]
 8005532:	7a18      	ldrb	r0, [r3, #8]
 8005534:	4623      	mov	r3, r4
  return res;
}
 8005536:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005538:	4718      	bx	r3
 800553a:	bf00      	nop
 800553c:	20000868 	.word	0x20000868

08005540 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8005540:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <chk_lock+0x98>)
{
 8005542:	b430      	push	{r4, r5}
		if (Files[i].fs) {	/* Existing entry */
 8005544:	6813      	ldr	r3, [r2, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d044      	beq.n	80055d4 <chk_lock+0x94>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800554a:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800554e:	6824      	ldr	r4, [r4, #0]
 8005550:	429c      	cmp	r4, r3
 8005552:	d010      	beq.n	8005576 <chk_lock+0x36>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005554:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
 8005556:	68d3      	ldr	r3, [r2, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d038      	beq.n	80055ce <chk_lock+0x8e>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800555c:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8005560:	682d      	ldr	r5, [r5, #0]
 8005562:	42ab      	cmp	r3, r5
 8005564:	d021      	beq.n	80055aa <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005566:	2c00      	cmp	r4, #0
 8005568:	d131      	bne.n	80055ce <chk_lock+0x8e>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800556a:	bc30      	pop	{r4, r5}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800556c:	2902      	cmp	r1, #2
 800556e:	bf0c      	ite	eq
 8005570:	2000      	moveq	r0, #0
 8005572:	2012      	movne	r0, #18
}
 8005574:	4770      	bx	lr
				Files[i].clu == dp->sclust &&
 8005576:	f241 0308 	movw	r3, #4104	; 0x1008
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800557a:	6854      	ldr	r4, [r2, #4]
 800557c:	58c3      	ldr	r3, [r0, r3]
 800557e:	429c      	cmp	r4, r3
 8005580:	d1e8      	bne.n	8005554 <chk_lock+0x14>
				Files[i].idx == dp->index) break;
 8005582:	f241 0306 	movw	r3, #4102	; 0x1006
				Files[i].clu == dp->sclust &&
 8005586:	8914      	ldrh	r4, [r2, #8]
 8005588:	5ac3      	ldrh	r3, [r0, r3]
 800558a:	429c      	cmp	r4, r3
 800558c:	d1e2      	bne.n	8005554 <chk_lock+0x14>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800558e:	2000      	movs	r0, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005590:	b9d1      	cbnz	r1, 80055c8 <chk_lock+0x88>
}
 8005592:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005594:	0043      	lsls	r3, r0, #1
 8005596:	4403      	add	r3, r0
 8005598:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800559c:	8953      	ldrh	r3, [r2, #10]
 800559e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a2:	bf14      	ite	ne
 80055a4:	2000      	movne	r0, #0
 80055a6:	2010      	moveq	r0, #16
}
 80055a8:	4770      	bx	lr
				Files[i].clu == dp->sclust &&
 80055aa:	f241 0308 	movw	r3, #4104	; 0x1008
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80055ae:	6915      	ldr	r5, [r2, #16]
 80055b0:	58c3      	ldr	r3, [r0, r3]
 80055b2:	429d      	cmp	r5, r3
 80055b4:	d1d7      	bne.n	8005566 <chk_lock+0x26>
				Files[i].idx == dp->index) break;
 80055b6:	f241 0306 	movw	r3, #4102	; 0x1006
				Files[i].clu == dp->sclust &&
 80055ba:	5ac3      	ldrh	r3, [r0, r3]
 80055bc:	8a90      	ldrh	r0, [r2, #20]
 80055be:	4298      	cmp	r0, r3
 80055c0:	d1d1      	bne.n	8005566 <chk_lock+0x26>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055c2:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d0e4      	beq.n	8005592 <chk_lock+0x52>
}
 80055c8:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055ca:	2010      	movs	r0, #16
}
 80055cc:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055ce:	2000      	movs	r0, #0
}
 80055d0:	bc30      	pop	{r4, r5}
 80055d2:	4770      	bx	lr
			be = 1;
 80055d4:	2401      	movs	r4, #1
 80055d6:	e7be      	b.n	8005556 <chk_lock+0x16>
 80055d8:	2000064c 	.word	0x2000064c

080055dc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80055dc:	4b30      	ldr	r3, [pc, #192]	; (80056a0 <inc_lock+0xc4>)
 80055de:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
{
 80055e2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 80055e4:	6814      	ldr	r4, [r2, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4294      	cmp	r4, r2
 80055ea:	d020      	beq.n	800562e <inc_lock+0x52>
 80055ec:	68dd      	ldr	r5, [r3, #12]
 80055ee:	42a5      	cmp	r5, r4
 80055f0:	d005      	beq.n	80055fe <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055f2:	b352      	cbz	r2, 800564a <inc_lock+0x6e>
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	d049      	beq.n	800568c <inc_lock+0xb0>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80055f8:	2600      	movs	r6, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 80055fa:	4630      	mov	r0, r6
 80055fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Files[i].clu == dp->sclust &&
 80055fe:	f241 0608 	movw	r6, #4104	; 0x1008
		if (Files[i].fs == dp->fs &&
 8005602:	691f      	ldr	r7, [r3, #16]
 8005604:	5986      	ldr	r6, [r0, r6]
 8005606:	42b7      	cmp	r7, r6
 8005608:	d1f3      	bne.n	80055f2 <inc_lock+0x16>
			Files[i].idx == dp->index) break;
 800560a:	f241 0606 	movw	r6, #4102	; 0x1006
			Files[i].clu == dp->sclust &&
 800560e:	8a9f      	ldrh	r7, [r3, #20]
 8005610:	5b86      	ldrh	r6, [r0, r6]
 8005612:	42b7      	cmp	r7, r6
 8005614:	d1ed      	bne.n	80055f2 <inc_lock+0x16>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005616:	2501      	movs	r5, #1
 8005618:	006a      	lsls	r2, r5, #1
 800561a:	1950      	adds	r0, r2, r5
 800561c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005620:	8940      	ldrh	r0, [r0, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005622:	2900      	cmp	r1, #0
 8005624:	d135      	bne.n	8005692 <inc_lock+0xb6>
 8005626:	1c41      	adds	r1, r0, #1
 8005628:	b289      	uxth	r1, r1
 800562a:	1c6e      	adds	r6, r5, #1
 800562c:	e028      	b.n	8005680 <inc_lock+0xa4>
			Files[i].clu == dp->sclust &&
 800562e:	f241 0608 	movw	r6, #4104	; 0x1008
		if (Files[i].fs == dp->fs &&
 8005632:	685d      	ldr	r5, [r3, #4]
 8005634:	5986      	ldr	r6, [r0, r6]
 8005636:	42ae      	cmp	r6, r5
 8005638:	d1d8      	bne.n	80055ec <inc_lock+0x10>
			Files[i].idx == dp->index) break;
 800563a:	f241 0606 	movw	r6, #4102	; 0x1006
			Files[i].clu == dp->sclust &&
 800563e:	891d      	ldrh	r5, [r3, #8]
 8005640:	5b86      	ldrh	r6, [r0, r6]
 8005642:	42ae      	cmp	r6, r5
 8005644:	d1d2      	bne.n	80055ec <inc_lock+0x10>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005646:	2500      	movs	r5, #0
 8005648:	e7e6      	b.n	8005618 <inc_lock+0x3c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800564a:	4615      	mov	r5, r2
 800564c:	2601      	movs	r6, #1
		Files[i].ctr = 0;
 800564e:	2700      	movs	r7, #0
		Files[i].clu = dp->sclust;
 8005650:	f241 0c08 	movw	ip, #4104	; 0x1008
		Files[i].idx = dp->index;
 8005654:	f241 0e06 	movw	lr, #4102	; 0x1006
		Files[i].fs = dp->fs;
 8005658:	006a      	lsls	r2, r5, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800565a:	42b9      	cmp	r1, r7
		Files[i].fs = dp->fs;
 800565c:	eb02 0105 	add.w	r1, r2, r5
		Files[i].clu = dp->sclust;
 8005660:	f850 c00c 	ldr.w	ip, [r0, ip]
		Files[i].fs = dp->fs;
 8005664:	ea4f 0181 	mov.w	r1, r1, lsl #2
		Files[i].idx = dp->index;
 8005668:	f830 000e 	ldrh.w	r0, [r0, lr]
		Files[i].fs = dp->fs;
 800566c:	505c      	str	r4, [r3, r1]
 800566e:	4419      	add	r1, r3
		Files[i].clu = dp->sclust;
 8005670:	f8c1 c004 	str.w	ip, [r1, #4]
		Files[i].idx = dp->index;
 8005674:	8108      	strh	r0, [r1, #8]
		Files[i].ctr = 0;
 8005676:	814f      	strh	r7, [r1, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005678:	bf14      	ite	ne
 800567a:	f44f 7180 	movne.w	r1, #256	; 0x100
 800567e:	2101      	moveq	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005680:	442a      	add	r2, r5
 8005682:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005686:	8159      	strh	r1, [r3, #10]
}
 8005688:	4630      	mov	r0, r6
 800568a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800568c:	2602      	movs	r6, #2
 800568e:	2501      	movs	r5, #1
 8005690:	e7dd      	b.n	800564e <inc_lock+0x72>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005692:	2800      	cmp	r0, #0
 8005694:	d1b0      	bne.n	80055f8 <inc_lock+0x1c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800569a:	1c6e      	adds	r6, r5, #1
 800569c:	e7f0      	b.n	8005680 <inc_lock+0xa4>
 800569e:	bf00      	nop
 80056a0:	2000064c 	.word	0x2000064c

080056a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80056a4:	b430      	push	{r4, r5}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80056a6:	6804      	ldr	r4, [r0, #0]
 80056a8:	b1ec      	cbz	r4, 80056e6 <get_ldnumber+0x42>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80056aa:	7825      	ldrb	r5, [r4, #0]
 80056ac:	2d1f      	cmp	r5, #31
 80056ae:	d90a      	bls.n	80056c6 <get_ldnumber+0x22>
 80056b0:	2d3a      	cmp	r5, #58	; 0x3a
 80056b2:	d018      	beq.n	80056e6 <get_ldnumber+0x42>
 80056b4:	4623      	mov	r3, r4
 80056b6:	e002      	b.n	80056be <get_ldnumber+0x1a>
 80056b8:	2a3a      	cmp	r2, #58	; 0x3a
 80056ba:	d008      	beq.n	80056ce <get_ldnumber+0x2a>
 80056bc:	460b      	mov	r3, r1
 80056be:	785a      	ldrb	r2, [r3, #1]
 80056c0:	1c59      	adds	r1, r3, #1
 80056c2:	2a1f      	cmp	r2, #31
 80056c4:	d8f8      	bhi.n	80056b8 <get_ldnumber+0x14>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80056c6:	2200      	movs	r2, #0
#endif
	}
	return vol;
}
 80056c8:	bc30      	pop	{r4, r5}
 80056ca:	4610      	mov	r0, r2
 80056cc:	4770      	bx	lr
			i = *tp++ - '0'; 
 80056ce:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80056d0:	42a1      	cmp	r1, r4
			i = *tp++ - '0'; 
 80056d2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80056d6:	d106      	bne.n	80056e6 <get_ldnumber+0x42>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80056d8:	2d30      	cmp	r5, #48	; 0x30
 80056da:	d104      	bne.n	80056e6 <get_ldnumber+0x42>
}
 80056dc:	bc30      	pop	{r4, r5}
					*path = ++tt;
 80056de:	3302      	adds	r3, #2
 80056e0:	6003      	str	r3, [r0, #0]
}
 80056e2:	4610      	mov	r0, r2
 80056e4:	4770      	bx	lr
	int vol = -1;
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
}
 80056ea:	bc30      	pop	{r4, r5}
 80056ec:	4610      	mov	r0, r2
 80056ee:	4770      	bx	lr

080056f0 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80056f0:	b1d8      	cbz	r0, 800572a <validate+0x3a>
{
 80056f2:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80056f4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	b15b      	cbz	r3, 8005714 <validate+0x24>
 80056fc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	b13a      	cbz	r2, 8005714 <validate+0x24>
 8005704:	f241 0106 	movw	r1, #4102	; 0x1006
 8005708:	f241 0204 	movw	r2, #4100	; 0x1004
 800570c:	5a59      	ldrh	r1, [r3, r1]
 800570e:	5a82      	ldrh	r2, [r0, r2]
 8005710:	4291      	cmp	r1, r2
 8005712:	d001      	beq.n	8005718 <validate+0x28>
		return FR_INVALID_OBJECT;
 8005714:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8005716:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005718:	f241 0201 	movw	r2, #4097	; 0x1001
 800571c:	5c98      	ldrb	r0, [r3, r2]
 800571e:	f7ff fecb 	bl	80054b8 <disk_status>
 8005722:	f010 0001 	ands.w	r0, r0, #1
 8005726:	d1f5      	bne.n	8005714 <validate+0x24>
}
 8005728:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 800572a:	2009      	movs	r0, #9
}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop

08005730 <sync_window.part.2>:
		wsect = fs->winsect;	/* Current sector number */
 8005730:	f241 022c 	movw	r2, #4140	; 0x102c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005734:	f241 0301 	movw	r3, #4097	; 0x1001
FRESULT sync_window (
 8005738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 800573c:	5885      	ldr	r5, [r0, r2]
FRESULT sync_window (
 800573e:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005740:	4601      	mov	r1, r0
 8005742:	462a      	mov	r2, r5
 8005744:	5cc0      	ldrb	r0, [r0, r3]
 8005746:	2301      	movs	r3, #1
 8005748:	f7ff fede 	bl	8005508 <disk_write>
 800574c:	bb28      	cbnz	r0, 800579a <sync_window.part.2+0x6a>
			fs->wflag = 0;
 800574e:	f241 0304 	movw	r3, #4100	; 0x1004
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005752:	f241 0718 	movw	r7, #4120	; 0x1018
			fs->wflag = 0;
 8005756:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005758:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	59e3      	ldr	r3, [r4, r7]
 8005760:	1aaa      	subs	r2, r5, r2
 8005762:	429a      	cmp	r2, r3
 8005764:	d216      	bcs.n	8005794 <sync_window.part.2+0x64>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005766:	f241 0203 	movw	r2, #4099	; 0x1003
 800576a:	5ca6      	ldrb	r6, [r4, r2]
 800576c:	2e01      	cmp	r6, #1
 800576e:	d911      	bls.n	8005794 <sync_window.part.2+0x64>
 8005770:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
 8005774:	4427      	add	r7, r4
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	e000      	b.n	800577e <sync_window.part.2+0x4e>
 800577c:	683b      	ldr	r3, [r7, #0]
					wsect += fs->fsize;
 800577e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005780:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005782:	462a      	mov	r2, r5
 8005784:	2301      	movs	r3, #1
 8005786:	4621      	mov	r1, r4
 8005788:	f898 0000 	ldrb.w	r0, [r8]
 800578c:	f7ff febc 	bl	8005508 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005790:	2e01      	cmp	r6, #1
 8005792:	d1f3      	bne.n	800577c <sync_window.part.2+0x4c>
	FRESULT res = FR_OK;
 8005794:	2000      	movs	r0, #0
}
 8005796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_DISK_ERR;
 800579a:	2001      	movs	r0, #1
}
 800579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057a0 <sync_fs>:
{
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80057a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80057a6:	5cc3      	ldrb	r3, [r0, r3]
{
 80057a8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80057aa:	b97b      	cbnz	r3, 80057cc <sync_fs+0x2c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80057ac:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d013      	beq.n	80057de <sync_fs+0x3e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80057b6:	f241 0301 	movw	r3, #4097	; 0x1001
 80057ba:	2200      	movs	r2, #0
 80057bc:	5ce0      	ldrb	r0, [r4, r3]
 80057be:	4611      	mov	r1, r2
 80057c0:	f7ff feb0 	bl	8005524 <disk_ioctl>
 80057c4:	3000      	adds	r0, #0
 80057c6:	bf18      	it	ne
 80057c8:	2001      	movne	r0, #1
}
 80057ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057cc:	f7ff ffb0 	bl	8005730 <sync_window.part.2>
	if (res == FR_OK) {
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d1fa      	bne.n	80057ca <sync_fs+0x2a>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80057d4:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d1eb      	bne.n	80057b6 <sync_fs+0x16>
 80057de:	f241 0305 	movw	r3, #4101	; 0x1005
 80057e2:	5ce3      	ldrb	r3, [r4, r3]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d1e6      	bne.n	80057b6 <sync_fs+0x16>
			mem_set(fs->win.d8, 0, SS(fs));
 80057e8:	f241 030a 	movw	r3, #4106	; 0x100a
 80057ec:	5ae2      	ldrh	r2, [r4, r3]
	while (cnt--)
 80057ee:	b132      	cbz	r2, 80057fe <sync_fs+0x5e>
	BYTE *d = (BYTE*)dst;
 80057f0:	4623      	mov	r3, r4
		*d++ = (BYTE)val;
 80057f2:	2100      	movs	r1, #0
 80057f4:	4422      	add	r2, r4
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d1fb      	bne.n	80057f6 <sync_fs+0x56>
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80057fe:	f241 0110 	movw	r1, #4112	; 0x1010
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005802:	f241 030c 	movw	r3, #4108	; 0x100c
			fs->winsect = fs->volbase + 1;
 8005806:	f241 021c 	movw	r2, #4124	; 0x101c
 800580a:	f241 062c 	movw	r6, #4140	; 0x102c
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800580e:	f64a 2555 	movw	r5, #43605	; 0xaa55
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005812:	f241 0001 	movw	r0, #4097	; 0x1001
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005816:	5861      	ldr	r1, [r4, r1]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005818:	58e3      	ldr	r3, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800581a:	f3c1 2707 	ubfx	r7, r1, #8, #8
			fs->winsect = fs->volbase + 1;
 800581e:	58a2      	ldr	r2, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005820:	f884 11e8 	strb.w	r1, [r4, #488]	; 0x1e8
 8005824:	f884 71e9 	strb.w	r7, [r4, #489]	; 0x1e9
 8005828:	0c0f      	lsrs	r7, r1, #16
 800582a:	0e09      	lsrs	r1, r1, #24
 800582c:	f884 11eb 	strb.w	r1, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005830:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005834:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
 8005838:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 800583c:	0c19      	lsrs	r1, r3, #16
 800583e:	0e1b      	lsrs	r3, r3, #24
 8005840:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
 8005844:	f884 31ef 	strb.w	r3, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8005848:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800584a:	490a      	ldr	r1, [pc, #40]	; (8005874 <sync_fs+0xd4>)
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <sync_fs+0xd8>)
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800584e:	f884 71ea 	strb.w	r7, [r4, #490]	; 0x1ea
			fs->winsect = fs->volbase + 1;
 8005852:	51a2      	str	r2, [r4, r6]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005854:	f8a4 51fe 	strh.w	r5, [r4, #510]	; 0x1fe
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005858:	5c20      	ldrb	r0, [r4, r0]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800585a:	6021      	str	r1, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800585c:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005860:	4621      	mov	r1, r4
 8005862:	2301      	movs	r3, #1
 8005864:	f7ff fe50 	bl	8005508 <disk_write>
			fs->fsi_flag = 0;
 8005868:	f241 0305 	movw	r3, #4101	; 0x1005
 800586c:	2200      	movs	r2, #0
 800586e:	54e2      	strb	r2, [r4, r3]
 8005870:	e7a1      	b.n	80057b6 <sync_fs+0x16>
 8005872:	bf00      	nop
 8005874:	41615252 	.word	0x41615252
 8005878:	61417272 	.word	0x61417272

0800587c <move_window.part.3>:
FRESULT move_window (
 800587c:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800587e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005882:	5cc3      	ldrb	r3, [r0, r3]
FRESULT move_window (
 8005884:	4604      	mov	r4, r0
 8005886:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005888:	b113      	cbz	r3, 8005890 <move_window.part.3+0x14>
 800588a:	f7ff ff51 	bl	8005730 <sync_window.part.2>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800588e:	b988      	cbnz	r0, 80058b4 <move_window.part.3+0x38>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005890:	f241 0201 	movw	r2, #4097	; 0x1001
 8005894:	2301      	movs	r3, #1
 8005896:	5ca0      	ldrb	r0, [r4, r2]
 8005898:	4621      	mov	r1, r4
 800589a:	462a      	mov	r2, r5
 800589c:	f7ff fe26 	bl	80054ec <disk_read>
				res = FR_DISK_ERR;
 80058a0:	2800      	cmp	r0, #0
 80058a2:	bf18      	it	ne
 80058a4:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 80058a8:	f241 032c 	movw	r3, #4140	; 0x102c
				res = FR_DISK_ERR;
 80058ac:	bf0c      	ite	eq
 80058ae:	2000      	moveq	r0, #0
 80058b0:	2001      	movne	r0, #1
			fs->winsect = sector;
 80058b2:	50e5      	str	r5, [r4, r3]
}
 80058b4:	bd38      	pop	{r3, r4, r5, pc}
 80058b6:	bf00      	nop

080058b8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80058b8:	f04f 32ff 	mov.w	r2, #4294967295
{
 80058bc:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80058be:	f241 032c 	movw	r3, #4140	; 0x102c
 80058c2:	f241 0504 	movw	r5, #4100	; 0x1004
 80058c6:	2600      	movs	r6, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80058c8:	4291      	cmp	r1, r2
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80058ca:	5546      	strb	r6, [r0, r5]
{
 80058cc:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80058ce:	50c2      	str	r2, [r0, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80058d0:	d11a      	bne.n	8005908 <check_fs+0x50>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80058d2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80058d6:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
 80058da:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80058de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10e      	bne.n	8005904 <check_fs+0x4c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80058e6:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 80058ea:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <check_fs+0x60>)
 80058ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00f      	beq.n	8005914 <check_fs+0x5c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80058f4:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 80058f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80058fc:	1a80      	subs	r0, r0, r2
 80058fe:	bf18      	it	ne
 8005900:	2001      	movne	r0, #1
}
 8005902:	bd70      	pop	{r4, r5, r6, pc}
		return 2;
 8005904:	2002      	movs	r0, #2
}
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f7ff ffb8 	bl	800587c <move_window.part.3>
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800590c:	2800      	cmp	r0, #0
 800590e:	d0e0      	beq.n	80058d2 <check_fs+0x1a>
		return 3;
 8005910:	2003      	movs	r0, #3
}
 8005912:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 8005914:	2000      	movs	r0, #0
}
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	00544146 	.word	0x00544146

0800591c <find_volume>:
{
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8005920:	2300      	movs	r3, #0
{
 8005922:	4607      	mov	r7, r0
 8005924:	b085      	sub	sp, #20
	vol = get_ldnumber(path);
 8005926:	4608      	mov	r0, r1
	*rfs = 0;
 8005928:	603b      	str	r3, [r7, #0]
{
 800592a:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 800592c:	f7ff feba 	bl	80056a4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005930:	1e05      	subs	r5, r0, #0
 8005932:	f2c0 8101 	blt.w	8005b38 <find_volume+0x21c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005936:	4bbc      	ldr	r3, [pc, #752]	; (8005c28 <find_volume+0x30c>)
 8005938:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800593c:	2c00      	cmp	r4, #0
 800593e:	f000 8103 	beq.w	8005b48 <find_volume+0x22c>
	*rfs = fs;							/* Return pointer to the file system object */
 8005942:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005944:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 8005948:	783b      	ldrb	r3, [r7, #0]
 800594a:	b18b      	cbz	r3, 8005970 <find_volume+0x54>
		stat = disk_status(fs->drv);
 800594c:	f241 0301 	movw	r3, #4097	; 0x1001
 8005950:	5ce0      	ldrb	r0, [r4, r3]
 8005952:	f7ff fdb1 	bl	80054b8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005956:	07c1      	lsls	r1, r0, #31
 8005958:	d40a      	bmi.n	8005970 <find_volume+0x54>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800595a:	2e00      	cmp	r6, #0
 800595c:	f000 80f8 	beq.w	8005b50 <find_volume+0x234>
 8005960:	f010 0004 	ands.w	r0, r0, #4
 8005964:	f000 80e5 	beq.w	8005b32 <find_volume+0x216>
				return FR_WRITE_PROTECTED;
 8005968:	200a      	movs	r0, #10
}
 800596a:	b005      	add	sp, #20
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8005970:	2200      	movs	r2, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005972:	f241 0301 	movw	r3, #4097	; 0x1001
 8005976:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8005978:	703a      	strb	r2, [r7, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800597a:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800597c:	f7ff fda6 	bl	80054cc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005980:	07c2      	lsls	r2, r0, #31
 8005982:	f100 80dd 	bmi.w	8005b40 <find_volume+0x224>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005986:	b10e      	cbz	r6, 800598c <find_volume+0x70>
 8005988:	0743      	lsls	r3, r0, #29
 800598a:	d4ed      	bmi.n	8005968 <find_volume+0x4c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800598c:	f241 050a 	movw	r5, #4106	; 0x100a
 8005990:	f241 0301 	movw	r3, #4097	; 0x1001
 8005994:	1962      	adds	r2, r4, r5
 8005996:	5ce0      	ldrb	r0, [r4, r3]
 8005998:	2102      	movs	r1, #2
 800599a:	f7ff fdc3 	bl	8005524 <disk_ioctl>
 800599e:	2800      	cmp	r0, #0
 80059a0:	f040 80c6 	bne.w	8005b30 <find_volume+0x214>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80059a4:	5b63      	ldrh	r3, [r4, r5]
 80059a6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80059aa:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80059ae:	f200 80bf 	bhi.w	8005b30 <find_volume+0x214>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80059b2:	4601      	mov	r1, r0
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff ff7f 	bl	80058b8 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80059ba:	2801      	cmp	r0, #1
 80059bc:	f000 80ca 	beq.w	8005b54 <find_volume+0x238>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80059c0:	2803      	cmp	r0, #3
 80059c2:	f000 80b5 	beq.w	8005b30 <find_volume+0x214>
	bsect = 0;
 80059c6:	4605      	mov	r5, r0
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f040 80dc 	bne.w	8005b86 <find_volume+0x26a>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80059ce:	f241 020a 	movw	r2, #4106	; 0x100a
 80059d2:	7b21      	ldrb	r1, [r4, #12]
 80059d4:	7ae3      	ldrb	r3, [r4, #11]
 80059d6:	5aa2      	ldrh	r2, [r4, r2]
 80059d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059dc:	429a      	cmp	r2, r3
 80059de:	f040 80d2 	bne.w	8005b86 <find_volume+0x26a>
	fs->fsize = fasize;
 80059e2:	f241 0018 	movw	r0, #4120	; 0x1018
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80059e6:	f241 0603 	movw	r6, #4099	; 0x1003
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80059ea:	7de1      	ldrb	r1, [r4, #23]
 80059ec:	7da2      	ldrb	r2, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80059ee:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 80059f2:	bf08      	it	eq
 80059f4:	6a62      	ldreq	r2, [r4, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80059f6:	7c21      	ldrb	r1, [r4, #16]
	fs->fsize = fasize;
 80059f8:	5022      	str	r2, [r4, r0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80059fa:	1e48      	subs	r0, r1, #1
 80059fc:	2801      	cmp	r0, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80059fe:	55a1      	strb	r1, [r4, r6]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005a00:	f200 80c1 	bhi.w	8005b86 <find_volume+0x26a>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005a04:	f241 0002 	movw	r0, #4098	; 0x1002
 8005a08:	7b66      	ldrb	r6, [r4, #13]
 8005a0a:	5426      	strb	r6, [r4, r0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	f000 80ba 	beq.w	8005b86 <find_volume+0x26a>
 8005a12:	1e70      	subs	r0, r6, #1
 8005a14:	4230      	tst	r0, r6
 8005a16:	f040 80b6 	bne.w	8005b86 <find_volume+0x26a>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a1a:	f894 e012 	ldrb.w	lr, [r4, #18]
 8005a1e:	f894 c011 	ldrb.w	ip, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005a22:	0958      	lsrs	r0, r3, #5
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a24:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005a28:	fbbc fef0 	udiv	lr, ip, r0
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a2c:	f241 0808 	movw	r8, #4104	; 0x1008
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005a30:	fb00 c01e 	mls	r0, r0, lr, ip
 8005a34:	b280      	uxth	r0, r0
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a36:	f824 c008 	strh.w	ip, [r4, r8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	f040 80a3 	bne.w	8005b86 <find_volume+0x26a>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005a40:	f894 8014 	ldrb.w	r8, [r4, #20]
 8005a44:	7ce0      	ldrb	r0, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005a46:	f894 900f 	ldrb.w	r9, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005a4a:	ea50 2008 	orrs.w	r0, r0, r8, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005a4e:	f894 800e 	ldrb.w	r8, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005a52:	bf08      	it	eq
 8005a54:	6a20      	ldreq	r0, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005a56:	ea58 2809 	orrs.w	r8, r8, r9, lsl #8
 8005a5a:	f000 8094 	beq.w	8005b86 <find_volume+0x26a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005a5e:	fb02 f101 	mul.w	r1, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005a62:	44c6      	add	lr, r8
 8005a64:	448e      	add	lr, r1
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a66:	4570      	cmp	r0, lr
 8005a68:	f0c0 808d 	bcc.w	8005b86 <find_volume+0x26a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005a6c:	eba0 000e 	sub.w	r0, r0, lr
 8005a70:	fbb0 f6f6 	udiv	r6, r0, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	f000 8086 	beq.w	8005b86 <find_volume+0x26a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005a7a:	f640 7bf5 	movw	fp, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005a7e:	f64f 79f5 	movw	r9, #65525	; 0xfff5
 8005a82:	eb0e 0a05 	add.w	sl, lr, r5
	fmt = FS_FAT12;
 8005a86:	455e      	cmp	r6, fp
 8005a88:	bf8c      	ite	hi
 8005a8a:	f04f 0e02 	movhi.w	lr, #2
 8005a8e:	f04f 0e01 	movls.w	lr, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005a92:	454e      	cmp	r6, r9
 8005a94:	eb08 0005 	add.w	r0, r8, r5
 8005a98:	f106 0802 	add.w	r8, r6, #2
 8005a9c:	d97c      	bls.n	8005b98 <find_volume+0x27c>
	fs->volbase = bsect;								/* Volume start sector */
 8005a9e:	f241 061c 	movw	r6, #4124	; 0x101c
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005aa2:	f241 0e14 	movw	lr, #4116	; 0x1014
	fs->database = bsect + sysect;						/* Data start sector */
 8005aa6:	f241 0128 	movw	r1, #4136	; 0x1028
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005aaa:	f844 800e 	str.w	r8, [r4, lr]
	fs->volbase = bsect;								/* Volume start sector */
 8005aae:	51a5      	str	r5, [r4, r6]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005ab0:	f504 5681 	add.w	r6, r4, #4128	; 0x1020
 8005ab4:	6030      	str	r0, [r6, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8005ab6:	f844 a001 	str.w	sl, [r4, r1]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005aba:	f1bc 0f00 	cmp.w	ip, #0
 8005abe:	d162      	bne.n	8005b86 <find_volume+0x26a>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005ac0:	1e59      	subs	r1, r3, #1
 8005ac2:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8005ac6:	fbb1 f3f3 	udiv	r3, r1, r3
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005aca:	f241 0124 	movw	r1, #4132	; 0x1024
 8005ace:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005ad0:	429a      	cmp	r2, r3
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005ad2:	5060      	str	r0, [r4, r1]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005ad4:	d357      	bcc.n	8005b86 <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ada:	f241 020c 	movw	r2, #4108	; 0x100c
 8005ade:	f241 0610 	movw	r6, #4112	; 0x1010
	fs->fsi_flag = 0x80;
 8005ae2:	f241 0105 	movw	r1, #4101	; 0x1005
 8005ae6:	2080      	movs	r0, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005ae8:	51a3      	str	r3, [r4, r6]
 8005aea:	50a3      	str	r3, [r4, r2]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005aec:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8005af0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	fs->fsi_flag = 0x80;
 8005af4:	5460      	strb	r0, [r4, r1]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005af6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	f000 809a 	beq.w	8005c34 <find_volume+0x318>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005b00:	f04f 0e03 	mov.w	lr, #3
	fs->id = ++Fsid;	/* File system mount ID */
 8005b04:	f241 0506 	movw	r5, #4102	; 0x1006
 8005b08:	4948      	ldr	r1, [pc, #288]	; (8005c2c <find_volume+0x310>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b0a:	4a49      	ldr	r2, [pc, #292]	; (8005c30 <find_volume+0x314>)
	fs->id = ++Fsid;	/* File system mount ID */
 8005b0c:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b0e:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005b10:	3301      	adds	r3, #1
 8005b12:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b14:	4284      	cmp	r4, r0
	fs->id = ++Fsid;	/* File system mount ID */
 8005b16:	800b      	strh	r3, [r1, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
 8005b18:	f887 e000 	strb.w	lr, [r7]
	fs->id = ++Fsid;	/* File system mount ID */
 8005b1c:	5363      	strh	r3, [r4, r5]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b1e:	bf04      	itt	eq
 8005b20:	2300      	moveq	r3, #0
 8005b22:	6013      	streq	r3, [r2, #0]
 8005b24:	68d3      	ldr	r3, [r2, #12]
 8005b26:	2000      	movs	r0, #0
 8005b28:	429c      	cmp	r4, r3
 8005b2a:	d102      	bne.n	8005b32 <find_volume+0x216>
 8005b2c:	60d0      	str	r0, [r2, #12]
 8005b2e:	e000      	b.n	8005b32 <find_volume+0x216>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005b30:	2001      	movs	r0, #1
}
 8005b32:	b005      	add	sp, #20
 8005b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b38:	200b      	movs	r0, #11
}
 8005b3a:	b005      	add	sp, #20
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b40:	2003      	movs	r0, #3
}
 8005b42:	b005      	add	sp, #20
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b48:	200c      	movs	r0, #12
}
 8005b4a:	b005      	add	sp, #20
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return FR_OK;				/* The file system object is valid */
 8005b50:	4630      	mov	r0, r6
 8005b52:	e7ee      	b.n	8005b32 <find_volume+0x216>
 8005b54:	466e      	mov	r6, sp
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005b56:	4631      	mov	r1, r6
 8005b58:	f504 73e3 	add.w	r3, r4, #454	; 0x1c6
 8005b5c:	f204 2006 	addw	r0, r4, #518	; 0x206
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005b60:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8005b64:	b102      	cbz	r2, 8005b68 <find_volume+0x24c>
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005b6a:	4283      	cmp	r3, r0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005b6c:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005b70:	d1f6      	bne.n	8005b60 <find_volume+0x244>
 8005b72:	f106 0810 	add.w	r8, r6, #16
			bsect = br[i];
 8005b76:	f856 5b04 	ldr.w	r5, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005b7a:	b935      	cbnz	r5, 8005b8a <find_volume+0x26e>
 8005b7c:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005b7e:	4546      	cmp	r6, r8
 8005b80:	d1f9      	bne.n	8005b76 <find_volume+0x25a>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b82:	2803      	cmp	r0, #3
 8005b84:	d0d4      	beq.n	8005b30 <find_volume+0x214>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005b86:	200d      	movs	r0, #13
 8005b88:	e7d3      	b.n	8005b32 <find_volume+0x216>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f7ff fe93 	bl	80058b8 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d1f3      	bne.n	8005b7e <find_volume+0x262>
 8005b96:	e71a      	b.n	80059ce <find_volume+0xb2>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005b98:	f241 0b14 	movw	fp, #4116	; 0x1014
	fs->volbase = bsect;								/* Volume start sector */
 8005b9c:	f241 091c 	movw	r9, #4124	; 0x101c
	fs->database = bsect + sysect;						/* Data start sector */
 8005ba0:	f241 0628 	movw	r6, #4136	; 0x1028
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005ba4:	f844 800b 	str.w	r8, [r4, fp]
	fs->volbase = bsect;								/* Volume start sector */
 8005ba8:	f844 5009 	str.w	r5, [r4, r9]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005bac:	f504 5581 	add.w	r5, r4, #4128	; 0x1020
 8005bb0:	6028      	str	r0, [r5, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8005bb2:	f844 a006 	str.w	sl, [r4, r6]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005bb6:	f1bc 0f00 	cmp.w	ip, #0
 8005bba:	d0e4      	beq.n	8005b86 <find_volume+0x26a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005bbc:	f241 0524 	movw	r5, #4132	; 0x1024
 8005bc0:	4401      	add	r1, r0
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005bc2:	f1be 0f02 	cmp.w	lr, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005bc6:	5161      	str	r1, [r4, r5]
 8005bc8:	f103 30ff 	add.w	r0, r3, #4294967295
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005bcc:	d019      	beq.n	8005c02 <find_volume+0x2e6>
 8005bce:	f008 0101 	and.w	r1, r8, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005bd2:	4401      	add	r1, r0
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005bd4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005bd8:	eb01 0158 	add.w	r1, r1, r8, lsr #1
 8005bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d3d0      	bcc.n	8005b86 <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005be4:	f04f 33ff 	mov.w	r3, #4294967295
 8005be8:	f241 0510 	movw	r5, #4112	; 0x1010
 8005bec:	f241 000c 	movw	r0, #4108	; 0x100c
	fs->fsi_flag = 0x80;
 8005bf0:	f241 0205 	movw	r2, #4101	; 0x1005
 8005bf4:	2180      	movs	r1, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005bf6:	5163      	str	r3, [r4, r5]
	fs->fsi_flag = 0x80;
 8005bf8:	f04f 0e01 	mov.w	lr, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005bfc:	5023      	str	r3, [r4, r0]
	fs->fsi_flag = 0x80;
 8005bfe:	54a1      	strb	r1, [r4, r2]
 8005c00:	e780      	b.n	8005b04 <find_volume+0x1e8>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005c02:	eb00 0148 	add.w	r1, r0, r8, lsl #1
 8005c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d8bb      	bhi.n	8005b86 <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	f241 0510 	movw	r5, #4112	; 0x1010
 8005c16:	f241 000c 	movw	r0, #4108	; 0x100c
	fs->fsi_flag = 0x80;
 8005c1a:	f241 0205 	movw	r2, #4101	; 0x1005
 8005c1e:	2180      	movs	r1, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005c20:	5163      	str	r3, [r4, r5]
 8005c22:	5023      	str	r3, [r4, r0]
	fs->fsi_flag = 0x80;
 8005c24:	54a1      	strb	r1, [r4, r2]
 8005c26:	e76d      	b.n	8005b04 <find_volume+0x1e8>
 8005c28:	20000648 	.word	0x20000648
 8005c2c:	20000664 	.word	0x20000664
 8005c30:	2000064c 	.word	0x2000064c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c34:	f241 032c 	movw	r3, #4140	; 0x102c
 8005c38:	58e3      	ldr	r3, [r4, r3]
		&& move_window(fs, bsect + 1) == FR_OK)
 8005c3a:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d12a      	bne.n	8005c96 <find_volume+0x37a>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005c40:	f64a 2255 	movw	r2, #43605	; 0xaa55
		fs->fsi_flag = 0;
 8005c44:	f241 0005 	movw	r0, #4101	; 0x1005
 8005c48:	2500      	movs	r5, #0
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005c4a:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
 8005c4e:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8005c52:	5425      	strb	r5, [r4, r0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005c54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	f47f af51 	bne.w	8005b00 <find_volume+0x1e4>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <find_volume+0x388>)
 8005c60:	6822      	ldr	r2, [r4, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	f47f af4c 	bne.w	8005b00 <find_volume+0x1e4>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005c68:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8005c6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c70:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8005c74:	3320      	adds	r3, #32
 8005c76:	429a      	cmp	r2, r3
 8005c78:	f47f af42 	bne.w	8005b00 <find_volume+0x1e4>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005c7c:	f241 0110 	movw	r1, #4112	; 0x1010
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005c80:	f241 030c 	movw	r3, #4108	; 0x100c
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005c84:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005c88:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
 8005c8c:	f04f 0e03 	mov.w	lr, #3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005c90:	5060      	str	r0, [r4, r1]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005c92:	50e2      	str	r2, [r4, r3]
 8005c94:	e736      	b.n	8005b04 <find_volume+0x1e8>
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7ff fdf0 	bl	800587c <move_window.part.3>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d0cf      	beq.n	8005c40 <find_volume+0x324>
 8005ca0:	e72e      	b.n	8005b00 <find_volume+0x1e4>
 8005ca2:	bf00      	nop
 8005ca4:	41615252 	.word	0x41615252

08005ca8 <get_fat.part.6>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 8005cac:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8005cb0:	781b      	ldrb	r3, [r3, #0]
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8005cb2:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8005cb4:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8005cb6:	460e      	mov	r6, r1
		switch (fs->fs_type) {
 8005cb8:	d052      	beq.n	8005d60 <get_fat.part.6+0xb8>
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d02d      	beq.n	8005d1a <get_fat.part.6+0x72>
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d002      	beq.n	8005cc8 <get_fat.part.6+0x20>
			val = 1;	/* Internal error */
 8005cc2:	2001      	movs	r0, #1
}
 8005cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cc8:	f241 0a0a 	movw	sl, #4106	; 0x100a
 8005ccc:	f830 300a 	ldrh.w	r3, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 8005cd0:	eb01 0851 	add.w	r8, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cd4:	f241 072c 	movw	r7, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cd8:	fbb8 f5f3 	udiv	r5, r8, r3
 8005cdc:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 8005ce0:	f8d9 2000 	ldr.w	r2, [r9]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ce4:	f850 c007 	ldr.w	ip, [r0, r7]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ce8:	18a9      	adds	r1, r5, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cea:	4561      	cmp	r1, ip
 8005cec:	d15c      	bne.n	8005da8 <get_fat.part.6+0x100>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005cee:	f108 0701 	add.w	r7, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cf2:	fbb7 f0f3 	udiv	r0, r7, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 8005cf6:	fb03 8515 	mls	r5, r3, r5, r8
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cfa:	1881      	adds	r1, r0, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cfc:	4561      	cmp	r1, ip
			wc = fs->win.d8[bc++ % SS(fs)];
 8005cfe:	5d65      	ldrb	r5, [r4, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d00:	d15e      	bne.n	8005dc0 <get_fat.part.6+0x118>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005d02:	fb03 7310 	mls	r3, r3, r0, r7
 8005d06:	5ce0      	ldrb	r0, [r4, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005d08:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005d0a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005d0e:	bf4c      	ite	mi
 8005d10:	0900      	lsrmi	r0, r0, #4
 8005d12:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8005d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d1a:	f241 050a 	movw	r5, #4106	; 0x100a
 8005d1e:	5b42      	ldrh	r2, [r0, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d20:	f241 032c 	movw	r3, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d24:	0891      	lsrs	r1, r2, #2
 8005d26:	fbb6 f1f1 	udiv	r1, r6, r1
 8005d2a:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
 8005d2e:	683f      	ldr	r7, [r7, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d30:	58c3      	ldr	r3, [r0, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d32:	4439      	add	r1, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d34:	4299      	cmp	r1, r3
 8005d36:	d132      	bne.n	8005d9e <get_fat.part.6+0xf6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005d38:	00b6      	lsls	r6, r6, #2
 8005d3a:	fbb6 f3f2 	udiv	r3, r6, r2
 8005d3e:	fb02 6613 	mls	r6, r2, r3, r6
 8005d42:	19a3      	adds	r3, r4, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005d44:	7898      	ldrb	r0, [r3, #2]
 8005d46:	78d9      	ldrb	r1, [r3, #3]
 8005d48:	5da2      	ldrb	r2, [r4, r6]
 8005d4a:	0400      	lsls	r0, r0, #16
 8005d4c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	4310      	orrs	r0, r2
 8005d54:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005d58:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8005d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d60:	f241 050a 	movw	r5, #4106	; 0x100a
 8005d64:	5b42      	ldrh	r2, [r0, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d66:	f241 032c 	movw	r3, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d6a:	0851      	lsrs	r1, r2, #1
 8005d6c:	fbb6 f1f1 	udiv	r1, r6, r1
 8005d70:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
 8005d74:	683f      	ldr	r7, [r7, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d76:	58c3      	ldr	r3, [r0, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d78:	4439      	add	r1, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	d003      	beq.n	8005d86 <get_fat.part.6+0xde>
 8005d7e:	f7ff fd7d 	bl	800587c <move_window.part.3>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d82:	bb38      	cbnz	r0, 8005dd4 <get_fat.part.6+0x12c>
 8005d84:	5b62      	ldrh	r2, [r4, r5]
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005d86:	0076      	lsls	r6, r6, #1
 8005d88:	fbb6 f3f2 	udiv	r3, r6, r2
 8005d8c:	fb02 6613 	mls	r6, r2, r3, r6
			val = LD_WORD(p);
 8005d90:	19a3      	adds	r3, r4, r6
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	5da0      	ldrb	r0, [r4, r6]
 8005d96:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8005d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9e:	f7ff fd6d 	bl	800587c <move_window.part.3>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005da2:	b9b8      	cbnz	r0, 8005dd4 <get_fat.part.6+0x12c>
 8005da4:	5b62      	ldrh	r2, [r4, r5]
 8005da6:	e7c7      	b.n	8005d38 <get_fat.part.6+0x90>
 8005da8:	f7ff fd68 	bl	800587c <move_window.part.3>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dac:	b990      	cbnz	r0, 8005dd4 <get_fat.part.6+0x12c>
 8005dae:	f834 300a 	ldrh.w	r3, [r4, sl]
 8005db2:	f8d9 2000 	ldr.w	r2, [r9]
 8005db6:	fbb8 f5f3 	udiv	r5, r8, r3
 8005dba:	f854 c007 	ldr.w	ip, [r4, r7]
 8005dbe:	e796      	b.n	8005cee <get_fat.part.6+0x46>
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff fd5b 	bl	800587c <move_window.part.3>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dc6:	b928      	cbnz	r0, 8005dd4 <get_fat.part.6+0x12c>
 8005dc8:	f241 030a 	movw	r3, #4106	; 0x100a
 8005dcc:	5ae3      	ldrh	r3, [r4, r3]
 8005dce:	fbb7 f0f3 	udiv	r0, r7, r3
 8005dd2:	e796      	b.n	8005d02 <get_fat.part.6+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ddc <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005ddc:	f241 0208 	movw	r2, #4104	; 0x1008
{
 8005de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	dp->index = (WORD)idx;	/* Current index */
 8005de4:	f241 0306 	movw	r3, #4102	; 0x1006
{
 8005de8:	460c      	mov	r4, r1
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005dea:	5881      	ldr	r1, [r0, r2]
	dp->index = (WORD)idx;	/* Current index */
 8005dec:	52c4      	strh	r4, [r0, r3]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005dee:	2901      	cmp	r1, #1
 8005df0:	d02b      	beq.n	8005e4a <dir_sdi+0x6e>
 8005df2:	f241 0314 	movw	r3, #4116	; 0x1014
 8005df6:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	6830      	ldr	r0, [r6, #0]
 8005dfe:	58c3      	ldr	r3, [r0, r3]
 8005e00:	428b      	cmp	r3, r1
 8005e02:	d922      	bls.n	8005e4a <dir_sdi+0x6e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005e04:	b321      	cbz	r1, 8005e50 <dir_sdi+0x74>
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005e06:	f241 020a 	movw	r2, #4106	; 0x100a
 8005e0a:	f241 0702 	movw	r7, #4098	; 0x1002
 8005e0e:	5a82      	ldrh	r2, [r0, r2]
 8005e10:	5dc7      	ldrb	r7, [r0, r7]
 8005e12:	0952      	lsrs	r2, r2, #5
 8005e14:	fb07 f702 	mul.w	r7, r7, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8005e18:	42bc      	cmp	r4, r7
 8005e1a:	d347      	bcc.n	8005eac <dir_sdi+0xd0>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005e1c:	2901      	cmp	r1, #1
 8005e1e:	d914      	bls.n	8005e4a <dir_sdi+0x6e>
 8005e20:	428b      	cmp	r3, r1
 8005e22:	d912      	bls.n	8005e4a <dir_sdi+0x6e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005e24:	f241 0814 	movw	r8, #4116	; 0x1014
 8005e28:	e001      	b.n	8005e2e <dir_sdi+0x52>
		while (idx >= ic) {	/* Follow cluster chain */
 8005e2a:	42a7      	cmp	r7, r4
 8005e2c:	d83e      	bhi.n	8005eac <dir_sdi+0xd0>
 8005e2e:	f7ff ff3b 	bl	8005ca8 <get_fat.part.6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	4601      	mov	r1, r0
			idx -= ic;
 8005e36:	eba4 0407 	sub.w	r4, r4, r7
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e3a:	d049      	beq.n	8005ed0 <dir_sdi+0xf4>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005e3c:	2801      	cmp	r0, #1
 8005e3e:	d904      	bls.n	8005e4a <dir_sdi+0x6e>
 8005e40:	6830      	ldr	r0, [r6, #0]
 8005e42:	f850 3008 	ldr.w	r3, [r0, r8]
 8005e46:	428b      	cmp	r3, r1
 8005e48:	d8ef      	bhi.n	8005e2a <dir_sdi+0x4e>
		return FR_INT_ERR;
 8005e4a:	2002      	movs	r0, #2
}
 8005e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005e50:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	2a03      	cmp	r2, #3
 8005e58:	d021      	beq.n	8005e9e <dir_sdi+0xc2>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005e5a:	f241 0308 	movw	r3, #4104	; 0x1008
 8005e5e:	5ac3      	ldrh	r3, [r0, r3]
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d9f2      	bls.n	8005e4a <dir_sdi+0x6e>
		sect = dp->fs->dirbase;
 8005e64:	f241 0324 	movw	r3, #4132	; 0x1024
 8005e68:	58c0      	ldr	r0, [r0, r3]
	dp->clust = clst;	/* Current cluster# */
 8005e6a:	f241 030c 	movw	r3, #4108	; 0x100c
 8005e6e:	50e9      	str	r1, [r5, r3]
	if (!sect) return FR_INT_ERR;
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d0ea      	beq.n	8005e4a <dir_sdi+0x6e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005e74:	f241 030a 	movw	r3, #4106	; 0x100a
 8005e78:	6831      	ldr	r1, [r6, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005e7a:	f241 0714 	movw	r7, #4116	; 0x1014
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005e7e:	5acb      	ldrh	r3, [r1, r3]
 8005e80:	f241 0610 	movw	r6, #4112	; 0x1010
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	fbb4 f2f3 	udiv	r2, r4, r3
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005e8a:	fb03 4412 	mls	r4, r3, r2, r4
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005e8e:	4402      	add	r2, r0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005e90:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8005e94:	51ec      	str	r4, [r5, r7]
	return FR_OK;
 8005e96:	2000      	movs	r0, #0
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005e98:	51aa      	str	r2, [r5, r6]
}
 8005e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = dp->fs->dirbase;
 8005e9e:	f241 0224 	movw	r2, #4132	; 0x1024
 8005ea2:	5882      	ldr	r2, [r0, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	d0d8      	beq.n	8005e5a <dir_sdi+0x7e>
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	e7ac      	b.n	8005e06 <dir_sdi+0x2a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005eac:	3b02      	subs	r3, #2
	clst -= 2;
 8005eae:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005eb0:	429f      	cmp	r7, r3
 8005eb2:	d304      	bcc.n	8005ebe <dir_sdi+0xe2>
	dp->clust = clst;	/* Current cluster# */
 8005eb4:	f241 030c 	movw	r3, #4108	; 0x100c
	if (!sect) return FR_INT_ERR;
 8005eb8:	2002      	movs	r0, #2
	dp->clust = clst;	/* Current cluster# */
 8005eba:	50e9      	str	r1, [r5, r3]
 8005ebc:	e7c6      	b.n	8005e4c <dir_sdi+0x70>
	return clst * fs->csize + fs->database;
 8005ebe:	f241 0202 	movw	r2, #4098	; 0x1002
 8005ec2:	f241 0328 	movw	r3, #4136	; 0x1028
 8005ec6:	5c82      	ldrb	r2, [r0, r2]
 8005ec8:	58c0      	ldr	r0, [r0, r3]
 8005eca:	fb07 0002 	mla	r0, r7, r2, r0
 8005ece:	e7cc      	b.n	8005e6a <dir_sdi+0x8e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	e7bb      	b.n	8005e4c <dir_sdi+0x70>

08005ed4 <put_fat.part.7>:
FRESULT put_fat (
 8005ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 8005ed8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8005edc:	781b      	ldrb	r3, [r3, #0]
FRESULT put_fat (
 8005ede:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8005ee0:	2b02      	cmp	r3, #2
FRESULT put_fat (
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8005ee6:	d075      	beq.n	8005fd4 <put_fat.part.7+0x100>
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d046      	beq.n	8005f7a <put_fat.part.7+0xa6>
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d002      	beq.n	8005ef6 <put_fat.part.7+0x22>
			res = FR_INT_ERR;
 8005ef0:	2002      	movs	r0, #2
}
 8005ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ef6:	f241 0a0a 	movw	sl, #4106	; 0x100a
 8005efa:	f830 c00a 	ldrh.w	ip, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 8005efe:	eb01 0751 	add.w	r7, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f02:	f241 082c 	movw	r8, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f06:	fbb7 f3fc 	udiv	r3, r7, ip
 8005f0a:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 8005f0e:	f8d9 2000 	ldr.w	r2, [r9]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f12:	f850 e008 	ldr.w	lr, [r0, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f16:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f18:	4571      	cmp	r1, lr
 8005f1a:	f040 8082 	bne.w	8006022 <put_fat.part.7+0x14e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005f1e:	f107 0801 	add.w	r8, r7, #1
 8005f22:	fbb8 f0fc 	udiv	r0, r8, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f26:	07ed      	lsls	r5, r5, #31
 8005f28:	eb00 0102 	add.w	r1, r0, r2
			p = &fs->win.d8[bc++ % SS(fs)];
 8005f2c:	fb0c 7313 	mls	r3, ip, r3, r7
			fs->wflag = 1;
 8005f30:	f241 0204 	movw	r2, #4100	; 0x1004
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f34:	f140 808a 	bpl.w	800604c <put_fat.part.7+0x178>
			fs->wflag = 1;
 8005f38:	2701      	movs	r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f3a:	5ce5      	ldrb	r5, [r4, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f3c:	458e      	cmp	lr, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f3e:	f005 050f 	and.w	r5, r5, #15
 8005f42:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8005f46:	54e5      	strb	r5, [r4, r3]
			fs->wflag = 1;
 8005f48:	54a7      	strb	r7, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f4a:	d009      	beq.n	8005f60 <put_fat.part.7+0x8c>
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff fc95 	bl	800587c <move_window.part.3>
			if (res != FR_OK) break;
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d1cd      	bne.n	8005ef2 <put_fat.part.7+0x1e>
			p = &fs->win.d8[bc % SS(fs)];
 8005f56:	f241 030a 	movw	r3, #4106	; 0x100a
 8005f5a:	5ae0      	ldrh	r0, [r4, r3]
 8005f5c:	fbb8 fcf0 	udiv	ip, r8, r0
 8005f60:	fb00 8c1c 	mls	ip, r0, ip, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f64:	f3c6 1207 	ubfx	r2, r6, #4, #8
			fs->wflag = 1;
 8005f68:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f6c:	2101      	movs	r1, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f6e:	f804 200c 	strb.w	r2, [r4, ip]
			fs->wflag = 1;
 8005f72:	54e1      	strb	r1, [r4, r3]
 8005f74:	2000      	movs	r0, #0
}
 8005f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f7a:	f241 070a 	movw	r7, #4106	; 0x100a
 8005f7e:	5bc2      	ldrh	r2, [r0, r7]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f80:	f241 032c 	movw	r3, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f84:	0891      	lsrs	r1, r2, #2
 8005f86:	fbb5 f1f1 	udiv	r1, r5, r1
 8005f8a:	f500 5c81 	add.w	ip, r0, #4128	; 0x1020
 8005f8e:	f8dc c000 	ldr.w	ip, [ip]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f92:	58c3      	ldr	r3, [r0, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f94:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f96:	4299      	cmp	r1, r3
 8005f98:	d151      	bne.n	800603e <put_fat.part.7+0x16a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005f9a:	00ad      	lsls	r5, r5, #2
 8005f9c:	fbb5 f3f2 	udiv	r3, r5, r2
			fs->wflag = 1;
 8005fa0:	f241 0704 	movw	r7, #4100	; 0x1004
 8005fa4:	f04f 0c01 	mov.w	ip, #1
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005fa8:	fb02 5513 	mls	r5, r2, r3, r5
 8005fac:	1961      	adds	r1, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 8005fae:	78cb      	ldrb	r3, [r1, #3]
			fs->wflag = 1;
 8005fb0:	2000      	movs	r0, #0
			val |= LD_DWORD(p) & 0xF0000000;
 8005fb2:	061b      	lsls	r3, r3, #24
 8005fb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005fb8:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8005fbc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005fc0:	5562      	strb	r2, [r4, r5]
 8005fc2:	704b      	strb	r3, [r1, #1]
 8005fc4:	0c13      	lsrs	r3, r2, #16
 8005fc6:	0e12      	lsrs	r2, r2, #24
 8005fc8:	708b      	strb	r3, [r1, #2]
 8005fca:	70ca      	strb	r2, [r1, #3]
			fs->wflag = 1;
 8005fcc:	f804 c007 	strb.w	ip, [r4, r7]
}
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fd4:	f241 070a 	movw	r7, #4106	; 0x100a
 8005fd8:	5bc2      	ldrh	r2, [r0, r7]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fda:	f241 032c 	movw	r3, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fde:	0851      	lsrs	r1, r2, #1
 8005fe0:	fbb5 f1f1 	udiv	r1, r5, r1
 8005fe4:	f500 5c81 	add.w	ip, r0, #4128	; 0x1020
 8005fe8:	f8dc c000 	ldr.w	ip, [ip]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fec:	58c3      	ldr	r3, [r0, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fee:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d005      	beq.n	8006000 <put_fat.part.7+0x12c>
 8005ff4:	f7ff fc42 	bl	800587c <move_window.part.3>
			if (res != FR_OK) break;
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f47f af7a 	bne.w	8005ef2 <put_fat.part.7+0x1e>
 8005ffe:	5be2      	ldrh	r2, [r4, r7]
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006000:	006d      	lsls	r5, r5, #1
 8006002:	fbb5 f3f2 	udiv	r3, r5, r2
			fs->wflag = 1;
 8006006:	f241 0104 	movw	r1, #4100	; 0x1004
 800600a:	2701      	movs	r7, #1
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800600c:	fb02 5513 	mls	r5, r2, r3, r5
			ST_WORD(p, (WORD)val);
 8006010:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006014:	5566      	strb	r6, [r4, r5]
 8006016:	4425      	add	r5, r4
 8006018:	706b      	strb	r3, [r5, #1]
			fs->wflag = 1;
 800601a:	5467      	strb	r7, [r4, r1]
 800601c:	2000      	movs	r0, #0
}
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	f7ff fc2b 	bl	800587c <move_window.part.3>
			if (res != FR_OK) break;
 8006026:	2800      	cmp	r0, #0
 8006028:	f47f af63 	bne.w	8005ef2 <put_fat.part.7+0x1e>
 800602c:	f834 c00a 	ldrh.w	ip, [r4, sl]
 8006030:	f8d9 2000 	ldr.w	r2, [r9]
 8006034:	fbb7 f3fc 	udiv	r3, r7, ip
 8006038:	f854 e008 	ldr.w	lr, [r4, r8]
 800603c:	e76f      	b.n	8005f1e <put_fat.part.7+0x4a>
 800603e:	f7ff fc1d 	bl	800587c <move_window.part.3>
			if (res != FR_OK) break;
 8006042:	2800      	cmp	r0, #0
 8006044:	f47f af55 	bne.w	8005ef2 <put_fat.part.7+0x1e>
 8006048:	5be2      	ldrh	r2, [r4, r7]
 800604a:	e7a6      	b.n	8005f9a <put_fat.part.7+0xc6>
			fs->wflag = 1;
 800604c:	2501      	movs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800604e:	458e      	cmp	lr, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006050:	54e6      	strb	r6, [r4, r3]
			fs->wflag = 1;
 8006052:	54a5      	strb	r5, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006054:	d109      	bne.n	800606a <put_fat.part.7+0x196>
			p = &fs->win.d8[bc % SS(fs)];
 8006056:	fb00 8c1c 	mls	ip, r0, ip, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800605a:	f814 200c 	ldrb.w	r2, [r4, ip]
 800605e:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8006062:	f022 020f 	bic.w	r2, r2, #15
 8006066:	4332      	orrs	r2, r6
 8006068:	e77e      	b.n	8005f68 <put_fat.part.7+0x94>
 800606a:	4620      	mov	r0, r4
 800606c:	f7ff fc06 	bl	800587c <move_window.part.3>
			if (res != FR_OK) break;
 8006070:	2800      	cmp	r0, #0
 8006072:	f47f af3e 	bne.w	8005ef2 <put_fat.part.7+0x1e>
			p = &fs->win.d8[bc % SS(fs)];
 8006076:	f241 030a 	movw	r3, #4106	; 0x100a
 800607a:	5ae0      	ldrh	r0, [r4, r3]
 800607c:	fbb8 fcf0 	udiv	ip, r8, r0
 8006080:	e7e9      	b.n	8006056 <put_fat.part.7+0x182>
 8006082:	bf00      	nop

08006084 <create_chain>:
{
 8006084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006088:	4606      	mov	r6, r0
	if (clst == 0) {		/* Create a new chain */
 800608a:	4688      	mov	r8, r1
 800608c:	bb31      	cbnz	r1, 80060dc <create_chain+0x58>
		scl = fs->last_clust;			/* Get suggested start point */
 800608e:	f241 020c 	movw	r2, #4108	; 0x100c
 8006092:	f241 0314 	movw	r3, #4116	; 0x1014
 8006096:	5885      	ldr	r5, [r0, r2]
 8006098:	58c3      	ldr	r3, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800609a:	bb95      	cbnz	r5, 8006102 <create_chain+0x7e>
 800609c:	2501      	movs	r5, #1
 800609e:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 80060a2:	462c      	mov	r4, r5
 80060a4:	3714      	adds	r7, #20
 80060a6:	e010      	b.n	80060ca <create_chain+0x46>
			if (ncl > scl) return 0;	/* No free cluster */
 80060a8:	2d01      	cmp	r5, #1
 80060aa:	d92e      	bls.n	800610a <create_chain+0x86>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d911      	bls.n	80060d4 <create_chain+0x50>
			ncl = 2;
 80060b0:	2402      	movs	r4, #2
 80060b2:	4621      	mov	r1, r4
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff fdf7 	bl	8005ca8 <get_fat.part.6>
		if (cs == 0) break;				/* Found a free cluster */
 80060ba:	b350      	cbz	r0, 8006112 <create_chain+0x8e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80060bc:	1c41      	adds	r1, r0, #1
 80060be:	d036      	beq.n	800612e <create_chain+0xaa>
 80060c0:	2801      	cmp	r0, #1
 80060c2:	d007      	beq.n	80060d4 <create_chain+0x50>
		if (ncl == scl) return 0;		/* No free cluster */
 80060c4:	42a5      	cmp	r5, r4
 80060c6:	d020      	beq.n	800610a <create_chain+0x86>
 80060c8:	683b      	ldr	r3, [r7, #0]
		ncl++;							/* Next cluster */
 80060ca:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80060cc:	429c      	cmp	r4, r3
 80060ce:	d2eb      	bcs.n	80060a8 <create_chain+0x24>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060d0:	2c01      	cmp	r4, #1
 80060d2:	d8ee      	bhi.n	80060b2 <create_chain+0x2e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80060d4:	2401      	movs	r4, #1
}
 80060d6:	4620      	mov	r0, r4
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060dc:	2901      	cmp	r1, #1
 80060de:	d9f9      	bls.n	80060d4 <create_chain+0x50>
 80060e0:	f241 0514 	movw	r5, #4116	; 0x1014
 80060e4:	5943      	ldr	r3, [r0, r5]
 80060e6:	4299      	cmp	r1, r3
 80060e8:	d2f4      	bcs.n	80060d4 <create_chain+0x50>
 80060ea:	f7ff fddd 	bl	8005ca8 <get_fat.part.6>
		if (cs < 2) return 1;			/* Invalid value */
 80060ee:	2801      	cmp	r0, #1
 80060f0:	4604      	mov	r4, r0
 80060f2:	d9ef      	bls.n	80060d4 <create_chain+0x50>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80060f4:	3001      	adds	r0, #1
 80060f6:	d01a      	beq.n	800612e <create_chain+0xaa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80060f8:	5973      	ldr	r3, [r6, r5]
 80060fa:	42a3      	cmp	r3, r4
 80060fc:	d8eb      	bhi.n	80060d6 <create_chain+0x52>
 80060fe:	4645      	mov	r5, r8
 8006100:	e7cd      	b.n	800609e <create_chain+0x1a>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006102:	429d      	cmp	r5, r3
 8006104:	bf28      	it	cs
 8006106:	2501      	movcs	r5, #1
 8006108:	e7c9      	b.n	800609e <create_chain+0x1a>
			if (ncl > scl) return 0;	/* No free cluster */
 800610a:	2400      	movs	r4, #0
}
 800610c:	4620      	mov	r0, r4
 800610e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006112:	f241 0514 	movw	r5, #4116	; 0x1014
 8006116:	5973      	ldr	r3, [r6, r5]
 8006118:	42a3      	cmp	r3, r4
 800611a:	d9db      	bls.n	80060d4 <create_chain+0x50>
 800611c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006120:	4621      	mov	r1, r4
 8006122:	4630      	mov	r0, r6
 8006124:	f7ff fed6 	bl	8005ed4 <put_fat.part.7>
	if (res == FR_OK && clst != 0) {
 8006128:	b130      	cbz	r0, 8006138 <create_chain+0xb4>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800612a:	2801      	cmp	r0, #1
 800612c:	d1d2      	bne.n	80060d4 <create_chain+0x50>
 800612e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006132:	4620      	mov	r0, r4
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (res == FR_OK && clst != 0) {
 8006138:	f1b8 0f00 	cmp.w	r8, #0
 800613c:	d00c      	beq.n	8006158 <create_chain+0xd4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800613e:	f1b8 0f01 	cmp.w	r8, #1
 8006142:	d9c7      	bls.n	80060d4 <create_chain+0x50>
 8006144:	5973      	ldr	r3, [r6, r5]
 8006146:	4598      	cmp	r8, r3
 8006148:	d2c4      	bcs.n	80060d4 <create_chain+0x50>
 800614a:	4641      	mov	r1, r8
 800614c:	4622      	mov	r2, r4
 800614e:	4630      	mov	r0, r6
 8006150:	f7ff fec0 	bl	8005ed4 <put_fat.part.7>
	if (res == FR_OK) {
 8006154:	2800      	cmp	r0, #0
 8006156:	d1e8      	bne.n	800612a <create_chain+0xa6>
		if (fs->free_clust != 0xFFFFFFFF) {
 8006158:	f241 0110 	movw	r1, #4112	; 0x1010
		fs->last_clust = ncl;			/* Update FSINFO */
 800615c:	f241 020c 	movw	r2, #4108	; 0x100c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006160:	5873      	ldr	r3, [r6, r1]
		fs->last_clust = ncl;			/* Update FSINFO */
 8006162:	50b4      	str	r4, [r6, r2]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	d0b6      	beq.n	80060d6 <create_chain+0x52>
			fs->fsi_flag |= 1;
 8006168:	f241 0005 	movw	r0, #4101	; 0x1005
 800616c:	5c32      	ldrb	r2, [r6, r0]
			fs->free_clust--;
 800616e:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 8006170:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 8006174:	5073      	str	r3, [r6, r1]
			fs->fsi_flag |= 1;
 8006176:	5432      	strb	r2, [r6, r0]
 8006178:	e7ad      	b.n	80060d6 <create_chain+0x52>
 800617a:	bf00      	nop

0800617c <dir_next>:
{
 800617c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8006180:	f241 0306 	movw	r3, #4102	; 0x1006
 8006184:	5ac4      	ldrh	r4, [r0, r3]
 8006186:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006188:	b2a3      	uxth	r3, r4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d064      	beq.n	8006258 <dir_next+0xdc>
 800618e:	f241 0c10 	movw	ip, #4112	; 0x1010
 8006192:	f850 200c 	ldr.w	r2, [r0, ip]
 8006196:	2a00      	cmp	r2, #0
 8006198:	d05e      	beq.n	8006258 <dir_next+0xdc>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800619a:	f241 030a 	movw	r3, #4106	; 0x100a
 800619e:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 80061a2:	4605      	mov	r5, r0
 80061a4:	6838      	ldr	r0, [r7, #0]
 80061a6:	460e      	mov	r6, r1
 80061a8:	5ac3      	ldrh	r3, [r0, r3]
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	fbb4 fef3 	udiv	lr, r4, r3
 80061b0:	fb03 431e 	mls	r3, r3, lr, r4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d13f      	bne.n	8006238 <dir_next+0xbc>
		if (!dp->clust) {		/* Static table */
 80061b8:	f241 010c 	movw	r1, #4108	; 0x100c
 80061bc:	5869      	ldr	r1, [r5, r1]
		dp->sect++;					/* Next sector */
 80061be:	3201      	adds	r2, #1
 80061c0:	f845 200c 	str.w	r2, [r5, ip]
		if (!dp->clust) {		/* Static table */
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d042      	beq.n	800624e <dir_next+0xd2>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80061c8:	f241 0202 	movw	r2, #4098	; 0x1002
 80061cc:	5c82      	ldrb	r2, [r0, r2]
 80061ce:	3a01      	subs	r2, #1
 80061d0:	ea12 080e 	ands.w	r8, r2, lr
 80061d4:	d130      	bne.n	8006238 <dir_next+0xbc>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80061d6:	2901      	cmp	r1, #1
 80061d8:	d941      	bls.n	800625e <dir_next+0xe2>
 80061da:	f241 0914 	movw	r9, #4116	; 0x1014
 80061de:	f850 3009 	ldr.w	r3, [r0, r9]
 80061e2:	4299      	cmp	r1, r3
 80061e4:	d23b      	bcs.n	800625e <dir_next+0xe2>
 80061e6:	f7ff fd5f 	bl	8005ca8 <get_fat.part.6>
				if (clst <= 1) return FR_INT_ERR;
 80061ea:	2801      	cmp	r0, #1
 80061ec:	4682      	mov	sl, r0
 80061ee:	d936      	bls.n	800625e <dir_next+0xe2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80061f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061f4:	d038      	beq.n	8006268 <dir_next+0xec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80061f6:	6838      	ldr	r0, [r7, #0]
 80061f8:	f850 1009 	ldr.w	r1, [r0, r9]
 80061fc:	4551      	cmp	r1, sl
 80061fe:	d935      	bls.n	800626c <dir_next+0xf0>
 8006200:	f1aa 0b02 	sub.w	fp, sl, #2
				dp->clust = clst;				/* Initialize data for new cluster */
 8006204:	f241 030c 	movw	r3, #4108	; 0x100c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006208:	3902      	subs	r1, #2
 800620a:	458b      	cmp	fp, r1
				dp->clust = clst;				/* Initialize data for new cluster */
 800620c:	f845 a003 	str.w	sl, [r5, r3]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006210:	d27c      	bcs.n	800630c <dir_next+0x190>
	return clst * fs->csize + fs->database;
 8006212:	f241 0202 	movw	r2, #4098	; 0x1002
 8006216:	f241 0328 	movw	r3, #4136	; 0x1028
 800621a:	5c82      	ldrb	r2, [r0, r2]
 800621c:	58c3      	ldr	r3, [r0, r3]
 800621e:	fb0b 3202 	mla	r2, fp, r2, r3
 8006222:	f241 030a 	movw	r3, #4106	; 0x100a
 8006226:	5ac3      	ldrh	r3, [r0, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8006228:	f241 0110 	movw	r1, #4112	; 0x1010
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	fbb4 f6f3 	udiv	r6, r4, r3
 8006232:	fb03 4316 	mls	r3, r3, r6, r4
 8006236:	506a      	str	r2, [r5, r1]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006238:	f241 0114 	movw	r1, #4116	; 0x1014
	dp->index = (WORD)i;	/* Current index */
 800623c:	f241 0206 	movw	r2, #4102	; 0x1006
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006240:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006244:	5068      	str	r0, [r5, r1]
	dp->index = (WORD)i;	/* Current index */
 8006246:	52ac      	strh	r4, [r5, r2]
	return FR_OK;
 8006248:	2000      	movs	r0, #0
}
 800624a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800624e:	f241 0208 	movw	r2, #4104	; 0x1008
 8006252:	5a82      	ldrh	r2, [r0, r2]
 8006254:	42a2      	cmp	r2, r4
 8006256:	d8ef      	bhi.n	8006238 <dir_next+0xbc>
		return FR_NO_FILE;
 8006258:	2004      	movs	r0, #4
}
 800625a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst <= 1) return FR_INT_ERR;
 800625e:	2002      	movs	r0, #2
 8006260:	e7fb      	b.n	800625a <dir_next+0xde>
 8006262:	f7ff fa65 	bl	8005730 <sync_window.part.2>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006266:	b1b0      	cbz	r0, 8006296 <dir_next+0x11a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006268:	2001      	movs	r0, #1
 800626a:	e7f6      	b.n	800625a <dir_next+0xde>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800626c:	2e00      	cmp	r6, #0
 800626e:	d0f3      	beq.n	8006258 <dir_next+0xdc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006270:	f241 030c 	movw	r3, #4108	; 0x100c
 8006274:	58e9      	ldr	r1, [r5, r3]
 8006276:	f7ff ff05 	bl	8006084 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800627a:	4682      	mov	sl, r0
 800627c:	2800      	cmp	r0, #0
 800627e:	d047      	beq.n	8006310 <dir_next+0x194>
					if (clst == 1) return FR_INT_ERR;
 8006280:	2801      	cmp	r0, #1
 8006282:	d0ec      	beq.n	800625e <dir_next+0xe2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006284:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006288:	d0ee      	beq.n	8006268 <dir_next+0xec>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800628a:	f241 0304 	movw	r3, #4100	; 0x1004
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800628e:	6838      	ldr	r0, [r7, #0]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006290:	5cc3      	ldrb	r3, [r0, r3]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e5      	bne.n	8006262 <dir_next+0xe6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006296:	f241 020a 	movw	r2, #4106	; 0x100a
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	5a9a      	ldrh	r2, [r3, r2]
	while (cnt--)
 800629e:	b12a      	cbz	r2, 80062ac <dir_next+0x130>
		*d++ = (BYTE)val;
 80062a0:	2100      	movs	r1, #0
 80062a2:	441a      	add	r2, r3
 80062a4:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d1fb      	bne.n	80062a4 <dir_next+0x128>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062ac:	f241 0314 	movw	r3, #4116	; 0x1014
 80062b0:	f241 0102 	movw	r1, #4098	; 0x1002
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80062b4:	683a      	ldr	r2, [r7, #0]
	clst -= 2;
 80062b6:	f1aa 0b02 	sub.w	fp, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062ba:	58d3      	ldr	r3, [r2, r3]
 80062bc:	5c50      	ldrb	r0, [r2, r1]
 80062be:	3b02      	subs	r3, #2
 80062c0:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
 80062c2:	bf34      	ite	cc
 80062c4:	f241 0328 	movwcc	r3, #4136	; 0x1028
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062c8:	2300      	movcs	r3, #0
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80062ca:	f241 012c 	movw	r1, #4140	; 0x102c
	return clst * fs->csize + fs->database;
 80062ce:	bf3c      	itt	cc
 80062d0:	58d3      	ldrcc	r3, [r2, r3]
 80062d2:	fb0b 3300 	mlacc	r3, fp, r0, r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80062d6:	5053      	str	r3, [r2, r1]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062d8:	b1e0      	cbz	r0, 8006314 <dir_next+0x198>
						dp->fs->winsect++;
 80062da:	460e      	mov	r6, r1
						dp->fs->wflag = 1;
 80062dc:	f241 0904 	movw	r9, #4100	; 0x1004
 80062e0:	e008      	b.n	80062f4 <dir_next+0x178>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062e2:	f241 0002 	movw	r0, #4098	; 0x1002
						dp->fs->winsect++;
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	5993      	ldr	r3, [r2, r6]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062ea:	5c10      	ldrb	r0, [r2, r0]
						dp->fs->winsect++;
 80062ec:	3301      	adds	r3, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062ee:	4540      	cmp	r0, r8
						dp->fs->winsect++;
 80062f0:	5193      	str	r3, [r2, r6]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062f2:	d90f      	bls.n	8006314 <dir_next+0x198>
						dp->fs->wflag = 1;
 80062f4:	f04f 0301 	mov.w	r3, #1
 80062f8:	4610      	mov	r0, r2
 80062fa:	f802 3009 	strb.w	r3, [r2, r9]
 80062fe:	f7ff fa17 	bl	8005730 <sync_window.part.2>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006302:	f108 0801 	add.w	r8, r8, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006306:	2800      	cmp	r0, #0
 8006308:	d0eb      	beq.n	80062e2 <dir_next+0x166>
 800630a:	e7ad      	b.n	8006268 <dir_next+0xec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800630c:	2200      	movs	r2, #0
 800630e:	e788      	b.n	8006222 <dir_next+0xa6>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006310:	2007      	movs	r0, #7
 8006312:	e7a2      	b.n	800625a <dir_next+0xde>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006314:	f241 062c 	movw	r6, #4140	; 0x102c
 8006318:	f241 0114 	movw	r1, #4116	; 0x1014
 800631c:	5993      	ldr	r3, [r2, r6]
 800631e:	6838      	ldr	r0, [r7, #0]
 8006320:	eba3 0308 	sub.w	r3, r3, r8
 8006324:	5841      	ldr	r1, [r0, r1]
 8006326:	5193      	str	r3, [r2, r6]
 8006328:	e76c      	b.n	8006204 <dir_next+0x88>
 800632a:	bf00      	nop

0800632c <dir_find.part.8>:
FRESULT dir_find (
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006334:	46ba      	mov	sl, r7
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006336:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800633a:	f241 0324 	movw	r3, #4132	; 0x1024
 800633e:	f64f 72ff 	movw	r2, #65535	; 0xffff
FRESULT dir_find (
 8006342:	b087      	sub	sp, #28
 8006344:	4606      	mov	r6, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006346:	464c      	mov	r4, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006348:	f241 082c 	movw	r8, #4140	; 0x102c
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800634c:	52c2      	strh	r2, [r0, r3]
 800634e:	3710      	adds	r7, #16
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006350:	f10a 0a14 	add.w	sl, sl, #20
 8006354:	f500 5b80 	add.w	fp, r0, #4096	; 0x1000
 8006358:	e00c      	b.n	8006374 <dir_find.part.8+0x48>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800635a:	280f      	cmp	r0, #15
 800635c:	d038      	beq.n	80063d0 <dir_find.part.8+0xa4>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800635e:	f241 0324 	movw	r3, #4132	; 0x1024
 8006362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006366:	24ff      	movs	r4, #255	; 0xff
 8006368:	52f2      	strh	r2, [r6, r3]
		res = dir_next(dp, 0);		/* Next entry */
 800636a:	2100      	movs	r1, #0
 800636c:	4630      	mov	r0, r6
 800636e:	f7ff ff05 	bl	800617c <dir_next>
	} while (res == FR_OK);
 8006372:	bb50      	cbnz	r0, 80063ca <dir_find.part.8+0x9e>
		res = move_window(dp->fs, dp->sect);
 8006374:	f8db 0000 	ldr.w	r0, [fp]
 8006378:	6839      	ldr	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800637a:	f850 3008 	ldr.w	r3, [r0, r8]
 800637e:	4299      	cmp	r1, r3
 8006380:	d002      	beq.n	8006388 <dir_find.part.8+0x5c>
 8006382:	f7ff fa7b 	bl	800587c <move_window.part.3>
		if (res != FR_OK) break;
 8006386:	bb00      	cbnz	r0, 80063ca <dir_find.part.8+0x9e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006388:	f8da 3000 	ldr.w	r3, [sl]
		c = dir[DIR_Name];
 800638c:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800638e:	2900      	cmp	r1, #0
 8006390:	d04a      	beq.n	8006428 <dir_find.part.8+0xfc>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006392:	29e5      	cmp	r1, #229	; 0xe5
 8006394:	d0e3      	beq.n	800635e <dir_find.part.8+0x32>
		a = dir[DIR_Attr] & AM_MASK;
 8006396:	7ada      	ldrb	r2, [r3, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006398:	0715      	lsls	r5, r2, #28
		a = dir[DIR_Attr] & AM_MASK;
 800639a:	f002 003f 	and.w	r0, r2, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800639e:	d4dc      	bmi.n	800635a <dir_find.part.8+0x2e>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80063a0:	280f      	cmp	r0, #15
 80063a2:	d015      	beq.n	80063d0 <dir_find.part.8+0xa4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80063a4:	b354      	cbz	r4, 80063fc <dir_find.part.8+0xd0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80063a6:	f241 0218 	movw	r2, #4120	; 0x1018
 80063aa:	58b2      	ldr	r2, [r6, r2]
 80063ac:	7ad0      	ldrb	r0, [r2, #11]
 80063ae:	07c0      	lsls	r0, r0, #31
 80063b0:	d4d5      	bmi.n	800635e <dir_find.part.8+0x32>
 80063b2:	f102 040b 	add.w	r4, r2, #11
 80063b6:	e001      	b.n	80063bc <dir_find.part.8+0x90>
 80063b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80063bc:	f812 0b01 	ldrb.w	r0, [r2], #1
 80063c0:	4288      	cmp	r0, r1
 80063c2:	d1cc      	bne.n	800635e <dir_find.part.8+0x32>
 80063c4:	42a2      	cmp	r2, r4
 80063c6:	d1f7      	bne.n	80063b8 <dir_find.part.8+0x8c>
 80063c8:	2000      	movs	r0, #0
}
 80063ca:	b007      	add	sp, #28
 80063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dp->lfn) {
 80063d0:	f506 5281 	add.w	r2, r6, #4128	; 0x1020
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	d0c7      	beq.n	800636a <dir_find.part.8+0x3e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80063da:	0648      	lsls	r0, r1, #25
 80063dc:	d520      	bpl.n	8006420 <dir_find.part.8+0xf4>
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80063de:	f241 0406 	movw	r4, #4102	; 0x1006
 80063e2:	f241 0024 	movw	r0, #4132	; 0x1024
 80063e6:	5b35      	ldrh	r5, [r6, r4]
						sum = dir[LDIR_Chksum];
 80063e8:	f893 900d 	ldrb.w	r9, [r3, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80063ec:	f001 04bf 	and.w	r4, r1, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80063f0:	5235      	strh	r5, [r6, r0]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80063f2:	7b59      	ldrb	r1, [r3, #13]
 80063f4:	4549      	cmp	r1, r9
 80063f6:	d01b      	beq.n	8006430 <dir_find.part.8+0x104>
 80063f8:	24ff      	movs	r4, #255	; 0xff
 80063fa:	e7b6      	b.n	800636a <dir_find.part.8+0x3e>
 80063fc:	4618      	mov	r0, r3
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80063fe:	468c      	mov	ip, r1
 8006400:	f103 050a 	add.w	r5, r3, #10
 8006404:	e001      	b.n	800640a <dir_find.part.8+0xde>
 8006406:	f810 cf01 	ldrb.w	ip, [r0, #1]!
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800640a:	01e2      	lsls	r2, r4, #7
 800640c:	ea42 0454 	orr.w	r4, r2, r4, lsr #1
 8006410:	4464      	add	r4, ip
 8006412:	4285      	cmp	r5, r0
 8006414:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8006418:	d1f5      	bne.n	8006406 <dir_find.part.8+0xda>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800641a:	454c      	cmp	r4, r9
 800641c:	d1c3      	bne.n	80063a6 <dir_find.part.8+0x7a>
 800641e:	e7d3      	b.n	80063c8 <dir_find.part.8+0x9c>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006420:	42a1      	cmp	r1, r4
 8006422:	d0e6      	beq.n	80063f2 <dir_find.part.8+0xc6>
 8006424:	24ff      	movs	r4, #255	; 0xff
 8006426:	e7a0      	b.n	800636a <dir_find.part.8+0x3e>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006428:	2004      	movs	r0, #4
}
 800642a:	b007      	add	sp, #28
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006430:	2101      	movs	r1, #1
 8006432:	f893 c000 	ldrb.w	ip, [r3]
 8006436:	9405      	str	r4, [sp, #20]
 8006438:	f02c 0540 	bic.w	r5, ip, #64	; 0x40
 800643c:	3d01      	subs	r5, #1
 800643e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8006442:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8006446:	f8cd 9004 	str.w	r9, [sp, #4]
 800644a:	9602      	str	r6, [sp, #8]
 800644c:	9703      	str	r7, [sp, #12]
	s = 0; wc = 1;
 800644e:	4608      	mov	r0, r1
 8006450:	4691      	mov	r9, r2
 8006452:	4c20      	ldr	r4, [pc, #128]	; (80064d4 <dir_find.part.8+0x1a8>)
 8006454:	461e      	mov	r6, r3
 8006456:	462f      	mov	r7, r5
 8006458:	f8cd a010 	str.w	sl, [sp, #16]
 800645c:	e008      	b.n	8006470 <dir_find.part.8+0x144>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800645e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006462:	4299      	cmp	r1, r3
 8006464:	d130      	bne.n	80064c8 <dir_find.part.8+0x19c>
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006466:	4b1c      	ldr	r3, [pc, #112]	; (80064d8 <dir_find.part.8+0x1ac>)
 8006468:	42a3      	cmp	r3, r4
 800646a:	d018      	beq.n	800649e <dir_find.part.8+0x172>
 800646c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006470:	1875      	adds	r5, r6, r1
 8006472:	786d      	ldrb	r5, [r5, #1]
 8006474:	5c71      	ldrb	r1, [r6, r1]
 8006476:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
		if (wc) {	/* Last character has not been processed */
 800647a:	2800      	cmp	r0, #0
 800647c:	d0ef      	beq.n	800645e <dir_find.part.8+0x132>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800647e:	4608      	mov	r0, r1
 8006480:	f001 fb62 	bl	8007b48 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006484:	2ffe      	cmp	r7, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006486:	4682      	mov	sl, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006488:	f107 0501 	add.w	r5, r7, #1
 800648c:	d81c      	bhi.n	80064c8 <dir_find.part.8+0x19c>
 800648e:	f839 0017 	ldrh.w	r0, [r9, r7, lsl #1]
 8006492:	f001 fb59 	bl	8007b48 <ff_wtoupper>
 8006496:	4582      	cmp	sl, r0
 8006498:	d116      	bne.n	80064c8 <dir_find.part.8+0x19c>
 800649a:	462f      	mov	r7, r5
 800649c:	e7e3      	b.n	8006466 <dir_find.part.8+0x13a>
 800649e:	4633      	mov	r3, r6
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	464a      	mov	r2, r9
 80064a4:	065d      	lsls	r5, r3, #25
 80064a6:	4639      	mov	r1, r7
 80064a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064ac:	9c05      	ldr	r4, [sp, #20]
 80064ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80064b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80064b6:	d504      	bpl.n	80064c2 <dir_find.part.8+0x196>
 80064b8:	b118      	cbz	r0, 80064c2 <dir_find.part.8+0x196>
 80064ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d19a      	bne.n	80063f8 <dir_find.part.8+0xcc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80064c2:	3c01      	subs	r4, #1
 80064c4:	b2e4      	uxtb	r4, r4
 80064c6:	e750      	b.n	800636a <dir_find.part.8+0x3e>
 80064c8:	e9dd 9601 	ldrd	r9, r6, [sp, #4]
 80064cc:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80064d0:	24ff      	movs	r4, #255	; 0xff
 80064d2:	e74a      	b.n	800636a <dir_find.part.8+0x3e>
 80064d4:	08008fd0 	.word	0x08008fd0
 80064d8:	08008fdc 	.word	0x08008fdc

080064dc <dir_register>:
	fn = dp->fn; lfn = dp->lfn;
 80064dc:	f241 0318 	movw	r3, #4120	; 0x1018
{
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 80064e4:	f850 a003 	ldr.w	sl, [r0, r3]
{
 80064e8:	4605      	mov	r5, r0
	fn = dp->fn; lfn = dp->lfn;
 80064ea:	4653      	mov	r3, sl
 80064ec:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
{
 80064f0:	b08d      	sub	sp, #52	; 0x34
	fn = dp->fn; lfn = dp->lfn;
 80064f2:	f8d2 8000 	ldr.w	r8, [r2]
 80064f6:	a909      	add	r1, sp, #36	; 0x24
 80064f8:	9202      	str	r2, [sp, #8]
 80064fa:	f10a 040c 	add.w	r4, sl, #12
		*d++ = *s++;
 80064fe:	f813 2b01 	ldrb.w	r2, [r3], #1
	while (cnt--)
 8006502:	42a3      	cmp	r3, r4
		*d++ = *s++;
 8006504:	f801 2b01 	strb.w	r2, [r1], #1
	while (cnt--)
 8006508:	d1f9      	bne.n	80064fe <dir_register+0x22>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800650a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800650e:	07dc      	lsls	r4, r3, #31
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	d57d      	bpl.n	8006610 <dir_register+0x134>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006514:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8006516:	f04f 0b01 	mov.w	fp, #1
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800651a:	9a02      	ldr	r2, [sp, #8]
				if (sr & 0x10000) sr ^= 0x11021;
 800651c:	4eb9      	ldr	r6, [pc, #740]	; (8006804 <dir_register+0x328>)
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800651e:	f88a 300b 	strb.w	r3, [sl, #11]
 8006522:	f10a 39ff 	add.w	r9, sl, #4294967295
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	f10a 070a 	add.w	r7, sl, #10
 800652c:	464b      	mov	r3, r9
 800652e:	4654      	mov	r4, sl
	const BYTE *s = (const BYTE*)src;
 8006530:	aa09      	add	r2, sp, #36	; 0x24
		*d++ = *s++;
 8006532:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006536:	f803 1f01 	strb.w	r1, [r3, #1]!
	while (cnt--)
 800653a:	429f      	cmp	r7, r3
 800653c:	d1f9      	bne.n	8006532 <dir_register+0x56>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800653e:	f1bb 0f05 	cmp.w	fp, #5
 8006542:	d95a      	bls.n	80065fa <dir_register+0x11e>
 8006544:	f1a8 0c02 	sub.w	ip, r8, #2
		while (*lfn) {	/* Create a CRC */
 8006548:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800654c:	465b      	mov	r3, fp
		while (*lfn) {	/* Create a CRC */
 800654e:	b17a      	cbz	r2, 8006570 <dir_register+0x94>
 8006550:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8006552:	f002 0001 	and.w	r0, r2, #1
 8006556:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800655a:	03d8      	lsls	r0, r3, #15
 800655c:	bf48      	it	mi
 800655e:	4073      	eormi	r3, r6
			for (i = 0; i < 16; i++) {
 8006560:	3901      	subs	r1, #1
				wc >>= 1;
 8006562:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8006566:	d1f4      	bne.n	8006552 <dir_register+0x76>
		while (*lfn) {	/* Create a CRC */
 8006568:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 800656c:	2a00      	cmp	r2, #0
 800656e:	d1ef      	bne.n	8006550 <dir_register+0x74>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006570:	2207      	movs	r2, #7
 8006572:	f10d 0c23 	add.w	ip, sp, #35	; 0x23
		c = (seq % 16) + '0';
 8006576:	f003 000f 	and.w	r0, r3, #15
 800657a:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 800657e:	2939      	cmp	r1, #57	; 0x39
 8006580:	bf88      	it	hi
 8006582:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
	} while (seq);
 8006586:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8006588:	f102 32ff 	add.w	r2, r2, #4294967295
 800658c:	f80c 1901 	strb.w	r1, [ip], #-1
	} while (seq);
 8006590:	d1f1      	bne.n	8006576 <dir_register+0x9a>
	ns[i] = '~';
 8006592:	207e      	movs	r0, #126	; 0x7e
 8006594:	a90c      	add	r1, sp, #48	; 0x30
 8006596:	4411      	add	r1, r2
 8006598:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800659c:	2a00      	cmp	r2, #0
 800659e:	f000 80c5 	beq.w	800672c <dir_register+0x250>
 80065a2:	f89a 1000 	ldrb.w	r1, [sl]
 80065a6:	2920      	cmp	r1, #32
 80065a8:	d104      	bne.n	80065b4 <dir_register+0xd8>
 80065aa:	e006      	b.n	80065ba <dir_register+0xde>
 80065ac:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80065b0:	2920      	cmp	r1, #32
 80065b2:	d002      	beq.n	80065ba <dir_register+0xde>
 80065b4:	3301      	adds	r3, #1
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d1f8      	bne.n	80065ac <dir_register+0xd0>
 80065ba:	1e59      	subs	r1, r3, #1
 80065bc:	4451      	add	r1, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80065be:	2a07      	cmp	r2, #7
 80065c0:	a80c      	add	r0, sp, #48	; 0x30
 80065c2:	4410      	add	r0, r2
 80065c4:	bf8c      	ite	hi
 80065c6:	2020      	movhi	r0, #32
 80065c8:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
 80065cc:	f103 0301 	add.w	r3, r3, #1
 80065d0:	bf98      	it	ls
 80065d2:	3201      	addls	r2, #1
	} while (j < 8);
 80065d4:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80065d6:	f801 0f01 	strb.w	r0, [r1, #1]!
	} while (j < 8);
 80065da:	d9f0      	bls.n	80065be <dir_register+0xe2>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80065dc:	2100      	movs	r1, #0
 80065de:	4628      	mov	r0, r5
 80065e0:	f7ff fbfc 	bl	8005ddc <dir_sdi>
	if (res != FR_OK) return res;
 80065e4:	b958      	cbnz	r0, 80065fe <dir_register+0x122>
 80065e6:	4628      	mov	r0, r5
 80065e8:	f7ff fea0 	bl	800632c <dir_find.part.8>
			if (res != FR_OK) break;
 80065ec:	b938      	cbnz	r0, 80065fe <dir_register+0x122>
		for (n = 1; n < 100; n++) {
 80065ee:	f10b 0b01 	add.w	fp, fp, #1
 80065f2:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 80065f6:	d199      	bne.n	800652c <dir_register+0x50>
 80065f8:	e093      	b.n	8006722 <dir_register+0x246>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80065fa:	465b      	mov	r3, fp
 80065fc:	e7b8      	b.n	8006570 <dir_register+0x94>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80065fe:	2804      	cmp	r0, #4
 8006600:	4604      	mov	r4, r0
 8006602:	d16f      	bne.n	80066e4 <dir_register+0x208>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006604:	9b01      	ldr	r3, [sp, #4]
 8006606:	f88a 300b 	strb.w	r3, [sl, #11]
 800660a:	9b02      	ldr	r3, [sp, #8]
 800660c:	f8c3 8000 	str.w	r8, [r3]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	079b      	lsls	r3, r3, #30
 8006614:	d46a      	bmi.n	80066ec <dir_register+0x210>
	res = dir_sdi(dp, 0);
 8006616:	2100      	movs	r1, #0
 8006618:	4628      	mov	r0, r5
 800661a:	f7ff fbdf 	bl	8005ddc <dir_sdi>
		nent = 1;
 800661e:	2601      	movs	r6, #1
	if (res == FR_OK) {
 8006620:	4604      	mov	r4, r0
 8006622:	2800      	cmp	r0, #0
 8006624:	d17b      	bne.n	800671e <dir_register+0x242>
 8006626:	f505 5a80 	add.w	sl, r5, #4096	; 0x1000
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800662a:	4657      	mov	r7, sl
		n = 0;
 800662c:	4680      	mov	r8, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800662e:	f241 092c 	movw	r9, #4140	; 0x102c
 8006632:	f10a 0a10 	add.w	sl, sl, #16
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006636:	3714      	adds	r7, #20
 8006638:	f505 5b80 	add.w	fp, r5, #4096	; 0x1000
 800663c:	e008      	b.n	8006650 <dir_register+0x174>
 800663e:	b1bb      	cbz	r3, 8006670 <dir_register+0x194>
				n = 0;					/* Not a blank entry. Restart to search */
 8006640:	f04f 0800 	mov.w	r8, #0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006644:	2101      	movs	r1, #1
 8006646:	4628      	mov	r0, r5
 8006648:	f7ff fd98 	bl	800617c <dir_next>
		} while (res == FR_OK);
 800664c:	2800      	cmp	r0, #0
 800664e:	d16f      	bne.n	8006730 <dir_register+0x254>
			res = move_window(dp->fs, dp->sect);
 8006650:	f8db 0000 	ldr.w	r0, [fp]
 8006654:	f8da 1000 	ldr.w	r1, [sl]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006658:	f850 3009 	ldr.w	r3, [r0, r9]
 800665c:	4299      	cmp	r1, r3
 800665e:	d003      	beq.n	8006668 <dir_register+0x18c>
 8006660:	f7ff f90c 	bl	800587c <move_window.part.3>
			if (res != FR_OK) break;
 8006664:	2800      	cmp	r0, #0
 8006666:	d163      	bne.n	8006730 <dir_register+0x254>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2be5      	cmp	r3, #229	; 0xe5
 800666e:	d1e6      	bne.n	800663e <dir_register+0x162>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006670:	f108 0801 	add.w	r8, r8, #1
 8006674:	4546      	cmp	r6, r8
 8006676:	d1e5      	bne.n	8006644 <dir_register+0x168>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006678:	1e73      	subs	r3, r6, #1
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	d163      	bne.n	8006746 <dir_register+0x26a>
		res = move_window(dp->fs, dp->sect);
 800667e:	f241 0210 	movw	r2, #4112	; 0x1010
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006682:	f241 032c 	movw	r3, #4140	; 0x102c
		res = move_window(dp->fs, dp->sect);
 8006686:	f8db 0000 	ldr.w	r0, [fp]
 800668a:	58a9      	ldr	r1, [r5, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800668c:	58c3      	ldr	r3, [r0, r3]
 800668e:	4299      	cmp	r1, r3
 8006690:	d150      	bne.n	8006734 <dir_register+0x258>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006692:	f241 0314 	movw	r3, #4116	; 0x1014
		*d++ = (BYTE)val;
 8006696:	2100      	movs	r1, #0
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006698:	58eb      	ldr	r3, [r5, r3]
 800669a:	f103 0220 	add.w	r2, r3, #32
		*d++ = (BYTE)val;
 800669e:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d1fb      	bne.n	800669e <dir_register+0x1c2>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80066a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80066aa:	f241 0214 	movw	r2, #4116	; 0x1014
 80066ae:	58eb      	ldr	r3, [r5, r3]
 80066b0:	58aa      	ldr	r2, [r5, r2]
 80066b2:	f103 000b 	add.w	r0, r3, #11
 80066b6:	3a01      	subs	r2, #1
		*d++ = *s++;
 80066b8:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 80066bc:	4283      	cmp	r3, r0
		*d++ = *s++;
 80066be:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 80066c2:	d1f9      	bne.n	80066b8 <dir_register+0x1dc>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80066c8:	f241 0014 	movw	r0, #4116	; 0x1014
			dp->fs->wflag = 1;
 80066cc:	f241 0204 	movw	r2, #4100	; 0x1004
 80066d0:	2101      	movs	r1, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066d2:	58eb      	ldr	r3, [r5, r3]
 80066d4:	5828      	ldr	r0, [r5, r0]
 80066d6:	7adb      	ldrb	r3, [r3, #11]
 80066d8:	f003 0318 	and.w	r3, r3, #24
 80066dc:	7303      	strb	r3, [r0, #12]
			dp->fs->wflag = 1;
 80066de:	f8db 3000 	ldr.w	r3, [fp]
 80066e2:	5499      	strb	r1, [r3, r2]
}
 80066e4:	4620      	mov	r0, r4
 80066e6:	b00d      	add	sp, #52	; 0x34
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (n = 0; lfn[n]; n++) ;
 80066ec:	f8b8 3000 	ldrh.w	r3, [r8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d090      	beq.n	8006616 <dir_register+0x13a>
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <dir_register+0x21e>
 80066f8:	460b      	mov	r3, r1
 80066fa:	f838 2f02 	ldrh.w	r2, [r8, #2]!
 80066fe:	1c59      	adds	r1, r3, #1
 8006700:	2a00      	cmp	r2, #0
 8006702:	d1f9      	bne.n	80066f8 <dir_register+0x21c>
 8006704:	4a40      	ldr	r2, [pc, #256]	; (8006808 <dir_register+0x32c>)
 8006706:	f103 061a 	add.w	r6, r3, #26
	res = dir_sdi(dp, 0);
 800670a:	2100      	movs	r1, #0
 800670c:	4628      	mov	r0, r5
 800670e:	fba2 3606 	umull	r3, r6, r2, r6
 8006712:	f7ff fb63 	bl	8005ddc <dir_sdi>
 8006716:	08b6      	lsrs	r6, r6, #2
	if (res == FR_OK) {
 8006718:	4604      	mov	r4, r0
 800671a:	2800      	cmp	r0, #0
 800671c:	d083      	beq.n	8006626 <dir_register+0x14a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800671e:	2c04      	cmp	r4, #4
 8006720:	d1e0      	bne.n	80066e4 <dir_register+0x208>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006722:	2407      	movs	r4, #7
}
 8006724:	4620      	mov	r0, r4
 8006726:	b00d      	add	sp, #52	; 0x34
 8006728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800672c:	4613      	mov	r3, r2
 800672e:	e744      	b.n	80065ba <dir_register+0xde>
			if (res != FR_OK) break;
 8006730:	4604      	mov	r4, r0
 8006732:	e7f4      	b.n	800671e <dir_register+0x242>
 8006734:	f7ff f8a2 	bl	800587c <move_window.part.3>
		if (res == FR_OK) {
 8006738:	2800      	cmp	r0, #0
 800673a:	d0aa      	beq.n	8006692 <dir_register+0x1b6>
 800673c:	4604      	mov	r4, r0
}
 800673e:	4620      	mov	r0, r4
 8006740:	b00d      	add	sp, #52	; 0x34
 8006742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->index - nent);
 8006746:	f241 0306 	movw	r3, #4102	; 0x1006
 800674a:	5ae9      	ldrh	r1, [r5, r3]
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	4628      	mov	r0, r5
 8006750:	1ac9      	subs	r1, r1, r3
 8006752:	f7ff fb43 	bl	8005ddc <dir_sdi>
		if (res == FR_OK) {
 8006756:	2800      	cmp	r0, #0
 8006758:	d1f0      	bne.n	800673c <dir_register+0x260>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800675a:	f241 0318 	movw	r3, #4120	; 0x1018
 800675e:	58e9      	ldr	r1, [r5, r3]
	BYTE sum = 0;
 8006760:	4602      	mov	r2, r0
 8006762:	f101 000b 	add.w	r0, r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006766:	01d3      	lsls	r3, r2, #7
 8006768:	f811 6b01 	ldrb.w	r6, [r1], #1
 800676c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8006770:	4433      	add	r3, r6
 8006772:	4281      	cmp	r1, r0
 8006774:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006778:	d1f5      	bne.n	8006766 <dir_register+0x28a>
 800677a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800680c <dir_register+0x330>
 800677e:	9204      	str	r2, [sp, #16]
 8006780:	9405      	str	r4, [sp, #20]
 8006782:	9503      	str	r5, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006784:	f241 032c 	movw	r3, #4140	; 0x102c
				res = move_window(dp->fs, dp->sect);
 8006788:	f8db 0000 	ldr.w	r0, [fp]
 800678c:	f8da 1000 	ldr.w	r1, [sl]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006790:	58c3      	ldr	r3, [r0, r3]
 8006792:	4299      	cmp	r1, r3
 8006794:	d003      	beq.n	800679e <dir_register+0x2c2>
 8006796:	f7ff f871 	bl	800587c <move_window.part.3>
				if (res != FR_OK) break;
 800679a:	2800      	cmp	r0, #0
 800679c:	d1ce      	bne.n	800673c <dir_register+0x260>
	dir[LDIR_Type] = 0;
 800679e:	2000      	movs	r0, #0
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80067a0:	f89d 9004 	ldrb.w	r9, [sp, #4]
 80067a4:	683c      	ldr	r4, [r7, #0]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80067a6:	f109 32ff 	add.w	r2, r9, #4294967295
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80067aa:	9e02      	ldr	r6, [sp, #8]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80067ac:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80067b0:	250f      	movs	r5, #15
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80067b2:	f8d6 c000 	ldr.w	ip, [r6]
	s = wc = 0;
 80067b6:	4603      	mov	r3, r0
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80067b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	dir[LDIR_Type] = 0;
 80067bc:	7320      	strb	r0, [r4, #12]
	s = wc = 0;
 80067be:	4601      	mov	r1, r0
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80067c0:	76a0      	strb	r0, [r4, #26]
 80067c2:	76e0      	strb	r0, [r4, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80067c4:	f64f 7eff 	movw	lr, #65535	; 0xffff
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80067c8:	2001      	movs	r0, #1
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80067ca:	9e04      	ldr	r6, [sp, #16]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80067cc:	72e5      	strb	r5, [r4, #11]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80067ce:	7366      	strb	r6, [r4, #13]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80067d0:	4573      	cmp	r3, lr
 80067d2:	bf0e      	itee	eq
 80067d4:	4616      	moveq	r6, r2
 80067d6:	f83c 3012 	ldrhne.w	r3, [ip, r2, lsl #1]
 80067da:	1c56      	addne	r6, r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80067dc:	1825      	adds	r5, r4, r0
 80067de:	0a1a      	lsrs	r2, r3, #8
 80067e0:	5423      	strb	r3, [r4, r0]
 80067e2:	3101      	adds	r1, #1
 80067e4:	706a      	strb	r2, [r5, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80067e6:	b933      	cbnz	r3, 80067f6 <dir_register+0x31a>
	} while (++s < 13);
 80067e8:	290c      	cmp	r1, #12
 80067ea:	d818      	bhi.n	800681e <dir_register+0x342>
 80067ec:	f811 0008 	ldrb.w	r0, [r1, r8]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80067f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067f4:	e7f2      	b.n	80067dc <dir_register+0x300>
	} while (++s < 13);
 80067f6:	290c      	cmp	r1, #12
 80067f8:	d80a      	bhi.n	8006810 <dir_register+0x334>
 80067fa:	4632      	mov	r2, r6
 80067fc:	f818 0001 	ldrb.w	r0, [r8, r1]
 8006800:	e7e6      	b.n	80067d0 <dir_register+0x2f4>
 8006802:	bf00      	nop
 8006804:	00011021 	.word	0x00011021
 8006808:	4ec4ec4f 	.word	0x4ec4ec4f
 800680c:	08008fd0 	.word	0x08008fd0
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006814:	4293      	cmp	r3, r2
 8006816:	d002      	beq.n	800681e <dir_register+0x342>
 8006818:	f83c 3016 	ldrh.w	r3, [ip, r6, lsl #1]
 800681c:	b90b      	cbnz	r3, 8006822 <dir_register+0x346>
 800681e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
				dp->fs->wflag = 1;
 8006822:	2001      	movs	r0, #1
 8006824:	f241 0304 	movw	r3, #4100	; 0x1004
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006828:	f884 9000 	strb.w	r9, [r4]
				dp->fs->wflag = 1;
 800682c:	f8db 2000 	ldr.w	r2, [fp]
				res = dir_next(dp, 0);	/* Next entry */
 8006830:	2100      	movs	r1, #0
				dp->fs->wflag = 1;
 8006832:	54d0      	strb	r0, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8006834:	9803      	ldr	r0, [sp, #12]
 8006836:	f7ff fca1 	bl	800617c <dir_next>
			} while (res == FR_OK && --nent);
 800683a:	2800      	cmp	r0, #0
 800683c:	f47f af7e 	bne.w	800673c <dir_register+0x260>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	3b01      	subs	r3, #1
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	d19d      	bne.n	8006784 <dir_register+0x2a8>
 8006848:	9c05      	ldr	r4, [sp, #20]
 800684a:	9d03      	ldr	r5, [sp, #12]
 800684c:	e717      	b.n	800667e <dir_register+0x1a2>
 800684e:	bf00      	nop

08006850 <remove_chain.part.9>:
FRESULT remove_chain (
 8006850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006858:	46b8      	mov	r8, r7
FRESULT remove_chain (
 800685a:	4606      	mov	r6, r0
 800685c:	460c      	mov	r4, r1
 800685e:	3714      	adds	r7, #20
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006860:	f108 0810 	add.w	r8, r8, #16
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	429c      	cmp	r4, r3
 8006868:	d225      	bcs.n	80068b6 <remove_chain.part.9+0x66>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800686a:	2c01      	cmp	r4, #1
 800686c:	d926      	bls.n	80068bc <remove_chain.part.9+0x6c>
 800686e:	4621      	mov	r1, r4
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff fa19 	bl	8005ca8 <get_fat.part.6>
			if (nxt == 0) break;				/* Empty cluster? */
 8006876:	4605      	mov	r5, r0
 8006878:	b1e8      	cbz	r0, 80068b6 <remove_chain.part.9+0x66>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800687a:	2801      	cmp	r0, #1
 800687c:	d01e      	beq.n	80068bc <remove_chain.part.9+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800687e:	1c41      	adds	r1, r0, #1
 8006880:	d01f      	beq.n	80068c2 <remove_chain.part.9+0x72>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	429c      	cmp	r4, r3
 8006886:	d219      	bcs.n	80068bc <remove_chain.part.9+0x6c>
 8006888:	4621      	mov	r1, r4
 800688a:	2200      	movs	r2, #0
 800688c:	4630      	mov	r0, r6
 800688e:	f7ff fb21 	bl	8005ed4 <put_fat.part.7>
			if (res != FR_OK) break;
 8006892:	b9a0      	cbnz	r0, 80068be <remove_chain.part.9+0x6e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006894:	f8d8 3000 	ldr.w	r3, [r8]
FRESULT remove_chain (
 8006898:	462c      	mov	r4, r5
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	d0e2      	beq.n	8006864 <remove_chain.part.9+0x14>
				fs->fsi_flag |= 1;
 800689e:	f241 0205 	movw	r2, #4101	; 0x1005
				fs->free_clust++;
 80068a2:	3301      	adds	r3, #1
 80068a4:	f8c8 3000 	str.w	r3, [r8]
				fs->fsi_flag |= 1;
 80068a8:	5cb3      	ldrb	r3, [r6, r2]
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	54b3      	strb	r3, [r6, r2]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	429c      	cmp	r4, r3
 80068b4:	d3d9      	bcc.n	800686a <remove_chain.part.9+0x1a>
FRESULT remove_chain (
 80068b6:	2000      	movs	r0, #0
}
 80068b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80068bc:	2002      	movs	r0, #2
}
 80068be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80068c2:	2001      	movs	r0, #1
}
 80068c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068c8 <follow_path>:
{
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80068cc:	780b      	ldrb	r3, [r1, #0]
{
 80068ce:	b085      	sub	sp, #20
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80068d0:	2b2f      	cmp	r3, #47	; 0x2f
{
 80068d2:	460d      	mov	r5, r1
 80068d4:	4682      	mov	sl, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80068d6:	d049      	beq.n	800696c <follow_path+0xa4>
 80068d8:	2b5c      	cmp	r3, #92	; 0x5c
 80068da:	d047      	beq.n	800696c <follow_path+0xa4>
	dp->sclust = 0;							/* Always start from the root directory */
 80068dc:	f241 0308 	movw	r3, #4104	; 0x1008
 80068e0:	2400      	movs	r4, #0
 80068e2:	f84a 4003 	str.w	r4, [sl, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80068e6:	7828      	ldrb	r0, [r5, #0]
 80068e8:	281f      	cmp	r0, #31
 80068ea:	f240 8132 	bls.w	8006b52 <follow_path+0x28a>
 80068ee:	f50a 5381 	add.w	r3, sl, #4128	; 0x1020
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	e001      	b.n	80068fa <follow_path+0x32>
 80068f6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80068fa:	282f      	cmp	r0, #47	; 0x2f
 80068fc:	d0fb      	beq.n	80068f6 <follow_path+0x2e>
 80068fe:	285c      	cmp	r0, #92	; 0x5c
 8006900:	d0f9      	beq.n	80068f6 <follow_path+0x2e>
		w = p[si++];					/* Get a character */
 8006902:	b280      	uxth	r0, r0
	lfn = dp->lfn;
 8006904:	9b00      	ldr	r3, [sp, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006906:	281f      	cmp	r0, #31
	lfn = dp->lfn;
 8006908:	f8d3 9000 	ldr.w	r9, [r3]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800690c:	d92a      	bls.n	8006964 <follow_path+0x9c>
 800690e:	282f      	cmp	r0, #47	; 0x2f
 8006910:	d028      	beq.n	8006964 <follow_path+0x9c>
 8006912:	285c      	cmp	r0, #92	; 0x5c
 8006914:	d026      	beq.n	8006964 <follow_path+0x9c>
 8006916:	f1a9 0702 	sub.w	r7, r9, #2
 800691a:	46b8      	mov	r8, r7
 800691c:	462e      	mov	r6, r5
		w = p[si++];					/* Get a character */
 800691e:	2401      	movs	r4, #1
 8006920:	e00f      	b.n	8006942 <follow_path+0x7a>
		lfn[di++] = w;					/* Store the Unicode character */
 8006922:	f828 0f02 	strh.w	r0, [r8, #2]!
		w = p[si++];					/* Get a character */
 8006926:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 800692a:	1c63      	adds	r3, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800692c:	281f      	cmp	r0, #31
 800692e:	f240 810c 	bls.w	8006b4a <follow_path+0x282>
 8006932:	282f      	cmp	r0, #47	; 0x2f
 8006934:	d01c      	beq.n	8006970 <follow_path+0xa8>
 8006936:	285c      	cmp	r0, #92	; 0x5c
 8006938:	d01a      	beq.n	8006970 <follow_path+0xa8>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800693a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693e:	d011      	beq.n	8006964 <follow_path+0x9c>
 8006940:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006942:	2101      	movs	r1, #1
 8006944:	f001 f8dc 	bl	8007b00 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006948:	b160      	cbz	r0, 8006964 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800694a:	287f      	cmp	r0, #127	; 0x7f
 800694c:	d8e9      	bhi.n	8006922 <follow_path+0x5a>
	while (*str && *str != chr) str++;
 800694e:	2822      	cmp	r0, #34	; 0x22
 8006950:	d008      	beq.n	8006964 <follow_path+0x9c>
 8006952:	232a      	movs	r3, #42	; 0x2a
 8006954:	4a92      	ldr	r2, [pc, #584]	; (8006ba0 <follow_path+0x2d8>)
 8006956:	e003      	b.n	8006960 <follow_path+0x98>
 8006958:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0e0      	beq.n	8006922 <follow_path+0x5a>
 8006960:	4298      	cmp	r0, r3
 8006962:	d1f9      	bne.n	8006958 <follow_path+0x90>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006964:	2006      	movs	r0, #6
}
 8006966:	b005      	add	sp, #20
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		path++;
 800696c:	3501      	adds	r5, #1
 800696e:	e7b5      	b.n	80068dc <follow_path+0x14>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006970:	f04f 0800 	mov.w	r8, #0
	*path = &p[si];						/* Return pointer to the next segment */
 8006974:	441d      	add	r5, r3
 8006976:	eb09 0244 	add.w	r2, r9, r4, lsl #1
		w = lfn[di - 1];
 800697a:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800697e:	2b20      	cmp	r3, #32
 8006980:	d001      	beq.n	8006986 <follow_path+0xbe>
 8006982:	2b2e      	cmp	r3, #46	; 0x2e
 8006984:	d102      	bne.n	800698c <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
 8006986:	3c01      	subs	r4, #1
 8006988:	d1f7      	bne.n	800697a <follow_path+0xb2>
 800698a:	e7eb      	b.n	8006964 <follow_path+0x9c>
	mem_set(dp->fn, ' ', 11);
 800698c:	f241 0b18 	movw	fp, #4120	; 0x1018
	lfn[di] = 0;						/* LFN is created */
 8006990:	2200      	movs	r2, #0
	mem_set(dp->fn, ' ', 11);
 8006992:	eb0a 010b 	add.w	r1, sl, fp
 8006996:	9101      	str	r1, [sp, #4]
		*d++ = (BYTE)val;
 8006998:	2120      	movs	r1, #32
	mem_set(dp->fn, ' ', 11);
 800699a:	f85a 300b 	ldr.w	r3, [sl, fp]
	lfn[di] = 0;						/* LFN is created */
 800699e:	f829 2014 	strh.w	r2, [r9, r4, lsl #1]
 80069a2:	f103 000b 	add.w	r0, r3, #11
 80069a6:	eb09 0244 	add.w	r2, r9, r4, lsl #1
		*d++ = (BYTE)val;
 80069aa:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 80069ae:	4298      	cmp	r0, r3
 80069b0:	d1fb      	bne.n	80069aa <follow_path+0xe2>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80069b2:	2600      	movs	r6, #0
 80069b4:	e000      	b.n	80069b8 <follow_path+0xf0>
 80069b6:	3601      	adds	r6, #1
 80069b8:	f837 0f02 	ldrh.w	r0, [r7, #2]!
 80069bc:	2820      	cmp	r0, #32
 80069be:	d0fa      	beq.n	80069b6 <follow_path+0xee>
 80069c0:	282e      	cmp	r0, #46	; 0x2e
 80069c2:	d0f8      	beq.n	80069b6 <follow_path+0xee>
	if (si) cf |= NS_LOSS | NS_LFN;
 80069c4:	b10e      	cbz	r6, 80069ca <follow_path+0x102>
 80069c6:	f048 0803 	orr.w	r8, r8, #3
 80069ca:	4613      	mov	r3, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80069cc:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80069d0:	2a2e      	cmp	r2, #46	; 0x2e
 80069d2:	d001      	beq.n	80069d8 <follow_path+0x110>
 80069d4:	3c01      	subs	r4, #1
 80069d6:	d1f9      	bne.n	80069cc <follow_path+0x104>
		dp->fn[i++] = (BYTE)w;
 80069d8:	2300      	movs	r3, #0
 80069da:	2208      	movs	r2, #8
 80069dc:	461f      	mov	r7, r3
		w = lfn[si++];					/* Get an LFN character */
 80069de:	3601      	adds	r6, #1
		if (!w) break;					/* Break on end of the LFN */
 80069e0:	b358      	cbz	r0, 8006a3a <follow_path+0x172>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80069e2:	2820      	cmp	r0, #32
 80069e4:	f000 8086 	beq.w	8006af4 <follow_path+0x22c>
 80069e8:	282e      	cmp	r0, #46	; 0x2e
 80069ea:	f000 8088 	beq.w	8006afe <follow_path+0x236>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d21b      	bcs.n	8006a2a <follow_path+0x162>
 80069f2:	42b4      	cmp	r4, r6
 80069f4:	f000 8085 	beq.w	8006b02 <follow_path+0x23a>
		if (w >= 0x80) {				/* Non ASCII character */
 80069f8:	287f      	cmp	r0, #127	; 0x7f
 80069fa:	f200 808d 	bhi.w	8006b18 <follow_path+0x250>
	while (*str && *str != chr) str++;
 80069fe:	282b      	cmp	r0, #43	; 0x2b
 8006a00:	f000 809b 	beq.w	8006b3a <follow_path+0x272>
 8006a04:	212c      	movs	r1, #44	; 0x2c
 8006a06:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006ba8 <follow_path+0x2e0>
 8006a0a:	4281      	cmp	r1, r0
 8006a0c:	f000 8095 	beq.w	8006b3a <follow_path+0x272>
 8006a10:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d1f8      	bne.n	8006a0a <follow_path+0x142>
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a18:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8006a1c:	2919      	cmp	r1, #25
 8006a1e:	f200 80a3 	bhi.w	8006b68 <follow_path+0x2a0>
					b |= 2;
 8006a22:	f047 0702 	orr.w	r7, r7, #2
 8006a26:	b2c0      	uxtb	r0, r0
 8006a28:	e08a      	b.n	8006b40 <follow_path+0x278>
			if (ni == 11) {				/* Long extension */
 8006a2a:	2a0b      	cmp	r2, #11
 8006a2c:	f000 80aa 	beq.w	8006b84 <follow_path+0x2bc>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006a30:	42b4      	cmp	r4, r6
 8006a32:	d068      	beq.n	8006b06 <follow_path+0x23e>
 8006a34:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8006a38:	d265      	bcs.n	8006b06 <follow_path+0x23e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006a3a:	f85a 300b 	ldr.w	r3, [sl, fp]
 8006a3e:	7819      	ldrb	r1, [r3, #0]
 8006a40:	29e5      	cmp	r1, #229	; 0xe5
 8006a42:	d103      	bne.n	8006a4c <follow_path+0x184>
 8006a44:	2105      	movs	r1, #5
 8006a46:	7019      	strb	r1, [r3, #0]
 8006a48:	f85a 300b 	ldr.w	r3, [sl, fp]
	if (ni == 8) b <<= 2;
 8006a4c:	2a08      	cmp	r2, #8
 8006a4e:	bf04      	itt	eq
 8006a50:	00bf      	lsleq	r7, r7, #2
 8006a52:	b2ff      	uxtbeq	r7, r7
 8006a54:	f007 020c 	and.w	r2, r7, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006a58:	2a0c      	cmp	r2, #12
 8006a5a:	d05a      	beq.n	8006b12 <follow_path+0x24a>
 8006a5c:	f007 0703 	and.w	r7, r7, #3
 8006a60:	2f03      	cmp	r7, #3
 8006a62:	d056      	beq.n	8006b12 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006a64:	f018 0f02 	tst.w	r8, #2
 8006a68:	d107      	bne.n	8006a7a <follow_path+0x1b2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006a6a:	2f01      	cmp	r7, #1
 8006a6c:	bf08      	it	eq
 8006a6e:	f048 0810 	orreq.w	r8, r8, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006a72:	2a04      	cmp	r2, #4
 8006a74:	bf08      	it	eq
 8006a76:	f048 0808 	orreq.w	r8, r8, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006a7a:	f883 800b 	strb.w	r8, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4650      	mov	r0, sl
 8006a82:	f7ff f9ab 	bl	8005ddc <dir_sdi>
	if (res != FR_OK) return res;
 8006a86:	bb40      	cbnz	r0, 8006ada <follow_path+0x212>
 8006a88:	4650      	mov	r0, sl
 8006a8a:	f7ff fc4f 	bl	800632c <dir_find.part.8>
			ns = dp->fn[NSFLAG];
 8006a8e:	f85a 300b 	ldr.w	r3, [sl, fp]
 8006a92:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a94:	bb30      	cbnz	r0, 8006ae4 <follow_path+0x21c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a96:	0759      	lsls	r1, r3, #29
 8006a98:	f53f af65 	bmi.w	8006966 <follow_path+0x9e>
			dir = dp->dir;						/* Follow the sub-directory */
 8006a9c:	f241 0314 	movw	r3, #4116	; 0x1014
 8006aa0:	f85a 3003 	ldr.w	r3, [sl, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006aa4:	7ada      	ldrb	r2, [r3, #11]
 8006aa6:	06d2      	lsls	r2, r2, #27
 8006aa8:	d568      	bpl.n	8006b7c <follow_path+0x2b4>
			dp->sclust = ld_clust(dp->fs, dir);
 8006aaa:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 8006aae:	6811      	ldr	r1, [r2, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006ab0:	7ed8      	ldrb	r0, [r3, #27]
			dp->sclust = ld_clust(dp->fs, dir);
 8006ab2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 8006ab6:	7809      	ldrb	r1, [r1, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006ab8:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 8006aba:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006abc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8006ac0:	d105      	bne.n	8006ace <follow_path+0x206>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006ac2:	7d59      	ldrb	r1, [r3, #21]
 8006ac4:	7d1b      	ldrb	r3, [r3, #20]
 8006ac6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006aca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
			dp->sclust = ld_clust(dp->fs, dir);
 8006ace:	f241 0308 	movw	r3, #4104	; 0x1008
 8006ad2:	f84a 2003 	str.w	r2, [sl, r3]
 8006ad6:	7828      	ldrb	r0, [r5, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ad8:	e70f      	b.n	80068fa <follow_path+0x32>
			ns = dp->fn[NSFLAG];
 8006ada:	f241 0318 	movw	r3, #4120	; 0x1018
 8006ade:	f85a 3003 	ldr.w	r3, [sl, r3]
 8006ae2:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ae4:	2804      	cmp	r0, #4
 8006ae6:	f47f af3e 	bne.w	8006966 <follow_path+0x9e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006aea:	f013 0f04 	tst.w	r3, #4
 8006aee:	bf08      	it	eq
 8006af0:	2005      	moveq	r0, #5
 8006af2:	e738      	b.n	8006966 <follow_path+0x9e>
			cf |= NS_LOSS | NS_LFN; continue;
 8006af4:	f048 0803 	orr.w	r8, r8, #3
 8006af8:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8006afc:	e76f      	b.n	80069de <follow_path+0x116>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006afe:	42b4      	cmp	r4, r6
 8006b00:	d1f8      	bne.n	8006af4 <follow_path+0x22c>
			if (ni == 11) {				/* Long extension */
 8006b02:	2a0b      	cmp	r2, #11
 8006b04:	d03e      	beq.n	8006b84 <follow_path+0x2bc>
			b <<= 2; continue;
 8006b06:	00bf      	lsls	r7, r7, #2
 8006b08:	b2ff      	uxtb	r7, r7
 8006b0a:	4626      	mov	r6, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006b0c:	220b      	movs	r2, #11
 8006b0e:	2308      	movs	r3, #8
 8006b10:	e7f2      	b.n	8006af8 <follow_path+0x230>
		cf |= NS_LFN;
 8006b12:	f048 0802 	orr.w	r8, r8, #2
 8006b16:	e7b0      	b.n	8006a7a <follow_path+0x1b2>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006b18:	2100      	movs	r1, #0
 8006b1a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8006b1e:	f000 ffef 	bl	8007b00 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006b22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006b26:	f048 0802 	orr.w	r8, r8, #2
 8006b2a:	b130      	cbz	r0, 8006b3a <follow_path+0x272>
 8006b2c:	491d      	ldr	r1, [pc, #116]	; (8006ba4 <follow_path+0x2dc>)
 8006b2e:	4408      	add	r0, r1
 8006b30:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f47f af62 	bne.w	80069fe <follow_path+0x136>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006b3a:	205f      	movs	r0, #95	; 0x5f
 8006b3c:	f048 0803 	orr.w	r8, r8, #3
		dp->fn[i++] = (BYTE)w;
 8006b40:	9901      	ldr	r1, [sp, #4]
 8006b42:	6809      	ldr	r1, [r1, #0]
 8006b44:	54c8      	strb	r0, [r1, r3]
 8006b46:	3301      	adds	r3, #1
 8006b48:	e7d6      	b.n	8006af8 <follow_path+0x230>
	*path = &p[si];						/* Return pointer to the next segment */
 8006b4a:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006b4c:	f04f 0804 	mov.w	r8, #4
 8006b50:	e711      	b.n	8006976 <follow_path+0xae>
		res = dir_sdi(dp, 0);
 8006b52:	4621      	mov	r1, r4
 8006b54:	4650      	mov	r0, sl
 8006b56:	f7ff f941 	bl	8005ddc <dir_sdi>
		dp->dir = 0;
 8006b5a:	f241 0314 	movw	r3, #4116	; 0x1014
 8006b5e:	f84a 4003 	str.w	r4, [sl, r3]
}
 8006b62:	b005      	add	sp, #20
 8006b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (IsLower(w)) {	/* ASCII small capital */
 8006b68:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8006b6c:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8006b6e:	bf97      	itett	ls
 8006b70:	3820      	subls	r0, #32
 8006b72:	b2c0      	uxtbhi	r0, r0
 8006b74:	b2c0      	uxtbls	r0, r0
 8006b76:	f047 0701 	orrls.w	r7, r7, #1
 8006b7a:	e7e1      	b.n	8006b40 <follow_path+0x278>
				res = FR_NO_PATH; break;
 8006b7c:	2005      	movs	r0, #5
}
 8006b7e:	b005      	add	sp, #20
 8006b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006b84:	f85a 300b 	ldr.w	r3, [sl, fp]
				cf |= NS_LOSS | NS_LFN; break;
 8006b88:	f048 0803 	orr.w	r8, r8, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	2ae5      	cmp	r2, #229	; 0xe5
 8006b90:	f47f af60 	bne.w	8006a54 <follow_path+0x18c>
 8006b94:	2205      	movs	r2, #5
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	f85a 300b 	ldr.w	r3, [sl, fp]
 8006b9c:	e75a      	b.n	8006a54 <follow_path+0x18c>
 8006b9e:	bf00      	nop
 8006ba0:	08008fe1 	.word	0x08008fe1
 8006ba4:	08008f50 	.word	0x08008f50
 8006ba8:	08008fed 	.word	0x08008fed

08006bac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006bac:	b530      	push	{r4, r5, lr}
 8006bae:	b085      	sub	sp, #20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006bb0:	ab04      	add	r3, sp, #16
 8006bb2:	f843 1d04 	str.w	r1, [r3, #-4]!
{
 8006bb6:	9001      	str	r0, [sp, #4]


	vol = get_ldnumber(&rp);
 8006bb8:	4618      	mov	r0, r3
{
 8006bba:	4614      	mov	r4, r2
 8006bbc:	9100      	str	r1, [sp, #0]
	vol = get_ldnumber(&rp);
 8006bbe:	f7fe fd71 	bl	80056a4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006bc2:	1e02      	subs	r2, r0, #0
 8006bc4:	db23      	blt.n	8006c0e <f_mount+0x62>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006bc6:	4917      	ldr	r1, [pc, #92]	; (8006c24 <f_mount+0x78>)
 8006bc8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]

	if (cfs) {
 8006bcc:	b173      	cbz	r3, 8006bec <f_mount+0x40>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006bce:	4816      	ldr	r0, [pc, #88]	; (8006c28 <f_mount+0x7c>)
 8006bd0:	6805      	ldr	r5, [r0, #0]
 8006bd2:	42ab      	cmp	r3, r5
 8006bd4:	bf04      	itt	eq
 8006bd6:	2500      	moveq	r5, #0
 8006bd8:	6005      	streq	r5, [r0, #0]
 8006bda:	68c5      	ldr	r5, [r0, #12]
 8006bdc:	42ab      	cmp	r3, r5
 8006bde:	bf04      	itt	eq
 8006be0:	2500      	moveq	r5, #0
 8006be2:	60c5      	streq	r5, [r0, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006be4:	2000      	movs	r0, #0
 8006be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bea:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 8006bec:	9b01      	ldr	r3, [sp, #4]
 8006bee:	b14b      	cbz	r3, 8006c04 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006bf6:	2c01      	cmp	r4, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8006bf8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8006bfc:	7028      	strb	r0, [r5, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006bfe:	d009      	beq.n	8006c14 <f_mount+0x68>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8006c00:	b005      	add	sp, #20
 8006c02:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c04:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8006c06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8006c0a:	b005      	add	sp, #20
 8006c0c:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c0e:	200b      	movs	r0, #11
}
 8006c10:	b005      	add	sp, #20
 8006c12:	bd30      	pop	{r4, r5, pc}
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006c14:	4602      	mov	r2, r0
 8006c16:	4669      	mov	r1, sp
 8006c18:	a801      	add	r0, sp, #4
 8006c1a:	f7fe fe7f 	bl	800591c <find_volume>
}
 8006c1e:	b005      	add	sp, #20
 8006c20:	bd30      	pop	{r4, r5, pc}
 8006c22:	bf00      	nop
 8006c24:	20000648 	.word	0x20000648
 8006c28:	2000064c 	.word	0x2000064c

08006c2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006c34:	b081      	sub	sp, #4
 8006c36:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d04e      	beq.n	8006cda <f_open+0xae>
	fp->fs = 0;			/* Clear file object */
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 8006c42:	4604      	mov	r4, r0

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006c44:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8006c48:	4616      	mov	r6, r2
	fp->fs = 0;			/* Clear file object */
 8006c4a:	603b      	str	r3, [r7, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006c4c:	3018      	adds	r0, #24
 8006c4e:	f002 021e 	and.w	r2, r2, #30
 8006c52:	a901      	add	r1, sp, #4
 8006c54:	f7fe fe62 	bl	800591c <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006c58:	4605      	mov	r5, r0
 8006c5a:	b128      	cbz	r0, 8006c68 <f_open+0x3c>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 8006c62:	b001      	add	sp, #4
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_BUF(dj);
 8006c68:	f241 0018 	movw	r0, #4120	; 0x1018
 8006c6c:	f10d 0e18 	add.w	lr, sp, #24
 8006c70:	4aa1      	ldr	r2, [pc, #644]	; (8006ef8 <f_open+0x2cc>)
 8006c72:	f10d 0c0c 	add.w	ip, sp, #12
 8006c76:	ab06      	add	r3, sp, #24
 8006c78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c7c:	f84e c000 	str.w	ip, [lr, r0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c80:	9901      	ldr	r1, [sp, #4]
 8006c82:	4670      	mov	r0, lr
		INIT_BUF(dj);
 8006c84:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c86:	f7ff fe1f 	bl	80068c8 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006c8a:	f006 091f 	and.w	r9, r6, #31
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f006 0a1c 	and.w	sl, r6, #28
		if (res == FR_OK) {
 8006c94:	bb40      	cbnz	r0, 8006ce8 <f_open+0xbc>
		dir = dj.dir;
 8006c96:	f241 0314 	movw	r3, #4116	; 0x1014
 8006c9a:	aa06      	add	r2, sp, #24
 8006c9c:	f852 8003 	ldr.w	r8, [r2, r3]
			if (!dir)	/* Default directory itself */
 8006ca0:	f1b8 0f00 	cmp.w	r8, #0
 8006ca4:	d033      	beq.n	8006d0e <f_open+0xe2>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ca6:	f019 0f1e 	tst.w	r9, #30
 8006caa:	bf14      	ite	ne
 8006cac:	f04f 0b01 	movne.w	fp, #1
 8006cb0:	f04f 0b00 	moveq.w	fp, #0
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4659      	mov	r1, fp
 8006cb8:	f7fe fc42 	bl	8005540 <chk_lock>
 8006cbc:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006cbe:	f1ba 0f00 	cmp.w	sl, #0
 8006cc2:	f000 8100 	beq.w	8006ec6 <f_open+0x29a>
			if (res != FR_OK) {					/* No file, create new */
 8006cc6:	b9a0      	cbnz	r0, 8006cf2 <f_open+0xc6>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006cc8:	f898 300b 	ldrb.w	r3, [r8, #11]
 8006ccc:	f013 0f11 	tst.w	r3, #17
 8006cd0:	d11b      	bne.n	8006d0a <f_open+0xde>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006cd2:	0770      	lsls	r0, r6, #29
 8006cd4:	d51d      	bpl.n	8006d12 <f_open+0xe6>
						res = FR_EXIST;
 8006cd6:	2508      	movs	r5, #8
 8006cd8:	e7c0      	b.n	8006c5c <f_open+0x30>
	if (!fp) return FR_INVALID_OBJECT;
 8006cda:	2509      	movs	r5, #9
}
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 8006ce2:	b001      	add	sp, #4
 8006ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006ce8:	f1ba 0f00 	cmp.w	sl, #0
 8006cec:	d101      	bne.n	8006cf2 <f_open+0xc6>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	e7b4      	b.n	8006c5c <f_open+0x30>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	f040 80fd 	bne.w	8006ef2 <f_open+0x2c6>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006cf8:	4b80      	ldr	r3, [pc, #512]	; (8006efc <f_open+0x2d0>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	d066      	beq.n	8006dce <f_open+0x1a2>
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d063      	beq.n	8006dce <f_open+0x1a2>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d06:	2512      	movs	r5, #18
 8006d08:	e7a8      	b.n	8006c5c <f_open+0x30>
					res = FR_DENIED;
 8006d0a:	2507      	movs	r5, #7
 8006d0c:	e7a6      	b.n	8006c5c <f_open+0x30>
				res = FR_INVALID_NAME;
 8006d0e:	2506      	movs	r5, #6
 8006d10:	e7a4      	b.n	8006c5c <f_open+0x30>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d12:	0731      	lsls	r1, r6, #28
 8006d14:	d467      	bmi.n	8006de6 <f_open+0x1ba>
 8006d16:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8006d1a:	3318      	adds	r3, #24
 8006d1c:	681b      	ldr	r3, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006d1e:	f241 022c 	movw	r2, #4140	; 0x102c
 8006d22:	f241 061c 	movw	r6, #4124	; 0x101c
 8006d26:	589a      	ldr	r2, [r3, r2]
			fp->dir_ptr = dir;
 8006d28:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006d2c:	51a2      	str	r2, [r4, r6]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d2e:	4659      	mov	r1, fp
			fp->dir_ptr = dir;
 8006d30:	f8c3 8000 	str.w	r8, [r3]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d34:	a806      	add	r0, sp, #24
 8006d36:	f7fe fc51 	bl	80055dc <inc_lock>
 8006d3a:	f241 0328 	movw	r3, #4136	; 0x1028
 8006d3e:	50e0      	str	r0, [r4, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d042      	beq.n	8006dca <f_open+0x19e>
			fp->flag = mode;					/* File access mode */
 8006d44:	f241 0006 	movw	r0, #4102	; 0x1006
			fp->err = 0;						/* Clear error flag */
 8006d48:	f241 0307 	movw	r3, #4103	; 0x1007
 8006d4c:	2200      	movs	r2, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006d4e:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 8006d52:	3118      	adds	r1, #24
 8006d54:	6809      	ldr	r1, [r1, #0]
			fp->flag = mode;					/* File access mode */
 8006d56:	f804 9000 	strb.w	r9, [r4, r0]
			fp->err = 0;						/* Clear error flag */
 8006d5a:	54e2      	strb	r2, [r4, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006d5c:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 8006d60:	7812      	ldrb	r2, [r2, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006d62:	f898 001b 	ldrb.w	r0, [r8, #27]
 8006d66:	f898 301a 	ldrb.w	r3, [r8, #26]
	if (fs->fs_type == FS_FAT32)
 8006d6a:	2a03      	cmp	r2, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006d6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8006d70:	d107      	bne.n	8006d82 <f_open+0x156>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006d72:	f898 0015 	ldrb.w	r0, [r8, #21]
 8006d76:	f898 2014 	ldrb.w	r2, [r8, #20]
 8006d7a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006d82:	f241 0b10 	movw	fp, #4112	; 0x1010
			fp->id = fp->fs->id;
 8006d86:	f241 0a06 	movw	sl, #4102	; 0x1006
			fp->fptr = 0;						/* File pointer */
 8006d8a:	2200      	movs	r2, #0
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006d8c:	f241 090c 	movw	r9, #4108	; 0x100c
			fp->fptr = 0;						/* File pointer */
 8006d90:	f241 0e08 	movw	lr, #4104	; 0x1008
			fp->dsect = 0;
 8006d94:	f241 0c18 	movw	ip, #4120	; 0x1018
			fp->cltbl = 0;						/* Normal seek mode */
 8006d98:	f241 0624 	movw	r6, #4132	; 0x1024
			fp->id = fp->fs->id;
 8006d9c:	f241 0004 	movw	r0, #4100	; 0x1004
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006da0:	f844 300b 	str.w	r3, [r4, fp]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006da4:	f8d8 801c 	ldr.w	r8, [r8, #28]
			fp->id = fp->fs->id;
 8006da8:	f831 300a 	ldrh.w	r3, [r1, sl]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006dac:	f844 8009 	str.w	r8, [r4, r9]
			fp->fptr = 0;						/* File pointer */
 8006db0:	f844 200e 	str.w	r2, [r4, lr]
			fp->dsect = 0;
 8006db4:	f844 200c 	str.w	r2, [r4, ip]
			fp->cltbl = 0;						/* Normal seek mode */
 8006db8:	51a2      	str	r2, [r4, r6]
			fp->fs = dj.fs;	 					/* Validate file object */
 8006dba:	6039      	str	r1, [r7, #0]
			fp->id = fp->fs->id;
 8006dbc:	5223      	strh	r3, [r4, r0]
}
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 8006dc4:	b001      	add	sp, #4
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = FR_INT_ERR;
 8006dca:	2502      	movs	r5, #2
 8006dcc:	e746      	b.n	8006c5c <f_open+0x30>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006dce:	a806      	add	r0, sp, #24
 8006dd0:	f7ff fb84 	bl	80064dc <dir_register>
				dir = dj.dir;					/* New entry */
 8006dd4:	f241 0314 	movw	r3, #4116	; 0x1014
 8006dd8:	aa06      	add	r2, sp, #24
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dda:	f049 0908 	orr.w	r9, r9, #8
				dir = dj.dir;					/* New entry */
 8006dde:	f852 8003 	ldr.w	r8, [r2, r3]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d183      	bne.n	8006cee <f_open+0xc2>
				dw = GET_FATTIME();				/* Created time */
 8006de6:	f7fe fb5b 	bl	80054a0 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006dea:	2300      	movs	r3, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006dec:	0c02      	lsrs	r2, r0, #16
 8006dee:	f888 000e 	strb.w	r0, [r8, #14]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006df2:	f888 300b 	strb.w	r3, [r8, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006df6:	f888 301c 	strb.w	r3, [r8, #28]
 8006dfa:	f888 301d 	strb.w	r3, [r8, #29]
 8006dfe:	f888 301e 	strb.w	r3, [r8, #30]
 8006e02:	f888 301f 	strb.w	r3, [r8, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006e06:	f3c0 2107 	ubfx	r1, r0, #8, #8
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006e0a:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006e0e:	0e00      	lsrs	r0, r0, #24
 8006e10:	f888 2010 	strb.w	r2, [r8, #16]
 8006e14:	f888 100f 	strb.w	r1, [r8, #15]
 8006e18:	f888 0011 	strb.w	r0, [r8, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006e1c:	3318      	adds	r3, #24
 8006e1e:	681b      	ldr	r3, [r3, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006e20:	f898 201b 	ldrb.w	r2, [r8, #27]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 8006e28:	781b      	ldrb	r3, [r3, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006e2a:	f898 601a 	ldrb.w	r6, [r8, #26]
	if (fs->fs_type == FS_FAT32)
 8006e2e:	2b03      	cmp	r3, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006e30:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
 8006e34:	d107      	bne.n	8006e46 <f_open+0x21a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006e36:	f898 2015 	ldrb.w	r2, [r8, #21]
 8006e3a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8006e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e42:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006e46:	2300      	movs	r3, #0
				dj.fs->wflag = 1;
 8006e48:	f241 0204 	movw	r2, #4100	; 0x1004
 8006e4c:	2101      	movs	r1, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006e4e:	f888 301a 	strb.w	r3, [r8, #26]
 8006e52:	f888 301b 	strb.w	r3, [r8, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006e56:	f888 3014 	strb.w	r3, [r8, #20]
 8006e5a:	f888 3015 	strb.w	r3, [r8, #21]
				dj.fs->wflag = 1;
 8006e5e:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8006e62:	3318      	adds	r3, #24
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 8006e68:	b346      	cbz	r6, 8006ebc <f_open+0x290>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006e6a:	428e      	cmp	r6, r1
 8006e6c:	d0ad      	beq.n	8006dca <f_open+0x19e>
 8006e6e:	f241 0214 	movw	r2, #4116	; 0x1014
 8006e72:	589a      	ldr	r2, [r3, r2]
 8006e74:	4296      	cmp	r6, r2
 8006e76:	d2a8      	bcs.n	8006dca <f_open+0x19e>
					dw = dj.fs->winsect;
 8006e78:	f241 0a2c 	movw	sl, #4140	; 0x102c
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	4631      	mov	r1, r6
 8006e80:	f853 b00a 	ldr.w	fp, [r3, sl]
 8006e84:	f7ff fce4 	bl	8006850 <remove_chain.part.9>
					if (res == FR_OK) {
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	f47f af30 	bne.w	8006cee <f_open+0xc2>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006e8e:	f241 010c 	movw	r1, #4108	; 0x100c
 8006e92:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8006e96:	3318      	adds	r3, #24
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3e01      	subs	r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e9c:	f853 200a 	ldr.w	r2, [r3, sl]
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006ea0:	505e      	str	r6, [r3, r1]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ea2:	4593      	cmp	fp, r2
 8006ea4:	d00a      	beq.n	8006ebc <f_open+0x290>
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fce7 	bl	800587c <move_window.part.3>
		if (res == FR_OK) {
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f47f af1d 	bne.w	8006cee <f_open+0xc2>
 8006eb4:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8006eb8:	3318      	adds	r3, #24
 8006eba:	681b      	ldr	r3, [r3, #0]
				mode |= FA__WRITTEN;
 8006ebc:	f04f 0b01 	mov.w	fp, #1
 8006ec0:	f049 0920 	orr.w	r9, r9, #32
 8006ec4:	e72b      	b.n	8006d1e <f_open+0xf2>
			if (res == FR_OK) {					/* Follow succeeded */
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f47f af11 	bne.w	8006cee <f_open+0xc2>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006ecc:	f898 300b 	ldrb.w	r3, [r8, #11]
 8006ed0:	06da      	lsls	r2, r3, #27
 8006ed2:	d40c      	bmi.n	8006eee <f_open+0x2c2>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006ed4:	07b0      	lsls	r0, r6, #30
 8006ed6:	d502      	bpl.n	8006ede <f_open+0x2b2>
 8006ed8:	07d9      	lsls	r1, r3, #31
 8006eda:	f53f af16 	bmi.w	8006d0a <f_open+0xde>
 8006ede:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8006ee2:	3318      	adds	r3, #24
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ee4:	0732      	lsls	r2, r6, #28
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f57f af19 	bpl.w	8006d1e <f_open+0xf2>
 8006eec:	e7e6      	b.n	8006ebc <f_open+0x290>
					res = FR_NO_FILE;
 8006eee:	2504      	movs	r5, #4
 8006ef0:	e6b4      	b.n	8006c5c <f_open+0x30>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006ef2:	461d      	mov	r5, r3
 8006ef4:	e6b2      	b.n	8006c5c <f_open+0x30>
 8006ef6:	bf00      	nop
 8006ef8:	20000668 	.word	0x20000668
 8006efc:	2000064c 	.word	0x2000064c

08006f00 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	461e      	mov	r6, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006f06:	2300      	movs	r3, #0
{
 8006f08:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8006f0a:	6033      	str	r3, [r6, #0]
{
 8006f0c:	4689      	mov	r9, r1
 8006f0e:	4690      	mov	r8, r2
 8006f10:	4605      	mov	r5, r0

	res = validate(fp);						/* Check validity */
 8006f12:	f7fe fbed 	bl	80056f0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006f16:	4683      	mov	fp, r0
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f040 8086 	bne.w	800702a <f_write+0x12a>
	if (fp->err)							/* Check error */
 8006f1e:	f241 0307 	movw	r3, #4103	; 0x1007
 8006f22:	5ceb      	ldrb	r3, [r5, r3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f040 8084 	bne.w	8007032 <f_write+0x132>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006f2a:	f241 0206 	movw	r2, #4102	; 0x1006
 8006f2e:	5cab      	ldrb	r3, [r5, r2]
 8006f30:	0799      	lsls	r1, r3, #30
 8006f32:	f140 8101 	bpl.w	8007138 <f_write+0x238>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006f36:	f241 0108 	movw	r1, #4104	; 0x1008
 8006f3a:	f855 c001 	ldr.w	ip, [r5, r1]
 8006f3e:	eb18 0f0c 	cmn.w	r8, ip
 8006f42:	f080 80a7 	bcs.w	8007094 <f_write+0x194>

	for ( ;  btw;							/* Repeat until all data written */
 8006f46:	f1b8 0f00 	cmp.w	r8, #0
 8006f4a:	f000 80a3 	beq.w	8007094 <f_write+0x194>
 8006f4e:	4661      	mov	r1, ip
 8006f50:	46b3      	mov	fp, r6
 8006f52:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8006f56:	3306      	adds	r3, #6
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006f58:	18aa      	adds	r2, r5, r2
 8006f5a:	9302      	str	r3, [sp, #8]
 8006f5c:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8006f60:	9201      	str	r2, [sp, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	9003      	str	r0, [sp, #12]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006f66:	f241 030a 	movw	r3, #4106	; 0x100a
 8006f6a:	9a00      	ldr	r2, [sp, #0]
 8006f6c:	6810      	ldr	r0, [r2, #0]
 8006f6e:	5ac2      	ldrh	r2, [r0, r3]
 8006f70:	fbb1 f4f2 	udiv	r4, r1, r2
 8006f74:	fb02 1314 	mls	r3, r2, r4, r1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d15f      	bne.n	800703c <f_write+0x13c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006f7c:	f241 0302 	movw	r3, #4098	; 0x1002
 8006f80:	5cc3      	ldrb	r3, [r0, r3]
 8006f82:	1e5f      	subs	r7, r3, #1
 8006f84:	4027      	ands	r7, r4
			if (!csect) {					/* On the cluster boundary? */
 8006f86:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8006f8a:	d118      	bne.n	8006fbe <f_write+0xbe>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	f040 80b9 	bne.w	8007104 <f_write+0x204>
					clst = fp->sclust;		/* Follow from the origin */
 8006f92:	f241 0310 	movw	r3, #4112	; 0x1010
 8006f96:	58ec      	ldr	r4, [r5, r3]
					if (clst == 0)			/* When no cluster is allocated, */
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	f000 8106 	beq.w	80071aa <f_write+0x2aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006f9e:	2c01      	cmp	r4, #1
 8006fa0:	f000 8125 	beq.w	80071ee <f_write+0x2ee>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006fa4:	1c62      	adds	r2, r4, #1
 8006fa6:	d03b      	beq.n	8007020 <f_write+0x120>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006fa8:	f241 0310 	movw	r3, #4112	; 0x1010
				fp->clust = clst;			/* Update current cluster */
 8006fac:	f241 0114 	movw	r1, #4116	; 0x1014
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006fb0:	58ea      	ldr	r2, [r5, r3]
				fp->clust = clst;			/* Update current cluster */
 8006fb2:	506c      	str	r4, [r5, r1]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	f000 80bb 	beq.w	8007130 <f_write+0x230>
 8006fba:	9b00      	ldr	r3, [sp, #0]
 8006fbc:	6818      	ldr	r0, [r3, #0]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006fbe:	9a01      	ldr	r2, [sp, #4]
 8006fc0:	7813      	ldrb	r3, [r2, #0]
 8006fc2:	4692      	mov	sl, r2
 8006fc4:	065b      	lsls	r3, r3, #25
 8006fc6:	f100 8089 	bmi.w	80070dc <f_write+0x1dc>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006fca:	f241 0314 	movw	r3, #4116	; 0x1014
	clst -= 2;
 8006fce:	58ec      	ldr	r4, [r5, r3]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006fd0:	58c3      	ldr	r3, [r0, r3]
	clst -= 2;
 8006fd2:	3c02      	subs	r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006fd4:	3b02      	subs	r3, #2
 8006fd6:	429c      	cmp	r4, r3
 8006fd8:	f080 8109 	bcs.w	80071ee <f_write+0x2ee>
	return clst * fs->csize + fs->database;
 8006fdc:	f241 0302 	movw	r3, #4098	; 0x1002
 8006fe0:	f241 0228 	movw	r2, #4136	; 0x1028
 8006fe4:	5cc3      	ldrb	r3, [r0, r3]
 8006fe6:	5882      	ldr	r2, [r0, r2]
 8006fe8:	fb03 2404 	mla	r4, r3, r4, r2
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006fec:	2c00      	cmp	r4, #0
 8006fee:	f000 80fe 	beq.w	80071ee <f_write+0x2ee>
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006ff2:	f241 020a 	movw	r2, #4106	; 0x100a
 8006ff6:	5a82      	ldrh	r2, [r0, r2]
			sect += csect;
 8006ff8:	443c      	add	r4, r7
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006ffa:	fbb8 f6f2 	udiv	r6, r8, r2
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	d055      	beq.n	80070ae <f_write+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007002:	19ba      	adds	r2, r7, r6
 8007004:	4293      	cmp	r3, r2
					cc = fp->fs->csize - csect;
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007006:	f241 0201 	movw	r2, #4097	; 0x1001
					cc = fp->fs->csize - csect;
 800700a:	bf38      	it	cc
 800700c:	1bde      	subcc	r6, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800700e:	5c80      	ldrb	r0, [r0, r2]
 8007010:	4633      	mov	r3, r6
 8007012:	4622      	mov	r2, r4
 8007014:	4649      	mov	r1, r9
 8007016:	f7fe fa77 	bl	8005508 <disk_write>
 800701a:	2800      	cmp	r0, #0
 800701c:	f000 808f 	beq.w	800713e <f_write+0x23e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007020:	2301      	movs	r3, #1
 8007022:	f241 0207 	movw	r2, #4103	; 0x1007
 8007026:	469b      	mov	fp, r3
 8007028:	54ab      	strb	r3, [r5, r2]

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 800702a:	4658      	mov	r0, fp
 800702c:	b005      	add	sp, #20
 800702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007032:	469b      	mov	fp, r3
 8007034:	4658      	mov	r0, fp
 8007036:	b005      	add	sp, #20
 8007038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703c:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
 8007040:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007044:	3708      	adds	r7, #8
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007046:	1ad6      	subs	r6, r2, r3
 8007048:	4546      	cmp	r6, r8
 800704a:	bf28      	it	cs
 800704c:	4646      	movcs	r6, r8
	while (cnt--)
 800704e:	b156      	cbz	r6, 8007066 <f_write+0x166>
 8007050:	3b01      	subs	r3, #1
 8007052:	464a      	mov	r2, r9
 8007054:	442b      	add	r3, r5
 8007056:	44b1      	add	r9, r6
		*d++ = *s++;
 8007058:	f812 1b01 	ldrb.w	r1, [r2], #1
	while (cnt--)
 800705c:	454a      	cmp	r2, r9
		*d++ = *s++;
 800705e:	f803 1f01 	strb.w	r1, [r3, #1]!
	while (cnt--)
 8007062:	d1f9      	bne.n	8007058 <f_write+0x158>
 8007064:	6839      	ldr	r1, [r7, #0]
		fp->flag |= FA__DIRTY;
 8007066:	f89a 3000 	ldrb.w	r3, [sl]
 800706a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706e:	f88a 3000 	strb.w	r3, [sl]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007072:	f8db 3000 	ldr.w	r3, [fp]
 8007076:	4431      	add	r1, r6
 8007078:	4433      	add	r3, r6
	for ( ;  btw;							/* Repeat until all data written */
 800707a:	ebb8 0806 	subs.w	r8, r8, r6
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800707e:	6039      	str	r1, [r7, #0]
 8007080:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 8007084:	f47f af6f 	bne.w	8006f66 <f_write+0x66>
 8007088:	f241 0306 	movw	r3, #4102	; 0x1006
 800708c:	468c      	mov	ip, r1
 800708e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007092:	5ceb      	ldrb	r3, [r5, r3]
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007094:	f241 020c 	movw	r2, #4108	; 0x100c
 8007098:	58a9      	ldr	r1, [r5, r2]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800709a:	f043 0320 	orr.w	r3, r3, #32
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800709e:	4561      	cmp	r1, ip
 80070a0:	bf38      	it	cc
 80070a2:	f845 c002 	strcc.w	ip, [r5, r2]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80070a6:	f241 0206 	movw	r2, #4102	; 0x1006
 80070aa:	54ab      	strb	r3, [r5, r2]
 80070ac:	e7bd      	b.n	800702a <f_write+0x12a>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80070ae:	f241 0618 	movw	r6, #4120	; 0x1018
 80070b2:	f241 0108 	movw	r1, #4104	; 0x1008
 80070b6:	59ab      	ldr	r3, [r5, r6]
 80070b8:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
 80070bc:	429c      	cmp	r4, r3
 80070be:	f107 0708 	add.w	r7, r7, #8
 80070c2:	5869      	ldr	r1, [r5, r1]
 80070c4:	d004      	beq.n	80070d0 <f_write+0x1d0>
				if (fp->fptr < fp->fsize &&
 80070c6:	f241 030c 	movw	r3, #4108	; 0x100c
 80070ca:	58eb      	ldr	r3, [r5, r3]
 80070cc:	428b      	cmp	r3, r1
 80070ce:	d849      	bhi.n	8007164 <f_write+0x264>
 80070d0:	fbb1 f3f2 	udiv	r3, r1, r2
			fp->dsect = sect;
 80070d4:	51ac      	str	r4, [r5, r6]
 80070d6:	fb02 1313 	mls	r3, r2, r3, r1
 80070da:	e7b4      	b.n	8007046 <f_write+0x146>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80070dc:	f241 0301 	movw	r3, #4097	; 0x1001
 80070e0:	f241 0218 	movw	r2, #4120	; 0x1018
 80070e4:	5cc0      	ldrb	r0, [r0, r3]
 80070e6:	58aa      	ldr	r2, [r5, r2]
 80070e8:	2301      	movs	r3, #1
 80070ea:	4629      	mov	r1, r5
 80070ec:	f7fe fa0c 	bl	8005508 <disk_write>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d195      	bne.n	8007020 <f_write+0x120>
				fp->flag &= ~FA__DIRTY;
 80070f4:	9a01      	ldr	r2, [sp, #4]
 80070f6:	7813      	ldrb	r3, [r2, #0]
 80070f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fc:	7013      	strb	r3, [r2, #0]
 80070fe:	9b00      	ldr	r3, [sp, #0]
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	e762      	b.n	8006fca <f_write+0xca>
					if (fp->cltbl)
 8007104:	f241 0224 	movw	r2, #4132	; 0x1024
 8007108:	58aa      	ldr	r2, [r5, r2]
 800710a:	2a00      	cmp	r2, #0
 800710c:	d052      	beq.n	80071b4 <f_write+0x2b4>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800710e:	6850      	ldr	r0, [r2, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007110:	fbb4 f4f3 	udiv	r4, r4, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007114:	3204      	adds	r2, #4
		if (!ncl) return 0;		/* End of table? (error) */
 8007116:	2800      	cmp	r0, #0
 8007118:	d0b6      	beq.n	8007088 <f_write+0x188>
		if (cl < ncl) break;	/* In this fragment? */
 800711a:	4284      	cmp	r4, r0
 800711c:	d202      	bcs.n	8007124 <f_write+0x224>
 800711e:	e035      	b.n	800718c <f_write+0x28c>
 8007120:	42a0      	cmp	r0, r4
 8007122:	d833      	bhi.n	800718c <f_write+0x28c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007124:	1a24      	subs	r4, r4, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007126:	f852 0f08 	ldr.w	r0, [r2, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 800712a:	2800      	cmp	r0, #0
 800712c:	d1f8      	bne.n	8007120 <f_write+0x220>
 800712e:	e7ab      	b.n	8007088 <f_write+0x188>
 8007130:	9a00      	ldr	r2, [sp, #0]
 8007132:	6810      	ldr	r0, [r2, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007134:	50ec      	str	r4, [r5, r3]
 8007136:	e742      	b.n	8006fbe <f_write+0xbe>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007138:	f04f 0b07 	mov.w	fp, #7
 800713c:	e775      	b.n	800702a <f_write+0x12a>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800713e:	f241 0318 	movw	r3, #4120	; 0x1018
 8007142:	f241 020a 	movw	r2, #4106	; 0x100a
 8007146:	58eb      	ldr	r3, [r5, r3]
 8007148:	9900      	ldr	r1, [sp, #0]
 800714a:	1b1c      	subs	r4, r3, r4
 800714c:	6809      	ldr	r1, [r1, #0]
 800714e:	42a6      	cmp	r6, r4
 8007150:	5a8a      	ldrh	r2, [r1, r2]
 8007152:	d836      	bhi.n	80071c2 <f_write+0x2c2>
 8007154:	f241 0308 	movw	r3, #4104	; 0x1008
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007158:	fb02 f606 	mul.w	r6, r2, r6
 800715c:	18ef      	adds	r7, r5, r3
 800715e:	44b1      	add	r9, r6
 8007160:	58e9      	ldr	r1, [r5, r3]
 8007162:	e786      	b.n	8007072 <f_write+0x172>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007164:	f241 0201 	movw	r2, #4097	; 0x1001
 8007168:	2301      	movs	r3, #1
 800716a:	5c80      	ldrb	r0, [r0, r2]
 800716c:	4629      	mov	r1, r5
 800716e:	4622      	mov	r2, r4
 8007170:	f7fe f9bc 	bl	80054ec <disk_read>
				if (fp->fptr < fp->fsize &&
 8007174:	2800      	cmp	r0, #0
 8007176:	f47f af53 	bne.w	8007020 <f_write+0x120>
 800717a:	f241 0208 	movw	r2, #4104	; 0x1008
 800717e:	58a9      	ldr	r1, [r5, r2]
 8007180:	f241 020a 	movw	r2, #4106	; 0x100a
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	5a9a      	ldrh	r2, [r3, r2]
 800718a:	e7a1      	b.n	80070d0 <f_write+0x1d0>
	return cl + *tbl;	/* Return the cluster number */
 800718c:	6853      	ldr	r3, [r2, #4]
 800718e:	441c      	add	r4, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007190:	2c00      	cmp	r4, #0
 8007192:	f47f af04 	bne.w	8006f9e <f_write+0x9e>
 8007196:	f241 0208 	movw	r2, #4104	; 0x1008
 800719a:	f241 0306 	movw	r3, #4102	; 0x1006
 800719e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80071a2:	f855 c002 	ldr.w	ip, [r5, r2]
 80071a6:	5ceb      	ldrb	r3, [r5, r3]
 80071a8:	e774      	b.n	8007094 <f_write+0x194>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80071aa:	4639      	mov	r1, r7
 80071ac:	f7fe ff6a 	bl	8006084 <create_chain>
 80071b0:	4604      	mov	r4, r0
 80071b2:	e7ed      	b.n	8007190 <f_write+0x290>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80071b4:	f241 0314 	movw	r3, #4116	; 0x1014
 80071b8:	58e9      	ldr	r1, [r5, r3]
 80071ba:	f7fe ff63 	bl	8006084 <create_chain>
 80071be:	4604      	mov	r4, r0
 80071c0:	e7e6      	b.n	8007190 <f_write+0x290>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80071c2:	fb02 9304 	mla	r3, r2, r4, r9
	while (cnt--)
 80071c6:	b162      	cbz	r2, 80071e2 <f_write+0x2e2>
 80071c8:	441a      	add	r2, r3
 80071ca:	1e69      	subs	r1, r5, #1
		*d++ = *s++;
 80071cc:	f813 0b01 	ldrb.w	r0, [r3], #1
	while (cnt--)
 80071d0:	4293      	cmp	r3, r2
		*d++ = *s++;
 80071d2:	f801 0f01 	strb.w	r0, [r1, #1]!
	while (cnt--)
 80071d6:	d1f9      	bne.n	80071cc <f_write+0x2cc>
 80071d8:	f241 030a 	movw	r3, #4106	; 0x100a
 80071dc:	9a00      	ldr	r2, [sp, #0]
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	5ad2      	ldrh	r2, [r2, r3]
					fp->flag &= ~FA__DIRTY;
 80071e2:	9901      	ldr	r1, [sp, #4]
 80071e4:	780b      	ldrb	r3, [r1, #0]
 80071e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ea:	700b      	strb	r3, [r1, #0]
 80071ec:	e7b2      	b.n	8007154 <f_write+0x254>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80071ee:	2302      	movs	r3, #2
 80071f0:	f241 0207 	movw	r2, #4103	; 0x1007
 80071f4:	469b      	mov	fp, r3
 80071f6:	54ab      	strb	r3, [r5, r2]
 80071f8:	e717      	b.n	800702a <f_write+0x12a>
 80071fa:	bf00      	nop

080071fc <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80071fc:	b570      	push	{r4, r5, r6, lr}
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80071fe:	290a      	cmp	r1, #10
{
 8007200:	b082      	sub	sp, #8
 8007202:	460e      	mov	r6, r1
 8007204:	4605      	mov	r5, r0
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007206:	d01a      	beq.n	800723e <putc_bfd+0x42>
		putc_bfd(pb, '\r');

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007208:	686c      	ldr	r4, [r5, #4]
	if (i < 0) return;
 800720a:	2c00      	cmp	r4, #0
 800720c:	db08      	blt.n	8007220 <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800720e:	192b      	adds	r3, r5, r4
 8007210:	3401      	adds	r4, #1
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007212:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8007214:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007216:	dc05      	bgt.n	8007224 <putc_bfd+0x28>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
 8007218:	68ab      	ldr	r3, [r5, #8]
	pb->idx = i;
 800721a:	606c      	str	r4, [r5, #4]
	pb->nchr++;
 800721c:	3301      	adds	r3, #1
 800721e:	60ab      	str	r3, [r5, #8]
}
 8007220:	b002      	add	sp, #8
 8007222:	bd70      	pop	{r4, r5, r6, pc}
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007224:	ab01      	add	r3, sp, #4
 8007226:	4622      	mov	r2, r4
 8007228:	f105 010c 	add.w	r1, r5, #12
 800722c:	6828      	ldr	r0, [r5, #0]
 800722e:	f7ff fe67 	bl	8006f00 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007232:	9b01      	ldr	r3, [sp, #4]
 8007234:	1b1c      	subs	r4, r3, r4
 8007236:	bf18      	it	ne
 8007238:	f04f 34ff 	movne.w	r4, #4294967295
 800723c:	e7ec      	b.n	8007218 <putc_bfd+0x1c>
		putc_bfd(pb, '\r');
 800723e:	210d      	movs	r1, #13
 8007240:	f7ff ffdc 	bl	80071fc <putc_bfd>
 8007244:	e7e0      	b.n	8007208 <putc_bfd+0xc>
 8007246:	bf00      	nop

08007248 <f_sync>:
{
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 800724c:	f7fe fa50 	bl	80056f0 <validate>
	if (res == FR_OK) {
 8007250:	2800      	cmp	r0, #0
 8007252:	d154      	bne.n	80072fe <f_sync+0xb6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007254:	f241 0506 	movw	r5, #4102	; 0x1006
 8007258:	5d63      	ldrb	r3, [r4, r5]
 800725a:	069a      	lsls	r2, r3, #26
 800725c:	d54f      	bpl.n	80072fe <f_sync+0xb6>
 800725e:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
			if (fp->flag & FA__DIRTY) {
 8007262:	065b      	lsls	r3, r3, #25
 8007264:	6830      	ldr	r0, [r6, #0]
 8007266:	d44b      	bmi.n	8007300 <f_sync+0xb8>
			res = move_window(fp->fs, fp->dir_sect);
 8007268:	f241 021c 	movw	r2, #4124	; 0x101c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800726c:	f241 032c 	movw	r3, #4140	; 0x102c
			res = move_window(fp->fs, fp->dir_sect);
 8007270:	58a1      	ldr	r1, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007272:	58c3      	ldr	r3, [r0, r3]
 8007274:	4299      	cmp	r1, r3
 8007276:	d003      	beq.n	8007280 <f_sync+0x38>
 8007278:	f7fe fb00 	bl	800587c <move_window.part.3>
			if (res == FR_OK) {
 800727c:	2800      	cmp	r0, #0
 800727e:	d13e      	bne.n	80072fe <f_sync+0xb6>
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007280:	f241 030c 	movw	r3, #4108	; 0x100c
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007284:	f241 0110 	movw	r1, #4112	; 0x1010
				dir = fp->dir_ptr;
 8007288:	f504 5281 	add.w	r2, r4, #4128	; 0x1020
 800728c:	6815      	ldr	r5, [r2, #0]
				fp->fs->wflag = 1;
 800728e:	2701      	movs	r7, #1
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007290:	7aea      	ldrb	r2, [r5, #11]
 8007292:	f042 0220 	orr.w	r2, r2, #32
 8007296:	72ea      	strb	r2, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007298:	58e2      	ldr	r2, [r4, r3]
 800729a:	772a      	strb	r2, [r5, #28]
 800729c:	5ae2      	ldrh	r2, [r4, r3]
 800729e:	0a12      	lsrs	r2, r2, #8
 80072a0:	776a      	strb	r2, [r5, #29]
 80072a2:	58e2      	ldr	r2, [r4, r3]
 80072a4:	0c12      	lsrs	r2, r2, #16
 80072a6:	77aa      	strb	r2, [r5, #30]
 80072a8:	58e3      	ldr	r3, [r4, r3]
 80072aa:	0e1b      	lsrs	r3, r3, #24
 80072ac:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80072ae:	5863      	ldr	r3, [r4, r1]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80072b0:	0c1a      	lsrs	r2, r3, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 80072b2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80072b6:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80072b8:	0a13      	lsrs	r3, r2, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 80072ba:	76e9      	strb	r1, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80072bc:	752a      	strb	r2, [r5, #20]
 80072be:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 80072c0:	f7fe f8ee 	bl	80054a0 <get_fattime>
				ST_WORD(dir + DIR_LstAccDate, 0);
 80072c4:	2300      	movs	r3, #0
				fp->flag &= ~FA__WRITTEN;
 80072c6:	f241 0206 	movw	r2, #4102	; 0x1006
				fp->fs->wflag = 1;
 80072ca:	f241 0104 	movw	r1, #4100	; 0x1004
				ST_DWORD(dir + DIR_WrtTime, tm);
 80072ce:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80072d2:	75a8      	strb	r0, [r5, #22]
 80072d4:	f885 c017 	strb.w	ip, [r5, #23]
 80072d8:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 80072dc:	0e00      	lsrs	r0, r0, #24
 80072de:	f885 c018 	strb.w	ip, [r5, #24]
 80072e2:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80072e4:	74ab      	strb	r3, [r5, #18]
 80072e6:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 80072e8:	5ca3      	ldrb	r3, [r4, r2]
 80072ea:	f023 0320 	bic.w	r3, r3, #32
 80072ee:	54a3      	strb	r3, [r4, r2]
				fp->fs->wflag = 1;
 80072f0:	6830      	ldr	r0, [r6, #0]
 80072f2:	5447      	strb	r7, [r0, r1]
}
 80072f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				res = sync_fs(fp->fs);
 80072f8:	f7fe ba52 	b.w	80057a0 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80072fc:	2001      	movs	r0, #1
}
 80072fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007300:	f241 0301 	movw	r3, #4097	; 0x1001
 8007304:	f241 0218 	movw	r2, #4120	; 0x1018
 8007308:	5cc0      	ldrb	r0, [r0, r3]
 800730a:	58a2      	ldr	r2, [r4, r2]
 800730c:	2301      	movs	r3, #1
 800730e:	4621      	mov	r1, r4
 8007310:	f7fe f8fa 	bl	8005508 <disk_write>
 8007314:	2800      	cmp	r0, #0
 8007316:	d1f1      	bne.n	80072fc <f_sync+0xb4>
				fp->flag &= ~FA__DIRTY;
 8007318:	5d63      	ldrb	r3, [r4, r5]
 800731a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731e:	5563      	strb	r3, [r4, r5]
 8007320:	6830      	ldr	r0, [r6, #0]
 8007322:	e7a1      	b.n	8007268 <f_sync+0x20>

08007324 <f_close>:
{
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8007328:	f7ff ff8e 	bl	8007248 <f_sync>
	if (res == FR_OK)
 800732c:	b100      	cbz	r0, 8007330 <f_close+0xc>
}
 800732e:	bd70      	pop	{r4, r5, r6, pc}
		res = validate(fp);				/* Lock volume */
 8007330:	4620      	mov	r0, r4
 8007332:	f7fe f9dd 	bl	80056f0 <validate>
		if (res == FR_OK) {
 8007336:	2800      	cmp	r0, #0
 8007338:	d1f9      	bne.n	800732e <f_close+0xa>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800733a:	f241 0328 	movw	r3, #4136	; 0x1028
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800733e:	58e3      	ldr	r3, [r4, r3]
 8007340:	3b01      	subs	r3, #1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d812      	bhi.n	800736c <f_close+0x48>
		n = Files[i].ctr;
 8007346:	005a      	lsls	r2, r3, #1
 8007348:	4e0d      	ldr	r6, [pc, #52]	; (8007380 <f_close+0x5c>)
 800734a:	18d1      	adds	r1, r2, r3
 800734c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8007350:	894d      	ldrh	r5, [r1, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007352:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007356:	d011      	beq.n	800737c <f_close+0x58>
		if (n) n--;					/* Decrement read mode open count */
 8007358:	b955      	cbnz	r5, 8007370 <f_close+0x4c>
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800735a:	2100      	movs	r1, #0
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	50f1      	str	r1, [r6, r3]
				fp->fs = 0;				/* Invalidate file object */
 8007362:	2300      	movs	r3, #0
 8007364:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8007368:	6023      	str	r3, [r4, #0]
}
 800736a:	bd70      	pop	{r4, r5, r6, pc}
		res = FR_INT_ERR;			/* Invalid index nunber */
 800736c:	2002      	movs	r0, #2
}
 800736e:	bd70      	pop	{r4, r5, r6, pc}
		if (n) n--;					/* Decrement read mode open count */
 8007370:	3d01      	subs	r5, #1
 8007372:	b2ad      	uxth	r5, r5
		Files[i].ctr = n;
 8007374:	814d      	strh	r5, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007376:	2d00      	cmp	r5, #0
 8007378:	d1f3      	bne.n	8007362 <f_close+0x3e>
 800737a:	e7ee      	b.n	800735a <f_close+0x36>
		Files[i].ctr = n;
 800737c:	8148      	strh	r0, [r1, #10]
 800737e:	e7ec      	b.n	800735a <f_close+0x36>
 8007380:	2000064c 	.word	0x2000064c

08007384 <f_lseek>:
{
 8007384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	b083      	sub	sp, #12
 800738a:	460e      	mov	r6, r1
 800738c:	4605      	mov	r5, r0
	res = validate(fp);					/* Check validity of the object */
 800738e:	f7fe f9af 	bl	80056f0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007392:	4604      	mov	r4, r0
 8007394:	2800      	cmp	r0, #0
 8007396:	d17a      	bne.n	800748e <f_lseek+0x10a>
	if (fp->err)						/* Check error */
 8007398:	f241 0307 	movw	r3, #4103	; 0x1007
 800739c:	5ceb      	ldrb	r3, [r5, r3]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d179      	bne.n	8007496 <f_lseek+0x112>
	if (fp->cltbl) {	/* Fast seek */
 80073a2:	f241 0324 	movw	r3, #4132	; 0x1024
 80073a6:	58ea      	ldr	r2, [r5, r3]
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	f000 80ac 	beq.w	8007506 <f_lseek+0x182>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80073ae:	1c71      	adds	r1, r6, #1
 80073b0:	d076      	beq.n	80074a0 <f_lseek+0x11c>
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80073b2:	f241 030c 	movw	r3, #4108	; 0x100c
 80073b6:	58e9      	ldr	r1, [r5, r3]
			fp->fptr = ofs;				/* Set file pointer */
 80073b8:	f241 0308 	movw	r3, #4104	; 0x1008
 80073bc:	428e      	cmp	r6, r1
 80073be:	bf28      	it	cs
 80073c0:	460e      	movcs	r6, r1
 80073c2:	50ee      	str	r6, [r5, r3]
			if (ofs) {
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	d062      	beq.n	800748e <f_lseek+0x10a>
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80073c8:	f241 010a 	movw	r1, #4106	; 0x100a
				fp->clust = clmt_clust(fp, ofs - 1);
 80073cc:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
 80073d0:	6838      	ldr	r0, [r7, #0]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80073d2:	f241 0302 	movw	r3, #4098	; 0x1002
 80073d6:	f830 8001 	ldrh.w	r8, [r0, r1]
				fp->clust = clmt_clust(fp, ofs - 1);
 80073da:	f106 3eff 	add.w	lr, r6, #4294967295
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80073de:	fbbe fef8 	udiv	lr, lr, r8
 80073e2:	f810 c003 	ldrb.w	ip, [r0, r3]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073e6:	6853      	ldr	r3, [r2, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80073e8:	fbbe f1fc 	udiv	r1, lr, ip
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80073ec:	3204      	adds	r2, #4
		if (!ncl) return 0;		/* End of table? (error) */
 80073ee:	b153      	cbz	r3, 8007406 <f_lseek+0x82>
		if (cl < ncl) break;	/* In this fragment? */
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d203      	bcs.n	80073fc <f_lseek+0x78>
 80073f4:	e123      	b.n	800763e <f_lseek+0x2ba>
 80073f6:	428b      	cmp	r3, r1
 80073f8:	f200 8121 	bhi.w	800763e <f_lseek+0x2ba>
		cl -= ncl; tbl++;		/* Next fragment */
 80073fc:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073fe:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f7      	bne.n	80073f6 <f_lseek+0x72>
 8007406:	f06f 0901 	mvn.w	r9, #1
				fp->clust = clmt_clust(fp, ofs - 1);
 800740a:	f241 0114 	movw	r1, #4116	; 0x1014
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800740e:	5842      	ldr	r2, [r0, r1]
				fp->clust = clmt_clust(fp, ofs - 1);
 8007410:	506b      	str	r3, [r5, r1]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007412:	1e93      	subs	r3, r2, #2
 8007414:	454b      	cmp	r3, r9
 8007416:	d971      	bls.n	80074fc <f_lseek+0x178>
	return clst * fs->csize + fs->database;
 8007418:	f241 0328 	movw	r3, #4136	; 0x1028
 800741c:	58c3      	ldr	r3, [r0, r3]
 800741e:	fb09 330c 	mla	r3, r9, ip, r3
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007422:	2b00      	cmp	r3, #0
 8007424:	d06a      	beq.n	80074fc <f_lseek+0x178>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007426:	fbb6 f2f8 	udiv	r2, r6, r8
 800742a:	fb08 6612 	mls	r6, r8, r2, r6
 800742e:	b376      	cbz	r6, 800748e <f_lseek+0x10a>
 8007430:	f241 0218 	movw	r2, #4120	; 0x1018
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007434:	f10c 36ff 	add.w	r6, ip, #4294967295
 8007438:	ea06 060e 	and.w	r6, r6, lr
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800743c:	58aa      	ldr	r2, [r5, r2]
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800743e:	441e      	add	r6, r3
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007440:	42b2      	cmp	r2, r6
 8007442:	d024      	beq.n	800748e <f_lseek+0x10a>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007444:	f241 0806 	movw	r8, #4102	; 0x1006
 8007448:	f241 0901 	movw	r9, #4097	; 0x1001
 800744c:	f815 3008 	ldrb.w	r3, [r5, r8]
 8007450:	f810 0009 	ldrb.w	r0, [r0, r9]
 8007454:	065b      	lsls	r3, r3, #25
 8007456:	d50f      	bpl.n	8007478 <f_lseek+0xf4>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007458:	2301      	movs	r3, #1
 800745a:	4629      	mov	r1, r5
 800745c:	f7fe f854 	bl	8005508 <disk_write>
 8007460:	2800      	cmp	r0, #0
 8007462:	f040 80f1 	bne.w	8007648 <f_lseek+0x2c4>
						fp->flag &= ~FA__DIRTY;
 8007466:	f815 3008 	ldrb.w	r3, [r5, r8]
 800746a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800746e:	f805 3008 	strb.w	r3, [r5, r8]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f813 0009 	ldrb.w	r0, [r3, r9]
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007478:	2301      	movs	r3, #1
 800747a:	4632      	mov	r2, r6
 800747c:	4629      	mov	r1, r5
 800747e:	f7fe f835 	bl	80054ec <disk_read>
 8007482:	2800      	cmp	r0, #0
 8007484:	f040 80e0 	bne.w	8007648 <f_lseek+0x2c4>
					fp->dsect = dsc;
 8007488:	f241 0318 	movw	r3, #4120	; 0x1018
 800748c:	50ee      	str	r6, [r5, r3]
}
 800748e:	4620      	mov	r0, r4
 8007490:	b003      	add	sp, #12
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	461c      	mov	r4, r3
 8007498:	4620      	mov	r0, r4
 800749a:	b003      	add	sp, #12
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cl = fp->sclust;			/* Top of the chain */
 80074a0:	f241 0310 	movw	r3, #4112	; 0x1010
 80074a4:	58ee      	ldr	r6, [r5, r3]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80074a6:	1d13      	adds	r3, r2, #4
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	f04f 0802 	mov.w	r8, #2
 80074b0:	9300      	str	r3, [sp, #0]
			if (cl) {
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	f000 80b9 	beq.w	800762a <f_lseek+0x2a6>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074b8:	f241 0914 	movw	r9, #4116	; 0x1014
 80074bc:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
 80074c0:	6838      	ldr	r0, [r7, #0]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80074c2:	46b3      	mov	fp, r6
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80074c4:	f04f 0a00 	mov.w	sl, #0
 80074c8:	e013      	b.n	80074f2 <f_lseek+0x16e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074ca:	f850 1009 	ldr.w	r1, [r0, r9]
 80074ce:	458b      	cmp	fp, r1
 80074d0:	d214      	bcs.n	80074fc <f_lseek+0x178>
 80074d2:	4659      	mov	r1, fp
 80074d4:	f7fe fbe8 	bl	8005ca8 <get_fat.part.6>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80074d8:	2801      	cmp	r0, #1
 80074da:	4601      	mov	r1, r0
					} while (cl == pcl + 1);
 80074dc:	f10b 0c01 	add.w	ip, fp, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80074e0:	d90c      	bls.n	80074fc <f_lseek+0x178>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80074e2:	1c42      	adds	r2, r0, #1
 80074e4:	f000 80b0 	beq.w	8007648 <f_lseek+0x2c4>
					} while (cl == pcl + 1);
 80074e8:	458c      	cmp	ip, r1
 80074ea:	4683      	mov	fp, r0
 80074ec:	6838      	ldr	r0, [r7, #0]
 80074ee:	f040 8087 	bne.w	8007600 <f_lseek+0x27c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074f2:	f1bb 0f01 	cmp.w	fp, #1
						pcl = cl; ncl++;
 80074f6:	f10a 0a01 	add.w	sl, sl, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074fa:	d8e6      	bhi.n	80074ca <f_lseek+0x146>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80074fc:	f241 0307 	movw	r3, #4103	; 0x1007
 8007500:	2402      	movs	r4, #2
 8007502:	54ec      	strb	r4, [r5, r3]
 8007504:	e7c3      	b.n	800748e <f_lseek+0x10a>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007506:	f241 030c 	movw	r3, #4108	; 0x100c
 800750a:	58eb      	ldr	r3, [r5, r3]
 800750c:	42b3      	cmp	r3, r6
 800750e:	d206      	bcs.n	800751e <f_lseek+0x19a>
			 && !(fp->flag & FA_WRITE)
 8007510:	f241 0206 	movw	r2, #4102	; 0x1006
 8007514:	5caa      	ldrb	r2, [r5, r2]
 8007516:	f012 0f02 	tst.w	r2, #2
 800751a:	bf08      	it	eq
 800751c:	461e      	moveq	r6, r3
		ifptr = fp->fptr;
 800751e:	f241 0308 	movw	r3, #4104	; 0x1008
		fp->fptr = nsect = 0;
 8007522:	2100      	movs	r1, #0
		ifptr = fp->fptr;
 8007524:	58ea      	ldr	r2, [r5, r3]
		fp->fptr = nsect = 0;
 8007526:	50e9      	str	r1, [r5, r3]
		if (ofs) {
 8007528:	2e00      	cmp	r6, #0
 800752a:	d0b0      	beq.n	800748e <f_lseek+0x10a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800752c:	f241 0102 	movw	r1, #4098	; 0x1002
 8007530:	f241 0c0a 	movw	ip, #4106	; 0x100a
 8007534:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
 8007538:	6838      	ldr	r0, [r7, #0]
 800753a:	5c41      	ldrb	r1, [r0, r1]
 800753c:	f830 900c 	ldrh.w	r9, [r0, ip]
 8007540:	fb09 f901 	mul.w	r9, r9, r1
			if (ifptr > 0 &&
 8007544:	2a00      	cmp	r2, #0
 8007546:	f000 8084 	beq.w	8007652 <f_lseek+0x2ce>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800754a:	3a01      	subs	r2, #1
 800754c:	1e71      	subs	r1, r6, #1
 800754e:	fbb2 fcf9 	udiv	ip, r2, r9
 8007552:	fbb1 f1f9 	udiv	r1, r1, r9
			if (ifptr > 0 &&
 8007556:	4561      	cmp	r1, ip
 8007558:	d37b      	bcc.n	8007652 <f_lseek+0x2ce>
				clst = fp->clust;
 800755a:	f241 0c14 	movw	ip, #4116	; 0x1014
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800755e:	f1c9 0100 	rsb	r1, r9, #0
 8007562:	400a      	ands	r2, r1
				clst = fp->clust;
 8007564:	f855 800c 	ldr.w	r8, [r5, ip]
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007568:	50ea      	str	r2, [r5, r3]
				ofs -= fp->fptr;
 800756a:	1ab6      	subs	r6, r6, r2
			if (clst != 0) {
 800756c:	f1b8 0f00 	cmp.w	r8, #0
 8007570:	d17b      	bne.n	800766a <f_lseek+0x2e6>
 8007572:	f241 0208 	movw	r2, #4104	; 0x1008
 8007576:	f241 030a 	movw	r3, #4106	; 0x100a
 800757a:	58a9      	ldr	r1, [r5, r2]
 800757c:	5ac2      	ldrh	r2, [r0, r3]
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800757e:	fbb1 f3f2 	udiv	r3, r1, r2
 8007582:	fb02 1313 	mls	r3, r2, r3, r1
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80da 	beq.w	8007740 <f_lseek+0x3bc>
 800758c:	f241 0318 	movw	r3, #4120	; 0x1018
 8007590:	58ea      	ldr	r2, [r5, r3]
 8007592:	4542      	cmp	r2, r8
 8007594:	f000 80d4 	beq.w	8007740 <f_lseek+0x3bc>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007598:	f241 0606 	movw	r6, #4102	; 0x1006
 800759c:	f241 0901 	movw	r9, #4097	; 0x1001
 80075a0:	5dab      	ldrb	r3, [r5, r6]
 80075a2:	f810 0009 	ldrb.w	r0, [r0, r9]
 80075a6:	065b      	lsls	r3, r3, #25
 80075a8:	d50c      	bpl.n	80075c4 <f_lseek+0x240>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80075aa:	2301      	movs	r3, #1
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7fd ffab 	bl	8005508 <disk_write>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d148      	bne.n	8007648 <f_lseek+0x2c4>
				fp->flag &= ~FA__DIRTY;
 80075b6:	5dab      	ldrb	r3, [r5, r6]
 80075b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075bc:	55ab      	strb	r3, [r5, r6]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f813 0009 	ldrb.w	r0, [r3, r9]
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80075c4:	2301      	movs	r3, #1
 80075c6:	4642      	mov	r2, r8
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7fd ff8f 	bl	80054ec <disk_read>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d13a      	bne.n	8007648 <f_lseek+0x2c4>
 80075d2:	f241 0108 	movw	r1, #4104	; 0x1008
 80075d6:	f241 030c 	movw	r3, #4108	; 0x100c
			fp->dsect = nsect;
 80075da:	f241 0218 	movw	r2, #4120	; 0x1018
 80075de:	5869      	ldr	r1, [r5, r1]
 80075e0:	58eb      	ldr	r3, [r5, r3]
 80075e2:	f845 8002 	str.w	r8, [r5, r2]
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80075e6:	4299      	cmp	r1, r3
 80075e8:	f67f af51 	bls.w	800748e <f_lseek+0x10a>
			fp->flag |= FA__WRITTEN;
 80075ec:	f241 0206 	movw	r2, #4102	; 0x1006
			fp->fsize = fp->fptr;
 80075f0:	f241 000c 	movw	r0, #4108	; 0x100c
			fp->flag |= FA__WRITTEN;
 80075f4:	5cab      	ldrb	r3, [r5, r2]
			fp->fsize = fp->fptr;
 80075f6:	5029      	str	r1, [r5, r0]
			fp->flag |= FA__WRITTEN;
 80075f8:	f043 0320 	orr.w	r3, r3, #32
 80075fc:	54ab      	strb	r3, [r5, r2]
 80075fe:	e746      	b.n	800748e <f_lseek+0x10a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007600:	9b00      	ldr	r3, [sp, #0]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007602:	f108 0802 	add.w	r8, r8, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007606:	4543      	cmp	r3, r8
 8007608:	d306      	bcc.n	8007618 <f_lseek+0x294>
						*tbl++ = ncl; *tbl++ = tcl;
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	469c      	mov	ip, r3
 800760e:	f84c ab08 	str.w	sl, [ip], #8
 8007612:	f8cd c004 	str.w	ip, [sp, #4]
 8007616:	605e      	str	r6, [r3, #4]
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007618:	f850 3009 	ldr.w	r3, [r0, r9]
 800761c:	460e      	mov	r6, r1
 800761e:	428b      	cmp	r3, r1
 8007620:	f63f af4f 	bhi.w	80074c2 <f_lseek+0x13e>
 8007624:	f241 0324 	movw	r3, #4132	; 0x1024
 8007628:	58ea      	ldr	r2, [r5, r3]
			if (ulen <= tlen)
 800762a:	9b00      	ldr	r3, [sp, #0]
			*fp->cltbl = ulen;	/* Number of items used */
 800762c:	f8c2 8000 	str.w	r8, [r2]
			if (ulen <= tlen)
 8007630:	4598      	cmp	r8, r3
 8007632:	f200 8089 	bhi.w	8007748 <f_lseek+0x3c4>
				*tbl = 0;		/* Terminate table */
 8007636:	2300      	movs	r3, #0
 8007638:	9a01      	ldr	r2, [sp, #4]
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	e727      	b.n	800748e <f_lseek+0x10a>
	return cl + *tbl;	/* Return the cluster number */
 800763e:	6853      	ldr	r3, [r2, #4]
 8007640:	440b      	add	r3, r1
 8007642:	f1a3 0902 	sub.w	r9, r3, #2
 8007646:	e6e0      	b.n	800740a <f_lseek+0x86>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007648:	f241 0307 	movw	r3, #4103	; 0x1007
 800764c:	2401      	movs	r4, #1
 800764e:	54ec      	strb	r4, [r5, r3]
 8007650:	e71d      	b.n	800748e <f_lseek+0x10a>
				clst = fp->sclust;						/* start from the first cluster */
 8007652:	f241 0a10 	movw	sl, #4112	; 0x1010
 8007656:	f855 800a 	ldr.w	r8, [r5, sl]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800765a:	f1b8 0f00 	cmp.w	r8, #0
 800765e:	d075      	beq.n	800774c <f_lseek+0x3c8>
				fp->clust = clst;
 8007660:	f241 0314 	movw	r3, #4116	; 0x1014
 8007664:	f845 8003 	str.w	r8, [r5, r3]
 8007668:	e780      	b.n	800756c <f_lseek+0x1e8>
				while (ofs > bcs) {						/* Cluster following loop */
 800766a:	454e      	cmp	r6, r9
 800766c:	d97f      	bls.n	800776e <f_lseek+0x3ea>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800766e:	f241 0b14 	movw	fp, #4116	; 0x1014
 8007672:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
					fp->fptr += bcs;
 8007676:	f241 0a08 	movw	sl, #4104	; 0x1008
					fp->clust = clst;
 800767a:	eb05 020b 	add.w	r2, r5, fp
 800767e:	3306      	adds	r3, #6
 8007680:	e026      	b.n	80076d0 <f_lseek+0x34c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007682:	f1b8 0f01 	cmp.w	r8, #1
 8007686:	f67f af39 	bls.w	80074fc <f_lseek+0x178>
 800768a:	f850 100b 	ldr.w	r1, [r0, fp]
 800768e:	4588      	cmp	r8, r1
 8007690:	f4bf af34 	bcs.w	80074fc <f_lseek+0x178>
 8007694:	4641      	mov	r1, r8
 8007696:	e9cd 3200 	strd	r3, r2, [sp]
 800769a:	f7fe fb05 	bl	8005ca8 <get_fat.part.6>
 800769e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80076a2:	4680      	mov	r8, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80076a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80076a8:	d0ce      	beq.n	8007648 <f_lseek+0x2c4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80076aa:	f1b8 0f01 	cmp.w	r8, #1
 80076ae:	f67f af25 	bls.w	80074fc <f_lseek+0x178>
 80076b2:	6838      	ldr	r0, [r7, #0]
 80076b4:	f850 100b 	ldr.w	r1, [r0, fp]
 80076b8:	4541      	cmp	r1, r8
 80076ba:	f67f af1f 	bls.w	80074fc <f_lseek+0x178>
					fp->fptr += bcs;
 80076be:	f855 100a 	ldr.w	r1, [r5, sl]
				while (ofs > bcs) {						/* Cluster following loop */
 80076c2:	45b1      	cmp	r9, r6
					fp->fptr += bcs;
 80076c4:	4449      	add	r1, r9
					fp->clust = clst;
 80076c6:	f8c2 8000 	str.w	r8, [r2]
					fp->fptr += bcs;
 80076ca:	f845 100a 	str.w	r1, [r5, sl]
				while (ofs > bcs) {						/* Cluster following loop */
 80076ce:	d213      	bcs.n	80076f8 <f_lseek+0x374>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80076d0:	7819      	ldrb	r1, [r3, #0]
					ofs -= bcs;
 80076d2:	eba6 0609 	sub.w	r6, r6, r9
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80076d6:	0789      	lsls	r1, r1, #30
 80076d8:	d5d3      	bpl.n	8007682 <f_lseek+0x2fe>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80076da:	4641      	mov	r1, r8
 80076dc:	e9cd 3200 	strd	r3, r2, [sp]
 80076e0:	f7fe fcd0 	bl	8006084 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80076e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80076e8:	4680      	mov	r8, r0
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d1da      	bne.n	80076a4 <f_lseek+0x320>
 80076ee:	f241 0308 	movw	r3, #4104	; 0x1008
 80076f2:	464e      	mov	r6, r9
 80076f4:	58e9      	ldr	r1, [r5, r3]
 80076f6:	6838      	ldr	r0, [r7, #0]
				if (ofs % SS(fp->fs)) {
 80076f8:	f241 030a 	movw	r3, #4106	; 0x100a
 80076fc:	5ac2      	ldrh	r2, [r0, r3]
				fp->fptr += ofs;
 80076fe:	f241 0e08 	movw	lr, #4104	; 0x1008
				if (ofs % SS(fp->fs)) {
 8007702:	fbb6 fcf2 	udiv	ip, r6, r2
 8007706:	fb02 631c 	mls	r3, r2, ip, r6
				fp->fptr += ofs;
 800770a:	4431      	add	r1, r6
 800770c:	f845 100e 	str.w	r1, [r5, lr]
				if (ofs % SS(fp->fs)) {
 8007710:	b35b      	cbz	r3, 800776a <f_lseek+0x3e6>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007712:	f241 0314 	movw	r3, #4116	; 0x1014
 8007716:	58c3      	ldr	r3, [r0, r3]
	clst -= 2;
 8007718:	f1a8 0802 	sub.w	r8, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800771c:	3b02      	subs	r3, #2
 800771e:	4598      	cmp	r8, r3
 8007720:	f4bf aeec 	bcs.w	80074fc <f_lseek+0x178>
	return clst * fs->csize + fs->database;
 8007724:	f241 0302 	movw	r3, #4098	; 0x1002
 8007728:	f241 0628 	movw	r6, #4136	; 0x1028
 800772c:	5cc3      	ldrb	r3, [r0, r3]
 800772e:	5986      	ldr	r6, [r0, r6]
 8007730:	fb08 6303 	mla	r3, r8, r3, r6
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007734:	2b00      	cmp	r3, #0
 8007736:	f43f aee1 	beq.w	80074fc <f_lseek+0x178>
					nsect += ofs / SS(fp->fs);
 800773a:	eb0c 0803 	add.w	r8, ip, r3
 800773e:	e71e      	b.n	800757e <f_lseek+0x1fa>
 8007740:	f241 030c 	movw	r3, #4108	; 0x100c
 8007744:	58eb      	ldr	r3, [r5, r3]
 8007746:	e74e      	b.n	80075e6 <f_lseek+0x262>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007748:	2411      	movs	r4, #17
 800774a:	e6a0      	b.n	800748e <f_lseek+0x10a>
					clst = create_chain(fp->fs, 0);
 800774c:	4641      	mov	r1, r8
 800774e:	f7fe fc99 	bl	8006084 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007752:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8007754:	4680      	mov	r8, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007756:	f43f aed1 	beq.w	80074fc <f_lseek+0x178>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800775a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800775e:	f43f af73 	beq.w	8007648 <f_lseek+0x2c4>
 8007762:	6838      	ldr	r0, [r7, #0]
					fp->sclust = clst;
 8007764:	f845 800a 	str.w	r8, [r5, sl]
 8007768:	e77a      	b.n	8007660 <f_lseek+0x2dc>
		fp->fptr = nsect = 0;
 800776a:	4698      	mov	r8, r3
 800776c:	e707      	b.n	800757e <f_lseek+0x1fa>
 800776e:	f241 0308 	movw	r3, #4104	; 0x1008
 8007772:	58e9      	ldr	r1, [r5, r3]
 8007774:	e7c0      	b.n	80076f8 <f_lseek+0x374>
 8007776:	bf00      	nop

08007778 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8007778:	b40e      	push	{r1, r2, r3}
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 800777a:	2200      	movs	r2, #0
{
 800777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	b09a      	sub	sp, #104	; 0x68
 8007782:	ab23      	add	r3, sp, #140	; 0x8c
 8007784:	f853 6b04 	ldr.w	r6, [r3], #4
	pb.nchr = pb.idx = 0;
 8007788:	e9cd 2208 	strd	r2, r2, [sp, #32]
	pb.fp = fp;				/* Initialize output buffer */
 800778c:	9007      	str	r0, [sp, #28]

	va_start(arp, fmt);
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f10d 0a0b 	add.w	sl, sp, #11

	for (;;) {
		c = *fmt++;
 8007794:	7831      	ldrb	r1, [r6, #0]
		if (c == 0) break;			/* End of string */
 8007796:	b141      	cbz	r1, 80077aa <f_printf+0x32>
		if (c != '%') {				/* Non escape character */
 8007798:	2925      	cmp	r1, #37	; 0x25
 800779a:	d01d      	beq.n	80077d8 <f_printf+0x60>
			putc_bfd(&pb, c);
 800779c:	a807      	add	r0, sp, #28
		c = *fmt++;
 800779e:	3601      	adds	r6, #1
			putc_bfd(&pb, c);
 80077a0:	f7ff fd2c 	bl	80071fc <putc_bfd>
		c = *fmt++;
 80077a4:	7831      	ldrb	r1, [r6, #0]
		if (c == 0) break;			/* End of string */
 80077a6:	2900      	cmp	r1, #0
 80077a8:	d1f6      	bne.n	8007798 <f_printf+0x20>
		while (j++ < w) putc_bfd(&pb, d);
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80077aa:	9a08      	ldr	r2, [sp, #32]
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	f2c0 8174 	blt.w	8007a9a <f_printf+0x322>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80077b2:	ab02      	add	r3, sp, #8
 80077b4:	a90a      	add	r1, sp, #40	; 0x28
 80077b6:	9807      	ldr	r0, [sp, #28]
 80077b8:	f7ff fba2 	bl	8006f00 <f_write>
 80077bc:	2800      	cmp	r0, #0
 80077be:	f040 816c 	bne.w	8007a9a <f_printf+0x322>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80077c2:	9a08      	ldr	r2, [sp, #32]
 80077c4:	9b02      	ldr	r3, [sp, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	f040 8167 	bne.w	8007a9a <f_printf+0x322>
 80077cc:	9809      	ldr	r0, [sp, #36]	; 0x24
	return EOF;
}
 80077ce:	b01a      	add	sp, #104	; 0x68
 80077d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	b003      	add	sp, #12
 80077d6:	4770      	bx	lr
		c = *fmt++;
 80077d8:	7871      	ldrb	r1, [r6, #1]
		if (c == '0') {				/* Flag: '0' padding */
 80077da:	2930      	cmp	r1, #48	; 0x30
 80077dc:	f000 8121 	beq.w	8007a22 <f_printf+0x2aa>
			if (c == '-') {			/* Flag: left justified */
 80077e0:	292d      	cmp	r1, #45	; 0x2d
 80077e2:	f000 8126 	beq.w	8007a32 <f_printf+0x2ba>
		w = f = 0;
 80077e6:	f04f 0c00 	mov.w	ip, #0
		c = *fmt++;
 80077ea:	3602      	adds	r6, #2
		while (IsDigit(c)) {		/* Precision */
 80077ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80077f0:	2b09      	cmp	r3, #9
 80077f2:	f04f 0400 	mov.w	r4, #0
 80077f6:	d80a      	bhi.n	800780e <f_printf+0x96>
			w = w * 10 + c - '0';
 80077f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80077fc:	eb01 0444 	add.w	r4, r1, r4, lsl #1
			c = *fmt++;
 8007800:	f816 1b01 	ldrb.w	r1, [r6], #1
			w = w * 10 + c - '0';
 8007804:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 8007806:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800780a:	2b09      	cmp	r3, #9
 800780c:	d9f4      	bls.n	80077f8 <f_printf+0x80>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800780e:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8007812:	2b4c      	cmp	r3, #76	; 0x4c
 8007814:	d027      	beq.n	8007866 <f_printf+0xee>
		if (!c) break;
 8007816:	2900      	cmp	r1, #0
 8007818:	d0c7      	beq.n	80077aa <f_printf+0x32>
		if (IsLower(d)) d -= 0x20;
 800781a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800781e:	2b19      	cmp	r3, #25
 8007820:	bf8e      	itee	hi
 8007822:	460b      	movhi	r3, r1
 8007824:	f1a1 0320 	subls.w	r3, r1, #32
 8007828:	b2db      	uxtbls	r3, r3
		switch (d) {				/* Type is... */
 800782a:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
 800782e:	2a16      	cmp	r2, #22
 8007830:	f200 80f3 	bhi.w	8007a1a <f_printf+0x2a2>
 8007834:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007838:	00ae00b6 	.word	0x00ae00b6
 800783c:	00f10097 	.word	0x00f10097
 8007840:	00f100f1 	.word	0x00f100f1
 8007844:	00f100f1 	.word	0x00f100f1
 8007848:	00f100f1 	.word	0x00f100f1
 800784c:	00f100f1 	.word	0x00f100f1
 8007850:	001c00f1 	.word	0x001c00f1
 8007854:	00f100f1 	.word	0x00f100f1
 8007858:	00c000f1 	.word	0x00c000f1
 800785c:	009700f1 	.word	0x009700f1
 8007860:	00f100f1 	.word	0x00f100f1
 8007864:	008b      	.short	0x008b
			f |= 4; c = *fmt++;
 8007866:	7831      	ldrb	r1, [r6, #0]
 8007868:	f04c 0c04 	orr.w	ip, ip, #4
 800786c:	3601      	adds	r6, #1
 800786e:	e7d2      	b.n	8007816 <f_printf+0x9e>
 8007870:	9d01      	ldr	r5, [sp, #4]
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007872:	f01c 0f04 	tst.w	ip, #4
 8007876:	462a      	mov	r2, r5
		switch (d) {				/* Type is... */
 8007878:	f04f 0708 	mov.w	r7, #8
 800787c:	f852 eb04 	ldr.w	lr, [r2], #4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007880:	d07a      	beq.n	8007978 <f_printf+0x200>
		if (d == 'D' && (v & 0x80000000)) {
 8007882:	2b44      	cmp	r3, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007884:	9201      	str	r2, [sp, #4]
 8007886:	4670      	mov	r0, lr
		if (d == 'D' && (v & 0x80000000)) {
 8007888:	d102      	bne.n	8007890 <f_printf+0x118>
 800788a:	f1be 0f00 	cmp.w	lr, #0
 800788e:	db7a      	blt.n	8007986 <f_printf+0x20e>
 8007890:	f04f 0800 	mov.w	r8, #0
 8007894:	2978      	cmp	r1, #120	; 0x78
 8007896:	bf0c      	ite	eq
 8007898:	f04f 0927 	moveq.w	r9, #39	; 0x27
 800789c:	f04f 0907 	movne.w	r9, #7
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80078a0:	a903      	add	r1, sp, #12
		i = 0;
 80078a2:	f04f 0e00 	mov.w	lr, #0
 80078a6:	e003      	b.n	80078b0 <f_printf+0x138>
		} while (v && i < sizeof s / sizeof s[0]);
 80078a8:	2d10      	cmp	r5, #16
 80078aa:	f000 80bf 	beq.w	8007a2c <f_printf+0x2b4>
 80078ae:	46ae      	mov	lr, r5
			d = (TCHAR)(v % r); v /= r;
 80078b0:	fbb0 f2f7 	udiv	r2, r0, r7
 80078b4:	fb07 0512 	mls	r5, r7, r2, r0
 80078b8:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80078ba:	2d09      	cmp	r5, #9
 80078bc:	bf84      	itt	hi
 80078be:	444b      	addhi	r3, r9
 80078c0:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 80078c2:	3330      	adds	r3, #48	; 0x30
			d = (TCHAR)(v % r); v /= r;
 80078c4:	4610      	mov	r0, r2
			s[i++] = d + '0';
 80078c6:	f801 3b01 	strb.w	r3, [r1], #1
 80078ca:	f10e 0501 	add.w	r5, lr, #1
		} while (v && i < sizeof s / sizeof s[0]);
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	d1ea      	bne.n	80078a8 <f_printf+0x130>
		if (f & 8) s[i++] = '-';
 80078d2:	f1b8 0f00 	cmp.w	r8, #0
 80078d6:	d006      	beq.n	80078e6 <f_printf+0x16e>
 80078d8:	232d      	movs	r3, #45	; 0x2d
 80078da:	aa1a      	add	r2, sp, #104	; 0x68
 80078dc:	4415      	add	r5, r2
 80078de:	f805 3c5c 	strb.w	r3, [r5, #-92]
 80078e2:	f10e 0502 	add.w	r5, lr, #2
		j = i; d = (f & 1) ? '0' : ' ';
 80078e6:	f01c 0f01 	tst.w	ip, #1
 80078ea:	bf0c      	ite	eq
 80078ec:	f04f 0920 	moveq.w	r9, #32
 80078f0:	f04f 0930 	movne.w	r9, #48	; 0x30
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80078f4:	f01c 0f02 	tst.w	ip, #2
 80078f8:	f105 0701 	add.w	r7, r5, #1
 80078fc:	f040 80c4 	bne.w	8007a88 <f_printf+0x310>
 8007900:	42a5      	cmp	r5, r4
 8007902:	f080 80c5 	bcs.w	8007a90 <f_printf+0x318>
 8007906:	f104 0b01 	add.w	fp, r4, #1
 800790a:	f10d 081c 	add.w	r8, sp, #28
 800790e:	3701      	adds	r7, #1
 8007910:	4649      	mov	r1, r9
 8007912:	4640      	mov	r0, r8
 8007914:	f7ff fc72 	bl	80071fc <putc_bfd>
 8007918:	455f      	cmp	r7, fp
 800791a:	d1f8      	bne.n	800790e <f_printf+0x196>
 800791c:	46bb      	mov	fp, r7
 800791e:	1ca7      	adds	r7, r4, #2
 8007920:	3d01      	subs	r5, #1
 8007922:	ab03      	add	r3, sp, #12
 8007924:	441d      	add	r5, r3
		do putc_bfd(&pb, s[--i]); while (i);
 8007926:	f815 1901 	ldrb.w	r1, [r5], #-1
 800792a:	4640      	mov	r0, r8
 800792c:	f7ff fc66 	bl	80071fc <putc_bfd>
 8007930:	45aa      	cmp	sl, r5
 8007932:	d1f8      	bne.n	8007926 <f_printf+0x1ae>
		while (j++ < w) putc_bfd(&pb, d);
 8007934:	45a3      	cmp	fp, r4
 8007936:	d301      	bcc.n	800793c <f_printf+0x1c4>
 8007938:	e72c      	b.n	8007794 <f_printf+0x1c>
 800793a:	461f      	mov	r7, r3
 800793c:	4649      	mov	r1, r9
 800793e:	4640      	mov	r0, r8
 8007940:	f7ff fc5c 	bl	80071fc <putc_bfd>
 8007944:	42bc      	cmp	r4, r7
 8007946:	f107 0301 	add.w	r3, r7, #1
 800794a:	d8f6      	bhi.n	800793a <f_printf+0x1c2>
 800794c:	e722      	b.n	8007794 <f_printf+0x1c>
 800794e:	9d01      	ldr	r5, [sp, #4]
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007950:	f01c 0f04 	tst.w	ip, #4
 8007954:	462a      	mov	r2, r5
 8007956:	f852 0b04 	ldr.w	r0, [r2], #4
 800795a:	d075      	beq.n	8007a48 <f_printf+0x2d0>
 800795c:	9201      	str	r2, [sp, #4]
 800795e:	2710      	movs	r7, #16
 8007960:	f04f 0800 	mov.w	r8, #0
 8007964:	e796      	b.n	8007894 <f_printf+0x11c>
 8007966:	9d01      	ldr	r5, [sp, #4]
 8007968:	f01c 0f04 	tst.w	ip, #4
 800796c:	462a      	mov	r2, r5
		switch (d) {				/* Type is... */
 800796e:	f04f 070a 	mov.w	r7, #10
 8007972:	f852 eb04 	ldr.w	lr, [r2], #4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007976:	d184      	bne.n	8007882 <f_printf+0x10a>
 8007978:	2b44      	cmp	r3, #68	; 0x44
 800797a:	d160      	bne.n	8007a3e <f_printf+0x2c6>
		if (d == 'D' && (v & 0x80000000)) {
 800797c:	f1be 0f00 	cmp.w	lr, #0
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007980:	9201      	str	r2, [sp, #4]
 8007982:	4670      	mov	r0, lr
		if (d == 'D' && (v & 0x80000000)) {
 8007984:	da84      	bge.n	8007890 <f_printf+0x118>
			v = 0 - v;
 8007986:	f1ce 0000 	rsb	r0, lr, #0
			f |= 8;
 800798a:	f04c 0c08 	orr.w	ip, ip, #8
 800798e:	f04f 0808 	mov.w	r8, #8
 8007992:	e77f      	b.n	8007894 <f_printf+0x11c>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8007994:	9b01      	ldr	r3, [sp, #4]
 8007996:	a807      	add	r0, sp, #28
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	7819      	ldrb	r1, [r3, #0]
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	f7ff fc2d 	bl	80071fc <putc_bfd>
 80079a2:	e6f7      	b.n	8007794 <f_printf+0x1c>
 80079a4:	9d01      	ldr	r5, [sp, #4]
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80079a6:	f01c 0f04 	tst.w	ip, #4
 80079aa:	462a      	mov	r2, r5
 80079ac:	f852 0b04 	ldr.w	r0, [r2], #4
 80079b0:	d044      	beq.n	8007a3c <f_printf+0x2c4>
 80079b2:	9201      	str	r2, [sp, #4]
 80079b4:	2702      	movs	r7, #2
 80079b6:	e76b      	b.n	8007890 <f_printf+0x118>
			p = va_arg(arp, TCHAR*);
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	f00c 0c02 	and.w	ip, ip, #2
 80079be:	f8d3 9000 	ldr.w	r9, [r3]
 80079c2:	3304      	adds	r3, #4
			for (j = 0; p[j]; j++) ;
 80079c4:	f899 1000 	ldrb.w	r1, [r9]
			p = va_arg(arp, TCHAR*);
 80079c8:	9301      	str	r3, [sp, #4]
			for (j = 0; p[j]; j++) ;
 80079ca:	2900      	cmp	r1, #0
 80079cc:	d042      	beq.n	8007a54 <f_printf+0x2dc>
 80079ce:	464a      	mov	r2, r9
 80079d0:	2300      	movs	r3, #0
 80079d2:	e000      	b.n	80079d6 <f_printf+0x25e>
 80079d4:	463b      	mov	r3, r7
 80079d6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80079da:	1c5f      	adds	r7, r3, #1
 80079dc:	2800      	cmp	r0, #0
 80079de:	d1f9      	bne.n	80079d4 <f_printf+0x25c>
 80079e0:	1c9d      	adds	r5, r3, #2
			if (!(f & 2)) {
 80079e2:	f1bc 0f00 	cmp.w	ip, #0
 80079e6:	d03b      	beq.n	8007a60 <f_printf+0x2e8>
 80079e8:	f10d 081c 	add.w	r8, sp, #28
			while (*p) putc_bfd(&pb, *p++);
 80079ec:	4640      	mov	r0, r8
 80079ee:	f7ff fc05 	bl	80071fc <putc_bfd>
 80079f2:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80079f6:	2900      	cmp	r1, #0
 80079f8:	d1f8      	bne.n	80079ec <f_printf+0x274>
			while (j++ < w) putc_bfd(&pb, ' ');
 80079fa:	42bc      	cmp	r4, r7
 80079fc:	f67f aeca 	bls.w	8007794 <f_printf+0x1c>
 8007a00:	f10d 081c 	add.w	r8, sp, #28
 8007a04:	e000      	b.n	8007a08 <f_printf+0x290>
 8007a06:	461d      	mov	r5, r3
 8007a08:	2120      	movs	r1, #32
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f7ff fbf6 	bl	80071fc <putc_bfd>
 8007a10:	42ac      	cmp	r4, r5
 8007a12:	f105 0301 	add.w	r3, r5, #1
 8007a16:	d8f6      	bhi.n	8007a06 <f_printf+0x28e>
 8007a18:	e6bc      	b.n	8007794 <f_printf+0x1c>
			putc_bfd(&pb, c); continue;
 8007a1a:	a807      	add	r0, sp, #28
 8007a1c:	f7ff fbee 	bl	80071fc <putc_bfd>
 8007a20:	e6b8      	b.n	8007794 <f_printf+0x1c>
			f = 1; c = *fmt++;
 8007a22:	78b1      	ldrb	r1, [r6, #2]
 8007a24:	f04f 0c01 	mov.w	ip, #1
 8007a28:	3603      	adds	r6, #3
 8007a2a:	e6df      	b.n	80077ec <f_printf+0x74>
 8007a2c:	f04f 0e0f 	mov.w	lr, #15
 8007a30:	e74f      	b.n	80078d2 <f_printf+0x15a>
				f = 2; c = *fmt++;
 8007a32:	78b1      	ldrb	r1, [r6, #2]
 8007a34:	f04f 0c02 	mov.w	ip, #2
 8007a38:	3603      	adds	r6, #3
 8007a3a:	e6d7      	b.n	80077ec <f_printf+0x74>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007a3c:	2702      	movs	r7, #2
 8007a3e:	9201      	str	r2, [sp, #4]
 8007a40:	6828      	ldr	r0, [r5, #0]
 8007a42:	f04f 0800 	mov.w	r8, #0
 8007a46:	e725      	b.n	8007894 <f_printf+0x11c>
 8007a48:	2710      	movs	r7, #16
 8007a4a:	9201      	str	r2, [sp, #4]
 8007a4c:	6828      	ldr	r0, [r5, #0]
 8007a4e:	f04f 0800 	mov.w	r8, #0
 8007a52:	e71f      	b.n	8007894 <f_printf+0x11c>
			if (!(f & 2)) {
 8007a54:	f1bc 0f00 	cmp.w	ip, #0
 8007a58:	d027      	beq.n	8007aaa <f_printf+0x332>
			for (j = 0; p[j]; j++) ;
 8007a5a:	460f      	mov	r7, r1
			if (!(f & 2)) {
 8007a5c:	2501      	movs	r5, #1
 8007a5e:	e7cc      	b.n	80079fa <f_printf+0x282>
				while (j++ < w) putc_bfd(&pb, ' ');
 8007a60:	42a7      	cmp	r7, r4
 8007a62:	d21d      	bcs.n	8007aa0 <f_printf+0x328>
 8007a64:	f10d 081c 	add.w	r8, sp, #28
 8007a68:	e000      	b.n	8007a6c <f_printf+0x2f4>
 8007a6a:	463d      	mov	r5, r7
 8007a6c:	2120      	movs	r1, #32
 8007a6e:	4640      	mov	r0, r8
 8007a70:	f7ff fbc4 	bl	80071fc <putc_bfd>
 8007a74:	42ac      	cmp	r4, r5
 8007a76:	f105 0701 	add.w	r7, r5, #1
 8007a7a:	d8f6      	bhi.n	8007a6a <f_printf+0x2f2>
 8007a7c:	f899 1000 	ldrb.w	r1, [r9]
 8007a80:	3502      	adds	r5, #2
			while (*p) putc_bfd(&pb, *p++);
 8007a82:	2900      	cmp	r1, #0
 8007a84:	d1b2      	bne.n	80079ec <f_printf+0x274>
 8007a86:	e7b8      	b.n	80079fa <f_printf+0x282>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8007a88:	46ab      	mov	fp, r5
 8007a8a:	f10d 081c 	add.w	r8, sp, #28
 8007a8e:	e747      	b.n	8007920 <f_printf+0x1a8>
 8007a90:	46bb      	mov	fp, r7
 8007a92:	f10d 081c 	add.w	r8, sp, #28
 8007a96:	1caf      	adds	r7, r5, #2
 8007a98:	e742      	b.n	8007920 <f_printf+0x1a8>
	return EOF;
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	e696      	b.n	80077ce <f_printf+0x56>
				while (j++ < w) putc_bfd(&pb, ' ');
 8007aa0:	462f      	mov	r7, r5
 8007aa2:	f10d 081c 	add.w	r8, sp, #28
 8007aa6:	1cdd      	adds	r5, r3, #3
 8007aa8:	e7a0      	b.n	80079ec <f_printf+0x274>
 8007aaa:	2c00      	cmp	r4, #0
 8007aac:	f43f ae72 	beq.w	8007794 <f_printf+0x1c>
 8007ab0:	2501      	movs	r5, #1
 8007ab2:	e7d7      	b.n	8007a64 <f_printf+0x2ec>

08007ab4 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <FATFS_LinkDriver+0x48>)
 8007ab6:	7a5a      	ldrb	r2, [r3, #9]
 8007ab8:	2a01      	cmp	r2, #1
 8007aba:	d901      	bls.n	8007ac0 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8007abc:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8007abe:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 8007ac0:	2200      	movs	r2, #0
{
 8007ac2:	b4f0      	push	{r4, r5, r6, r7}
    path[1] = ':';
 8007ac4:	263a      	movs	r6, #58	; 0x3a
    path[2] = '/';
 8007ac6:	252f      	movs	r5, #47	; 0x2f
    disk.is_initialized[disk.nbr] = 0;
 8007ac8:	f893 c009 	ldrb.w	ip, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8007acc:	7a5f      	ldrb	r7, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8007ace:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8007ad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ad4:	6078      	str	r0, [r7, #4]
    DiskNum = disk.nbr++;
 8007ad6:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8007ad8:	441c      	add	r4, r3
    DiskNum = disk.nbr++;
 8007ada:	b2c0      	uxtb	r0, r0
    disk.lun[disk.nbr] = lun;  
 8007adc:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8007ade:	1c44      	adds	r4, r0, #1
 8007ae0:	b2e4      	uxtb	r4, r4
    disk.is_initialized[disk.nbr] = 0;
 8007ae2:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 8007ae6:	725c      	strb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 8007ae8:	f803 200c 	strb.w	r2, [r3, ip]
    path[0] = DiskNum + '0';
 8007aec:	3030      	adds	r0, #48	; 0x30
 8007aee:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 8007af0:	704e      	strb	r6, [r1, #1]
    path[3] = 0;
 8007af2:	4610      	mov	r0, r2
    path[2] = '/';
 8007af4:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 8007af6:	70ca      	strb	r2, [r1, #3]
}
 8007af8:	bcf0      	pop	{r4, r5, r6, r7}
 8007afa:	4770      	bx	lr
 8007afc:	20000868 	.word	0x20000868

08007b00 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007b00:	287f      	cmp	r0, #127	; 0x7f
 8007b02:	d919      	bls.n	8007b38 <ff_convert+0x38>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007b04:	b989      	cbnz	r1, 8007b2a <ff_convert+0x2a>
{
 8007b06:	b410      	push	{r4}
 8007b08:	4a0e      	ldr	r2, [pc, #56]	; (8007b44 <ff_convert+0x44>)
		if (dir) {		/* OEMCP to Unicode */
 8007b0a:	23c7      	movs	r3, #199	; 0xc7
 8007b0c:	e003      	b.n	8007b16 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007b0e:	2980      	cmp	r1, #128	; 0x80
 8007b10:	d015      	beq.n	8007b3e <ff_convert+0x3e>
 8007b12:	f832 3f02 	ldrh.w	r3, [r2, #2]!
				if (chr == Tbl[c]) break;
 8007b16:	4298      	cmp	r0, r3
 8007b18:	b28c      	uxth	r4, r1
 8007b1a:	f101 0101 	add.w	r1, r1, #1
 8007b1e:	d1f6      	bne.n	8007b0e <ff_convert+0xe>
 8007b20:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8007b24:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8007b26:	bc10      	pop	{r4}
 8007b28:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007b2a:	28ff      	cmp	r0, #255	; 0xff
 8007b2c:	d805      	bhi.n	8007b3a <ff_convert+0x3a>
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <ff_convert+0x44>)
 8007b30:	3880      	subs	r0, #128	; 0x80
 8007b32:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8007b36:	4770      	bx	lr
}
 8007b38:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	4770      	bx	lr
 8007b3e:	2000      	movs	r0, #0
 8007b40:	e7f1      	b.n	8007b26 <ff_convert+0x26>
 8007b42:	bf00      	nop
 8007b44:	08008ff4 	.word	0x08008ff4

08007b48 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007b48:	2861      	cmp	r0, #97	; 0x61
 8007b4a:	d00e      	beq.n	8007b6a <ff_wtoupper+0x22>
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	2362      	movs	r3, #98	; 0x62
 8007b50:	4907      	ldr	r1, [pc, #28]	; (8007b70 <ff_wtoupper+0x28>)
 8007b52:	4283      	cmp	r3, r0
 8007b54:	d005      	beq.n	8007b62 <ff_wtoupper+0x1a>
 8007b56:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8007b5a:	3201      	adds	r2, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f8      	bne.n	8007b52 <ff_wtoupper+0xa>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
 8007b60:	4770      	bx	lr
 8007b62:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <ff_wtoupper+0x2c>)
 8007b64:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8007b68:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007b6a:	2041      	movs	r0, #65	; 0x41
	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007b6c:	e7f8      	b.n	8007b60 <ff_wtoupper+0x18>
 8007b6e:	bf00      	nop
 8007b70:	080090f6 	.word	0x080090f6
 8007b74:	080092d4 	.word	0x080092d4

08007b78 <__errno>:
 8007b78:	4b01      	ldr	r3, [pc, #4]	; (8007b80 <__errno+0x8>)
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	20000024 	.word	0x20000024

08007b84 <__libc_init_array>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	2500      	movs	r5, #0
 8007b88:	4e0c      	ldr	r6, [pc, #48]	; (8007bbc <__libc_init_array+0x38>)
 8007b8a:	4c0d      	ldr	r4, [pc, #52]	; (8007bc0 <__libc_init_array+0x3c>)
 8007b8c:	1ba4      	subs	r4, r4, r6
 8007b8e:	10a4      	asrs	r4, r4, #2
 8007b90:	42a5      	cmp	r5, r4
 8007b92:	d109      	bne.n	8007ba8 <__libc_init_array+0x24>
 8007b94:	f000 fcea 	bl	800856c <_init>
 8007b98:	2500      	movs	r5, #0
 8007b9a:	4e0a      	ldr	r6, [pc, #40]	; (8007bc4 <__libc_init_array+0x40>)
 8007b9c:	4c0a      	ldr	r4, [pc, #40]	; (8007bc8 <__libc_init_array+0x44>)
 8007b9e:	1ba4      	subs	r4, r4, r6
 8007ba0:	10a4      	asrs	r4, r4, #2
 8007ba2:	42a5      	cmp	r5, r4
 8007ba4:	d105      	bne.n	8007bb2 <__libc_init_array+0x2e>
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
 8007ba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bac:	4798      	blx	r3
 8007bae:	3501      	adds	r5, #1
 8007bb0:	e7ee      	b.n	8007b90 <__libc_init_array+0xc>
 8007bb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bb6:	4798      	blx	r3
 8007bb8:	3501      	adds	r5, #1
 8007bba:	e7f2      	b.n	8007ba2 <__libc_init_array+0x1e>
 8007bbc:	08009654 	.word	0x08009654
 8007bc0:	08009654 	.word	0x08009654
 8007bc4:	08009654 	.word	0x08009654
 8007bc8:	08009658 	.word	0x08009658

08007bcc <memcpy>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	1e43      	subs	r3, r0, #1
 8007bd0:	440a      	add	r2, r1
 8007bd2:	4291      	cmp	r1, r2
 8007bd4:	d100      	bne.n	8007bd8 <memcpy+0xc>
 8007bd6:	bd10      	pop	{r4, pc}
 8007bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007be0:	e7f7      	b.n	8007bd2 <memcpy+0x6>

08007be2 <memset>:
 8007be2:	4603      	mov	r3, r0
 8007be4:	4402      	add	r2, r0
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d100      	bne.n	8007bec <memset+0xa>
 8007bea:	4770      	bx	lr
 8007bec:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf0:	e7f9      	b.n	8007be6 <memset+0x4>
	...

08007bf4 <siprintf>:
 8007bf4:	b40e      	push	{r1, r2, r3}
 8007bf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bfa:	b500      	push	{lr}
 8007bfc:	b09c      	sub	sp, #112	; 0x70
 8007bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8007c00:	9002      	str	r0, [sp, #8]
 8007c02:	9006      	str	r0, [sp, #24]
 8007c04:	9107      	str	r1, [sp, #28]
 8007c06:	9104      	str	r1, [sp, #16]
 8007c08:	4808      	ldr	r0, [pc, #32]	; (8007c2c <siprintf+0x38>)
 8007c0a:	4909      	ldr	r1, [pc, #36]	; (8007c30 <siprintf+0x3c>)
 8007c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c10:	9105      	str	r1, [sp, #20]
 8007c12:	6800      	ldr	r0, [r0, #0]
 8007c14:	a902      	add	r1, sp, #8
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	f000 f968 	bl	8007eec <_svfiprintf_r>
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	9b02      	ldr	r3, [sp, #8]
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	b01c      	add	sp, #112	; 0x70
 8007c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c28:	b003      	add	sp, #12
 8007c2a:	4770      	bx	lr
 8007c2c:	20000024 	.word	0x20000024
 8007c30:	ffff0208 	.word	0xffff0208

08007c34 <_strtol_l.isra.0>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4689      	mov	r9, r1
 8007c3c:	4692      	mov	sl, r2
 8007c3e:	461e      	mov	r6, r3
 8007c40:	460f      	mov	r7, r1
 8007c42:	463d      	mov	r5, r7
 8007c44:	9808      	ldr	r0, [sp, #32]
 8007c46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c4a:	f000 f885 	bl	8007d58 <__locale_ctype_ptr_l>
 8007c4e:	4420      	add	r0, r4
 8007c50:	7843      	ldrb	r3, [r0, #1]
 8007c52:	f013 0308 	ands.w	r3, r3, #8
 8007c56:	d132      	bne.n	8007cbe <_strtol_l.isra.0+0x8a>
 8007c58:	2c2d      	cmp	r4, #45	; 0x2d
 8007c5a:	d132      	bne.n	8007cc2 <_strtol_l.isra.0+0x8e>
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	787c      	ldrb	r4, [r7, #1]
 8007c60:	1cbd      	adds	r5, r7, #2
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	d05d      	beq.n	8007d22 <_strtol_l.isra.0+0xee>
 8007c66:	2e10      	cmp	r6, #16
 8007c68:	d109      	bne.n	8007c7e <_strtol_l.isra.0+0x4a>
 8007c6a:	2c30      	cmp	r4, #48	; 0x30
 8007c6c:	d107      	bne.n	8007c7e <_strtol_l.isra.0+0x4a>
 8007c6e:	782b      	ldrb	r3, [r5, #0]
 8007c70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c74:	2b58      	cmp	r3, #88	; 0x58
 8007c76:	d14f      	bne.n	8007d18 <_strtol_l.isra.0+0xe4>
 8007c78:	2610      	movs	r6, #16
 8007c7a:	786c      	ldrb	r4, [r5, #1]
 8007c7c:	3502      	adds	r5, #2
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	bf14      	ite	ne
 8007c82:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007c86:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007c8a:	2700      	movs	r7, #0
 8007c8c:	fbb1 fcf6 	udiv	ip, r1, r6
 8007c90:	4638      	mov	r0, r7
 8007c92:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007c96:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d817      	bhi.n	8007cce <_strtol_l.isra.0+0x9a>
 8007c9e:	461c      	mov	r4, r3
 8007ca0:	42a6      	cmp	r6, r4
 8007ca2:	dd23      	ble.n	8007cec <_strtol_l.isra.0+0xb8>
 8007ca4:	1c7b      	adds	r3, r7, #1
 8007ca6:	d007      	beq.n	8007cb8 <_strtol_l.isra.0+0x84>
 8007ca8:	4584      	cmp	ip, r0
 8007caa:	d31c      	bcc.n	8007ce6 <_strtol_l.isra.0+0xb2>
 8007cac:	d101      	bne.n	8007cb2 <_strtol_l.isra.0+0x7e>
 8007cae:	45a6      	cmp	lr, r4
 8007cb0:	db19      	blt.n	8007ce6 <_strtol_l.isra.0+0xb2>
 8007cb2:	2701      	movs	r7, #1
 8007cb4:	fb00 4006 	mla	r0, r0, r6, r4
 8007cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cbc:	e7eb      	b.n	8007c96 <_strtol_l.isra.0+0x62>
 8007cbe:	462f      	mov	r7, r5
 8007cc0:	e7bf      	b.n	8007c42 <_strtol_l.isra.0+0xe>
 8007cc2:	2c2b      	cmp	r4, #43	; 0x2b
 8007cc4:	bf04      	itt	eq
 8007cc6:	1cbd      	addeq	r5, r7, #2
 8007cc8:	787c      	ldrbeq	r4, [r7, #1]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	e7c9      	b.n	8007c62 <_strtol_l.isra.0+0x2e>
 8007cce:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007cd2:	2b19      	cmp	r3, #25
 8007cd4:	d801      	bhi.n	8007cda <_strtol_l.isra.0+0xa6>
 8007cd6:	3c37      	subs	r4, #55	; 0x37
 8007cd8:	e7e2      	b.n	8007ca0 <_strtol_l.isra.0+0x6c>
 8007cda:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007cde:	2b19      	cmp	r3, #25
 8007ce0:	d804      	bhi.n	8007cec <_strtol_l.isra.0+0xb8>
 8007ce2:	3c57      	subs	r4, #87	; 0x57
 8007ce4:	e7dc      	b.n	8007ca0 <_strtol_l.isra.0+0x6c>
 8007ce6:	f04f 37ff 	mov.w	r7, #4294967295
 8007cea:	e7e5      	b.n	8007cb8 <_strtol_l.isra.0+0x84>
 8007cec:	1c7b      	adds	r3, r7, #1
 8007cee:	d108      	bne.n	8007d02 <_strtol_l.isra.0+0xce>
 8007cf0:	2322      	movs	r3, #34	; 0x22
 8007cf2:	4608      	mov	r0, r1
 8007cf4:	f8c8 3000 	str.w	r3, [r8]
 8007cf8:	f1ba 0f00 	cmp.w	sl, #0
 8007cfc:	d107      	bne.n	8007d0e <_strtol_l.isra.0+0xda>
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	b102      	cbz	r2, 8007d06 <_strtol_l.isra.0+0xd2>
 8007d04:	4240      	negs	r0, r0
 8007d06:	f1ba 0f00 	cmp.w	sl, #0
 8007d0a:	d0f8      	beq.n	8007cfe <_strtol_l.isra.0+0xca>
 8007d0c:	b10f      	cbz	r7, 8007d12 <_strtol_l.isra.0+0xde>
 8007d0e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d12:	f8ca 9000 	str.w	r9, [sl]
 8007d16:	e7f2      	b.n	8007cfe <_strtol_l.isra.0+0xca>
 8007d18:	2430      	movs	r4, #48	; 0x30
 8007d1a:	2e00      	cmp	r6, #0
 8007d1c:	d1af      	bne.n	8007c7e <_strtol_l.isra.0+0x4a>
 8007d1e:	2608      	movs	r6, #8
 8007d20:	e7ad      	b.n	8007c7e <_strtol_l.isra.0+0x4a>
 8007d22:	2c30      	cmp	r4, #48	; 0x30
 8007d24:	d0a3      	beq.n	8007c6e <_strtol_l.isra.0+0x3a>
 8007d26:	260a      	movs	r6, #10
 8007d28:	e7a9      	b.n	8007c7e <_strtol_l.isra.0+0x4a>
	...

08007d2c <strtol>:
 8007d2c:	4b08      	ldr	r3, [pc, #32]	; (8007d50 <strtol+0x24>)
 8007d2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d30:	681c      	ldr	r4, [r3, #0]
 8007d32:	4d08      	ldr	r5, [pc, #32]	; (8007d54 <strtol+0x28>)
 8007d34:	6a23      	ldr	r3, [r4, #32]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bf08      	it	eq
 8007d3a:	462b      	moveq	r3, r5
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	460a      	mov	r2, r1
 8007d42:	4601      	mov	r1, r0
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff ff75 	bl	8007c34 <_strtol_l.isra.0>
 8007d4a:	b003      	add	sp, #12
 8007d4c:	bd30      	pop	{r4, r5, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000024 	.word	0x20000024
 8007d54:	20000088 	.word	0x20000088

08007d58 <__locale_ctype_ptr_l>:
 8007d58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007d5c:	4770      	bx	lr

08007d5e <__ascii_mbtowc>:
 8007d5e:	b082      	sub	sp, #8
 8007d60:	b901      	cbnz	r1, 8007d64 <__ascii_mbtowc+0x6>
 8007d62:	a901      	add	r1, sp, #4
 8007d64:	b142      	cbz	r2, 8007d78 <__ascii_mbtowc+0x1a>
 8007d66:	b14b      	cbz	r3, 8007d7c <__ascii_mbtowc+0x1e>
 8007d68:	7813      	ldrb	r3, [r2, #0]
 8007d6a:	600b      	str	r3, [r1, #0]
 8007d6c:	7812      	ldrb	r2, [r2, #0]
 8007d6e:	1c10      	adds	r0, r2, #0
 8007d70:	bf18      	it	ne
 8007d72:	2001      	movne	r0, #1
 8007d74:	b002      	add	sp, #8
 8007d76:	4770      	bx	lr
 8007d78:	4610      	mov	r0, r2
 8007d7a:	e7fb      	b.n	8007d74 <__ascii_mbtowc+0x16>
 8007d7c:	f06f 0001 	mvn.w	r0, #1
 8007d80:	e7f8      	b.n	8007d74 <__ascii_mbtowc+0x16>
	...

08007d84 <_malloc_r>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	1ccd      	adds	r5, r1, #3
 8007d88:	f025 0503 	bic.w	r5, r5, #3
 8007d8c:	3508      	adds	r5, #8
 8007d8e:	2d0c      	cmp	r5, #12
 8007d90:	bf38      	it	cc
 8007d92:	250c      	movcc	r5, #12
 8007d94:	2d00      	cmp	r5, #0
 8007d96:	4606      	mov	r6, r0
 8007d98:	db01      	blt.n	8007d9e <_malloc_r+0x1a>
 8007d9a:	42a9      	cmp	r1, r5
 8007d9c:	d903      	bls.n	8007da6 <_malloc_r+0x22>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	6033      	str	r3, [r6, #0]
 8007da2:	2000      	movs	r0, #0
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	f000 fb65 	bl	8008474 <__malloc_lock>
 8007daa:	4a21      	ldr	r2, [pc, #132]	; (8007e30 <_malloc_r+0xac>)
 8007dac:	6814      	ldr	r4, [r2, #0]
 8007dae:	4621      	mov	r1, r4
 8007db0:	b991      	cbnz	r1, 8007dd8 <_malloc_r+0x54>
 8007db2:	4c20      	ldr	r4, [pc, #128]	; (8007e34 <_malloc_r+0xb0>)
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	b91b      	cbnz	r3, 8007dc0 <_malloc_r+0x3c>
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 fb17 	bl	80083ec <_sbrk_r>
 8007dbe:	6020      	str	r0, [r4, #0]
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f000 fb12 	bl	80083ec <_sbrk_r>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d124      	bne.n	8007e16 <_malloc_r+0x92>
 8007dcc:	230c      	movs	r3, #12
 8007dce:	4630      	mov	r0, r6
 8007dd0:	6033      	str	r3, [r6, #0]
 8007dd2:	f000 fb50 	bl	8008476 <__malloc_unlock>
 8007dd6:	e7e4      	b.n	8007da2 <_malloc_r+0x1e>
 8007dd8:	680b      	ldr	r3, [r1, #0]
 8007dda:	1b5b      	subs	r3, r3, r5
 8007ddc:	d418      	bmi.n	8007e10 <_malloc_r+0x8c>
 8007dde:	2b0b      	cmp	r3, #11
 8007de0:	d90f      	bls.n	8007e02 <_malloc_r+0x7e>
 8007de2:	600b      	str	r3, [r1, #0]
 8007de4:	18cc      	adds	r4, r1, r3
 8007de6:	50cd      	str	r5, [r1, r3]
 8007de8:	4630      	mov	r0, r6
 8007dea:	f000 fb44 	bl	8008476 <__malloc_unlock>
 8007dee:	f104 000b 	add.w	r0, r4, #11
 8007df2:	1d23      	adds	r3, r4, #4
 8007df4:	f020 0007 	bic.w	r0, r0, #7
 8007df8:	1ac3      	subs	r3, r0, r3
 8007dfa:	d0d3      	beq.n	8007da4 <_malloc_r+0x20>
 8007dfc:	425a      	negs	r2, r3
 8007dfe:	50e2      	str	r2, [r4, r3]
 8007e00:	e7d0      	b.n	8007da4 <_malloc_r+0x20>
 8007e02:	684b      	ldr	r3, [r1, #4]
 8007e04:	428c      	cmp	r4, r1
 8007e06:	bf16      	itet	ne
 8007e08:	6063      	strne	r3, [r4, #4]
 8007e0a:	6013      	streq	r3, [r2, #0]
 8007e0c:	460c      	movne	r4, r1
 8007e0e:	e7eb      	b.n	8007de8 <_malloc_r+0x64>
 8007e10:	460c      	mov	r4, r1
 8007e12:	6849      	ldr	r1, [r1, #4]
 8007e14:	e7cc      	b.n	8007db0 <_malloc_r+0x2c>
 8007e16:	1cc4      	adds	r4, r0, #3
 8007e18:	f024 0403 	bic.w	r4, r4, #3
 8007e1c:	42a0      	cmp	r0, r4
 8007e1e:	d005      	beq.n	8007e2c <_malloc_r+0xa8>
 8007e20:	1a21      	subs	r1, r4, r0
 8007e22:	4630      	mov	r0, r6
 8007e24:	f000 fae2 	bl	80083ec <_sbrk_r>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d0cf      	beq.n	8007dcc <_malloc_r+0x48>
 8007e2c:	6025      	str	r5, [r4, #0]
 8007e2e:	e7db      	b.n	8007de8 <_malloc_r+0x64>
 8007e30:	20000874 	.word	0x20000874
 8007e34:	20000878 	.word	0x20000878

08007e38 <__ssputs_r>:
 8007e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e3c:	688e      	ldr	r6, [r1, #8]
 8007e3e:	4682      	mov	sl, r0
 8007e40:	429e      	cmp	r6, r3
 8007e42:	460c      	mov	r4, r1
 8007e44:	4690      	mov	r8, r2
 8007e46:	4699      	mov	r9, r3
 8007e48:	d837      	bhi.n	8007eba <__ssputs_r+0x82>
 8007e4a:	898a      	ldrh	r2, [r1, #12]
 8007e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e50:	d031      	beq.n	8007eb6 <__ssputs_r+0x7e>
 8007e52:	2302      	movs	r3, #2
 8007e54:	6825      	ldr	r5, [r4, #0]
 8007e56:	6909      	ldr	r1, [r1, #16]
 8007e58:	1a6f      	subs	r7, r5, r1
 8007e5a:	6965      	ldr	r5, [r4, #20]
 8007e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e60:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e64:	f109 0301 	add.w	r3, r9, #1
 8007e68:	443b      	add	r3, r7
 8007e6a:	429d      	cmp	r5, r3
 8007e6c:	bf38      	it	cc
 8007e6e:	461d      	movcc	r5, r3
 8007e70:	0553      	lsls	r3, r2, #21
 8007e72:	d530      	bpl.n	8007ed6 <__ssputs_r+0x9e>
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7ff ff85 	bl	8007d84 <_malloc_r>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	b950      	cbnz	r0, 8007e94 <__ssputs_r+0x5c>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	f8ca 3000 	str.w	r3, [sl]
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8e:	81a3      	strh	r3, [r4, #12]
 8007e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e94:	463a      	mov	r2, r7
 8007e96:	6921      	ldr	r1, [r4, #16]
 8007e98:	f7ff fe98 	bl	8007bcc <memcpy>
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	6126      	str	r6, [r4, #16]
 8007eaa:	443e      	add	r6, r7
 8007eac:	6026      	str	r6, [r4, #0]
 8007eae:	464e      	mov	r6, r9
 8007eb0:	6165      	str	r5, [r4, #20]
 8007eb2:	1bed      	subs	r5, r5, r7
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	454e      	cmp	r6, r9
 8007eb8:	d900      	bls.n	8007ebc <__ssputs_r+0x84>
 8007eba:	464e      	mov	r6, r9
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	6820      	ldr	r0, [r4, #0]
 8007ec2:	f000 fabe 	bl	8008442 <memmove>
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	2000      	movs	r0, #0
 8007eca:	1b9b      	subs	r3, r3, r6
 8007ecc:	60a3      	str	r3, [r4, #8]
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	441e      	add	r6, r3
 8007ed2:	6026      	str	r6, [r4, #0]
 8007ed4:	e7dc      	b.n	8007e90 <__ssputs_r+0x58>
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	f000 fb1a 	bl	8008510 <_realloc_r>
 8007edc:	4606      	mov	r6, r0
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d1e2      	bne.n	8007ea8 <__ssputs_r+0x70>
 8007ee2:	6921      	ldr	r1, [r4, #16]
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	f000 fac7 	bl	8008478 <_free_r>
 8007eea:	e7c8      	b.n	8007e7e <__ssputs_r+0x46>

08007eec <_svfiprintf_r>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	461d      	mov	r5, r3
 8007ef2:	898b      	ldrh	r3, [r1, #12]
 8007ef4:	b09d      	sub	sp, #116	; 0x74
 8007ef6:	061f      	lsls	r7, r3, #24
 8007ef8:	4680      	mov	r8, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	4616      	mov	r6, r2
 8007efe:	d50f      	bpl.n	8007f20 <_svfiprintf_r+0x34>
 8007f00:	690b      	ldr	r3, [r1, #16]
 8007f02:	b96b      	cbnz	r3, 8007f20 <_svfiprintf_r+0x34>
 8007f04:	2140      	movs	r1, #64	; 0x40
 8007f06:	f7ff ff3d 	bl	8007d84 <_malloc_r>
 8007f0a:	6020      	str	r0, [r4, #0]
 8007f0c:	6120      	str	r0, [r4, #16]
 8007f0e:	b928      	cbnz	r0, 8007f1c <_svfiprintf_r+0x30>
 8007f10:	230c      	movs	r3, #12
 8007f12:	f8c8 3000 	str.w	r3, [r8]
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1a:	e0c8      	b.n	80080ae <_svfiprintf_r+0x1c2>
 8007f1c:	2340      	movs	r3, #64	; 0x40
 8007f1e:	6163      	str	r3, [r4, #20]
 8007f20:	2300      	movs	r3, #0
 8007f22:	9309      	str	r3, [sp, #36]	; 0x24
 8007f24:	2320      	movs	r3, #32
 8007f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f2a:	2330      	movs	r3, #48	; 0x30
 8007f2c:	f04f 0b01 	mov.w	fp, #1
 8007f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f34:	9503      	str	r5, [sp, #12]
 8007f36:	4637      	mov	r7, r6
 8007f38:	463d      	mov	r5, r7
 8007f3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f3e:	b10b      	cbz	r3, 8007f44 <_svfiprintf_r+0x58>
 8007f40:	2b25      	cmp	r3, #37	; 0x25
 8007f42:	d13e      	bne.n	8007fc2 <_svfiprintf_r+0xd6>
 8007f44:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f48:	d00b      	beq.n	8007f62 <_svfiprintf_r+0x76>
 8007f4a:	4653      	mov	r3, sl
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4640      	mov	r0, r8
 8007f52:	f7ff ff71 	bl	8007e38 <__ssputs_r>
 8007f56:	3001      	adds	r0, #1
 8007f58:	f000 80a4 	beq.w	80080a4 <_svfiprintf_r+0x1b8>
 8007f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5e:	4453      	add	r3, sl
 8007f60:	9309      	str	r3, [sp, #36]	; 0x24
 8007f62:	783b      	ldrb	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 809d 	beq.w	80080a4 <_svfiprintf_r+0x1b8>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	9307      	str	r3, [sp, #28]
 8007f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f7e:	462f      	mov	r7, r5
 8007f80:	2205      	movs	r2, #5
 8007f82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f86:	4850      	ldr	r0, [pc, #320]	; (80080c8 <_svfiprintf_r+0x1dc>)
 8007f88:	f000 fa4d 	bl	8008426 <memchr>
 8007f8c:	9b04      	ldr	r3, [sp, #16]
 8007f8e:	b9d0      	cbnz	r0, 8007fc6 <_svfiprintf_r+0xda>
 8007f90:	06d9      	lsls	r1, r3, #27
 8007f92:	bf44      	itt	mi
 8007f94:	2220      	movmi	r2, #32
 8007f96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f9a:	071a      	lsls	r2, r3, #28
 8007f9c:	bf44      	itt	mi
 8007f9e:	222b      	movmi	r2, #43	; 0x2b
 8007fa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fa4:	782a      	ldrb	r2, [r5, #0]
 8007fa6:	2a2a      	cmp	r2, #42	; 0x2a
 8007fa8:	d015      	beq.n	8007fd6 <_svfiprintf_r+0xea>
 8007faa:	462f      	mov	r7, r5
 8007fac:	2000      	movs	r0, #0
 8007fae:	250a      	movs	r5, #10
 8007fb0:	9a07      	ldr	r2, [sp, #28]
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fb8:	3b30      	subs	r3, #48	; 0x30
 8007fba:	2b09      	cmp	r3, #9
 8007fbc:	d94d      	bls.n	800805a <_svfiprintf_r+0x16e>
 8007fbe:	b1b8      	cbz	r0, 8007ff0 <_svfiprintf_r+0x104>
 8007fc0:	e00f      	b.n	8007fe2 <_svfiprintf_r+0xf6>
 8007fc2:	462f      	mov	r7, r5
 8007fc4:	e7b8      	b.n	8007f38 <_svfiprintf_r+0x4c>
 8007fc6:	4a40      	ldr	r2, [pc, #256]	; (80080c8 <_svfiprintf_r+0x1dc>)
 8007fc8:	463d      	mov	r5, r7
 8007fca:	1a80      	subs	r0, r0, r2
 8007fcc:	fa0b f000 	lsl.w	r0, fp, r0
 8007fd0:	4318      	orrs	r0, r3
 8007fd2:	9004      	str	r0, [sp, #16]
 8007fd4:	e7d3      	b.n	8007f7e <_svfiprintf_r+0x92>
 8007fd6:	9a03      	ldr	r2, [sp, #12]
 8007fd8:	1d11      	adds	r1, r2, #4
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	9103      	str	r1, [sp, #12]
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	db01      	blt.n	8007fe6 <_svfiprintf_r+0xfa>
 8007fe2:	9207      	str	r2, [sp, #28]
 8007fe4:	e004      	b.n	8007ff0 <_svfiprintf_r+0x104>
 8007fe6:	4252      	negs	r2, r2
 8007fe8:	f043 0302 	orr.w	r3, r3, #2
 8007fec:	9207      	str	r2, [sp, #28]
 8007fee:	9304      	str	r3, [sp, #16]
 8007ff0:	783b      	ldrb	r3, [r7, #0]
 8007ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ff4:	d10c      	bne.n	8008010 <_svfiprintf_r+0x124>
 8007ff6:	787b      	ldrb	r3, [r7, #1]
 8007ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffa:	d133      	bne.n	8008064 <_svfiprintf_r+0x178>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	3702      	adds	r7, #2
 8008000:	1d1a      	adds	r2, r3, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	9203      	str	r2, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfb8      	it	lt
 800800a:	f04f 33ff 	movlt.w	r3, #4294967295
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	4d2e      	ldr	r5, [pc, #184]	; (80080cc <_svfiprintf_r+0x1e0>)
 8008012:	2203      	movs	r2, #3
 8008014:	7839      	ldrb	r1, [r7, #0]
 8008016:	4628      	mov	r0, r5
 8008018:	f000 fa05 	bl	8008426 <memchr>
 800801c:	b138      	cbz	r0, 800802e <_svfiprintf_r+0x142>
 800801e:	2340      	movs	r3, #64	; 0x40
 8008020:	1b40      	subs	r0, r0, r5
 8008022:	fa03 f000 	lsl.w	r0, r3, r0
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	3701      	adds	r7, #1
 800802a:	4303      	orrs	r3, r0
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	7839      	ldrb	r1, [r7, #0]
 8008030:	2206      	movs	r2, #6
 8008032:	4827      	ldr	r0, [pc, #156]	; (80080d0 <_svfiprintf_r+0x1e4>)
 8008034:	1c7e      	adds	r6, r7, #1
 8008036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800803a:	f000 f9f4 	bl	8008426 <memchr>
 800803e:	2800      	cmp	r0, #0
 8008040:	d038      	beq.n	80080b4 <_svfiprintf_r+0x1c8>
 8008042:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <_svfiprintf_r+0x1e8>)
 8008044:	bb13      	cbnz	r3, 800808c <_svfiprintf_r+0x1a0>
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	3307      	adds	r3, #7
 800804a:	f023 0307 	bic.w	r3, r3, #7
 800804e:	3308      	adds	r3, #8
 8008050:	9303      	str	r3, [sp, #12]
 8008052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008054:	444b      	add	r3, r9
 8008056:	9309      	str	r3, [sp, #36]	; 0x24
 8008058:	e76d      	b.n	8007f36 <_svfiprintf_r+0x4a>
 800805a:	fb05 3202 	mla	r2, r5, r2, r3
 800805e:	2001      	movs	r0, #1
 8008060:	460f      	mov	r7, r1
 8008062:	e7a6      	b.n	8007fb2 <_svfiprintf_r+0xc6>
 8008064:	2300      	movs	r3, #0
 8008066:	250a      	movs	r5, #10
 8008068:	4619      	mov	r1, r3
 800806a:	3701      	adds	r7, #1
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	4638      	mov	r0, r7
 8008070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008074:	3a30      	subs	r2, #48	; 0x30
 8008076:	2a09      	cmp	r2, #9
 8008078:	d903      	bls.n	8008082 <_svfiprintf_r+0x196>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0c8      	beq.n	8008010 <_svfiprintf_r+0x124>
 800807e:	9105      	str	r1, [sp, #20]
 8008080:	e7c6      	b.n	8008010 <_svfiprintf_r+0x124>
 8008082:	fb05 2101 	mla	r1, r5, r1, r2
 8008086:	2301      	movs	r3, #1
 8008088:	4607      	mov	r7, r0
 800808a:	e7f0      	b.n	800806e <_svfiprintf_r+0x182>
 800808c:	ab03      	add	r3, sp, #12
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	4622      	mov	r2, r4
 8008092:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <_svfiprintf_r+0x1ec>)
 8008094:	a904      	add	r1, sp, #16
 8008096:	4640      	mov	r0, r8
 8008098:	f3af 8000 	nop.w
 800809c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80080a0:	4681      	mov	r9, r0
 80080a2:	d1d6      	bne.n	8008052 <_svfiprintf_r+0x166>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	065b      	lsls	r3, r3, #25
 80080a8:	f53f af35 	bmi.w	8007f16 <_svfiprintf_r+0x2a>
 80080ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ae:	b01d      	add	sp, #116	; 0x74
 80080b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b4:	ab03      	add	r3, sp, #12
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	4622      	mov	r2, r4
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <_svfiprintf_r+0x1ec>)
 80080bc:	a904      	add	r1, sp, #16
 80080be:	4640      	mov	r0, r8
 80080c0:	f000 f882 	bl	80081c8 <_printf_i>
 80080c4:	e7ea      	b.n	800809c <_svfiprintf_r+0x1b0>
 80080c6:	bf00      	nop
 80080c8:	0800951e 	.word	0x0800951e
 80080cc:	08009524 	.word	0x08009524
 80080d0:	08009528 	.word	0x08009528
 80080d4:	00000000 	.word	0x00000000
 80080d8:	08007e39 	.word	0x08007e39

080080dc <_printf_common>:
 80080dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	4691      	mov	r9, r2
 80080e2:	461f      	mov	r7, r3
 80080e4:	688a      	ldr	r2, [r1, #8]
 80080e6:	690b      	ldr	r3, [r1, #16]
 80080e8:	4606      	mov	r6, r0
 80080ea:	4293      	cmp	r3, r2
 80080ec:	bfb8      	it	lt
 80080ee:	4613      	movlt	r3, r2
 80080f0:	f8c9 3000 	str.w	r3, [r9]
 80080f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080f8:	460c      	mov	r4, r1
 80080fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080fe:	b112      	cbz	r2, 8008106 <_printf_common+0x2a>
 8008100:	3301      	adds	r3, #1
 8008102:	f8c9 3000 	str.w	r3, [r9]
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	0699      	lsls	r1, r3, #26
 800810a:	bf42      	ittt	mi
 800810c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008110:	3302      	addmi	r3, #2
 8008112:	f8c9 3000 	strmi.w	r3, [r9]
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	f015 0506 	ands.w	r5, r5, #6
 800811c:	d107      	bne.n	800812e <_printf_common+0x52>
 800811e:	f104 0a19 	add.w	sl, r4, #25
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	f8d9 2000 	ldr.w	r2, [r9]
 8008128:	1a9b      	subs	r3, r3, r2
 800812a:	42ab      	cmp	r3, r5
 800812c:	dc29      	bgt.n	8008182 <_printf_common+0xa6>
 800812e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	3300      	adds	r3, #0
 8008136:	bf18      	it	ne
 8008138:	2301      	movne	r3, #1
 800813a:	0692      	lsls	r2, r2, #26
 800813c:	d42e      	bmi.n	800819c <_printf_common+0xc0>
 800813e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008142:	4639      	mov	r1, r7
 8008144:	4630      	mov	r0, r6
 8008146:	47c0      	blx	r8
 8008148:	3001      	adds	r0, #1
 800814a:	d021      	beq.n	8008190 <_printf_common+0xb4>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	68e5      	ldr	r5, [r4, #12]
 8008150:	f003 0306 	and.w	r3, r3, #6
 8008154:	2b04      	cmp	r3, #4
 8008156:	bf18      	it	ne
 8008158:	2500      	movne	r5, #0
 800815a:	f8d9 2000 	ldr.w	r2, [r9]
 800815e:	f04f 0900 	mov.w	r9, #0
 8008162:	bf08      	it	eq
 8008164:	1aad      	subeq	r5, r5, r2
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	6922      	ldr	r2, [r4, #16]
 800816a:	bf08      	it	eq
 800816c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008170:	4293      	cmp	r3, r2
 8008172:	bfc4      	itt	gt
 8008174:	1a9b      	subgt	r3, r3, r2
 8008176:	18ed      	addgt	r5, r5, r3
 8008178:	341a      	adds	r4, #26
 800817a:	454d      	cmp	r5, r9
 800817c:	d11a      	bne.n	80081b4 <_printf_common+0xd8>
 800817e:	2000      	movs	r0, #0
 8008180:	e008      	b.n	8008194 <_printf_common+0xb8>
 8008182:	2301      	movs	r3, #1
 8008184:	4652      	mov	r2, sl
 8008186:	4639      	mov	r1, r7
 8008188:	4630      	mov	r0, r6
 800818a:	47c0      	blx	r8
 800818c:	3001      	adds	r0, #1
 800818e:	d103      	bne.n	8008198 <_printf_common+0xbc>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008198:	3501      	adds	r5, #1
 800819a:	e7c2      	b.n	8008122 <_printf_common+0x46>
 800819c:	2030      	movs	r0, #48	; 0x30
 800819e:	18e1      	adds	r1, r4, r3
 80081a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081aa:	4422      	add	r2, r4
 80081ac:	3302      	adds	r3, #2
 80081ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081b2:	e7c4      	b.n	800813e <_printf_common+0x62>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4622      	mov	r2, r4
 80081b8:	4639      	mov	r1, r7
 80081ba:	4630      	mov	r0, r6
 80081bc:	47c0      	blx	r8
 80081be:	3001      	adds	r0, #1
 80081c0:	d0e6      	beq.n	8008190 <_printf_common+0xb4>
 80081c2:	f109 0901 	add.w	r9, r9, #1
 80081c6:	e7d8      	b.n	800817a <_printf_common+0x9e>

080081c8 <_printf_i>:
 80081c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081d0:	460c      	mov	r4, r1
 80081d2:	7e09      	ldrb	r1, [r1, #24]
 80081d4:	b085      	sub	sp, #20
 80081d6:	296e      	cmp	r1, #110	; 0x6e
 80081d8:	4617      	mov	r7, r2
 80081da:	4606      	mov	r6, r0
 80081dc:	4698      	mov	r8, r3
 80081de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081e0:	f000 80b3 	beq.w	800834a <_printf_i+0x182>
 80081e4:	d822      	bhi.n	800822c <_printf_i+0x64>
 80081e6:	2963      	cmp	r1, #99	; 0x63
 80081e8:	d036      	beq.n	8008258 <_printf_i+0x90>
 80081ea:	d80a      	bhi.n	8008202 <_printf_i+0x3a>
 80081ec:	2900      	cmp	r1, #0
 80081ee:	f000 80b9 	beq.w	8008364 <_printf_i+0x19c>
 80081f2:	2958      	cmp	r1, #88	; 0x58
 80081f4:	f000 8083 	beq.w	80082fe <_printf_i+0x136>
 80081f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008200:	e032      	b.n	8008268 <_printf_i+0xa0>
 8008202:	2964      	cmp	r1, #100	; 0x64
 8008204:	d001      	beq.n	800820a <_printf_i+0x42>
 8008206:	2969      	cmp	r1, #105	; 0x69
 8008208:	d1f6      	bne.n	80081f8 <_printf_i+0x30>
 800820a:	6820      	ldr	r0, [r4, #0]
 800820c:	6813      	ldr	r3, [r2, #0]
 800820e:	0605      	lsls	r5, r0, #24
 8008210:	f103 0104 	add.w	r1, r3, #4
 8008214:	d52a      	bpl.n	800826c <_printf_i+0xa4>
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6011      	str	r1, [r2, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	da03      	bge.n	8008226 <_printf_i+0x5e>
 800821e:	222d      	movs	r2, #45	; 0x2d
 8008220:	425b      	negs	r3, r3
 8008222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008226:	486f      	ldr	r0, [pc, #444]	; (80083e4 <_printf_i+0x21c>)
 8008228:	220a      	movs	r2, #10
 800822a:	e039      	b.n	80082a0 <_printf_i+0xd8>
 800822c:	2973      	cmp	r1, #115	; 0x73
 800822e:	f000 809d 	beq.w	800836c <_printf_i+0x1a4>
 8008232:	d808      	bhi.n	8008246 <_printf_i+0x7e>
 8008234:	296f      	cmp	r1, #111	; 0x6f
 8008236:	d020      	beq.n	800827a <_printf_i+0xb2>
 8008238:	2970      	cmp	r1, #112	; 0x70
 800823a:	d1dd      	bne.n	80081f8 <_printf_i+0x30>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	f043 0320 	orr.w	r3, r3, #32
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	e003      	b.n	800824e <_printf_i+0x86>
 8008246:	2975      	cmp	r1, #117	; 0x75
 8008248:	d017      	beq.n	800827a <_printf_i+0xb2>
 800824a:	2978      	cmp	r1, #120	; 0x78
 800824c:	d1d4      	bne.n	80081f8 <_printf_i+0x30>
 800824e:	2378      	movs	r3, #120	; 0x78
 8008250:	4865      	ldr	r0, [pc, #404]	; (80083e8 <_printf_i+0x220>)
 8008252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008256:	e055      	b.n	8008304 <_printf_i+0x13c>
 8008258:	6813      	ldr	r3, [r2, #0]
 800825a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800825e:	1d19      	adds	r1, r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6011      	str	r1, [r2, #0]
 8008264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008268:	2301      	movs	r3, #1
 800826a:	e08c      	b.n	8008386 <_printf_i+0x1be>
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008272:	6011      	str	r1, [r2, #0]
 8008274:	bf18      	it	ne
 8008276:	b21b      	sxthne	r3, r3
 8008278:	e7cf      	b.n	800821a <_printf_i+0x52>
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	6825      	ldr	r5, [r4, #0]
 800827e:	1d18      	adds	r0, r3, #4
 8008280:	6010      	str	r0, [r2, #0]
 8008282:	0628      	lsls	r0, r5, #24
 8008284:	d501      	bpl.n	800828a <_printf_i+0xc2>
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	e002      	b.n	8008290 <_printf_i+0xc8>
 800828a:	0668      	lsls	r0, r5, #25
 800828c:	d5fb      	bpl.n	8008286 <_printf_i+0xbe>
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	296f      	cmp	r1, #111	; 0x6f
 8008292:	bf14      	ite	ne
 8008294:	220a      	movne	r2, #10
 8008296:	2208      	moveq	r2, #8
 8008298:	4852      	ldr	r0, [pc, #328]	; (80083e4 <_printf_i+0x21c>)
 800829a:	2100      	movs	r1, #0
 800829c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082a0:	6865      	ldr	r5, [r4, #4]
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	60a5      	str	r5, [r4, #8]
 80082a6:	f2c0 8095 	blt.w	80083d4 <_printf_i+0x20c>
 80082aa:	6821      	ldr	r1, [r4, #0]
 80082ac:	f021 0104 	bic.w	r1, r1, #4
 80082b0:	6021      	str	r1, [r4, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d13d      	bne.n	8008332 <_printf_i+0x16a>
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	f040 808e 	bne.w	80083d8 <_printf_i+0x210>
 80082bc:	4665      	mov	r5, ip
 80082be:	2a08      	cmp	r2, #8
 80082c0:	d10b      	bne.n	80082da <_printf_i+0x112>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	07db      	lsls	r3, r3, #31
 80082c6:	d508      	bpl.n	80082da <_printf_i+0x112>
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	6862      	ldr	r2, [r4, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	bfde      	ittt	le
 80082d0:	2330      	movle	r3, #48	; 0x30
 80082d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082da:	ebac 0305 	sub.w	r3, ip, r5
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	f8cd 8000 	str.w	r8, [sp]
 80082e4:	463b      	mov	r3, r7
 80082e6:	aa03      	add	r2, sp, #12
 80082e8:	4621      	mov	r1, r4
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff fef6 	bl	80080dc <_printf_common>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d14d      	bne.n	8008390 <_printf_i+0x1c8>
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	b005      	add	sp, #20
 80082fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082fe:	4839      	ldr	r0, [pc, #228]	; (80083e4 <_printf_i+0x21c>)
 8008300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008304:	6813      	ldr	r3, [r2, #0]
 8008306:	6821      	ldr	r1, [r4, #0]
 8008308:	1d1d      	adds	r5, r3, #4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6015      	str	r5, [r2, #0]
 800830e:	060a      	lsls	r2, r1, #24
 8008310:	d50b      	bpl.n	800832a <_printf_i+0x162>
 8008312:	07ca      	lsls	r2, r1, #31
 8008314:	bf44      	itt	mi
 8008316:	f041 0120 	orrmi.w	r1, r1, #32
 800831a:	6021      	strmi	r1, [r4, #0]
 800831c:	b91b      	cbnz	r3, 8008326 <_printf_i+0x15e>
 800831e:	6822      	ldr	r2, [r4, #0]
 8008320:	f022 0220 	bic.w	r2, r2, #32
 8008324:	6022      	str	r2, [r4, #0]
 8008326:	2210      	movs	r2, #16
 8008328:	e7b7      	b.n	800829a <_printf_i+0xd2>
 800832a:	064d      	lsls	r5, r1, #25
 800832c:	bf48      	it	mi
 800832e:	b29b      	uxthmi	r3, r3
 8008330:	e7ef      	b.n	8008312 <_printf_i+0x14a>
 8008332:	4665      	mov	r5, ip
 8008334:	fbb3 f1f2 	udiv	r1, r3, r2
 8008338:	fb02 3311 	mls	r3, r2, r1, r3
 800833c:	5cc3      	ldrb	r3, [r0, r3]
 800833e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008342:	460b      	mov	r3, r1
 8008344:	2900      	cmp	r1, #0
 8008346:	d1f5      	bne.n	8008334 <_printf_i+0x16c>
 8008348:	e7b9      	b.n	80082be <_printf_i+0xf6>
 800834a:	6813      	ldr	r3, [r2, #0]
 800834c:	6825      	ldr	r5, [r4, #0]
 800834e:	1d18      	adds	r0, r3, #4
 8008350:	6961      	ldr	r1, [r4, #20]
 8008352:	6010      	str	r0, [r2, #0]
 8008354:	0628      	lsls	r0, r5, #24
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	d501      	bpl.n	800835e <_printf_i+0x196>
 800835a:	6019      	str	r1, [r3, #0]
 800835c:	e002      	b.n	8008364 <_printf_i+0x19c>
 800835e:	066a      	lsls	r2, r5, #25
 8008360:	d5fb      	bpl.n	800835a <_printf_i+0x192>
 8008362:	8019      	strh	r1, [r3, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	4665      	mov	r5, ip
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	e7b9      	b.n	80082e0 <_printf_i+0x118>
 800836c:	6813      	ldr	r3, [r2, #0]
 800836e:	1d19      	adds	r1, r3, #4
 8008370:	6011      	str	r1, [r2, #0]
 8008372:	681d      	ldr	r5, [r3, #0]
 8008374:	6862      	ldr	r2, [r4, #4]
 8008376:	2100      	movs	r1, #0
 8008378:	4628      	mov	r0, r5
 800837a:	f000 f854 	bl	8008426 <memchr>
 800837e:	b108      	cbz	r0, 8008384 <_printf_i+0x1bc>
 8008380:	1b40      	subs	r0, r0, r5
 8008382:	6060      	str	r0, [r4, #4]
 8008384:	6863      	ldr	r3, [r4, #4]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	2300      	movs	r3, #0
 800838a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800838e:	e7a7      	b.n	80082e0 <_printf_i+0x118>
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	462a      	mov	r2, r5
 8008394:	4639      	mov	r1, r7
 8008396:	4630      	mov	r0, r6
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d0aa      	beq.n	80082f4 <_printf_i+0x12c>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	079b      	lsls	r3, r3, #30
 80083a2:	d413      	bmi.n	80083cc <_printf_i+0x204>
 80083a4:	68e0      	ldr	r0, [r4, #12]
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	4298      	cmp	r0, r3
 80083aa:	bfb8      	it	lt
 80083ac:	4618      	movlt	r0, r3
 80083ae:	e7a3      	b.n	80082f8 <_printf_i+0x130>
 80083b0:	2301      	movs	r3, #1
 80083b2:	464a      	mov	r2, r9
 80083b4:	4639      	mov	r1, r7
 80083b6:	4630      	mov	r0, r6
 80083b8:	47c0      	blx	r8
 80083ba:	3001      	adds	r0, #1
 80083bc:	d09a      	beq.n	80082f4 <_printf_i+0x12c>
 80083be:	3501      	adds	r5, #1
 80083c0:	68e3      	ldr	r3, [r4, #12]
 80083c2:	9a03      	ldr	r2, [sp, #12]
 80083c4:	1a9b      	subs	r3, r3, r2
 80083c6:	42ab      	cmp	r3, r5
 80083c8:	dcf2      	bgt.n	80083b0 <_printf_i+0x1e8>
 80083ca:	e7eb      	b.n	80083a4 <_printf_i+0x1dc>
 80083cc:	2500      	movs	r5, #0
 80083ce:	f104 0919 	add.w	r9, r4, #25
 80083d2:	e7f5      	b.n	80083c0 <_printf_i+0x1f8>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1ac      	bne.n	8008332 <_printf_i+0x16a>
 80083d8:	7803      	ldrb	r3, [r0, #0]
 80083da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083e2:	e76c      	b.n	80082be <_printf_i+0xf6>
 80083e4:	0800952f 	.word	0x0800952f
 80083e8:	08009540 	.word	0x08009540

080083ec <_sbrk_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	2300      	movs	r3, #0
 80083f0:	4c05      	ldr	r4, [pc, #20]	; (8008408 <_sbrk_r+0x1c>)
 80083f2:	4605      	mov	r5, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	f7f9 fc38 	bl	8001c6c <_sbrk>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_sbrk_r+0x1a>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	b103      	cbz	r3, 8008406 <_sbrk_r+0x1a>
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20002d58 	.word	0x20002d58

0800840c <__ascii_wctomb>:
 800840c:	b149      	cbz	r1, 8008422 <__ascii_wctomb+0x16>
 800840e:	2aff      	cmp	r2, #255	; 0xff
 8008410:	bf8b      	itete	hi
 8008412:	238a      	movhi	r3, #138	; 0x8a
 8008414:	700a      	strbls	r2, [r1, #0]
 8008416:	6003      	strhi	r3, [r0, #0]
 8008418:	2001      	movls	r0, #1
 800841a:	bf88      	it	hi
 800841c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008420:	4770      	bx	lr
 8008422:	4608      	mov	r0, r1
 8008424:	4770      	bx	lr

08008426 <memchr>:
 8008426:	b510      	push	{r4, lr}
 8008428:	b2c9      	uxtb	r1, r1
 800842a:	4402      	add	r2, r0
 800842c:	4290      	cmp	r0, r2
 800842e:	4603      	mov	r3, r0
 8008430:	d101      	bne.n	8008436 <memchr+0x10>
 8008432:	2300      	movs	r3, #0
 8008434:	e003      	b.n	800843e <memchr+0x18>
 8008436:	781c      	ldrb	r4, [r3, #0]
 8008438:	3001      	adds	r0, #1
 800843a:	428c      	cmp	r4, r1
 800843c:	d1f6      	bne.n	800842c <memchr+0x6>
 800843e:	4618      	mov	r0, r3
 8008440:	bd10      	pop	{r4, pc}

08008442 <memmove>:
 8008442:	4288      	cmp	r0, r1
 8008444:	b510      	push	{r4, lr}
 8008446:	eb01 0302 	add.w	r3, r1, r2
 800844a:	d807      	bhi.n	800845c <memmove+0x1a>
 800844c:	1e42      	subs	r2, r0, #1
 800844e:	4299      	cmp	r1, r3
 8008450:	d00a      	beq.n	8008468 <memmove+0x26>
 8008452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008456:	f802 4f01 	strb.w	r4, [r2, #1]!
 800845a:	e7f8      	b.n	800844e <memmove+0xc>
 800845c:	4283      	cmp	r3, r0
 800845e:	d9f5      	bls.n	800844c <memmove+0xa>
 8008460:	1881      	adds	r1, r0, r2
 8008462:	1ad2      	subs	r2, r2, r3
 8008464:	42d3      	cmn	r3, r2
 8008466:	d100      	bne.n	800846a <memmove+0x28>
 8008468:	bd10      	pop	{r4, pc}
 800846a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800846e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008472:	e7f7      	b.n	8008464 <memmove+0x22>

08008474 <__malloc_lock>:
 8008474:	4770      	bx	lr

08008476 <__malloc_unlock>:
 8008476:	4770      	bx	lr

08008478 <_free_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4605      	mov	r5, r0
 800847c:	2900      	cmp	r1, #0
 800847e:	d043      	beq.n	8008508 <_free_r+0x90>
 8008480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008484:	1f0c      	subs	r4, r1, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	bfb8      	it	lt
 800848a:	18e4      	addlt	r4, r4, r3
 800848c:	f7ff fff2 	bl	8008474 <__malloc_lock>
 8008490:	4a1e      	ldr	r2, [pc, #120]	; (800850c <_free_r+0x94>)
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	4610      	mov	r0, r2
 8008496:	b933      	cbnz	r3, 80084a6 <_free_r+0x2e>
 8008498:	6063      	str	r3, [r4, #4]
 800849a:	6014      	str	r4, [r2, #0]
 800849c:	4628      	mov	r0, r5
 800849e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a2:	f7ff bfe8 	b.w	8008476 <__malloc_unlock>
 80084a6:	42a3      	cmp	r3, r4
 80084a8:	d90b      	bls.n	80084c2 <_free_r+0x4a>
 80084aa:	6821      	ldr	r1, [r4, #0]
 80084ac:	1862      	adds	r2, r4, r1
 80084ae:	4293      	cmp	r3, r2
 80084b0:	bf01      	itttt	eq
 80084b2:	681a      	ldreq	r2, [r3, #0]
 80084b4:	685b      	ldreq	r3, [r3, #4]
 80084b6:	1852      	addeq	r2, r2, r1
 80084b8:	6022      	streq	r2, [r4, #0]
 80084ba:	6063      	str	r3, [r4, #4]
 80084bc:	6004      	str	r4, [r0, #0]
 80084be:	e7ed      	b.n	800849c <_free_r+0x24>
 80084c0:	4613      	mov	r3, r2
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	b10a      	cbz	r2, 80084ca <_free_r+0x52>
 80084c6:	42a2      	cmp	r2, r4
 80084c8:	d9fa      	bls.n	80084c0 <_free_r+0x48>
 80084ca:	6819      	ldr	r1, [r3, #0]
 80084cc:	1858      	adds	r0, r3, r1
 80084ce:	42a0      	cmp	r0, r4
 80084d0:	d10b      	bne.n	80084ea <_free_r+0x72>
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	4401      	add	r1, r0
 80084d6:	1858      	adds	r0, r3, r1
 80084d8:	4282      	cmp	r2, r0
 80084da:	6019      	str	r1, [r3, #0]
 80084dc:	d1de      	bne.n	800849c <_free_r+0x24>
 80084de:	6810      	ldr	r0, [r2, #0]
 80084e0:	6852      	ldr	r2, [r2, #4]
 80084e2:	4401      	add	r1, r0
 80084e4:	6019      	str	r1, [r3, #0]
 80084e6:	605a      	str	r2, [r3, #4]
 80084e8:	e7d8      	b.n	800849c <_free_r+0x24>
 80084ea:	d902      	bls.n	80084f2 <_free_r+0x7a>
 80084ec:	230c      	movs	r3, #12
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	e7d4      	b.n	800849c <_free_r+0x24>
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1821      	adds	r1, r4, r0
 80084f6:	428a      	cmp	r2, r1
 80084f8:	bf01      	itttt	eq
 80084fa:	6811      	ldreq	r1, [r2, #0]
 80084fc:	6852      	ldreq	r2, [r2, #4]
 80084fe:	1809      	addeq	r1, r1, r0
 8008500:	6021      	streq	r1, [r4, #0]
 8008502:	6062      	str	r2, [r4, #4]
 8008504:	605c      	str	r4, [r3, #4]
 8008506:	e7c9      	b.n	800849c <_free_r+0x24>
 8008508:	bd38      	pop	{r3, r4, r5, pc}
 800850a:	bf00      	nop
 800850c:	20000874 	.word	0x20000874

08008510 <_realloc_r>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	4607      	mov	r7, r0
 8008514:	4614      	mov	r4, r2
 8008516:	460e      	mov	r6, r1
 8008518:	b921      	cbnz	r1, 8008524 <_realloc_r+0x14>
 800851a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800851e:	4611      	mov	r1, r2
 8008520:	f7ff bc30 	b.w	8007d84 <_malloc_r>
 8008524:	b922      	cbnz	r2, 8008530 <_realloc_r+0x20>
 8008526:	f7ff ffa7 	bl	8008478 <_free_r>
 800852a:	4625      	mov	r5, r4
 800852c:	4628      	mov	r0, r5
 800852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008530:	f000 f814 	bl	800855c <_malloc_usable_size_r>
 8008534:	42a0      	cmp	r0, r4
 8008536:	d20f      	bcs.n	8008558 <_realloc_r+0x48>
 8008538:	4621      	mov	r1, r4
 800853a:	4638      	mov	r0, r7
 800853c:	f7ff fc22 	bl	8007d84 <_malloc_r>
 8008540:	4605      	mov	r5, r0
 8008542:	2800      	cmp	r0, #0
 8008544:	d0f2      	beq.n	800852c <_realloc_r+0x1c>
 8008546:	4631      	mov	r1, r6
 8008548:	4622      	mov	r2, r4
 800854a:	f7ff fb3f 	bl	8007bcc <memcpy>
 800854e:	4631      	mov	r1, r6
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff ff91 	bl	8008478 <_free_r>
 8008556:	e7e9      	b.n	800852c <_realloc_r+0x1c>
 8008558:	4635      	mov	r5, r6
 800855a:	e7e7      	b.n	800852c <_realloc_r+0x1c>

0800855c <_malloc_usable_size_r>:
 800855c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008560:	1f18      	subs	r0, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfbc      	itt	lt
 8008566:	580b      	ldrlt	r3, [r1, r0]
 8008568:	18c0      	addlt	r0, r0, r3
 800856a:	4770      	bx	lr

0800856c <_init>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr

08008578 <_fini>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	bf00      	nop
 800857c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857e:	bc08      	pop	{r3}
 8008580:	469e      	mov	lr, r3
 8008582:	4770      	bx	lr
