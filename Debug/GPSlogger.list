
GPSlogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f3c  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009540  08009540  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08009540  08009540  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009540  08009540  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08009548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b94  20000024  0800956c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  0800956c  00022bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00099dd2  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000069df  00000000  00000000  000b9e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0003e82d  00000000  00000000  000c07fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00003310  00000000  00000000  000ff030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000033e0  00000000  00000000  00102340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001d90e  00000000  00000000  00105720  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00020e33  00000000  00000000  0012302e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a5449  00000000  00000000  00143e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001e92aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a6a4  00000000  00000000  001e9328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080085ec 	.word	0x080085ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080085ec 	.word	0x080085ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <update_GPS_from_NMEA>:
extern DMA_HandleTypeDef hdma_usart1_rx;
extern uint8_t time_updated;
extern uint8_t date_updated;

void update_GPS_from_NMEA()
{
 8000750:	b510      	push	{r4, lr}
 8000752:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
	RTC_TimeTypeDef Time;
	RTC_DateTypeDef Date;
	extern uint8_t usart_rx_dma_buffer[];
	uint8_t copy_buffer[MAX_NMEA_LEN];

	memcpy(copy_buffer, usart_rx_dma_buffer, MAX_NMEA_LEN);
 8000756:	f240 228a 	movw	r2, #650	; 0x28a
 800075a:	4940      	ldr	r1, [pc, #256]	; (800085c <update_GPS_from_NMEA+0x10c>)
 800075c:	4668      	mov	r0, sp
 800075e:	f007 ff31 	bl	80085c4 <memcpy>

	ptrSentence = get_sentence_ptr(copy_buffer, "GPGGA", NULL);
 8000762:	2200      	movs	r2, #0
 8000764:	493e      	ldr	r1, [pc, #248]	; (8000860 <update_GPS_from_NMEA+0x110>)
 8000766:	4668      	mov	r0, sp
 8000768:	f001 fa05 	bl	8001b76 <get_sentence_ptr>
	if( ptrSentence != NULL )
 800076c:	b128      	cbz	r0, 800077a <update_GPS_from_NMEA+0x2a>
 800076e:	4604      	mov	r4, r0
	{
		if( is_sentence_complete(copy_buffer, ptrSentence) )
 8000770:	4601      	mov	r1, r0
 8000772:	4668      	mov	r0, sp
 8000774:	f001 f9d7 	bl	8001b26 <is_sentence_complete>
 8000778:	b9a0      	cbnz	r0, 80007a4 <update_GPS_from_NMEA+0x54>
			get_fields(ptrSentence , fields);
			GPS_update(&gps, fields, GNGGA);
		}
	}

	if(!(time_updated && date_updated))
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <update_GPS_from_NMEA+0x114>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b113      	cbz	r3, 8000786 <update_GPS_from_NMEA+0x36>
 8000780:	4b39      	ldr	r3, [pc, #228]	; (8000868 <update_GPS_from_NMEA+0x118>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b95b      	cbnz	r3, 800079e <update_GPS_from_NMEA+0x4e>
	{
		ptrSentence = get_sentence_ptr(copy_buffer, "GPZDA", NULL);
 8000786:	2200      	movs	r2, #0
 8000788:	4938      	ldr	r1, [pc, #224]	; (800086c <update_GPS_from_NMEA+0x11c>)
 800078a:	4668      	mov	r0, sp
 800078c:	f001 f9f3 	bl	8001b76 <get_sentence_ptr>
		if( ptrSentence != NULL )
 8000790:	4604      	mov	r4, r0
 8000792:	b120      	cbz	r0, 800079e <update_GPS_from_NMEA+0x4e>
		{
			if( is_sentence_complete(copy_buffer, ptrSentence) )
 8000794:	4601      	mov	r1, r0
 8000796:	4668      	mov	r0, sp
 8000798:	f001 f9c5 	bl	8001b26 <is_sentence_complete>
 800079c:	b978      	cbnz	r0, 80007be <update_GPS_from_NMEA+0x6e>
				  date_updated=1;
				}
			}
		}
	}
}
 800079e:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 80007a2:	bd10      	pop	{r4, pc}
			field_count = coma_count(ptrSentence);
 80007a4:	4620      	mov	r0, r4
 80007a6:	f001 f962 	bl	8001a6e <coma_count>
			get_fields(ptrSentence , fields);
 80007aa:	a9a5      	add	r1, sp, #660	; 0x294
 80007ac:	4620      	mov	r0, r4
 80007ae:	f001 f96a 	bl	8001a86 <get_fields>
			GPS_update(&gps, fields, GNGGA);
 80007b2:	2200      	movs	r2, #0
 80007b4:	a9a5      	add	r1, sp, #660	; 0x294
 80007b6:	482e      	ldr	r0, [pc, #184]	; (8000870 <update_GPS_from_NMEA+0x120>)
 80007b8:	f000 f929 	bl	8000a0e <GPS_update>
 80007bc:	e7dd      	b.n	800077a <update_GPS_from_NMEA+0x2a>
				get_fields(ptrSentence , fields);
 80007be:	a9a5      	add	r1, sp, #660	; 0x294
 80007c0:	4620      	mov	r0, r4
 80007c2:	f001 f960 	bl	8001a86 <get_fields>
				if(strcmp(fields[0],""))
 80007c6:	f89d 3294 	ldrb.w	r3, [sp, #660]	; 0x294
 80007ca:	b9e3      	cbnz	r3, 8000806 <update_GPS_from_NMEA+0xb6>
				if(strcmp(fields[1],""))
 80007cc:	f89d 32a8 	ldrb.w	r3, [sp, #680]	; 0x2a8
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0e4      	beq.n	800079e <update_GPS_from_NMEA+0x4e>
				  Date.Date = (uint8_t) ascii_to_int(fields[1]);
 80007d4:	a8aa      	add	r0, sp, #680	; 0x2a8
 80007d6:	f001 fb9e 	bl	8001f16 <ascii_to_int>
 80007da:	f88d 028e 	strb.w	r0, [sp, #654]	; 0x28e
				  Date.Month = (uint8_t) ascii_to_int(fields[2]);
 80007de:	a8af      	add	r0, sp, #700	; 0x2bc
 80007e0:	f001 fb99 	bl	8001f16 <ascii_to_int>
 80007e4:	f88d 028d 	strb.w	r0, [sp, #653]	; 0x28d
				  Date.Year = (uint8_t) ascii_to_int(fields[3]+2);
 80007e8:	f20d 20d2 	addw	r0, sp, #722	; 0x2d2
 80007ec:	f001 fb93 	bl	8001f16 <ascii_to_int>
 80007f0:	f88d 028f 	strb.w	r0, [sp, #655]	; 0x28f
				  HAL_RTC_SetDate(&hrtc, &Date,  RTC_FORMAT_BIN);
 80007f4:	2200      	movs	r2, #0
 80007f6:	a9a3      	add	r1, sp, #652	; 0x28c
 80007f8:	481e      	ldr	r0, [pc, #120]	; (8000874 <update_GPS_from_NMEA+0x124>)
 80007fa:	f004 f963 	bl	8004ac4 <HAL_RTC_SetDate>
				  date_updated=1;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <update_GPS_from_NMEA+0x118>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
}
 8000804:	e7cb      	b.n	800079e <update_GPS_from_NMEA+0x4e>
				  memcpy(f_to_char,fields[0],6);
 8000806:	aba5      	add	r3, sp, #660	; 0x294
 8000808:	e893 0003 	ldmia.w	r3, {r0, r1}
 800080c:	f8cd 0424 	str.w	r0, [sp, #1060]	; 0x424
 8000810:	f8ad 1428 	strh.w	r1, [sp, #1064]	; 0x428
				  f_to_char[6] = '\0';
 8000814:	2400      	movs	r4, #0
 8000816:	f88d 442a 	strb.w	r4, [sp, #1066]	; 0x42a
				  Time.Seconds = (uint8_t) ascii_to_int(f_to_char+4);
 800081a:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
 800081e:	f001 fb7a 	bl	8001f16 <ascii_to_int>
 8000822:	f88d 0292 	strb.w	r0, [sp, #658]	; 0x292
				  f_to_char[4] = '\0';
 8000826:	f88d 4428 	strb.w	r4, [sp, #1064]	; 0x428
				  Time.Minutes = (uint8_t) ascii_to_int(f_to_char+2);
 800082a:	f20d 4026 	addw	r0, sp, #1062	; 0x426
 800082e:	f001 fb72 	bl	8001f16 <ascii_to_int>
 8000832:	f88d 0291 	strb.w	r0, [sp, #657]	; 0x291
				  f_to_char[2] = '\0';
 8000836:	f88d 4426 	strb.w	r4, [sp, #1062]	; 0x426
				  Time.Hours = (uint8_t) ascii_to_int(f_to_char) - 3;
 800083a:	f20d 4024 	addw	r0, sp, #1060	; 0x424
 800083e:	f001 fb6a 	bl	8001f16 <ascii_to_int>
 8000842:	3803      	subs	r0, #3
 8000844:	f88d 0290 	strb.w	r0, [sp, #656]	; 0x290
				  HAL_RTC_SetTime(&hrtc, &Time,  RTC_FORMAT_BIN);
 8000848:	4622      	mov	r2, r4
 800084a:	a9a4      	add	r1, sp, #656	; 0x290
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <update_GPS_from_NMEA+0x124>)
 800084e:	f003 ffd4 	bl	80047fa <HAL_RTC_SetTime>
				  time_updated=1;
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <update_GPS_from_NMEA+0x114>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e7b8      	b.n	80007cc <update_GPS_from_NMEA+0x7c>
 800085a:	bf00      	nop
 800085c:	200006b0 	.word	0x200006b0
 8000860:	0800868c 	.word	0x0800868c
 8000864:	2000006a 	.word	0x2000006a
 8000868:	20000068 	.word	0x20000068
 800086c:	08008694 	.word	0x08008694
 8000870:	20000994 	.word	0x20000994
 8000874:	2000069c 	.word	0x2000069c

08000878 <configure_GPS>:

void configure_GPS()
{
 8000878:	b510      	push	{r4, lr}
 800087a:	b092      	sub	sp, #72	; 0x48
	const uint8_t enable_ZDA [11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x08, 0x01, 0x03, 0x20};
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <configure_GPS+0xc4>)
 800087e:	ac0f      	add	r4, sp, #60	; 0x3c
 8000880:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000884:	c403      	stmia	r4!, {r0, r1}
 8000886:	f824 2b02 	strh.w	r2, [r4], #2
 800088a:	0c12      	lsrs	r2, r2, #16
 800088c:	7022      	strb	r2, [r4, #0]
	const uint8_t enable_GGA [11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x01, 0xFB, 0x10};
 800088e:	ac0c      	add	r4, sp, #48	; 0x30
 8000890:	f103 020c 	add.w	r2, r3, #12
 8000894:	ca07      	ldmia	r2, {r0, r1, r2}
 8000896:	c403      	stmia	r4!, {r0, r1}
 8000898:	f824 2b02 	strh.w	r2, [r4], #2
 800089c:	0c12      	lsrs	r2, r2, #16
 800089e:	7022      	strb	r2, [r4, #0]
	const uint8_t enable_GBS [11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x01, 0x04, 0x22};
 80008a0:	ac09      	add	r4, sp, #36	; 0x24
 80008a2:	f103 0218 	add.w	r2, r3, #24
 80008a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a8:	c403      	stmia	r4!, {r0, r1}
 80008aa:	f824 2b02 	strh.w	r2, [r4], #2
 80008ae:	0c12      	lsrs	r2, r2, #16
 80008b0:	7022      	strb	r2, [r4, #0]
	const uint8_t disable_RMC[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17};
 80008b2:	ac06      	add	r4, sp, #24
 80008b4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80008b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ba:	c403      	stmia	r4!, {r0, r1}
 80008bc:	f824 2b02 	strh.w	r2, [r4], #2
 80008c0:	0c12      	lsrs	r2, r2, #16
 80008c2:	7022      	strb	r2, [r4, #0]
	const uint8_t disable_GLL[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x01, 0x00, 0xFB, 0x11};
 80008c4:	ac03      	add	r4, sp, #12
 80008c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80008ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80008cc:	c403      	stmia	r4!, {r0, r1}
 80008ce:	f824 2b02 	strh.w	r2, [r4], #2
 80008d2:	0c12      	lsrs	r2, r2, #16
 80008d4:	7022      	strb	r2, [r4, #0]
	const uint8_t power_save [10] = {0xB5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x08, 0x01, 0x22, 0x92};
 80008d6:	466c      	mov	r4, sp
 80008d8:	333c      	adds	r3, #60	; 0x3c
 80008da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008de:	c403      	stmia	r4!, {r0, r1}
 80008e0:	8022      	strh	r2, [r4, #0]

	HAL_UART_Transmit(&huart1, enable_ZDA, 11,1000);
 80008e2:	4c17      	ldr	r4, [pc, #92]	; (8000940 <configure_GPS+0xc8>)
 80008e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e8:	220b      	movs	r2, #11
 80008ea:	a90f      	add	r1, sp, #60	; 0x3c
 80008ec:	4620      	mov	r0, r4
 80008ee:	f004 ffc9 	bl	8005884 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, enable_GGA, 11,1000);
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	220b      	movs	r2, #11
 80008f8:	a90c      	add	r1, sp, #48	; 0x30
 80008fa:	4620      	mov	r0, r4
 80008fc:	f004 ffc2 	bl	8005884 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, enable_GBS, 11,1000);
 8000900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000904:	220b      	movs	r2, #11
 8000906:	a909      	add	r1, sp, #36	; 0x24
 8000908:	4620      	mov	r0, r4
 800090a:	f004 ffbb 	bl	8005884 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, disable_RMC, 11,1000);
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	220b      	movs	r2, #11
 8000914:	a906      	add	r1, sp, #24
 8000916:	4620      	mov	r0, r4
 8000918:	f004 ffb4 	bl	8005884 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, disable_GLL, 11,1000);
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	220b      	movs	r2, #11
 8000922:	a903      	add	r1, sp, #12
 8000924:	4620      	mov	r0, r4
 8000926:	f004 ffad 	bl	8005884 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, power_save, 10,1000);
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	220a      	movs	r2, #10
 8000930:	4669      	mov	r1, sp
 8000932:	4620      	mov	r0, r4
 8000934:	f004 ffa6 	bl	8005884 <HAL_UART_Transmit>
}
 8000938:	b012      	add	sp, #72	; 0x48
 800093a:	bd10      	pop	{r4, pc}
 800093c:	08008604 	.word	0x08008604
 8000940:	20000abc 	.word	0x20000abc

08000944 <GPS_init>:
    return newGPS;
}*/

void GPS_init(GPSdata * self)
{
	  self->latitude = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	6003      	str	r3, [r0, #0]
	  self->longitude = 0;
 8000948:	6043      	str	r3, [r0, #4]
	  self->GPS_fix = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	7203      	strb	r3, [r0, #8]
	  self->satellites_in_view = 0;
 800094e:	7243      	strb	r3, [r0, #9]
	  self->HDOP = 0;
 8000950:	7283      	strb	r3, [r0, #10]
	  self->altitude = 0;
 8000952:	72c3      	strb	r3, [r0, #11]
	  //self->sat_list = NULL;
}
 8000954:	4770      	bx	lr
	...

08000958 <NMEA_deg2dec>:

	self->altitude = (uint8_t) ascii_to_int(fields[ALTTUDE_METER]);
}

void NMEA_deg2dec(float* number)
{
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	4604      	mov	r4, r0
	//if(!*number) return;
	*number/=100;
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <NMEA_deg2dec+0x38>)
 800095e:	6800      	ldr	r0, [r0, #0]
 8000960:	f7ff fdbe 	bl	80004e0 <__aeabi_fdiv>
 8000964:	4606      	mov	r6, r0
	int integer = (int) *number;//grados
 8000966:	f7ff fecd 	bl	8000704 <__aeabi_f2iz>
	*number = (*number - (float)integer)*100;// quedan solo los minutos y sus decimales
 800096a:	f7ff fcb1 	bl	80002d0 <__aeabi_i2f>
 800096e:	4605      	mov	r5, r0
 8000970:	4601      	mov	r1, r0
 8000972:	4630      	mov	r0, r6
 8000974:	f7ff fbf6 	bl	8000164 <__aeabi_fsub>
 8000978:	4905      	ldr	r1, [pc, #20]	; (8000990 <NMEA_deg2dec+0x38>)
 800097a:	f7ff fcfd 	bl	8000378 <__aeabi_fmul>
	*number /=60;
 800097e:	4905      	ldr	r1, [pc, #20]	; (8000994 <NMEA_deg2dec+0x3c>)
 8000980:	f7ff fdae 	bl	80004e0 <__aeabi_fdiv>
	*number = (float) integer + (*number); //a los grados le agrega los minutos /60 para que sean grados
 8000984:	4629      	mov	r1, r5
 8000986:	f7ff fbef 	bl	8000168 <__addsf3>
 800098a:	6020      	str	r0, [r4, #0]
}
 800098c:	bd70      	pop	{r4, r5, r6, pc}
 800098e:	bf00      	nop
 8000990:	42c80000 	.word	0x42c80000
 8000994:	42700000 	.word	0x42700000

08000998 <GPS_update_GNGGA>:
{
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4604      	mov	r4, r0
 800099c:	460d      	mov	r5, r1
	ascii_to_float(fields[LATITUDE], &(self->latitude) );
 800099e:	4601      	mov	r1, r0
 80009a0:	f105 0014 	add.w	r0, r5, #20
 80009a4:	f001 faea 	bl	8001f7c <ascii_to_float>
	NMEA_deg2dec(&(self->latitude));
 80009a8:	4620      	mov	r0, r4
 80009aa:	f7ff ffd5 	bl	8000958 <NMEA_deg2dec>
	if(*(fields[NoS]) == 'S')
 80009ae:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80009b2:	2b53      	cmp	r3, #83	; 0x53
 80009b4:	d021      	beq.n	80009fa <GPS_update_GNGGA+0x62>
	ascii_to_float(fields[LONGITUDE], &(self->longitude) );
 80009b6:	1d26      	adds	r6, r4, #4
 80009b8:	4631      	mov	r1, r6
 80009ba:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80009be:	f001 fadd 	bl	8001f7c <ascii_to_float>
	NMEA_deg2dec(&(self->longitude));
 80009c2:	4630      	mov	r0, r6
 80009c4:	f7ff ffc8 	bl	8000958 <NMEA_deg2dec>
	if(*(fields[EoW])== 'W')
 80009c8:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80009cc:	2b57      	cmp	r3, #87	; 0x57
 80009ce:	d019      	beq.n	8000a04 <GPS_update_GNGGA+0x6c>
	self->GPS_fix = (uint8_t) ascii_to_int(fields[FIX]);
 80009d0:	f105 0064 	add.w	r0, r5, #100	; 0x64
 80009d4:	f001 fa9f 	bl	8001f16 <ascii_to_int>
 80009d8:	7220      	strb	r0, [r4, #8]
	self->satellites_in_view = (uint8_t) ascii_to_int(fields[SIV]);
 80009da:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80009de:	f001 fa9a 	bl	8001f16 <ascii_to_int>
 80009e2:	7260      	strb	r0, [r4, #9]
	self->HDOP = (uint8_t) ascii_to_int(fields[HDOP]);
 80009e4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80009e8:	f001 fa95 	bl	8001f16 <ascii_to_int>
 80009ec:	72a0      	strb	r0, [r4, #10]
	self->altitude = (uint8_t) ascii_to_int(fields[ALTTUDE_METER]);
 80009ee:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 80009f2:	f001 fa90 	bl	8001f16 <ascii_to_int>
 80009f6:	72e0      	strb	r0, [r4, #11]
}
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
			self->latitude = -self->latitude;
 80009fa:	6823      	ldr	r3, [r4, #0]
 80009fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	e7d8      	b.n	80009b6 <GPS_update_GNGGA+0x1e>
			self->longitude = -self->longitude;
 8000a04:	6863      	ldr	r3, [r4, #4]
 8000a06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	6063      	str	r3, [r4, #4]
 8000a0c:	e7e0      	b.n	80009d0 <GPS_update_GNGGA+0x38>

08000a0e <GPS_update>:
    switch(talker)
 8000a0e:	b932      	cbnz	r2, 8000a1e <GPS_update+0x10>
{
 8000a10:	b508      	push	{r3, lr}
    	if(fields[1][0] != '\0')  GPS_update_GNGGA(self, fields);
 8000a12:	7d0b      	ldrb	r3, [r1, #20]
 8000a14:	b903      	cbnz	r3, 8000a18 <GPS_update+0xa>
}
 8000a16:	bd08      	pop	{r3, pc}
    	if(fields[1][0] != '\0')  GPS_update_GNGGA(self, fields);
 8000a18:	f7ff ffbe 	bl	8000998 <GPS_update_GNGGA>
}
 8000a1c:	e7fb      	b.n	8000a16 <GPS_update+0x8>
 8000a1e:	4770      	bx	lr

08000a20 <open_append>:

FRESULT open_append (
    FIL* fp,            /* [OUT] File object to create */
    const char* path    /* [IN]  File name to be opened */
)
{
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4605      	mov	r5, r0
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 8000a24:	2212      	movs	r2, #18
 8000a26:	f006 fe93 	bl	8007750 <f_open>
    if (fr == FR_OK) {
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	b108      	cbz	r0, 8000a32 <open_append+0x12>
        fr = f_lseek(fp, f_size(fp));
        if (fr != FR_OK)
            f_close(fp);
    }
    return fr;
}
 8000a2e:	4620      	mov	r0, r4
 8000a30:	bd38      	pop	{r3, r4, r5, pc}
        fr = f_lseek(fp, f_size(fp));
 8000a32:	f241 030c 	movw	r3, #4108	; 0x100c
 8000a36:	58e9      	ldr	r1, [r5, r3]
 8000a38:	4628      	mov	r0, r5
 8000a3a:	f007 f9c3 	bl	8007dc4 <f_lseek>
        if (fr != FR_OK)
 8000a3e:	4604      	mov	r4, r0
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d0f4      	beq.n	8000a2e <open_append+0xe>
            f_close(fp);
 8000a44:	4628      	mov	r0, r5
 8000a46:	f007 f9a2 	bl	8007d8e <f_close>
 8000a4a:	e7f0      	b.n	8000a2e <open_append+0xe>

08000a4c <send_uart>:

void send_uart (char *string)
{
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4604      	mov	r4, r0
	extern UART_HandleTypeDef huart1;
	uint8_t len = strlen (string);
 8000a50:	f7ff fb7c 	bl	800014c <strlen>
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	b2c2      	uxtb	r2, r0
 8000a5a:	4621      	mov	r1, r4
 8000a5c:	4801      	ldr	r0, [pc, #4]	; (8000a64 <send_uart+0x18>)
 8000a5e:	f004 ff11 	bl	8005884 <HAL_UART_Transmit>
}
 8000a62:	bd10      	pop	{r4, pc}
 8000a64:	20000abc 	.word	0x20000abc

08000a68 <log_data>:

FRESULT log_data()
{
 8000a68:	b530      	push	{r4, r5, lr}
 8000a6a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000a6e:	b089      	sub	sp, #36	; 0x24
  FRESULT fr;
  FATFS fs;
  FIL fil;
  uint8_t time_string[11] = "  :  :   ,";
 8000a70:	4a35      	ldr	r2, [pc, #212]	; (8000b48 <log_data+0xe0>)
 8000a72:	ab0e      	add	r3, sp, #56	; 0x38
 8000a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a76:	c303      	stmia	r3!, {r0, r1}
 8000a78:	f823 2b02 	strh.w	r2, [r3], #2
 8000a7c:	0c12      	lsrs	r2, r2, #16
 8000a7e:	701a      	strb	r2, [r3, #0]
  uint8_t date_string[10] = "  /  /  ";
 8000a80:	ab0b      	add	r3, sp, #44	; 0x2c
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <log_data+0xe4>)
 8000a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a88:	c303      	stmia	r3!, {r0, r1}
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	9b01      	ldr	r3, [sp, #4]
 8000a90:	725d      	strb	r5, [r3, #9]
  uint8_t aux[10] = ",        ";
 8000a92:	4a2f      	ldr	r2, [pc, #188]	; (8000b50 <log_data+0xe8>)
 8000a94:	ab08      	add	r3, sp, #32
 8000a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a98:	c303      	stmia	r3!, {r0, r1}
 8000a9a:	801a      	strh	r2, [r3, #0]
  uint8_t aux1[13] = ",          \n";
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <log_data+0xec>)
 8000a9e:	ac04      	add	r4, sp, #16
 8000aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa2:	c407      	stmia	r4!, {r0, r1, r2}
 8000aa4:	7023      	strb	r3, [r4, #0]
  RTC_DateTypeDef Date;
  extern RTC_HandleTypeDef hrtc;
  extern GPSdata gps;

	/* Open or create a log file and ready to append */
  fr = f_mount(&fs, "", 0);
 8000aa6:	462a      	mov	r2, r5
 8000aa8:	492b      	ldr	r1, [pc, #172]	; (8000b58 <log_data+0xf0>)
 8000aaa:	f50d 5083 	add.w	r0, sp, #4192	; 0x1060
 8000aae:	3010      	adds	r0, #16
 8000ab0:	f006 fe0a 	bl	80076c8 <f_mount>
  if ( fr != FR_OK )
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b120      	cbz	r0, 8000ac2 <log_data+0x5a>
	float_to_ascii(gps.longitude , aux1+1, 6) ;
	aux1[11] = '\n';
	f_printf(&fil, aux1);
	/* Close the file */
	f_close(&fil);
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 8000abe:	b009      	add	sp, #36	; 0x24
 8000ac0:	bd30      	pop	{r4, r5, pc}
  else send_uart("SD CARD mounted successfully...\r\n");
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <log_data+0xf4>)
 8000ac4:	f7ff ffc2 	bl	8000a4c <send_uart>
  fr = open_append(&fil, "logfile.txt");
 8000ac8:	4925      	ldr	r1, [pc, #148]	; (8000b60 <log_data+0xf8>)
 8000aca:	a811      	add	r0, sp, #68	; 0x44
 8000acc:	f7ff ffa8 	bl	8000a20 <open_append>
  if (fr != FR_OK)
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d1f0      	bne.n	8000ab8 <log_data+0x50>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000ad6:	4c23      	ldr	r4, [pc, #140]	; (8000b64 <log_data+0xfc>)
 8000ad8:	462a      	mov	r2, r5
 8000ada:	a903      	add	r1, sp, #12
 8000adc:	4620      	mov	r0, r4
 8000ade:	f003 feed 	bl	80048bc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	a902      	add	r1, sp, #8
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f004 f856 	bl	8004b98 <HAL_RTC_GetDate>
	get_time_string(&Time, time_string);
 8000aec:	a90e      	add	r1, sp, #56	; 0x38
 8000aee:	a803      	add	r0, sp, #12
 8000af0:	f001 fb5e 	bl	80021b0 <get_time_string>
	get_date_string(&Date, date_string);
 8000af4:	a90b      	add	r1, sp, #44	; 0x2c
 8000af6:	a802      	add	r0, sp, #8
 8000af8:	f001 fb88 	bl	800220c <get_date_string>
	f_printf(&fil, time_string);
 8000afc:	ab11      	add	r3, sp, #68	; 0x44
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	a90e      	add	r1, sp, #56	; 0x38
 8000b02:	4618      	mov	r0, r3
 8000b04:	f007 fb42 	bl	800818c <f_printf>
	f_printf(&fil, date_string);
 8000b08:	a90b      	add	r1, sp, #44	; 0x2c
 8000b0a:	9801      	ldr	r0, [sp, #4]
 8000b0c:	f007 fb3e 	bl	800818c <f_printf>
	float_to_ascii(gps.latitude , aux+1, 6) ;
 8000b10:	4c15      	ldr	r4, [pc, #84]	; (8000b68 <log_data+0x100>)
 8000b12:	2206      	movs	r2, #6
 8000b14:	f10d 0121 	add.w	r1, sp, #33	; 0x21
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	f001 fafb 	bl	8002114 <float_to_ascii>
	f_printf(&fil, aux);
 8000b1e:	a908      	add	r1, sp, #32
 8000b20:	9801      	ldr	r0, [sp, #4]
 8000b22:	f007 fb33 	bl	800818c <f_printf>
	float_to_ascii(gps.longitude , aux1+1, 6) ;
 8000b26:	2206      	movs	r2, #6
 8000b28:	f10d 0111 	add.w	r1, sp, #17
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	f001 faf1 	bl	8002114 <float_to_ascii>
	aux1[11] = '\n';
 8000b32:	230a      	movs	r3, #10
 8000b34:	f88d 301b 	strb.w	r3, [sp, #27]
	f_printf(&fil, aux1);
 8000b38:	a904      	add	r1, sp, #16
 8000b3a:	9801      	ldr	r0, [sp, #4]
 8000b3c:	f007 fb26 	bl	800818c <f_printf>
	f_close(&fil);
 8000b40:	9801      	ldr	r0, [sp, #4]
 8000b42:	f007 f924 	bl	8007d8e <f_close>
}
 8000b46:	e7b7      	b.n	8000ab8 <log_data+0x50>
 8000b48:	080086cc 	.word	0x080086cc
 8000b4c:	0800864c 	.word	0x0800864c
 8000b50:	080086d8 	.word	0x080086d8
 8000b54:	080086e4 	.word	0x080086e4
 8000b58:	080086f0 	.word	0x080086f0
 8000b5c:	0800869c 	.word	0x0800869c
 8000b60:	080086c0 	.word	0x080086c0
 8000b64:	2000069c 	.word	0x2000069c
 8000b68:	20000994 	.word	0x20000994

08000b6c <u8x8_byte_stm32hal_hw_i2c>:
extern u8g2_t u8g2;
extern RTC_HandleTypeDef hrtc;
extern uint8_t screen_number;

uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	b084      	sub	sp, #16
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;


  switch(msg)
 8000b70:	3914      	subs	r1, #20
 8000b72:	290c      	cmp	r1, #12
 8000b74:	d839      	bhi.n	8000bea <u8x8_byte_stm32hal_hw_i2c+0x7e>
 8000b76:	e8df f001 	tbb	[pc, r1]
 8000b7a:	3807      	.short	0x3807
 8000b7c:	201b0a38 	.word	0x201b0a38
 8000b80:	38383838 	.word	0x38383838
 8000b84:	3838      	.short	0x3838
 8000b86:	07          	.byte	0x07
 8000b87:	00          	.byte	0x00
	}
    	break;
    default:
      return 0;
  }
  return 1;
 8000b88:	2001      	movs	r0, #1
}
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd10      	pop	{r4, pc}
        while( arg_int > 0 )
 8000b8e:	b372      	cbz	r2, 8000bee <u8x8_byte_stm32hal_hw_i2c+0x82>
 8000b90:	4919      	ldr	r1, [pc, #100]	; (8000bf8 <u8x8_byte_stm32hal_hw_i2c+0x8c>)
 8000b92:	7809      	ldrb	r1, [r1, #0]
 8000b94:	440a      	add	r2, r1
 8000b96:	b2d2      	uxtb	r2, r2
			buffer[buf_idx++] = *data;
 8000b98:	4c18      	ldr	r4, [pc, #96]	; (8000bfc <u8x8_byte_stm32hal_hw_i2c+0x90>)
 8000b9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8000b9e:	5460      	strb	r0, [r4, r1]
 8000ba0:	3101      	adds	r1, #1
 8000ba2:	b2c9      	uxtb	r1, r1
        while( arg_int > 0 )
 8000ba4:	4291      	cmp	r1, r2
 8000ba6:	d1f8      	bne.n	8000b9a <u8x8_byte_stm32hal_hw_i2c+0x2e>
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <u8x8_byte_stm32hal_hw_i2c+0x8c>)
 8000baa:	701a      	strb	r2, [r3, #0]
  return 1;
 8000bac:	2001      	movs	r0, #1
 8000bae:	e7ec      	b.n	8000b8a <u8x8_byte_stm32hal_hw_i2c+0x1e>
			buf_idx = 0;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <u8x8_byte_stm32hal_hw_i2c+0x8c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  return 1;
 8000bb6:	2001      	movs	r0, #1
		break;
 8000bb8:	e7e7      	b.n	8000b8a <u8x8_byte_stm32hal_hw_i2c+0x1e>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iaddress<<1, &buffer[0], buf_idx, 20u);
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <u8x8_byte_stm32hal_hw_i2c+0x8c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2214      	movs	r2, #20
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <u8x8_byte_stm32hal_hw_i2c+0x90>)
 8000bc4:	2178      	movs	r1, #120	; 0x78
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <u8x8_byte_stm32hal_hw_i2c+0x94>)
 8000bc8:	f002 fffa 	bl	8003bc0 <HAL_I2C_Master_Transmit>
		for (i = 1; i <= 500; i++);
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9303      	str	r3, [sp, #12]
 8000bd0:	9b03      	ldr	r3, [sp, #12]
 8000bd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bd6:	d80c      	bhi.n	8000bf2 <u8x8_byte_stm32hal_hw_i2c+0x86>
 8000bd8:	9b03      	ldr	r3, [sp, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	9303      	str	r3, [sp, #12]
 8000bde:	9b03      	ldr	r3, [sp, #12]
 8000be0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000be4:	d9f8      	bls.n	8000bd8 <u8x8_byte_stm32hal_hw_i2c+0x6c>
  return 1;
 8000be6:	2001      	movs	r0, #1
 8000be8:	e7cf      	b.n	8000b8a <u8x8_byte_stm32hal_hw_i2c+0x1e>
      return 0;
 8000bea:	2000      	movs	r0, #0
 8000bec:	e7cd      	b.n	8000b8a <u8x8_byte_stm32hal_hw_i2c+0x1e>
  return 1;
 8000bee:	2001      	movs	r0, #1
 8000bf0:	e7cb      	b.n	8000b8a <u8x8_byte_stm32hal_hw_i2c+0x1e>
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	e7c9      	b.n	8000b8a <u8x8_byte_stm32hal_hw_i2c+0x1e>
 8000bf6:	bf00      	nop
 8000bf8:	20000040 	.word	0x20000040
 8000bfc:	20000044 	.word	0x20000044
 8000c00:	200009e4 	.word	0x200009e4

08000c04 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000c04:	b500      	push	{lr}
 8000c06:	b083      	sub	sp, #12
  switch(msg)
 8000c08:	3928      	subs	r1, #40	; 0x28
 8000c0a:	2924      	cmp	r1, #36	; 0x24
 8000c0c:	d82b      	bhi.n	8000c66 <psoc_gpio_and_delay_cb+0x62>
 8000c0e:	e8df f001 	tbb	[pc, r1]
 8000c12:	2326      	.short	0x2326
 8000c14:	26132626 	.word	0x26132626
 8000c18:	2a2a2a2a 	.word	0x2a2a2a2a
 8000c1c:	2a2a2a2a 	.word	0x2a2a2a2a
 8000c20:	2a2a2a2a 	.word	0x2a2a2a2a
 8000c24:	2a2a2a2a 	.word	0x2a2a2a2a
 8000c28:	2a2a2a2a 	.word	0x2a2a2a2a
 8000c2c:	2a2a2a2a 	.word	0x2a2a2a2a
 8000c30:	2a2a2a2a 	.word	0x2a2a2a2a
 8000c34:	2a2a      	.short	0x2a2a
 8000c36:	26          	.byte	0x26
 8000c37:	00          	.byte	0x00
      break;
    case U8X8_MSG_DELAY_NANO:
      /* not required for SW I2C */
    {
		volatile uint32_t i;
		for (i = 1; i <= arg_int*10; i++);
 8000c38:	2301      	movs	r3, #1
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000c40:	409a      	lsls	r2, r3
 8000c42:	4611      	mov	r1, r2
 8000c44:	9b01      	ldr	r3, [sp, #4]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d309      	bcc.n	8000c5e <psoc_gpio_and_delay_cb+0x5a>
 8000c4a:	9b01      	ldr	r3, [sp, #4]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	9b01      	ldr	r3, [sp, #4]
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d9f9      	bls.n	8000c4a <psoc_gpio_and_delay_cb+0x46>
 8000c56:	e002      	b.n	8000c5e <psoc_gpio_and_delay_cb+0x5a>
 8000c58:	4610      	mov	r0, r2
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;

    case U8X8_MSG_DELAY_MILLI:
      HAL_Delay(arg_int);
 8000c5a:	f002 fb11 	bl	8003280 <HAL_Delay>
    default:
      u8x8_SetGPIOResult(u8x8, 1);
      break;
  }
  return 1;
}
 8000c5e:	2001      	movs	r0, #1
 8000c60:	b003      	add	sp, #12
 8000c62:	f85d fb04 	ldr.w	pc, [sp], #4
      u8x8_SetGPIOResult(u8x8, 1);
 8000c66:	2301      	movs	r3, #1
 8000c68:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
      break;
 8000c6c:	e7f7      	b.n	8000c5e <psoc_gpio_and_delay_cb+0x5a>

08000c6e <draw_button_line>:


uint8_t draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 8000c6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c72:	b087      	sub	sp, #28
 8000c74:	4607      	mov	r7, r0
 8000c76:	9105      	str	r1, [sp, #20]
 8000c78:	4616      	mov	r6, r2
 8000c7a:	4699      	mov	r9, r3
  uint8_t is_invert;

  u8g2_uint_t d;
  u8g2_uint_t x;

  cnt = u8x8_GetStringLineCnt(s);
 8000c7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000c7e:	f002 fa6d 	bl	800315c <u8x8_GetStringLineCnt>


  /* calculate the width of the button line */
  button_line_width = 0;
  for( i = 0; i < cnt; i++ )
 8000c82:	4680      	mov	r8, r0
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d04a      	beq.n	8000d1e <draw_button_line+0xb0>
 8000c88:	2400      	movs	r4, #0
  button_line_width = 0;
 8000c8a:	4625      	mov	r5, r4
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8000c8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c8e:	b2e0      	uxtb	r0, r4
 8000c90:	f002 fa71 	bl	8003176 <u8x8_GetStringLineStart>
 8000c94:	4601      	mov	r1, r0
 8000c96:	4638      	mov	r0, r7
 8000c98:	f001 fe3c 	bl	8002914 <u8g2_GetUTF8Width>
 8000c9c:	4405      	add	r5, r0
 8000c9e:	b2ed      	uxtb	r5, r5
 8000ca0:	3401      	adds	r4, #1
  for( i = 0; i < cnt; i++ )
 8000ca2:	b2e3      	uxtb	r3, r4
 8000ca4:	4598      	cmp	r8, r3
 8000ca6:	d8f1      	bhi.n	8000c8c <draw_button_line+0x1e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8000ca8:	eb08 0448 	add.w	r4, r8, r8, lsl #1
 8000cac:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8000cb0:	3c06      	subs	r4, #6
 8000cb2:	b2e4      	uxtb	r4, r4

  /* calculate the left offset */
  d = 0;
  if ( button_line_width < w )
 8000cb4:	42b4      	cmp	r4, r6
 8000cb6:	d206      	bcs.n	8000cc6 <draw_button_line+0x58>
  {
    d = w;
    d -= button_line_width;
 8000cb8:	1b34      	subs	r4, r6, r4
    d /= 2;
 8000cba:	f3c4 0446 	ubfx	r4, r4, #1, #7
  }

  /* draw the buttons */
  x = d;
  for( i = 0; i < cnt; i++ )
 8000cbe:	f1b8 0f00 	cmp.w	r8, #0
 8000cc2:	d101      	bne.n	8000cc8 <draw_button_line+0x5a>
 8000cc4:	e027      	b.n	8000d16 <draw_button_line+0xa8>
  d = 0;
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	2500      	movs	r5, #0
  {
    is_invert = 0;
    if ( i == cursor )
      is_invert = 1;

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 8000cca:	f04f 0b01 	mov.w	fp, #1
 8000cce:	46aa      	mov	sl, r5
 8000cd0:	b2ee      	uxtb	r6, r5
 8000cd2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	f002 fa4e 	bl	8003176 <u8x8_GetStringLineStart>
 8000cda:	45b1      	cmp	r9, r6
 8000cdc:	bf14      	ite	ne
 8000cde:	2300      	movne	r3, #0
 8000ce0:	2301      	moveq	r3, #1
 8000ce2:	9302      	str	r3, [sp, #8]
 8000ce4:	f8cd b004 	str.w	fp, [sp, #4]
 8000ce8:	9000      	str	r0, [sp, #0]
 8000cea:	4653      	mov	r3, sl
 8000cec:	9a05      	ldr	r2, [sp, #20]
 8000cee:	4621      	mov	r1, r4
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	f001 fee0 	bl	8002ab6 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8000cf6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f002 fa3c 	bl	8003176 <u8x8_GetStringLineStart>
 8000cfe:	4601      	mov	r1, r0
 8000d00:	4638      	mov	r0, r7
 8000d02:	f001 fe07 	bl	8002914 <u8g2_GetUTF8Width>
 8000d06:	4404      	add	r4, r0
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 8000d08:	3406      	adds	r4, #6
 8000d0a:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8000d0e:	3501      	adds	r5, #1
  for( i = 0; i < cnt; i++ )
 8000d10:	b2eb      	uxtb	r3, r5
 8000d12:	4598      	cmp	r8, r3
 8000d14:	d8dc      	bhi.n	8000cd0 <draw_button_line+0x62>
  }

  /* return the number of buttons */
  return cnt;
}
 8000d16:	4640      	mov	r0, r8
 8000d18:	b007      	add	sp, #28
 8000d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( button_line_width < w )
 8000d1e:	2efa      	cmp	r6, #250	; 0xfa
 8000d20:	d9f9      	bls.n	8000d16 <draw_button_line+0xa8>
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8000d22:	24fa      	movs	r4, #250	; 0xfa
 8000d24:	e7c8      	b.n	8000cb8 <draw_button_line+0x4a>
	...

08000d28 <Screen_init>:

void Screen_init(u8g2_t* u8g2)
{
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	4604      	mov	r4, r0
	  u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2,
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <Screen_init+0x30>)
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <Screen_init+0x34>)
 8000d30:	490b      	ldr	r1, [pc, #44]	; (8000d60 <Screen_init+0x38>)
 8000d32:	f001 fb6f 	bl	8002414 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			  U8G2_R0,
			  u8x8_byte_stm32hal_hw_i2c,
			  psoc_gpio_and_delay_cb);//configura pantalla y las funciones
	  u8g2_SetI2CAddress(u8g2, I2C_ADDRESS*2);// establece la direccion i2c
 8000d36:	2378      	movs	r3, #120	; 0x78
 8000d38:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	  u8g2_InitDisplay(u8g2);
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f002 f9ca 	bl	80030d6 <u8x8_InitDisplay>
	  u8g2_SetPowerSave(u8g2, 0); //deshabilita el ahorro de energia
 8000d42:	2100      	movs	r1, #0
 8000d44:	4620      	mov	r0, r4
 8000d46:	f002 f9cd 	bl	80030e4 <u8x8_SetPowerSave>
	  u8g2_ClearDisplay(u8g2);
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f001 fb4e 	bl	80023ec <u8g2_ClearDisplay>

	  screen_number = 0;
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <Screen_init+0x3c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	bd10      	pop	{r4, pc}
 8000d58:	08000c05 	.word	0x08000c05
 8000d5c:	08000b6d 	.word	0x08000b6d
 8000d60:	08008f60 	.word	0x08008f60
 8000d64:	20000afc 	.word	0x20000afc

08000d68 <draw_screen_time>:
	draw_button_line(&u8g2, u8g2_GetDisplayHeight(&u8g2)-BUTTON_OFFSET, u8g2_GetDisplayWidth(&u8g2), 3, BUTTONS);

	u8g2_SendBuffer(&u8g2);
}
void draw_screen_time()
{
 8000d68:	b530      	push	{r4, r5, lr}
 8000d6a:	b089      	sub	sp, #36	; 0x24
	RTC_TimeTypeDef Time;
	RTC_DateTypeDef Date;
	uint8_t time_string[9] = "  :  :  ";
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <draw_screen_time+0x7c>)
 8000d6e:	ab03      	add	r3, sp, #12
 8000d70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d72:	c303      	stmia	r3!, {r0, r1}
 8000d74:	701a      	strb	r2, [r3, #0]
	uint8_t date_string[9] = "  /  /  ";
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <draw_screen_time+0x80>)
 8000d78:	466b      	mov	r3, sp
 8000d7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7c:	c303      	stmia	r3!, {r0, r1}
 8000d7e:	701a      	strb	r2, [r3, #0]
	uint8_t y=11;
	uint8_t x=0;

	u8g2_ClearBuffer(&u8g2);
 8000d80:	4c1a      	ldr	r4, [pc, #104]	; (8000dec <draw_screen_time+0x84>)
 8000d82:	4620      	mov	r0, r4
 8000d84:	f001 fae4 	bl	8002350 <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f001 fd24 	bl	80027d8 <u8g2_SetFontMode>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8000d90:	4917      	ldr	r1, [pc, #92]	; (8000df0 <draw_screen_time+0x88>)
 8000d92:	4620      	mov	r0, r4
 8000d94:	f001 fda8 	bl	80028e8 <u8g2_SetFont>

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d98:	4d16      	ldr	r5, [pc, #88]	; (8000df4 <draw_screen_time+0x8c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	a907      	add	r1, sp, #28
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f003 fd8c 	bl	80048bc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000da4:	2200      	movs	r2, #0
 8000da6:	a906      	add	r1, sp, #24
 8000da8:	4628      	mov	r0, r5
 8000daa:	f003 fef5 	bl	8004b98 <HAL_RTC_GetDate>

	get_time_string(&Time, time_string);
 8000dae:	a903      	add	r1, sp, #12
 8000db0:	a807      	add	r0, sp, #28
 8000db2:	f001 f9fd 	bl	80021b0 <get_time_string>

	u8g2_DrawStr(&u8g2, x, y, time_string);
 8000db6:	ab03      	add	r3, sp, #12
 8000db8:	220b      	movs	r2, #11
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f001 fd4f 	bl	8002860 <u8g2_DrawStr>

	get_date_string(&Date, date_string);
 8000dc2:	4669      	mov	r1, sp
 8000dc4:	a806      	add	r0, sp, #24
 8000dc6:	f001 fa21 	bl	800220c <get_date_string>
	x+=u8g2_GetStrWidth(&u8g2,time_string) + 5 ;
 8000dca:	a903      	add	r1, sp, #12
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f001 fd99 	bl	8002904 <u8g2_GetStrWidth>
 8000dd2:	1d41      	adds	r1, r0, #5

	u8g2_DrawStr(&u8g2, x, y, date_string);
 8000dd4:	466b      	mov	r3, sp
 8000dd6:	220b      	movs	r2, #11
 8000dd8:	b2c9      	uxtb	r1, r1
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f001 fd40 	bl	8002860 <u8g2_DrawStr>
}
 8000de0:	b009      	add	sp, #36	; 0x24
 8000de2:	bd30      	pop	{r4, r5, pc}
 8000de4:	08008704 	.word	0x08008704
 8000de8:	08008710 	.word	0x08008710
 8000dec:	20000a38 	.word	0x20000a38
 8000df0:	08008744 	.word	0x08008744
 8000df4:	2000069c 	.word	0x2000069c

08000df8 <draw_screen_ubic>:

void draw_screen_ubic()
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b085      	sub	sp, #20
	extern GPSdata gps;
	uint8_t f_to_char[10];
	uint8_t y=11;
	uint8_t x=0;

	memset(f_to_char, '\0',10);
 8000dfc:	2500      	movs	r5, #0
 8000dfe:	9501      	str	r5, [sp, #4]
 8000e00:	9502      	str	r5, [sp, #8]
 8000e02:	f8ad 500c 	strh.w	r5, [sp, #12]

	u8g2_ClearBuffer(&u8g2);
 8000e06:	4c22      	ldr	r4, [pc, #136]	; (8000e90 <draw_screen_ubic+0x98>)
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f001 faa1 	bl	8002350 <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4620      	mov	r0, r4
 8000e12:	f001 fce1 	bl	80027d8 <u8g2_SetFontMode>
	u8g2_SetFontDirection(&u8g2, 0);
 8000e16:	4629      	mov	r1, r5
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f001 fd83 	bl	8002924 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8000e1e:	491d      	ldr	r1, [pc, #116]	; (8000e94 <draw_screen_ubic+0x9c>)
 8000e20:	4620      	mov	r0, r4
 8000e22:	f001 fd61 	bl	80028e8 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, x, y, "Lat: ");
 8000e26:	4e1c      	ldr	r6, [pc, #112]	; (8000e98 <draw_screen_ubic+0xa0>)
 8000e28:	4633      	mov	r3, r6
 8000e2a:	220b      	movs	r2, #11
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f001 fd16 	bl	8002860 <u8g2_DrawStr>
    x+=u8g2_GetStrWidth(&u8g2,"Lat: ");
 8000e34:	4631      	mov	r1, r6
 8000e36:	4620      	mov	r0, r4
 8000e38:	f001 fd64 	bl	8002904 <u8g2_GetStrWidth>
 8000e3c:	4607      	mov	r7, r0
    float_to_ascii(gps.latitude , f_to_char, 6) ;
 8000e3e:	4e17      	ldr	r6, [pc, #92]	; (8000e9c <draw_screen_ubic+0xa4>)
 8000e40:	2206      	movs	r2, #6
 8000e42:	a901      	add	r1, sp, #4
 8000e44:	6830      	ldr	r0, [r6, #0]
 8000e46:	f001 f965 	bl	8002114 <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000e4a:	ab01      	add	r3, sp, #4
 8000e4c:	220b      	movs	r2, #11
 8000e4e:	4639      	mov	r1, r7
 8000e50:	4620      	mov	r0, r4
 8000e52:	f001 fd05 	bl	8002860 <u8g2_DrawStr>

    memset(f_to_char, '\0',10);
 8000e56:	9501      	str	r5, [sp, #4]
 8000e58:	9502      	str	r5, [sp, #8]
 8000e5a:	f8ad 500c 	strh.w	r5, [sp, #12]
    x=0;
    y=2*y;
    u8g2_DrawStr(&u8g2, x, y, "Lon: ");
 8000e5e:	4f10      	ldr	r7, [pc, #64]	; (8000ea0 <draw_screen_ubic+0xa8>)
 8000e60:	463b      	mov	r3, r7
 8000e62:	2216      	movs	r2, #22
 8000e64:	4629      	mov	r1, r5
 8000e66:	4620      	mov	r0, r4
 8000e68:	f001 fcfa 	bl	8002860 <u8g2_DrawStr>
	x+=u8g2_GetStrWidth(&u8g2,"Lon: ");
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f001 fd48 	bl	8002904 <u8g2_GetStrWidth>
 8000e74:	4605      	mov	r5, r0
	float_to_ascii(gps.longitude , f_to_char, 6) ;
 8000e76:	2206      	movs	r2, #6
 8000e78:	a901      	add	r1, sp, #4
 8000e7a:	6870      	ldr	r0, [r6, #4]
 8000e7c:	f001 f94a 	bl	8002114 <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8000e80:	ab01      	add	r3, sp, #4
 8000e82:	2216      	movs	r2, #22
 8000e84:	4629      	mov	r1, r5
 8000e86:	4620      	mov	r0, r4
 8000e88:	f001 fcea 	bl	8002860 <u8g2_DrawStr>
}
 8000e8c:	b005      	add	sp, #20
 8000e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e90:	20000a38 	.word	0x20000a38
 8000e94:	08008744 	.word	0x08008744
 8000e98:	0800871c 	.word	0x0800871c
 8000e9c:	20000994 	.word	0x20000994
 8000ea0:	08008724 	.word	0x08008724

08000ea4 <Screen_update>:
{
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	b082      	sub	sp, #8
	switch(screen_number)
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <Screen_update+0x40>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b19b      	cbz	r3, 8000ed6 <Screen_update+0x32>
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d014      	beq.n	8000edc <Screen_update+0x38>
	draw_button_line(&u8g2, u8g2_GetDisplayHeight(&u8g2)-BUTTON_OFFSET, u8g2_GetDisplayWidth(&u8g2), 3, BUTTONS);
 8000eb2:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <Screen_update+0x44>)
 8000eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000eb8:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8000ebc:	3902      	subs	r1, #2
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <Screen_update+0x48>)
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	b2c9      	uxtb	r1, r1
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff fed1 	bl	8000c6e <draw_button_line>
	u8g2_SendBuffer(&u8g2);
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f001 fa4c 	bl	800236a <u8g2_SendBuffer>
}
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd10      	pop	{r4, pc}
		  draw_screen_time();
 8000ed6:	f7ff ff47 	bl	8000d68 <draw_screen_time>
		  break;
 8000eda:	e7ea      	b.n	8000eb2 <Screen_update+0xe>
		  draw_screen_ubic();
 8000edc:	f7ff ff8c 	bl	8000df8 <draw_screen_ubic>
		  break;
 8000ee0:	e7e7      	b.n	8000eb2 <Screen_update+0xe>
 8000ee2:	bf00      	nop
 8000ee4:	20000afc 	.word	0x20000afc
 8000ee8:	20000a38 	.word	0x20000a38
 8000eec:	080086f4 	.word	0x080086f4

08000ef0 <SPI_TxBuffer>:
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
}

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SPI_TxBuffer+0x1c>)
 8000ef6:	681c      	ldr	r4, [r3, #0]
 8000ef8:	68a3      	ldr	r3, [r4, #8]
 8000efa:	f013 0f02 	tst.w	r3, #2
 8000efe:	d0fb      	beq.n	8000ef8 <SPI_TxBuffer+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	4601      	mov	r1, r0
 8000f04:	4801      	ldr	r0, [pc, #4]	; (8000f0c <SPI_TxBuffer+0x1c>)
 8000f06:	f003 ffd4 	bl	8004eb2 <HAL_SPI_Transmit>
}
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	2000093c 	.word	0x2000093c

08000f10 <SPI_TxByte>:
{
 8000f10:	b500      	push	{lr}
 8000f12:	b083      	sub	sp, #12
 8000f14:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <SPI_TxByte+0x28>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6893      	ldr	r3, [r2, #8]
 8000f1e:	f013 0f02 	tst.w	r3, #2
 8000f22:	d0fb      	beq.n	8000f1c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	2201      	movs	r2, #1
 8000f28:	f10d 0107 	add.w	r1, sp, #7
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <SPI_TxByte+0x28>)
 8000f2e:	f003 ffc0 	bl	8004eb2 <HAL_SPI_Transmit>
}
 8000f32:	b003      	add	sp, #12
 8000f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f38:	2000093c 	.word	0x2000093c

08000f3c <SELECT>:
{
 8000f3c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2110      	movs	r1, #16
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <SELECT+0x14>)
 8000f44:	f002 fc7e 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f002 f999 	bl	8003280 <HAL_Delay>
}
 8000f4e:	bd08      	pop	{r3, pc}
 8000f50:	40010800 	.word	0x40010800

08000f54 <DESELECT>:
{
 8000f54:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2110      	movs	r1, #16
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <DESELECT+0x14>)
 8000f5c:	f002 fc72 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f002 f98d 	bl	8003280 <HAL_Delay>
}
 8000f66:	bd08      	pop	{r3, pc}
 8000f68:	40010800 	.word	0x40010800

08000f6c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f6c:	b500      	push	{lr}
 8000f6e:	b085      	sub	sp, #20
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f70:	23ff      	movs	r3, #255	; 0xff
 8000f72:	f88d 300f 	strb.w	r3, [sp, #15]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <SPI_RxByte+0x34>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6893      	ldr	r3, [r2, #8]
 8000f7c:	f013 0f02 	tst.w	r3, #2
 8000f80:	d0fb      	beq.n	8000f7a <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	f10d 020e 	add.w	r2, sp, #14
 8000f8c:	f10d 010f 	add.w	r1, sp, #15
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <SPI_RxByte+0x34>)
 8000f92:	f004 f85f 	bl	8005054 <HAL_SPI_TransmitReceive>

	return data;
}
 8000f96:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000f9a:	b005      	add	sp, #20
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa0:	2000093c 	.word	0x2000093c

08000fa4 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void) 
{
 8000fa4:	b530      	push	{r4, r5, lr}
 8000fa6:	b083      	sub	sp, #12
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
 8000fa8:	f7ff ffd4 	bl	8000f54 <DESELECT>
 8000fac:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++)
	{
		SPI_TxByte(0xFF);
 8000fae:	25ff      	movs	r5, #255	; 0xff
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	f7ff ffad 	bl	8000f10 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000fb6:	3c01      	subs	r4, #1
 8000fb8:	d1fa      	bne.n	8000fb0 <SD_PowerOn+0xc>
	}

	/* slave select */
	SELECT();
 8000fba:	f7ff ffbf 	bl	8000f3c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 8000fca:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 8000fce:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8000fd2:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8000fd6:	2395      	movs	r3, #149	; 0x95
 8000fd8:	f88d 3005 	strb.w	r3, [sp, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000fdc:	2106      	movs	r1, #6
 8000fde:	4668      	mov	r0, sp
 8000fe0:	f7ff ff86 	bl	8000ef0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000fe4:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8000fe8:	f7ff ffc0 	bl	8000f6c <SPI_RxByte>
 8000fec:	2801      	cmp	r0, #1
 8000fee:	d001      	beq.n	8000ff4 <SD_PowerOn+0x50>
 8000ff0:	3c01      	subs	r4, #1
 8000ff2:	d1f9      	bne.n	8000fe8 <SD_PowerOn+0x44>
	{
		cnt--;
	}

	DESELECT();
 8000ff4:	f7ff ffae 	bl	8000f54 <DESELECT>
	SPI_TxByte(0XFF);
 8000ff8:	20ff      	movs	r0, #255	; 0xff
 8000ffa:	f7ff ff89 	bl	8000f10 <SPI_TxByte>

	PowerFlag = 1;
 8000ffe:	4b02      	ldr	r3, [pc, #8]	; (8001008 <SD_PowerOn+0x64>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
}
 8001004:	b003      	add	sp, #12
 8001006:	bd30      	pop	{r4, r5, pc}
 8001008:	20000065 	.word	0x20000065

0800100c <SD_ReadyWait>:
{
 800100c:	b510      	push	{r4, lr}
	Timer2 = 500;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <SD_ReadyWait+0x20>)
 8001010:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001014:	801a      	strh	r2, [r3, #0]
	} while ((res != 0xFF) && Timer2);
 8001016:	461c      	mov	r4, r3
		res = SPI_RxByte();
 8001018:	f7ff ffa8 	bl	8000f6c <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 800101c:	28ff      	cmp	r0, #255	; 0xff
 800101e:	d003      	beq.n	8001028 <SD_ReadyWait+0x1c>
 8001020:	8823      	ldrh	r3, [r4, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f7      	bne.n	8001018 <SD_ReadyWait+0xc>
}
 8001028:	bd10      	pop	{r4, pc}
 800102a:	bf00      	nop
 800102c:	20000b4e 	.word	0x20000b4e

08001030 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4605      	mov	r5, r0
 8001034:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001036:	f7ff ffe9 	bl	800100c <SD_ReadyWait>
 800103a:	28ff      	cmp	r0, #255	; 0xff
 800103c:	d001      	beq.n	8001042 <SD_SendCmd+0x12>
 800103e:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 8001042:	4628      	mov	r0, r5
 8001044:	f7ff ff64 	bl	8000f10 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001048:	0e20      	lsrs	r0, r4, #24
 800104a:	f7ff ff61 	bl	8000f10 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800104e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001052:	f7ff ff5d 	bl	8000f10 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001056:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800105a:	f7ff ff59 	bl	8000f10 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800105e:	b2e0      	uxtb	r0, r4
 8001060:	f7ff ff56 	bl	8000f10 <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001064:	2d40      	cmp	r5, #64	; 0x40
 8001066:	d009      	beq.n	800107c <SD_SendCmd+0x4c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001068:	2d48      	cmp	r5, #72	; 0x48
 800106a:	d015      	beq.n	8001098 <SD_SendCmd+0x68>
	SPI_TxByte(crc);
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff ff4f 	bl	8000f10 <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8001072:	2d4c      	cmp	r5, #76	; 0x4c
 8001074:	d105      	bne.n	8001082 <SD_SendCmd+0x52>
 8001076:	f7ff ff79 	bl	8000f6c <SPI_RxByte>
 800107a:	e002      	b.n	8001082 <SD_SendCmd+0x52>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800107c:	2095      	movs	r0, #149	; 0x95
	SPI_TxByte(crc);
 800107e:	f7ff ff47 	bl	8000f10 <SPI_TxByte>
{
 8001082:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8001084:	f7ff ff72 	bl	8000f6c <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8001088:	f010 0f80 	tst.w	r0, #128	; 0x80
 800108c:	d0d8      	beq.n	8001040 <SD_SendCmd+0x10>
 800108e:	1e63      	subs	r3, r4, #1
 8001090:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001094:	d1f6      	bne.n	8001084 <SD_SendCmd+0x54>
 8001096:	e7d3      	b.n	8001040 <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001098:	2087      	movs	r0, #135	; 0x87
 800109a:	e7f0      	b.n	800107e <SD_SendCmd+0x4e>

0800109c <SD_RxDataBlock>:
{
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	460e      	mov	r6, r1
	Timer1 = 200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <SD_RxDataBlock+0x48>)
 80010a4:	22c8      	movs	r2, #200	; 0xc8
 80010a6:	801a      	strh	r2, [r3, #0]
	} while((token == 0xFF) && Timer1);
 80010a8:	461d      	mov	r5, r3
		token = SPI_RxByte();
 80010aa:	f7ff ff5f 	bl	8000f6c <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 80010ae:	28ff      	cmp	r0, #255	; 0xff
 80010b0:	d105      	bne.n	80010be <SD_RxDataBlock+0x22>
 80010b2:	882b      	ldrh	r3, [r5, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f7      	bne.n	80010aa <SD_RxDataBlock+0xe>
	if(token != 0xFE) return FALSE;
 80010ba:	2000      	movs	r0, #0
}
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
	if(token != 0xFE) return FALSE;
 80010be:	28fe      	cmp	r0, #254	; 0xfe
 80010c0:	d10d      	bne.n	80010de <SD_RxDataBlock+0x42>
 80010c2:	1c75      	adds	r5, r6, #1
 80010c4:	4425      	add	r5, r4
	*buff = SPI_RxByte();
 80010c6:	f7ff ff51 	bl	8000f6c <SPI_RxByte>
 80010ca:	f804 0b01 	strb.w	r0, [r4], #1
	} while(len--);
 80010ce:	42ac      	cmp	r4, r5
 80010d0:	d1f9      	bne.n	80010c6 <SD_RxDataBlock+0x2a>
	SPI_RxByte();
 80010d2:	f7ff ff4b 	bl	8000f6c <SPI_RxByte>
	SPI_RxByte();
 80010d6:	f7ff ff49 	bl	8000f6c <SPI_RxByte>
	return TRUE;
 80010da:	2001      	movs	r0, #1
 80010dc:	e7ee      	b.n	80010bc <SD_RxDataBlock+0x20>
	if(token != 0xFE) return FALSE;
 80010de:	2000      	movs	r0, #0
 80010e0:	e7ec      	b.n	80010bc <SD_RxDataBlock+0x20>
 80010e2:	bf00      	nop
 80010e4:	20000b4c 	.word	0x20000b4c

080010e8 <SD_TxDataBlock>:
{
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4606      	mov	r6, r0
 80010ec:	460c      	mov	r4, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010ee:	f7ff ff8d 	bl	800100c <SD_ReadyWait>
 80010f2:	28ff      	cmp	r0, #255	; 0xff
 80010f4:	d001      	beq.n	80010fa <SD_TxDataBlock+0x12>
 80010f6:	2000      	movs	r0, #0
}
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
	SPI_TxByte(token);
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff ff08 	bl	8000f10 <SPI_TxByte>
	if (token != 0xFD)
 8001100:	2cfd      	cmp	r4, #253	; 0xfd
 8001102:	d106      	bne.n	8001112 <SD_TxDataBlock+0x2a>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001104:	f005 001f 	and.w	r0, r5, #31
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001108:	2805      	cmp	r0, #5
 800110a:	bf14      	ite	ne
 800110c:	2000      	movne	r0, #0
 800110e:	2001      	moveq	r0, #1
 8001110:	e7f2      	b.n	80010f8 <SD_TxDataBlock+0x10>
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001116:	4630      	mov	r0, r6
 8001118:	f7ff feea 	bl	8000ef0 <SPI_TxBuffer>
		SPI_RxByte();
 800111c:	f7ff ff26 	bl	8000f6c <SPI_RxByte>
		SPI_RxByte();
 8001120:	f7ff ff24 	bl	8000f6c <SPI_RxByte>
 8001124:	2441      	movs	r4, #65	; 0x41
			resp = SPI_RxByte();
 8001126:	f7ff ff21 	bl	8000f6c <SPI_RxByte>
 800112a:	4605      	mov	r5, r0
			if ((resp & 0x1F) == 0x05) break;
 800112c:	f000 031f 	and.w	r3, r0, #31
 8001130:	2b05      	cmp	r3, #5
 8001132:	d003      	beq.n	800113c <SD_TxDataBlock+0x54>
 8001134:	1e63      	subs	r3, r4, #1
		while (i <= 64)
 8001136:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800113a:	d1f4      	bne.n	8001126 <SD_TxDataBlock+0x3e>
		while (SPI_RxByte() == 0);
 800113c:	f7ff ff16 	bl	8000f6c <SPI_RxByte>
 8001140:	2800      	cmp	r0, #0
 8001142:	d0fb      	beq.n	800113c <SD_TxDataBlock+0x54>
 8001144:	e7de      	b.n	8001104 <SD_TxDataBlock+0x1c>
	...

08001148 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001148:	2800      	cmp	r0, #0
 800114a:	f040 80c1 	bne.w	80012d0 <SD_disk_initialize+0x188>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <SD_disk_initialize+0x18c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f013 0f02 	tst.w	r3, #2
 8001156:	d003      	beq.n	8001160 <SD_disk_initialize+0x18>
 8001158:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <SD_disk_initialize+0x18c>)
 800115a:	7818      	ldrb	r0, [r3, #0]
 800115c:	b2c0      	uxtb	r0, r0
 800115e:	4770      	bx	lr
{
 8001160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001164:	b082      	sub	sp, #8

	/* power on */
	SD_PowerOn();
 8001166:	f7ff ff1d 	bl	8000fa4 <SD_PowerOn>

	/* slave select */
	SELECT();
 800116a:	f7ff fee7 	bl	8000f3c <SELECT>

	/* check disk type */
	type = 0;

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800116e:	2100      	movs	r1, #0
 8001170:	2040      	movs	r0, #64	; 0x40
 8001172:	f7ff ff5d 	bl	8001030 <SD_SendCmd>
 8001176:	2801      	cmp	r0, #1
 8001178:	d00a      	beq.n	8001190 <SD_disk_initialize+0x48>
			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
		}
	}

	CardType = type;
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <SD_disk_initialize+0x190>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 8001180:	f7ff fee8 	bl	8000f54 <DESELECT>
	SPI_RxByte();
 8001184:	f7ff fef2 	bl	8000f6c <SPI_RxByte>
	PowerFlag = 0;
 8001188:	4b54      	ldr	r3, [pc, #336]	; (80012dc <SD_disk_initialize+0x194>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e092      	b.n	80012b6 <SD_disk_initialize+0x16e>
		Timer1 = 1000;
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <SD_disk_initialize+0x198>)
 8001192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001196:	801a      	strh	r2, [r3, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001198:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800119c:	2048      	movs	r0, #72	; 0x48
 800119e:	f7ff ff47 	bl	8001030 <SD_SendCmd>
 80011a2:	2801      	cmp	r0, #1
 80011a4:	d146      	bne.n	8001234 <SD_disk_initialize+0xec>
 80011a6:	ae01      	add	r6, sp, #4
 80011a8:	ad02      	add	r5, sp, #8
 80011aa:	4634      	mov	r4, r6
				ocr[n] = SPI_RxByte();
 80011ac:	f7ff fede 	bl	8000f6c <SPI_RxByte>
 80011b0:	f804 0b01 	strb.w	r0, [r4], #1
			for (n = 0; n < 4; n++)
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d1f9      	bne.n	80011ac <SD_disk_initialize+0x64>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80011b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d1dc      	bne.n	800117a <SD_disk_initialize+0x32>
 80011c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011c4:	2baa      	cmp	r3, #170	; 0xaa
 80011c6:	d1d8      	bne.n	800117a <SD_disk_initialize+0x32>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80011c8:	2700      	movs	r7, #0
 80011ca:	2577      	movs	r5, #119	; 0x77
				} while (Timer1);
 80011cc:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80012e0 <SD_disk_initialize+0x198>
 80011d0:	e003      	b.n	80011da <SD_disk_initialize+0x92>
 80011d2:	f8b8 3000 	ldrh.w	r3, [r8]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b163      	cbz	r3, 80011f4 <SD_disk_initialize+0xac>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80011da:	4639      	mov	r1, r7
 80011dc:	4628      	mov	r0, r5
 80011de:	f7ff ff27 	bl	8001030 <SD_SendCmd>
 80011e2:	2801      	cmp	r0, #1
 80011e4:	d8f5      	bhi.n	80011d2 <SD_disk_initialize+0x8a>
 80011e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011ea:	2069      	movs	r0, #105	; 0x69
 80011ec:	f7ff ff20 	bl	8001030 <SD_SendCmd>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d1ee      	bne.n	80011d2 <SD_disk_initialize+0x8a>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <SD_disk_initialize+0x198>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0bd      	beq.n	800117a <SD_disk_initialize+0x32>
 80011fe:	2100      	movs	r1, #0
 8001200:	207a      	movs	r0, #122	; 0x7a
 8001202:	f7ff ff15 	bl	8001030 <SD_SendCmd>
 8001206:	2800      	cmp	r0, #0
 8001208:	d1b7      	bne.n	800117a <SD_disk_initialize+0x32>
						ocr[n] = SPI_RxByte();
 800120a:	f7ff feaf 	bl	8000f6c <SPI_RxByte>
 800120e:	f806 0b01 	strb.w	r0, [r6], #1
					for (n = 0; n < 4; n++)
 8001212:	42a6      	cmp	r6, r4
 8001214:	d1f9      	bne.n	800120a <SD_disk_initialize+0xc2>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001216:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800121a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	220c      	movne	r2, #12
 8001224:	2204      	moveq	r2, #4
	CardType = type;
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <SD_disk_initialize+0x190>)
 8001228:	701a      	strb	r2, [r3, #0]
	DESELECT();
 800122a:	f7ff fe93 	bl	8000f54 <DESELECT>
	SPI_RxByte();
 800122e:	f7ff fe9d 	bl	8000f6c <SPI_RxByte>
 8001232:	e03b      	b.n	80012ac <SD_disk_initialize+0x164>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001234:	2100      	movs	r1, #0
 8001236:	2077      	movs	r0, #119	; 0x77
 8001238:	f7ff fefa 	bl	8001030 <SD_SendCmd>
 800123c:	2801      	cmp	r0, #1
 800123e:	d904      	bls.n	800124a <SD_disk_initialize+0x102>
 8001240:	2501      	movs	r5, #1
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001242:	2400      	movs	r4, #0
 8001244:	2741      	movs	r7, #65	; 0x41
			} while (Timer1);
 8001246:	4e26      	ldr	r6, [pc, #152]	; (80012e0 <SD_disk_initialize+0x198>)
 8001248:	e011      	b.n	800126e <SD_disk_initialize+0x126>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800124a:	2100      	movs	r1, #0
 800124c:	2069      	movs	r0, #105	; 0x69
 800124e:	f7ff feef 	bl	8001030 <SD_SendCmd>
 8001252:	2802      	cmp	r0, #2
 8001254:	bf34      	ite	cc
 8001256:	2502      	movcc	r5, #2
 8001258:	2501      	movcs	r5, #1
 800125a:	e7f2      	b.n	8001242 <SD_disk_initialize+0xfa>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800125c:	4621      	mov	r1, r4
 800125e:	2077      	movs	r0, #119	; 0x77
 8001260:	f7ff fee6 	bl	8001030 <SD_SendCmd>
 8001264:	2801      	cmp	r0, #1
 8001266:	d92c      	bls.n	80012c2 <SD_disk_initialize+0x17a>
			} while (Timer1);
 8001268:	8833      	ldrh	r3, [r6, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	b13b      	cbz	r3, 800127e <SD_disk_initialize+0x136>
				if (type == CT_SD1)
 800126e:	2d02      	cmp	r5, #2
 8001270:	d0f4      	beq.n	800125c <SD_disk_initialize+0x114>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001272:	4621      	mov	r1, r4
 8001274:	4638      	mov	r0, r7
 8001276:	f7ff fedb 	bl	8001030 <SD_SendCmd>
 800127a:	2800      	cmp	r0, #0
 800127c:	d1f4      	bne.n	8001268 <SD_disk_initialize+0x120>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <SD_disk_initialize+0x198>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	f43f af78 	beq.w	800117a <SD_disk_initialize+0x32>
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128e:	2050      	movs	r0, #80	; 0x50
 8001290:	f7ff fece 	bl	8001030 <SD_SendCmd>
 8001294:	2800      	cmp	r0, #0
 8001296:	f47f af70 	bne.w	800117a <SD_disk_initialize+0x32>
	CardType = type;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <SD_disk_initialize+0x190>)
 800129c:	701d      	strb	r5, [r3, #0]
	DESELECT();
 800129e:	f7ff fe59 	bl	8000f54 <DESELECT>
	SPI_RxByte();
 80012a2:	f7ff fe63 	bl	8000f6c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80012a6:	2d00      	cmp	r5, #0
 80012a8:	f43f af6e 	beq.w	8001188 <SD_disk_initialize+0x40>
	{
		Stat &= ~STA_NOINIT;
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <SD_disk_initialize+0x18c>)
 80012ae:	7813      	ldrb	r3, [r2, #0]
 80012b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80012b4:	7013      	strb	r3, [r2, #0]
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <SD_disk_initialize+0x18c>)
 80012b8:	7818      	ldrb	r0, [r3, #0]
 80012ba:	b2c0      	uxtb	r0, r0
}
 80012bc:	b002      	add	sp, #8
 80012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80012c2:	4621      	mov	r1, r4
 80012c4:	2069      	movs	r0, #105	; 0x69
 80012c6:	f7ff feb3 	bl	8001030 <SD_SendCmd>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d1cc      	bne.n	8001268 <SD_disk_initialize+0x120>
 80012ce:	e7d6      	b.n	800127e <SD_disk_initialize+0x136>
	if(drv) return STA_NOINIT;
 80012d0:	2001      	movs	r0, #1
}
 80012d2:	4770      	bx	lr
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000064 	.word	0x20000064
 80012dc:	20000065 	.word	0x20000065
 80012e0:	20000b4c 	.word	0x20000b4c

080012e4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 80012e4:	b918      	cbnz	r0, 80012ee <SD_disk_status+0xa>
	return Stat;
 80012e6:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <SD_disk_status+0x10>)
 80012e8:	7818      	ldrb	r0, [r3, #0]
 80012ea:	b2c0      	uxtb	r0, r0
 80012ec:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 80012ee:	2001      	movs	r0, #1
}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000

080012f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d13f      	bne.n	800137c <SD_disk_read+0x84>
{
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	460d      	mov	r5, r1
 8001300:	4616      	mov	r6, r2
 8001302:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8001304:	2b00      	cmp	r3, #0
 8001306:	d03b      	beq.n	8001380 <SD_disk_read+0x88>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <SD_disk_read+0x90>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f013 0f01 	tst.w	r3, #1
 8001310:	d138      	bne.n	8001384 <SD_disk_read+0x8c>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <SD_disk_read+0x94>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f013 0f04 	tst.w	r3, #4
 800131a:	bf08      	it	eq
 800131c:	0256      	lsleq	r6, r2, #9

	SELECT();
 800131e:	f7ff fe0d 	bl	8000f3c <SELECT>

	if (count == 1)
 8001322:	2c01      	cmp	r4, #1
 8001324:	d01b      	beq.n	800135e <SD_disk_read+0x66>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001326:	4631      	mov	r1, r6
 8001328:	2052      	movs	r0, #82	; 0x52
 800132a:	f7ff fe81 	bl	8001030 <SD_SendCmd>
 800132e:	b970      	cbnz	r0, 800134e <SD_disk_read+0x56>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001330:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001334:	4631      	mov	r1, r6
 8001336:	4628      	mov	r0, r5
 8001338:	f7ff feb0 	bl	800109c <SD_RxDataBlock>
 800133c:	b118      	cbz	r0, 8001346 <SD_disk_read+0x4e>
				buff += 512;
 800133e:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8001342:	3c01      	subs	r4, #1
 8001344:	d1f6      	bne.n	8001334 <SD_disk_read+0x3c>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001346:	2100      	movs	r1, #0
 8001348:	204c      	movs	r0, #76	; 0x4c
 800134a:	f7ff fe71 	bl	8001030 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800134e:	f7ff fe01 	bl	8000f54 <DESELECT>
	SPI_RxByte();
 8001352:	f7ff fe0b 	bl	8000f6c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001356:	1c20      	adds	r0, r4, #0
 8001358:	bf18      	it	ne
 800135a:	2001      	movne	r0, #1
}
 800135c:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800135e:	4631      	mov	r1, r6
 8001360:	2051      	movs	r0, #81	; 0x51
 8001362:	f7ff fe65 	bl	8001030 <SD_SendCmd>
 8001366:	2800      	cmp	r0, #0
 8001368:	d1f1      	bne.n	800134e <SD_disk_read+0x56>
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fe94 	bl	800109c <SD_RxDataBlock>
 8001374:	fab0 f480 	clz	r4, r0
 8001378:	0964      	lsrs	r4, r4, #5
 800137a:	e7e8      	b.n	800134e <SD_disk_read+0x56>
	if (pdrv || !count) return RES_PARERR;
 800137c:	2004      	movs	r0, #4
}
 800137e:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8001380:	2004      	movs	r0, #4
 8001382:	e7eb      	b.n	800135c <SD_disk_read+0x64>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001384:	2003      	movs	r0, #3
 8001386:	e7e9      	b.n	800135c <SD_disk_read+0x64>
 8001388:	20000000 	.word	0x20000000
 800138c:	20000064 	.word	0x20000064

08001390 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001390:	2800      	cmp	r0, #0
 8001392:	d153      	bne.n	800143c <SD_disk_write+0xac>
{
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	460d      	mov	r5, r1
 8001398:	4616      	mov	r6, r2
 800139a:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 800139c:	2b00      	cmp	r3, #0
 800139e:	d04f      	beq.n	8001440 <SD_disk_write+0xb0>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <SD_disk_write+0xbc>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f013 0f01 	tst.w	r3, #1
 80013a8:	d14c      	bne.n	8001444 <SD_disk_write+0xb4>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <SD_disk_write+0xbc>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f013 0f04 	tst.w	r3, #4
 80013b2:	d149      	bne.n	8001448 <SD_disk_write+0xb8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <SD_disk_write+0xc0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f013 0f04 	tst.w	r3, #4
 80013bc:	bf08      	it	eq
 80013be:	0256      	lsleq	r6, r2, #9

	SELECT();
 80013c0:	f7ff fdbc 	bl	8000f3c <SELECT>

	if (count == 1)
 80013c4:	2c01      	cmp	r4, #1
 80013c6:	d022      	beq.n	800140e <SD_disk_write+0x7e>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <SD_disk_write+0xc0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f013 0f02 	tst.w	r3, #2
 80013d0:	d12b      	bne.n	800142a <SD_disk_write+0x9a>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80013d2:	4631      	mov	r1, r6
 80013d4:	2059      	movs	r0, #89	; 0x59
 80013d6:	f7ff fe2b 	bl	8001030 <SD_SendCmd>
 80013da:	b980      	cbnz	r0, 80013fe <SD_disk_write+0x6e>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013dc:	26fc      	movs	r6, #252	; 0xfc
 80013de:	4631      	mov	r1, r6
 80013e0:	4628      	mov	r0, r5
 80013e2:	f7ff fe81 	bl	80010e8 <SD_TxDataBlock>
 80013e6:	b118      	cbz	r0, 80013f0 <SD_disk_write+0x60>
				buff += 512;
 80013e8:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80013ec:	3c01      	subs	r4, #1
 80013ee:	d1f6      	bne.n	80013de <SD_disk_write+0x4e>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80013f0:	21fd      	movs	r1, #253	; 0xfd
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff fe78 	bl	80010e8 <SD_TxDataBlock>
 80013f8:	2800      	cmp	r0, #0
			{
				count = 1;
 80013fa:	bf08      	it	eq
 80013fc:	2401      	moveq	r4, #1
			}
		}
	}

	/* Idle */
	DESELECT();
 80013fe:	f7ff fda9 	bl	8000f54 <DESELECT>
	SPI_RxByte();
 8001402:	f7ff fdb3 	bl	8000f6c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001406:	1c20      	adds	r0, r4, #0
 8001408:	bf18      	it	ne
 800140a:	2001      	movne	r0, #1
}
 800140c:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800140e:	4631      	mov	r1, r6
 8001410:	2058      	movs	r0, #88	; 0x58
 8001412:	f7ff fe0d 	bl	8001030 <SD_SendCmd>
 8001416:	2800      	cmp	r0, #0
 8001418:	d1f1      	bne.n	80013fe <SD_disk_write+0x6e>
 800141a:	21fe      	movs	r1, #254	; 0xfe
 800141c:	4628      	mov	r0, r5
 800141e:	f7ff fe63 	bl	80010e8 <SD_TxDataBlock>
 8001422:	fab0 f480 	clz	r4, r0
 8001426:	0964      	lsrs	r4, r4, #5
 8001428:	e7e9      	b.n	80013fe <SD_disk_write+0x6e>
			SD_SendCmd(CMD55, 0);
 800142a:	2100      	movs	r1, #0
 800142c:	2077      	movs	r0, #119	; 0x77
 800142e:	f7ff fdff 	bl	8001030 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001432:	4621      	mov	r1, r4
 8001434:	2057      	movs	r0, #87	; 0x57
 8001436:	f7ff fdfb 	bl	8001030 <SD_SendCmd>
 800143a:	e7ca      	b.n	80013d2 <SD_disk_write+0x42>
	if (pdrv || !count) return RES_PARERR;
 800143c:	2004      	movs	r0, #4
}
 800143e:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8001440:	2004      	movs	r0, #4
 8001442:	e7e3      	b.n	800140c <SD_disk_write+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001444:	2003      	movs	r0, #3
 8001446:	e7e1      	b.n	800140c <SD_disk_write+0x7c>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001448:	2002      	movs	r0, #2
 800144a:	e7df      	b.n	800140c <SD_disk_write+0x7c>
 800144c:	20000000 	.word	0x20000000
 8001450:	20000064 	.word	0x20000064

08001454 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001454:	b530      	push	{r4, r5, lr}
 8001456:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001458:	2800      	cmp	r0, #0
 800145a:	f040 80ae 	bne.w	80015ba <SD_disk_ioctl+0x166>
 800145e:	460c      	mov	r4, r1
 8001460:	4615      	mov	r5, r2
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8001462:	2905      	cmp	r1, #5
 8001464:	d013      	beq.n	800148e <SD_disk_ioctl+0x3a>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001466:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <SD_disk_ioctl+0x174>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f013 0f01 	tst.w	r3, #1
 800146e:	f040 80a8 	bne.w	80015c2 <SD_disk_ioctl+0x16e>

		SELECT();
 8001472:	f7ff fd63 	bl	8000f3c <SELECT>

		switch (ctrl)
 8001476:	2c0d      	cmp	r4, #13
 8001478:	f200 8099 	bhi.w	80015ae <SD_disk_ioctl+0x15a>
 800147c:	e8df f004 	tbb	[pc, r4]
 8001480:	975b1c64 	.word	0x975b1c64
 8001484:	97979797 	.word	0x97979797
 8001488:	6b979797 	.word	0x6b979797
 800148c:	897a      	.short	0x897a
		switch (*ptr)
 800148e:	7813      	ldrb	r3, [r2, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d008      	beq.n	80014a6 <SD_disk_ioctl+0x52>
 8001494:	b11b      	cbz	r3, 800149e <SD_disk_ioctl+0x4a>
 8001496:	2b02      	cmp	r3, #2
 8001498:	d009      	beq.n	80014ae <SD_disk_ioctl+0x5a>
			res = RES_PARERR;
 800149a:	2404      	movs	r4, #4
 800149c:	e08e      	b.n	80015bc <SD_disk_ioctl+0x168>
	PowerFlag = 0;
 800149e:	2400      	movs	r4, #0
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <SD_disk_ioctl+0x178>)
 80014a2:	701c      	strb	r4, [r3, #0]
 80014a4:	e08a      	b.n	80015bc <SD_disk_ioctl+0x168>
			SD_PowerOn();		/* Power On */
 80014a6:	f7ff fd7d 	bl	8000fa4 <SD_PowerOn>
			res = RES_OK;
 80014aa:	2400      	movs	r4, #0
			break;
 80014ac:	e086      	b.n	80015bc <SD_disk_ioctl+0x168>
	return PowerFlag;
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <SD_disk_ioctl+0x178>)
			*(ptr + 1) = SD_CheckPower();
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	7053      	strb	r3, [r2, #1]
			res = RES_OK;		/* Power Check */
 80014b4:	2400      	movs	r4, #0
			break;
 80014b6:	e081      	b.n	80015bc <SD_disk_ioctl+0x168>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80014b8:	2100      	movs	r1, #0
 80014ba:	2049      	movs	r0, #73	; 0x49
 80014bc:	f7ff fdb8 	bl	8001030 <SD_SendCmd>
 80014c0:	b108      	cbz	r0, 80014c6 <SD_disk_ioctl+0x72>
	res = RES_ERROR;
 80014c2:	2401      	movs	r4, #1
 80014c4:	e03b      	b.n	800153e <SD_disk_ioctl+0xea>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80014c6:	2110      	movs	r1, #16
 80014c8:	4668      	mov	r0, sp
 80014ca:	f7ff fde7 	bl	800109c <SD_RxDataBlock>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d06f      	beq.n	80015b2 <SD_disk_ioctl+0x15e>
			{
				if ((csd[0] >> 6) == 1)
 80014d2:	f89d 3000 	ldrb.w	r3, [sp]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d020      	beq.n	800151e <SD_disk_ioctl+0xca>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80014dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80014e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	eb03 1392 	add.w	r3, r3, r2, lsr #6
 80014ea:	3301      	adds	r3, #1
 80014ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80014f0:	0292      	lsls	r2, r2, #10
 80014f2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80014f6:	4413      	add	r3, r2
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80014fc:	f002 020f 	and.w	r2, r2, #15
 8001500:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8001504:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
 8001508:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800150c:	0049      	lsls	r1, r1, #1
 800150e:	f001 0106 	and.w	r1, r1, #6
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001512:	440a      	add	r2, r1
 8001514:	3a07      	subs	r2, #7
 8001516:	4093      	lsls	r3, r2
 8001518:	602b      	str	r3, [r5, #0]
				}
				res = RES_OK;
 800151a:	2400      	movs	r4, #0
 800151c:	e00f      	b.n	800153e <SD_disk_ioctl+0xea>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800151e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001522:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001526:	3301      	adds	r3, #1
 8001528:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 800152c:	b29b      	uxth	r3, r3
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	602b      	str	r3, [r5, #0]
				res = RES_OK;
 8001532:	2400      	movs	r4, #0
 8001534:	e003      	b.n	800153e <SD_disk_ioctl+0xea>
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	802b      	strh	r3, [r5, #0]
			res = RES_OK;
 800153c:	2400      	movs	r4, #0
			}
		default:
			res = RES_PARERR;
		}

		DESELECT();
 800153e:	f7ff fd09 	bl	8000f54 <DESELECT>
		SPI_RxByte();
 8001542:	f7ff fd13 	bl	8000f6c <SPI_RxByte>
 8001546:	e039      	b.n	80015bc <SD_disk_ioctl+0x168>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001548:	f7ff fd60 	bl	800100c <SD_ReadyWait>
	res = RES_ERROR;
 800154c:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8001550:	bf18      	it	ne
 8001552:	2401      	movne	r4, #1
 8001554:	e7f3      	b.n	800153e <SD_disk_ioctl+0xea>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001556:	2100      	movs	r1, #0
 8001558:	2049      	movs	r0, #73	; 0x49
 800155a:	f7ff fd69 	bl	8001030 <SD_SendCmd>
 800155e:	b108      	cbz	r0, 8001564 <SD_disk_ioctl+0x110>
	res = RES_ERROR;
 8001560:	2401      	movs	r4, #1
 8001562:	e7ec      	b.n	800153e <SD_disk_ioctl+0xea>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001564:	2110      	movs	r1, #16
 8001566:	4628      	mov	r0, r5
 8001568:	f7ff fd98 	bl	800109c <SD_RxDataBlock>
	res = RES_ERROR;
 800156c:	fab0 f480 	clz	r4, r0
 8001570:	0964      	lsrs	r4, r4, #5
 8001572:	e7e4      	b.n	800153e <SD_disk_ioctl+0xea>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001574:	2100      	movs	r1, #0
 8001576:	204a      	movs	r0, #74	; 0x4a
 8001578:	f7ff fd5a 	bl	8001030 <SD_SendCmd>
 800157c:	b108      	cbz	r0, 8001582 <SD_disk_ioctl+0x12e>
	res = RES_ERROR;
 800157e:	2401      	movs	r4, #1
 8001580:	e7dd      	b.n	800153e <SD_disk_ioctl+0xea>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001582:	2110      	movs	r1, #16
 8001584:	4628      	mov	r0, r5
 8001586:	f7ff fd89 	bl	800109c <SD_RxDataBlock>
	res = RES_ERROR;
 800158a:	fab0 f480 	clz	r4, r0
 800158e:	0964      	lsrs	r4, r4, #5
 8001590:	e7d5      	b.n	800153e <SD_disk_ioctl+0xea>
			if (SD_SendCmd(CMD58, 0) == 0)
 8001592:	2100      	movs	r1, #0
 8001594:	207a      	movs	r0, #122	; 0x7a
 8001596:	f7ff fd4b 	bl	8001030 <SD_SendCmd>
 800159a:	b960      	cbnz	r0, 80015b6 <SD_disk_ioctl+0x162>
 800159c:	1d2c      	adds	r4, r5, #4
					*ptr++ = SPI_RxByte();
 800159e:	f7ff fce5 	bl	8000f6c <SPI_RxByte>
 80015a2:	f805 0b01 	strb.w	r0, [r5], #1
				for (n = 0; n < 4; n++)
 80015a6:	42ac      	cmp	r4, r5
 80015a8:	d1f9      	bne.n	800159e <SD_disk_ioctl+0x14a>
			res = RES_PARERR;
 80015aa:	2404      	movs	r4, #4
 80015ac:	e7c7      	b.n	800153e <SD_disk_ioctl+0xea>
 80015ae:	2404      	movs	r4, #4
 80015b0:	e7c5      	b.n	800153e <SD_disk_ioctl+0xea>
	res = RES_ERROR;
 80015b2:	2401      	movs	r4, #1
 80015b4:	e7c3      	b.n	800153e <SD_disk_ioctl+0xea>
			res = RES_PARERR;
 80015b6:	2404      	movs	r4, #4
 80015b8:	e7c1      	b.n	800153e <SD_disk_ioctl+0xea>
	if (drv) return RES_PARERR;
 80015ba:	2404      	movs	r4, #4
	}

	return res;
}
 80015bc:	4620      	mov	r0, r4
 80015be:	b005      	add	sp, #20
 80015c0:	bd30      	pop	{r4, r5, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015c2:	2403      	movs	r4, #3
 80015c4:	e7fa      	b.n	80015bc <SD_disk_ioctl+0x168>
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000065 	.word	0x20000065

080015d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d0:	b508      	push	{r3, lr}
	Screen_update();
 80015d2:	f7ff fc67 	bl	8000ea4 <Screen_update>
}
 80015d6:	bd08      	pop	{r3, pc}

080015d8 <HAL_UART_RxIdleCallback>:
void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 80015d8:	b508      	push	{r3, lr}

	/*uint32_t mili; //contador en milisegundos
	mili = HAL_GetTick();
	char tiempo[sizeof(uint32_t)*8+1];*/

	update_GPS_from_NMEA();
 80015da:	f7ff f8b9 	bl	8000750 <update_GPS_from_NMEA>
	GPSupdated = 1;
 80015de:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <HAL_UART_RxIdleCallback+0x10>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]

	/*
	sprintf(tiempo, "%lu",HAL_GetTick()-mili);
	HAL_UART_Transmit(huart, (uint8_t *)tiempo, strlen(tiempo),1000);*/
}
 80015e4:	bd08      	pop	{r3, pc}
 80015e6:	bf00      	nop
 80015e8:	20000066 	.word	0x20000066

080015ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015ec:	b510      	push	{r4, lr}
 80015ee:	4604      	mov	r4, r0
	longPress = HAL_GetTick();
 80015f0:	f001 fe40 	bl	8003274 <HAL_GetTick>
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_GPIO_EXTI_Callback+0x28>)
 80015f6:	6018      	str	r0, [r3, #0]
	switch(GPIO_Pin)
 80015f8:	2c02      	cmp	r4, #2
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_EXTI_Callback+0x16>
 80015fc:	2c04      	cmp	r4, #4
 80015fe:	d004      	beq.n	800160a <HAL_GPIO_EXTI_Callback+0x1e>

		case GPIO_PIN_2:
			button_pressed = SEL_BUTTON;
			break;
	}
}
 8001600:	bd10      	pop	{r4, pc}
			button_pressed = SIG_BUTTON;
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
			break;
 8001608:	e7fa      	b.n	8001600 <HAL_GPIO_EXTI_Callback+0x14>
			button_pressed = SEL_BUTTON;
 800160a:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GPIO_EXTI_Callback+0x2c>)
 800160c:	2202      	movs	r2, #2
 800160e:	701a      	strb	r2, [r3, #0]
}
 8001610:	e7f6      	b.n	8001600 <HAL_GPIO_EXTI_Callback+0x14>
 8001612:	bf00      	nop
 8001614:	20000b00 	.word	0x20000b00
 8001618:	20000067 	.word	0x20000067

0800161c <check_buttons>:

void check_buttons()
{
 800161c:	b530      	push	{r4, r5, lr}
 800161e:	b085      	sub	sp, #20
	switch(button_pressed)
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <check_buttons+0x88>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d006      	beq.n	8001636 <check_buttons+0x1a>
 8001628:	2b02      	cmp	r3, #2
 800162a:	d02a      	beq.n	8001682 <check_buttons+0x66>
			button_pressed = SEL_BUTTON;
			uint8_t UBLOX_GPSStandby[] = {0xB5, 0x62, 0x02, 0x41, 0x08, 0x00, 0x60, 0xEA, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x97, 0xA1};
			HAL_UART_Transmit(&huart1, UBLOX_GPSStandby, 16,1000);
			break;
	}
	button_pressed = 0;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <check_buttons+0x88>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	b005      	add	sp, #20
 8001634:	bd30      	pop	{r4, r5, pc}
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET );
 8001636:	4d1c      	ldr	r5, [pc, #112]	; (80016a8 <check_buttons+0x8c>)
 8001638:	2402      	movs	r4, #2
 800163a:	4621      	mov	r1, r4
 800163c:	4628      	mov	r0, r5
 800163e:	f002 f8fb 	bl	8003838 <HAL_GPIO_ReadPin>
 8001642:	2800      	cmp	r0, #0
 8001644:	d0f9      	beq.n	800163a <check_buttons+0x1e>
			if( ( HAL_GetTick() - longPress < LONG_TIME_PRESS) )
 8001646:	f001 fe15 	bl	8003274 <HAL_GetTick>
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <check_buttons+0x90>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ac0      	subs	r0, r0, r3
 8001650:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001654:	4298      	cmp	r0, r3
 8001656:	d80b      	bhi.n	8001670 <check_buttons+0x54>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <check_buttons+0x94>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d003      	beq.n	8001668 <check_buttons+0x4c>
 8001660:	3301      	adds	r3, #1
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <check_buttons+0x94>)
 8001664:	7013      	strb	r3, [r2, #0]
 8001666:	e7e1      	b.n	800162c <check_buttons+0x10>
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <check_buttons+0x94>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e7dd      	b.n	800162c <check_buttons+0x10>
					screen_power ^= 1 << 1;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <check_buttons+0x98>)
 8001672:	7819      	ldrb	r1, [r3, #0]
 8001674:	f081 0102 	eor.w	r1, r1, #2
 8001678:	7019      	strb	r1, [r3, #0]
					u8g2_SetPowerSave(&u8g2, screen_power);
 800167a:	480f      	ldr	r0, [pc, #60]	; (80016b8 <check_buttons+0x9c>)
 800167c:	f001 fd32 	bl	80030e4 <u8x8_SetPowerSave>
 8001680:	e7d4      	b.n	800162c <check_buttons+0x10>
			button_pressed = SEL_BUTTON;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <check_buttons+0x88>)
 8001684:	2202      	movs	r2, #2
 8001686:	701a      	strb	r2, [r3, #0]
			uint8_t UBLOX_GPSStandby[] = {0xB5, 0x62, 0x02, 0x41, 0x08, 0x00, 0x60, 0xEA, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x97, 0xA1};
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <check_buttons+0xa0>)
 800168a:	466c      	mov	r4, sp
 800168c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart1, UBLOX_GPSStandby, 16,1000);
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	2210      	movs	r2, #16
 8001698:	4621      	mov	r1, r4
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <check_buttons+0xa4>)
 800169c:	f004 f8f2 	bl	8005884 <HAL_UART_Transmit>
			break;
 80016a0:	e7c4      	b.n	800162c <check_buttons+0x10>
 80016a2:	bf00      	nop
 80016a4:	20000067 	.word	0x20000067
 80016a8:	40010800 	.word	0x40010800
 80016ac:	20000b00 	.word	0x20000b00
 80016b0:	20000afc 	.word	0x20000afc
 80016b4:	20000069 	.word	0x20000069
 80016b8:	20000a38 	.word	0x20000a38
 80016bc:	08008658 	.word	0x08008658
 80016c0:	20000abc 	.word	0x20000abc

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b500      	push	{lr}
 80016c6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c8:	2300      	movs	r3, #0
 80016ca:	930c      	str	r3, [sp, #48]	; 0x30
 80016cc:	930d      	str	r3, [sp, #52]	; 0x34
 80016ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80016d0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d2:	9305      	str	r3, [sp, #20]
 80016d4:	9306      	str	r3, [sp, #24]
 80016d6:	9307      	str	r3, [sp, #28]
 80016d8:	9308      	str	r3, [sp, #32]
 80016da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	9303      	str	r3, [sp, #12]
 80016e2:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2201      	movs	r2, #1
 80016e6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f0:	2202      	movs	r2, #2
 80016f2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016fa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	a80a      	add	r0, sp, #40	; 0x28
 80016fe:	f002 fb67 	bl	8003dd0 <HAL_RCC_OscConfig>
 8001702:	b9c8      	cbnz	r0, 8001738 <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001704:	230f      	movs	r3, #15
 8001706:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2102      	movs	r1, #2
 800170a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001714:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001716:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001718:	a805      	add	r0, sp, #20
 800171a:	f002 fda9 	bl	8004270 <HAL_RCC_ClockConfig>
 800171e:	b968      	cbnz	r0, 800173c <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001720:	2301      	movs	r3, #1
 8001722:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001728:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172a:	a801      	add	r0, sp, #4
 800172c:	f002 fe78 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	b930      	cbnz	r0, 8001740 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 8001732:	b015      	add	sp, #84	; 0x54
 8001734:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
 800173a:	e7fe      	b.n	800173a <SystemClock_Config+0x76>
 800173c:	b672      	cpsid	i
 800173e:	e7fe      	b.n	800173e <SystemClock_Config+0x7a>
 8001740:	b672      	cpsid	i
 8001742:	e7fe      	b.n	8001742 <SystemClock_Config+0x7e>

08001744 <main>:
{
 8001744:	b500      	push	{lr}
 8001746:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001748:	f001 fd76 	bl	8003238 <HAL_Init>
  SystemClock_Config();
 800174c:	f7ff ffba 	bl	80016c4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	2500      	movs	r5, #0
 8001752:	950b      	str	r5, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4c98      	ldr	r4, [pc, #608]	; (80019b8 <main+0x274>)
 8001756:	69a3      	ldr	r3, [r4, #24]
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	61a3      	str	r3, [r4, #24]
 800175e:	69a3      	ldr	r3, [r4, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	69a3      	ldr	r3, [r4, #24]
 800176a:	61a3      	str	r3, [r4, #24]
 800176c:	69a3      	ldr	r3, [r4, #24]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	69a3      	ldr	r3, [r4, #24]
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	61a3      	str	r3, [r4, #24]
 800177e:	69a3      	ldr	r3, [r4, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	9304      	str	r3, [sp, #16]
 8001786:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	69a3      	ldr	r3, [r4, #24]
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	61a3      	str	r3, [r4, #24]
 8001790:	69a3      	ldr	r3, [r4, #24]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	9305      	str	r3, [sp, #20]
 8001798:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800179a:	2306      	movs	r3, #6
 800179c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179e:	4b87      	ldr	r3, [pc, #540]	; (80019bc <main+0x278>)
 80017a0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	a908      	add	r1, sp, #32
 80017a8:	4885      	ldr	r0, [pc, #532]	; (80019c0 <main+0x27c>)
 80017aa:	f001 ff4f 	bl	800364c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017ae:	462a      	mov	r2, r5
 80017b0:	4629      	mov	r1, r5
 80017b2:	2007      	movs	r0, #7
 80017b4:	f001 fd8a 	bl	80032cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017b8:	2007      	movs	r0, #7
 80017ba:	f001 fdb9 	bl	8003330 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017be:	462a      	mov	r2, r5
 80017c0:	4629      	mov	r1, r5
 80017c2:	2008      	movs	r0, #8
 80017c4:	f001 fd82 	bl	80032cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017c8:	2008      	movs	r0, #8
 80017ca:	f001 fdb1 	bl	8003330 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ce:	6963      	ldr	r3, [r4, #20]
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6163      	str	r3, [r4, #20]
 80017d6:	6963      	ldr	r3, [r4, #20]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017e0:	462a      	mov	r2, r5
 80017e2:	4629      	mov	r1, r5
 80017e4:	200f      	movs	r0, #15
 80017e6:	f001 fd71 	bl	80032cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017ea:	200f      	movs	r0, #15
 80017ec:	f001 fda0 	bl	8003330 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80017f0:	4874      	ldr	r0, [pc, #464]	; (80019c4 <main+0x280>)
 80017f2:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <main+0x284>)
 80017f4:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017f6:	4b75      	ldr	r3, [pc, #468]	; (80019cc <main+0x288>)
 80017f8:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fa:	6085      	str	r5, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fc:	60c5      	str	r5, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001802:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	6145      	str	r5, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001806:	6185      	str	r5, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001808:	61c5      	str	r5, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180a:	6205      	str	r5, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180c:	f002 f91a 	bl	8003a44 <HAL_I2C_Init>
 8001810:	2800      	cmp	r0, #0
 8001812:	f040 80ac 	bne.w	800196e <main+0x22a>
  huart1.Instance = USART1;
 8001816:	486e      	ldr	r0, [pc, #440]	; (80019d0 <main+0x28c>)
 8001818:	4b6e      	ldr	r3, [pc, #440]	; (80019d4 <main+0x290>)
 800181a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800181c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001820:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	2300      	movs	r3, #0
 8001824:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001826:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001828:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800182a:	220c      	movs	r2, #12
 800182c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001832:	f003 fff8 	bl	8005826 <HAL_UART_Init>
 8001836:	2800      	cmp	r0, #0
 8001838:	f040 809b 	bne.w	8001972 <main+0x22e>
  RTC_TimeTypeDef sTime = {0};
 800183c:	2300      	movs	r3, #0
 800183e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8001842:	f88d 301a 	strb.w	r3, [sp, #26]
  RTC_DateTypeDef DateToUpdate = {0};
 8001846:	9308      	str	r3, [sp, #32]
  hrtc.Instance = RTC;
 8001848:	4863      	ldr	r0, [pc, #396]	; (80019d8 <main+0x294>)
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <main+0x298>)
 800184c:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001858:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800185a:	f003 f9ed 	bl	8004c38 <HAL_RTC_Init>
 800185e:	2800      	cmp	r0, #0
 8001860:	f040 8089 	bne.w	8001976 <main+0x232>
  sTime.Hours = 0;
 8001864:	2200      	movs	r2, #0
 8001866:	f88d 2018 	strb.w	r2, [sp, #24]
  sTime.Minutes = 0;
 800186a:	f88d 2019 	strb.w	r2, [sp, #25]
  sTime.Seconds = 0;
 800186e:	f88d 201a 	strb.w	r2, [sp, #26]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001872:	a906      	add	r1, sp, #24
 8001874:	4858      	ldr	r0, [pc, #352]	; (80019d8 <main+0x294>)
 8001876:	f002 ffc0 	bl	80047fa <HAL_RTC_SetTime>
 800187a:	2800      	cmp	r0, #0
 800187c:	d17d      	bne.n	800197a <main+0x236>
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800187e:	2305      	movs	r3, #5
 8001880:	f88d 3020 	strb.w	r3, [sp, #32]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001884:	2301      	movs	r3, #1
 8001886:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  DateToUpdate.Date = 1;
 800188a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  DateToUpdate.Year = 21;
 800188e:	2315      	movs	r3, #21
 8001890:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001894:	2200      	movs	r2, #0
 8001896:	a908      	add	r1, sp, #32
 8001898:	484f      	ldr	r0, [pc, #316]	; (80019d8 <main+0x294>)
 800189a:	f003 f913 	bl	8004ac4 <HAL_RTC_SetDate>
 800189e:	2800      	cmp	r0, #0
 80018a0:	d16d      	bne.n	800197e <main+0x23a>
  MX_FATFS_Init();
 80018a2:	f004 fa27 	bl	8005cf4 <MX_FATFS_Init>
  hspi1.Instance = SPI1;
 80018a6:	484e      	ldr	r0, [pc, #312]	; (80019e0 <main+0x29c>)
 80018a8:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <main+0x2a0>)
 80018aa:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018b0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	2300      	movs	r3, #0
 80018b4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ba:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018c0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018c2:	2220      	movs	r2, #32
 80018c4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ca:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018cc:	230a      	movs	r3, #10
 80018ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d0:	f003 fa94 	bl	8004dfc <HAL_SPI_Init>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d154      	bne.n	8001982 <main+0x23e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d8:	2300      	movs	r3, #0
 80018da:	9308      	str	r3, [sp, #32]
 80018dc:	9309      	str	r3, [sp, #36]	; 0x24
 80018de:	930a      	str	r3, [sp, #40]	; 0x28
 80018e0:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	9306      	str	r3, [sp, #24]
 80018e4:	9307      	str	r3, [sp, #28]
  htim1.Instance = TIM1;
 80018e6:	4840      	ldr	r0, [pc, #256]	; (80019e8 <main+0x2a4>)
 80018e8:	4a40      	ldr	r2, [pc, #256]	; (80019ec <main+0x2a8>)
 80018ea:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 10000;
 80018ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80018f0:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 7200;
 80018f4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80018f8:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fa:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80018fc:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001902:	f003 fdfd 	bl	8005500 <HAL_TIM_Base_Init>
 8001906:	2800      	cmp	r0, #0
 8001908:	d13d      	bne.n	8001986 <main+0x242>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190a:	a90c      	add	r1, sp, #48	; 0x30
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001914:	4834      	ldr	r0, [pc, #208]	; (80019e8 <main+0x2a4>)
 8001916:	f003 fe29 	bl	800556c <HAL_TIM_ConfigClockSource>
 800191a:	2800      	cmp	r0, #0
 800191c:	d135      	bne.n	800198a <main+0x246>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001924:	a906      	add	r1, sp, #24
 8001926:	4830      	ldr	r0, [pc, #192]	; (80019e8 <main+0x2a4>)
 8001928:	f003 fec4 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 800192c:	2800      	cmp	r0, #0
 800192e:	d12e      	bne.n	800198e <main+0x24a>
  Screen_init(&u8g2);
 8001930:	482f      	ldr	r0, [pc, #188]	; (80019f0 <main+0x2ac>)
 8001932:	f7ff f9f9 	bl	8000d28 <Screen_init>
  HAL_Delay(1000);
 8001936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800193a:	f001 fca1 	bl	8003280 <HAL_Delay>
  GPS_init(&gps);
 800193e:	482d      	ldr	r0, [pc, #180]	; (80019f4 <main+0x2b0>)
 8001940:	f7ff f800 	bl	8000944 <GPS_init>
  configure_GPS();
 8001944:	f7fe ff98 	bl	8000878 <configure_GPS>
  HAL_TIM_Base_Start_IT(&htim1);
 8001948:	4827      	ldr	r0, [pc, #156]	; (80019e8 <main+0x2a4>)
 800194a:	f003 fc9f 	bl	800528c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, usart_rx_dma_buffer, MAX_NMEA_LEN);
 800194e:	4c20      	ldr	r4, [pc, #128]	; (80019d0 <main+0x28c>)
 8001950:	f240 228a 	movw	r2, #650	; 0x28a
 8001954:	4928      	ldr	r1, [pc, #160]	; (80019f8 <main+0x2b4>)
 8001956:	4620      	mov	r0, r4
 8001958:	f004 f808 	bl	800596c <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE); 			// enable idle line interrupt
 800195c:	6822      	ldr	r2, [r4, #0]
 800195e:	68d3      	ldr	r3, [r2, #12]
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	60d3      	str	r3, [r2, #12]
	if(GPSupdated)
 8001966:	4c25      	ldr	r4, [pc, #148]	; (80019fc <main+0x2b8>)
		__HAL_UART_DISABLE_IT(UART1, UART_IT_IDLE);
 8001968:	4d19      	ldr	r5, [pc, #100]	; (80019d0 <main+0x28c>)
		GPSupdated = 0;
 800196a:	2600      	movs	r6, #0
 800196c:	e013      	b.n	8001996 <main+0x252>
 800196e:	b672      	cpsid	i
 8001970:	e7fe      	b.n	8001970 <main+0x22c>
 8001972:	b672      	cpsid	i
 8001974:	e7fe      	b.n	8001974 <main+0x230>
 8001976:	b672      	cpsid	i
 8001978:	e7fe      	b.n	8001978 <main+0x234>
 800197a:	b672      	cpsid	i
 800197c:	e7fe      	b.n	800197c <main+0x238>
 800197e:	b672      	cpsid	i
 8001980:	e7fe      	b.n	8001980 <main+0x23c>
 8001982:	b672      	cpsid	i
 8001984:	e7fe      	b.n	8001984 <main+0x240>
 8001986:	b672      	cpsid	i
 8001988:	e7fe      	b.n	8001988 <main+0x244>
 800198a:	b672      	cpsid	i
 800198c:	e7fe      	b.n	800198c <main+0x248>
 800198e:	b672      	cpsid	i
 8001990:	e7fe      	b.n	8001990 <main+0x24c>
	check_buttons();
 8001992:	f7ff fe43 	bl	800161c <check_buttons>
	if(GPSupdated)
 8001996:	7823      	ldrb	r3, [r4, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0fa      	beq.n	8001992 <main+0x24e>
		__HAL_UART_DISABLE_IT(UART1, UART_IT_IDLE);
 800199c:	682a      	ldr	r2, [r5, #0]
 800199e:	68d3      	ldr	r3, [r2, #12]
 80019a0:	f023 0310 	bic.w	r3, r3, #16
 80019a4:	60d3      	str	r3, [r2, #12]
		log_data();
 80019a6:	f7ff f85f 	bl	8000a68 <log_data>
		GPSupdated = 0;
 80019aa:	7026      	strb	r6, [r4, #0]
		__HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);
 80019ac:	682a      	ldr	r2, [r5, #0]
 80019ae:	68d3      	ldr	r3, [r2, #12]
 80019b0:	f043 0310 	orr.w	r3, r3, #16
 80019b4:	60d3      	str	r3, [r2, #12]
 80019b6:	e7ec      	b.n	8001992 <main+0x24e>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	10210000 	.word	0x10210000
 80019c0:	40010800 	.word	0x40010800
 80019c4:	200009e4 	.word	0x200009e4
 80019c8:	40005400 	.word	0x40005400
 80019cc:	00061a80 	.word	0x00061a80
 80019d0:	20000abc 	.word	0x20000abc
 80019d4:	40013800 	.word	0x40013800
 80019d8:	2000069c 	.word	0x2000069c
 80019dc:	40002800 	.word	0x40002800
 80019e0:	2000093c 	.word	0x2000093c
 80019e4:	40013000 	.word	0x40013000
 80019e8:	20000b04 	.word	0x20000b04
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	20000a38 	.word	0x20000a38
 80019f4:	20000994 	.word	0x20000994
 80019f8:	200006b0 	.word	0x200006b0
 80019fc:	20000066 	.word	0x20000066

08001a00 <Error_Handler>:
 8001a00:	b672      	cpsid	i
 8001a02:	e7fe      	b.n	8001a02 <Error_Handler+0x2>

08001a04 <get_value>:


void get_value(uint8_t** fields, uint8_t field_count , uint8_t dest[FIELD_BUFF][FIELD_BUFF])
{
	uint8_t index;
	for(index = 0; index<field_count;index++)
 8001a04:	b391      	cbz	r1, 8001a6c <get_value+0x68>
{
 8001a06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	4605      	mov	r5, r0
 8001a0e:	1e4b      	subs	r3, r1, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3004      	adds	r0, #4
 8001a14:	eb00 0983 	add.w	r9, r0, r3, lsl #2
	{
		//limpia el buffer
		memset(dest[index], END_OF_STRING, FIELD_BUFF);
 8001a18:	2600      	movs	r6, #0
 8001a1a:	4627      	mov	r7, r4
 8001a1c:	6026      	str	r6, [r4, #0]
 8001a1e:	6066      	str	r6, [r4, #4]
 8001a20:	60a6      	str	r6, [r4, #8]
 8001a22:	60e6      	str	r6, [r4, #12]
 8001a24:	6126      	str	r6, [r4, #16]

		if( fields[index] == NULL) return;
 8001a26:	4628      	mov	r0, r5
 8001a28:	6829      	ldr	r1, [r5, #0]
 8001a2a:	b189      	cbz	r1, 8001a50 <get_value+0x4c>
 8001a2c:	3504      	adds	r5, #4

		if (! fields[index+1] ) //si el siguiente es nulo busca hasta el asterisco
 8001a2e:	682a      	ldr	r2, [r5, #0]
 8001a30:	b182      	cbz	r2, 8001a54 <get_value+0x50>
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
				dest[index][i] = fields[index][i];
			return;
		}
		//si no hay valor sale
		if( ( fields[index+1] - fields[index] ) < 1 ) return;
 8001a32:	1a52      	subs	r2, r2, r1
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	dd0b      	ble.n	8001a50 <get_value+0x4c>
		//copia lo que esta entre las dos comas al buffer
		memcpy(dest[index], fields[index], fields[index+1] - fields[index] -1 );
 8001a38:	3a01      	subs	r2, #1
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f006 fdc2 	bl	80085c4 <memcpy>
		dest[index][fields[index+1] - fields[index]] = '\0';//agrega el fin de cadena
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	54e6      	strb	r6, [r4, r3]
 8001a4a:	3414      	adds	r4, #20
	for(index = 0; index<field_count;index++)
 8001a4c:	454d      	cmp	r5, r9
 8001a4e:	d1e4      	bne.n	8001a1a <get_value+0x16>
	}
}
 8001a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
 8001a54:	780a      	ldrb	r2, [r1, #0]
 8001a56:	2a2a      	cmp	r2, #42	; 0x2a
 8001a58:	d0fa      	beq.n	8001a50 <get_value+0x4c>
 8001a5a:	2300      	movs	r3, #0
				dest[index][i] = fields[index][i];
 8001a5c:	54fa      	strb	r2, [r7, r3]
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	6802      	ldr	r2, [r0, #0]
 8001a64:	5cd2      	ldrb	r2, [r2, r3]
 8001a66:	2a2a      	cmp	r2, #42	; 0x2a
 8001a68:	d1f8      	bne.n	8001a5c <get_value+0x58>
 8001a6a:	e7f1      	b.n	8001a50 <get_value+0x4c>
 8001a6c:	4770      	bx	lr

08001a6e <coma_count>:
{
	uint8_t count;
	//aumenta el puntero hasta que encuentra una coma. Cuando la encuettra avanza
	//count y se va separando del inicio del puntero. Cuando no encuentra la coma
	//sigue aumentando el puntero hasta lelgar al final.
	for (count=0; string[count] != END_STAR; string[count]==COMA ? count++ : *string++);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	e004      	b.n	8001a7c <coma_count+0xe>
 8001a72:	2b2c      	cmp	r3, #44	; 0x2c
 8001a74:	bf06      	itte	eq
 8001a76:	3201      	addeq	r2, #1
 8001a78:	b2d2      	uxtbeq	r2, r2
 8001a7a:	3001      	addne	r0, #1
 8001a7c:	5c83      	ldrb	r3, [r0, r2]
 8001a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a80:	d1f7      	bne.n	8001a72 <coma_count+0x4>
	return count;
}
 8001a82:	4610      	mov	r0, r2
 8001a84:	4770      	bx	lr

08001a86 <get_fields>:
{
 8001a86:	b570      	push	{r4, r5, r6, lr}
 8001a88:	b094      	sub	sp, #80	; 0x50
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	460e      	mov	r6, r1
 8001a8e:	f1ad 0304 	sub.w	r3, sp, #4
 8001a92:	466d      	mov	r5, sp
 8001a94:	a913      	add	r1, sp, #76	; 0x4c
		fields[i] = NULL;
 8001a96:	2200      	movs	r2, #0
 8001a98:	f843 2f04 	str.w	r2, [r3, #4]!
	for(i = 0; i<FIELD_BUFF; i++)
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	d1fb      	bne.n	8001a98 <get_fields+0x12>
	uint8_t field_count = coma_count(line);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff ffe4 	bl	8001a6e <coma_count>
	line++; //avanza la primer coma
 8001aa6:	3401      	adds	r4, #1
	for(i = 0; i< field_count; i++)
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	b318      	cbz	r0, 8001af4 <get_fields+0x6e>
 8001aac:	3801      	subs	r0, #1
 8001aae:	b2c3      	uxtb	r3, r0
 8001ab0:	1d28      	adds	r0, r5, #4
 8001ab2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ab6:	e002      	b.n	8001abe <get_fields+0x38>
		line++;
 8001ab8:	3401      	adds	r4, #1
	for(i = 0; i< field_count; i++)
 8001aba:	4285      	cmp	r5, r0
 8001abc:	d00d      	beq.n	8001ada <get_fields+0x54>
		fields[i] = line;
 8001abe:	f845 4b04 	str.w	r4, [r5], #4
		for(line; !( (*line) == COMA || (*line) == END_STAR); line++);
 8001ac2:	7823      	ldrb	r3, [r4, #0]
 8001ac4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ac6:	d0f7      	beq.n	8001ab8 <get_fields+0x32>
 8001ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aca:	d0f5      	beq.n	8001ab8 <get_fields+0x32>
 8001acc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001ad0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ad2:	d0f1      	beq.n	8001ab8 <get_fields+0x32>
 8001ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ad6:	d1f9      	bne.n	8001acc <get_fields+0x46>
 8001ad8:	e7ee      	b.n	8001ab8 <get_fields+0x32>
	for(i = 0; i< field_count; i++)
 8001ada:	460b      	mov	r3, r1
	fields[i] = NULL;
 8001adc:	aa14      	add	r2, sp, #80	; 0x50
 8001ade:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f843 2c50 	str.w	r2, [r3, #-80]
	get_value(fields, field_count , fields_array);
 8001ae8:	4632      	mov	r2, r6
 8001aea:	4668      	mov	r0, sp
 8001aec:	f7ff ff8a 	bl	8001a04 <get_value>
}
 8001af0:	b014      	add	sp, #80	; 0x50
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
	for(i = 0; i< field_count; i++)
 8001af4:	4603      	mov	r3, r0
 8001af6:	e7f1      	b.n	8001adc <get_fields+0x56>

08001af8 <start_sentence_ptr>:

uint8_t* start_sentence_ptr(uint8_t *ptrStartBuff, uint8_t *message)
{
	uint8_t* tok;
	for( tok = message;
 8001af8:	780b      	ldrb	r3, [r1, #0]
 8001afa:	2b24      	cmp	r3, #36	; 0x24
 8001afc:	d00c      	beq.n	8001b18 <start_sentence_ptr+0x20>
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
					(tok - ptrStartBuff) < DMA_BUFF_SIZE;
 8001afe:	1a0a      	subs	r2, r1, r0
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
 8001b00:	f240 2389 	movw	r3, #649	; 0x289
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dc07      	bgt.n	8001b18 <start_sentence_ptr+0x20>
 8001b08:	461a      	mov	r2, r3
	for( tok = message;
 8001b0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001b0e:	2b24      	cmp	r3, #36	; 0x24
 8001b10:	d002      	beq.n	8001b18 <start_sentence_ptr+0x20>
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
 8001b12:	1a0b      	subs	r3, r1, r0
 8001b14:	4293      	cmp	r3, r2
 8001b16:	ddf8      	ble.n	8001b0a <start_sentence_ptr+0x12>
			tok++);
	if((tok-ptrStartBuff) == DMA_BUFF_SIZE )
 8001b18:	f2a1 238a 	subw	r3, r1, #650	; 0x28a
 8001b1c:	4283      	cmp	r3, r0
		return NULL;
	else return ++tok;
 8001b1e:	bf14      	ite	ne
 8001b20:	1c48      	addne	r0, r1, #1
		return NULL;
 8001b22:	2000      	moveq	r0, #0
}
 8001b24:	4770      	bx	lr

08001b26 <is_sentence_complete>:
uint8_t is_sentence_complete(uint8_t *message, uint8_t *tok)
{
	uint8_t* aux;
	//checkea que la frase este completa
	for(aux = tok;
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 8001b26:	780b      	ldrb	r3, [r1, #0]
	for(aux = tok;
 8001b28:	2b0d      	cmp	r3, #13
 8001b2a:	d01a      	beq.n	8001b62 <is_sentence_complete+0x3c>
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 8001b2c:	b1cb      	cbz	r3, 8001b62 <is_sentence_complete+0x3c>
{
 8001b2e:	b410      	push	{r4}
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 8001b30:	1a0c      	subs	r4, r1, r0
 8001b32:	f240 2289 	movw	r2, #649	; 0x289
 8001b36:	4294      	cmp	r4, r2
 8001b38:	dc08      	bgt.n	8001b4c <is_sentence_complete+0x26>
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
	for(aux = tok;
 8001b40:	2b0d      	cmp	r3, #13
 8001b42:	d003      	beq.n	8001b4c <is_sentence_complete+0x26>
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 8001b44:	b113      	cbz	r3, 8001b4c <is_sentence_complete+0x26>
 8001b46:	1a0a      	subs	r2, r1, r0
 8001b48:	42a2      	cmp	r2, r4
 8001b4a:	ddf7      	ble.n	8001b3c <is_sentence_complete+0x16>
			aux++);
	//si llego al final, devuelve NULL
	if((aux-message) == DMA_BUFF_SIZE || *aux == END_OF_STRING)
 8001b4c:	f2a1 218a 	subw	r1, r1, #650	; 0x28a
 8001b50:	4281      	cmp	r1, r0
 8001b52:	d004      	beq.n	8001b5e <is_sentence_complete+0x38>
		return FALSE;
 8001b54:	1c18      	adds	r0, r3, #0
 8001b56:	bf18      	it	ne
 8001b58:	2001      	movne	r0, #1
	else return TRUE;

}
 8001b5a:	bc10      	pop	{r4}
 8001b5c:	4770      	bx	lr
		return FALSE;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e7fb      	b.n	8001b5a <is_sentence_complete+0x34>
	if((aux-message) == DMA_BUFF_SIZE || *aux == END_OF_STRING)
 8001b62:	f2a1 218a 	subw	r1, r1, #650	; 0x28a
 8001b66:	4281      	cmp	r1, r0
 8001b68:	d003      	beq.n	8001b72 <is_sentence_complete+0x4c>
		return FALSE;
 8001b6a:	1c18      	adds	r0, r3, #0
 8001b6c:	bf18      	it	ne
 8001b6e:	2001      	movne	r0, #1
 8001b70:	4770      	bx	lr
 8001b72:	2000      	movs	r0, #0
}
 8001b74:	4770      	bx	lr

08001b76 <get_sentence_ptr>:

uint8_t* get_sentence_ptr(uint8_t *message, const char *type,  uint8_t *init_ptr)
{
 8001b76:	b570      	push	{r4, r5, r6, lr}
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
	uint8_t* tok;
	uint8_t* aux;
	const char * aux_type;

	if(init_ptr == NULL) tok = message;
 8001b7c:	1e11      	subs	r1, r2, #0
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	bf08      	it	eq
 8001b82:	4601      	moveq	r1, r0
	  while((*tok) == (*type))
	  {
		  tok++;
		  type++;
	  }
	}while ((*type) != END_OF_STRING &&
 8001b84:	f240 2689 	movw	r6, #649	; 0x289
 8001b88:	e003      	b.n	8001b92 <get_sentence_ptr+0x1c>
			(tok-message) < DMA_BUFF_SIZE);
 8001b8a:	b1ab      	cbz	r3, 8001bb8 <get_sentence_ptr+0x42>
 8001b8c:	1b0b      	subs	r3, r1, r4
	}while ((*type) != END_OF_STRING &&
 8001b8e:	42b3      	cmp	r3, r6
 8001b90:	dc10      	bgt.n	8001bb4 <get_sentence_ptr+0x3e>
	  if( !(tok = start_sentence_ptr(message,tok) ) ) return NULL;
 8001b92:	4620      	mov	r0, r4
 8001b94:	f7ff ffb0 	bl	8001af8 <start_sentence_ptr>
 8001b98:	4601      	mov	r1, r0
 8001b9a:	b170      	cbz	r0, 8001bba <get_sentence_ptr+0x44>
	  while((*tok) == (*type))
 8001b9c:	782b      	ldrb	r3, [r5, #0]
 8001b9e:	7802      	ldrb	r2, [r0, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1f2      	bne.n	8001b8a <get_sentence_ptr+0x14>
 8001ba4:	462a      	mov	r2, r5
 8001ba6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001baa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8001bae:	4298      	cmp	r0, r3
 8001bb0:	d0f9      	beq.n	8001ba6 <get_sentence_ptr+0x30>
 8001bb2:	e7ea      	b.n	8001b8a <get_sentence_ptr+0x14>

	//checkea que haya cortado por coincidencia y no por fin del buffer
	if((*type) != END_OF_STRING) return NULL;
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	e000      	b.n	8001bba <get_sentence_ptr+0x44>
 8001bb8:	4608      	mov	r0, r1
        //printf("get_sentence CRC incorrecto\r\n");
        return NULL;
    }*/


}
 8001bba:	bd70      	pop	{r4, r5, r6, pc}

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_MspInit+0x3c>)
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	f002 0201 	and.w	r2, r2, #1
 8001bce:	9200      	str	r2, [sp, #0]
 8001bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	69da      	ldr	r2, [r3, #28]
 8001bd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd8:	61da      	str	r2, [r3, #28]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_MspInit+0x40>)
 8001be6:	6853      	ldr	r3, [r2, #4]
 8001be8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	b002      	add	sp, #8
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000

08001c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c00:	b510      	push	{r4, lr}
 8001c02:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	2300      	movs	r3, #0
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	9303      	str	r3, [sp, #12]
 8001c0a:	9304      	str	r3, [sp, #16]
 8001c0c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8001c0e:	6802      	ldr	r2, [r0, #0]
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_I2C_MspInit+0x58>)
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c16:	b006      	add	sp, #24
 8001c18:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4c10      	ldr	r4, [pc, #64]	; (8001c5c <HAL_I2C_MspInit+0x5c>)
 8001c1c:	69a3      	ldr	r3, [r4, #24]
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	61a3      	str	r3, [r4, #24]
 8001c24:	69a3      	ldr	r3, [r4, #24]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c2e:	23c0      	movs	r3, #192	; 0xc0
 8001c30:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c32:	2312      	movs	r3, #18
 8001c34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	a902      	add	r1, sp, #8
 8001c3c:	4808      	ldr	r0, [pc, #32]	; (8001c60 <HAL_I2C_MspInit+0x60>)
 8001c3e:	f001 fd05 	bl	800364c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c42:	69e3      	ldr	r3, [r4, #28]
 8001c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c48:	61e3      	str	r3, [r4, #28]
 8001c4a:	69e3      	ldr	r3, [r4, #28]
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	9b01      	ldr	r3, [sp, #4]
}
 8001c54:	e7df      	b.n	8001c16 <HAL_I2C_MspInit+0x16>
 8001c56:	bf00      	nop
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010c00 	.word	0x40010c00

08001c64 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001c64:	6802      	ldr	r2, [r0, #0]
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_RTC_MspInit+0x34>)
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d000      	beq.n	8001c6e <HAL_RTC_MspInit+0xa>
 8001c6c:	4770      	bx	lr
{
 8001c6e:	b500      	push	{lr}
 8001c70:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001c72:	f002 f8a7 	bl	8003dc4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RTC_MspInit+0x38>)
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001c7e:	61da      	str	r2, [r3, #28]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RTC_MspInit+0x3c>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c90:	b003      	add	sp, #12
 8001c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c96:	bf00      	nop
 8001c98:	40002800 	.word	0x40002800
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	4242043c 	.word	0x4242043c

08001ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	9303      	str	r3, [sp, #12]
 8001cae:	9304      	str	r3, [sp, #16]
 8001cb0:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8001cb2:	6802      	ldr	r2, [r0, #0]
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_SPI_MspInit+0x6c>)
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cba:	b006      	add	sp, #24
 8001cbc:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cbe:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cd0:	9200      	str	r2, [sp, #0]
 8001cd2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	f042 0204 	orr.w	r2, r2, #4
 8001cda:	619a      	str	r2, [r3, #24]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001ce6:	23b0      	movs	r3, #176	; 0xb0
 8001ce8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	4c08      	ldr	r4, [pc, #32]	; (8001d14 <HAL_SPI_MspInit+0x70>)
 8001cf4:	a902      	add	r1, sp, #8
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f001 fca8 	bl	800364c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cfc:	2340      	movs	r3, #64	; 0x40
 8001cfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	a902      	add	r1, sp, #8
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f001 fc9f 	bl	800364c <HAL_GPIO_Init>
}
 8001d0e:	e7d4      	b.n	8001cba <HAL_SPI_MspInit+0x16>
 8001d10:	40013000 	.word	0x40013000
 8001d14:	40010800 	.word	0x40010800

08001d18 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001d18:	6802      	ldr	r2, [r0, #0]
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_TIM_Base_MspInit+0x3c>)
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d000      	beq.n	8001d22 <HAL_TIM_Base_MspInit+0xa>
 8001d20:	4770      	bx	lr
{
 8001d22:	b500      	push	{lr}
 8001d24:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d26:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d30:	619a      	str	r2, [r3, #24]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4611      	mov	r1, r2
 8001d40:	2019      	movs	r0, #25
 8001d42:	f001 fac3 	bl	80032cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d46:	2019      	movs	r0, #25
 8001d48:	f001 faf2 	bl	8003330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d4c:	b003      	add	sp, #12
 8001d4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d52:	bf00      	nop
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b570      	push	{r4, r5, r6, lr}
 8001d5a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	9303      	str	r3, [sp, #12]
 8001d62:	9304      	str	r3, [sp, #16]
 8001d64:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8001d66:	6802      	ldr	r2, [r0, #0]
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_UART_MspInit+0xac>)
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d6e:	b006      	add	sp, #24
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
 8001d72:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d74:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d7e:	619a      	str	r2, [r3, #24]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	f042 0204 	orr.w	r2, r2, #4
 8001d90:	619a      	str	r2, [r3, #24]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	4e17      	ldr	r6, [pc, #92]	; (8001e08 <HAL_UART_MspInit+0xb0>)
 8001dac:	a902      	add	r1, sp, #8
 8001dae:	4630      	mov	r0, r6
 8001db0:	f001 fc4c 	bl	800364c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2500      	movs	r5, #0
 8001dbc:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	a902      	add	r1, sp, #8
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f001 fc42 	bl	800364c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001dc8:	4810      	ldr	r0, [pc, #64]	; (8001e0c <HAL_UART_MspInit+0xb4>)
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_UART_MspInit+0xb8>)
 8001dcc:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dce:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd0:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd6:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd8:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dde:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001de0:	f001 faca 	bl	8003378 <HAL_DMA_Init>
 8001de4:	b958      	cbnz	r0, 8001dfe <HAL_UART_MspInit+0xa6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_UART_MspInit+0xb4>)
 8001de8:	6363      	str	r3, [r4, #52]	; 0x34
 8001dea:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	4611      	mov	r1, r2
 8001df0:	2025      	movs	r0, #37	; 0x25
 8001df2:	f001 fa6b 	bl	80032cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001df6:	2025      	movs	r0, #37	; 0x25
 8001df8:	f001 fa9a 	bl	8003330 <HAL_NVIC_EnableIRQ>
}
 8001dfc:	e7b7      	b.n	8001d6e <HAL_UART_MspInit+0x16>
      Error_Handler();
 8001dfe:	f7ff fdff 	bl	8001a00 <Error_Handler>
 8001e02:	e7f0      	b.n	8001de6 <HAL_UART_MspInit+0x8e>
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	200009a0 	.word	0x200009a0
 8001e10:	40020058 	.word	0x40020058

08001e14 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <SDTimer_Handler+0x28>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	b123      	cbz	r3, 8001e26 <SDTimer_Handler+0x12>
    Timer1--;
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <SDTimer_Handler+0x28>)
 8001e1e:	8813      	ldrh	r3, [r2, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	8013      	strh	r3, [r2, #0]

  if(Timer2 > 0)
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <SDTimer_Handler+0x2c>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b123      	cbz	r3, 8001e38 <SDTimer_Handler+0x24>
    Timer2--;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <SDTimer_Handler+0x2c>)
 8001e30:	8813      	ldrh	r3, [r2, #0]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	8013      	strh	r3, [r2, #0]
}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000b4c 	.word	0x20000b4c
 8001e40:	20000b4e 	.word	0x20000b4e

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler>

08001e4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <SysTick_Handler+0x28>)
 8001e58:	7813      	ldrb	r3, [r2, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	7013      	strb	r3, [r2, #0]
  if(FatFsCnt >= 10)
 8001e60:	7813      	ldrb	r3, [r2, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d802      	bhi.n	8001e6e <SysTick_Handler+0x1a>
  {
	FatFsCnt = 0;
	SDTimer_Handler();
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e68:	f001 f9f8 	bl	800325c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6c:	bd08      	pop	{r3, pc}
	FatFsCnt = 0;
 8001e6e:	4613      	mov	r3, r2
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 8001e74:	f7ff ffce 	bl	8001e14 <SDTimer_Handler>
 8001e78:	e7f6      	b.n	8001e68 <SysTick_Handler+0x14>
 8001e7a:	bf00      	nop
 8001e7c:	2000006b 	.word	0x2000006b

08001e80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e82:	2002      	movs	r0, #2
 8001e84:	f001 fce4 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e88:	bd08      	pop	{r3, pc}

08001e8a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e8a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e8c:	2004      	movs	r0, #4
 8001e8e:	f001 fcdf 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e92:	bd08      	pop	{r3, pc}

08001e94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e96:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA1_Channel5_IRQHandler+0xc>)
 8001e98:	f001 fb38 	bl	800350c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e9c:	bd08      	pop	{r3, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200009a0 	.word	0x200009a0

08001ea4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIM1_UP_IRQHandler+0xc>)
 8001ea8:	f003 fa28 	bl	80052fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001eac:	bd08      	pop	{r3, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000b04 	.word	0x20000b04

08001eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	b082      	sub	sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eb8:	4c0c      	ldr	r4, [pc, #48]	; (8001eec <USART1_IRQHandler+0x38>)
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f003 fe4a 	bl	8005b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) != RESET))
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f012 0f10 	tst.w	r2, #16
 8001ec8:	d003      	beq.n	8001ed2 <USART1_IRQHandler+0x1e>
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	f012 0f10 	tst.w	r2, #16
 8001ed0:	d101      	bne.n	8001ed6 <USART1_IRQHandler+0x22>
	  HAL_UART_RxIdleCallback(&huart1);
  }


  /* USER CODE END USART1_IRQn 1 */
}
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd10      	pop	{r4, pc}
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	9201      	str	r2, [sp, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	9201      	str	r2, [sp, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	9b01      	ldr	r3, [sp, #4]
	  HAL_UART_RxIdleCallback(&huart1);
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fb77 	bl	80015d8 <HAL_UART_RxIdleCallback>
}
 8001eea:	e7f2      	b.n	8001ed2 <USART1_IRQHandler+0x1e>
 8001eec:	20000abc 	.word	0x20000abc

08001ef0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	4770      	bx	lr

08001ef2 <pow_10>:
 */
#include "tools.h"

int pow_10(uint8_t n)
{
    if(!n) return 1;
 8001ef2:	b160      	cbz	r0, 8001f0e <pow_10+0x1c>
    n--;
 8001ef4:	1e43      	subs	r3, r0, #1
    int power = 10;
    while(n)
 8001ef6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001efa:	d00a      	beq.n	8001f12 <pow_10+0x20>
    int power = 10;
 8001efc:	200a      	movs	r0, #10
    {
        power*=10;
 8001efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f02:	0040      	lsls	r0, r0, #1
        n--;
 8001f04:	3b01      	subs	r3, #1
    while(n)
 8001f06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001f0a:	d1f8      	bne.n	8001efe <pow_10+0xc>
 8001f0c:	4770      	bx	lr
    if(!n) return 1;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	4770      	bx	lr
    int power = 10;
 8001f12:	200a      	movs	r0, #10
    }
    return power;
}
 8001f14:	4770      	bx	lr

08001f16 <ascii_to_int>:

int ascii_to_int(uint8_t *str)
{
 8001f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t negative = 0;
    if(!str) return 0;
 8001f1a:	b358      	cbz	r0, 8001f74 <ascii_to_int+0x5e>
 8001f1c:	4605      	mov	r5, r0
    if(*str == '-')
 8001f1e:	7803      	ldrb	r3, [r0, #0]
 8001f20:	2b2d      	cmp	r3, #45	; 0x2d
 8001f22:	d01b      	beq.n	8001f5c <ascii_to_int+0x46>
    {
        str++;
        negative = 1;
    }

    int size = strlen(str);
 8001f24:	f7fe f912 	bl	800014c <strlen>
 8001f28:	4607      	mov	r7, r0
    int result = 0;
    for ( int i = 0 ; i < size; i++)
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	dd24      	ble.n	8001f78 <ascii_to_int+0x62>
    uint8_t negative = 0;
 8001f2e:	f04f 0800 	mov.w	r8, #0
 8001f32:	4405      	add	r5, r0
    for ( int i = 0 ; i < size; i++)
 8001f34:	2400      	movs	r4, #0
    int result = 0;
 8001f36:	4626      	mov	r6, r4
        result += (str[size-i-1] - 48)*pow_10(i);
 8001f38:	b2e0      	uxtb	r0, r4
 8001f3a:	f7ff ffda 	bl	8001ef2 <pow_10>
 8001f3e:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 8001f42:	3b30      	subs	r3, #48	; 0x30
 8001f44:	fb00 6603 	mla	r6, r0, r3, r6
    for ( int i = 0 ; i < size; i++)
 8001f48:	3401      	adds	r4, #1
 8001f4a:	42bc      	cmp	r4, r7
 8001f4c:	d1f4      	bne.n	8001f38 <ascii_to_int+0x22>
    if(negative) return -result;
 8001f4e:	f1b8 0f00 	cmp.w	r8, #0
 8001f52:	d000      	beq.n	8001f56 <ascii_to_int+0x40>
 8001f54:	4276      	negs	r6, r6
    return result;
}
 8001f56:	4630      	mov	r0, r6
 8001f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        str++;
 8001f5c:	3501      	adds	r5, #1
    int size = strlen(str);
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f7fe f8f4 	bl	800014c <strlen>
 8001f64:	4607      	mov	r7, r0
    for ( int i = 0 ; i < size; i++)
 8001f66:	2800      	cmp	r0, #0
 8001f68:	dd02      	ble.n	8001f70 <ascii_to_int+0x5a>
        negative = 1;
 8001f6a:	f04f 0801 	mov.w	r8, #1
 8001f6e:	e7e0      	b.n	8001f32 <ascii_to_int+0x1c>
    int result = 0;
 8001f70:	2600      	movs	r6, #0
 8001f72:	e7ef      	b.n	8001f54 <ascii_to_int+0x3e>
    if(!str) return 0;
 8001f74:	2600      	movs	r6, #0
 8001f76:	e7ee      	b.n	8001f56 <ascii_to_int+0x40>
    int result = 0;
 8001f78:	2600      	movs	r6, #0
 8001f7a:	e7ec      	b.n	8001f56 <ascii_to_int+0x40>

08001f7c <ascii_to_float>:

void ascii_to_float(uint8_t* ptrstr, float* num)
{
 8001f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f80:	4680      	mov	r8, r0
 8001f82:	460e      	mov	r6, r1
    uint8_t coma;
    uint8_t size;
    uint8_t entero;
    uint8_t* str=ptrstr;

    *num = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	600b      	str	r3, [r1, #0]

    if(str[0] == '-') str++;
 8001f88:	7803      	ldrb	r3, [r0, #0]
 8001f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f8c:	bf0c      	ite	eq
 8001f8e:	1c47      	addeq	r7, r0, #1
    uint8_t* str=ptrstr;
 8001f90:	4607      	movne	r7, r0

    for (size = 0; str[size] != '\0'; size++);
 8001f92:	783b      	ldrb	r3, [r7, #0]
 8001f94:	b12b      	cbz	r3, 8001fa2 <ascii_to_float+0x26>
 8001f96:	2300      	movs	r3, #0
 8001f98:	3301      	adds	r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	5cfa      	ldrb	r2, [r7, r3]
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d1fa      	bne.n	8001f98 <ascii_to_float+0x1c>
    size--;
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b2dd      	uxtb	r5, r3

    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001fa6:	5d7c      	ldrb	r4, [r7, r5]
 8001fa8:	2c2e      	cmp	r4, #46	; 0x2e
 8001faa:	d049      	beq.n	8002040 <ascii_to_float+0xc4>
 8001fac:	f04f 0900 	mov.w	r9, #0
        *num += (str[size-coma] - 48)*pow_10(coma);
 8001fb0:	4648      	mov	r0, r9
 8001fb2:	f7ff ff9e 	bl	8001ef2 <pow_10>
 8001fb6:	3c30      	subs	r4, #48	; 0x30
 8001fb8:	fb00 f004 	mul.w	r0, r0, r4
 8001fbc:	f7fe f988 	bl	80002d0 <__aeabi_i2f>
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	6830      	ldr	r0, [r6, #0]
 8001fc4:	f7fe f8d0 	bl	8000168 <__addsf3>
 8001fc8:	6030      	str	r0, [r6, #0]
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8001fca:	f109 0901 	add.w	r9, r9, #1
 8001fce:	fa5f f989 	uxtb.w	r9, r9
 8001fd2:	eba5 0309 	sub.w	r3, r5, r9
 8001fd6:	5cfc      	ldrb	r4, [r7, r3]
 8001fd8:	2c2e      	cmp	r4, #46	; 0x2e
 8001fda:	d1e9      	bne.n	8001fb0 <ascii_to_float+0x34>
    coma++;
 8001fdc:	f109 0401 	add.w	r4, r9, #1
 8001fe0:	b2e4      	uxtb	r4, r4

    *num = (*num)/pow_10(coma-1);
 8001fe2:	4648      	mov	r0, r9
 8001fe4:	f7ff ff85 	bl	8001ef2 <pow_10>
 8001fe8:	f7fe f972 	bl	80002d0 <__aeabi_i2f>
 8001fec:	4601      	mov	r1, r0
 8001fee:	6830      	ldr	r0, [r6, #0]
 8001ff0:	f7fe fa76 	bl	80004e0 <__aeabi_fdiv>
 8001ff4:	6030      	str	r0, [r6, #0]

    for ( entero = coma ; (size+1) != entero; entero++)
 8001ff6:	f105 0b01 	add.w	fp, r5, #1
 8001ffa:	46a2      	mov	sl, r4
 8001ffc:	45a3      	cmp	fp, r4
 8001ffe:	d019      	beq.n	8002034 <ascii_to_float+0xb8>
        *num += (str[size-entero] - 48)*pow_10(entero-coma);
 8002000:	ea6f 0909 	mvn.w	r9, r9
 8002004:	eb04 0009 	add.w	r0, r4, r9
 8002008:	b2c0      	uxtb	r0, r0
 800200a:	f7ff ff72 	bl	8001ef2 <pow_10>
 800200e:	eba5 0a0a 	sub.w	sl, r5, sl
 8002012:	f817 300a 	ldrb.w	r3, [r7, sl]
 8002016:	3b30      	subs	r3, #48	; 0x30
 8002018:	fb00 f003 	mul.w	r0, r0, r3
 800201c:	f7fe f958 	bl	80002d0 <__aeabi_i2f>
 8002020:	4601      	mov	r1, r0
 8002022:	6830      	ldr	r0, [r6, #0]
 8002024:	f7fe f8a0 	bl	8000168 <__addsf3>
 8002028:	6030      	str	r0, [r6, #0]
    for ( entero = coma ; (size+1) != entero; entero++)
 800202a:	3401      	adds	r4, #1
 800202c:	b2e4      	uxtb	r4, r4
 800202e:	46a2      	mov	sl, r4
 8002030:	455c      	cmp	r4, fp
 8002032:	d1e7      	bne.n	8002004 <ascii_to_float+0x88>

    if(ptrstr[0]=='-') *num = -*num;
 8002034:	f898 3000 	ldrb.w	r3, [r8]
 8002038:	2b2d      	cmp	r3, #45	; 0x2d
 800203a:	d004      	beq.n	8002046 <ascii_to_float+0xca>
}
 800203c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for ( coma = 0; str[size-coma] != '.'; coma++)
 8002040:	f04f 0900 	mov.w	r9, #0
 8002044:	e7ca      	b.n	8001fdc <ascii_to_float+0x60>
    if(ptrstr[0]=='-') *num = -*num;
 8002046:	6833      	ldr	r3, [r6, #0]
 8002048:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800204c:	6033      	str	r3, [r6, #0]
}
 800204e:	e7f5      	b.n	800203c <ascii_to_float+0xc0>

08002050 <int_to_ascii>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
__uint8_t int_to_ascii(int x, char dest[], __uint8_t d)
{
 8002050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002054:	4689      	mov	r9, r1
 8002056:	4617      	mov	r7, r2
    __uint8_t digit;
    __uint8_t negative = 0;
    char * str;

    if(x == 0)
 8002058:	b9a8      	cbnz	r0, 8002086 <int_to_ascii+0x36>
    {
        if(d)
 800205a:	b172      	cbz	r2, 800207a <int_to_ascii+0x2a>
        {
          __uint8_t d_aux = d;
          dest[d] = '\0';
 800205c:	2300      	movs	r3, #0
 800205e:	548b      	strb	r3, [r1, r2]
 8002060:	1e53      	subs	r3, r2, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	440b      	add	r3, r1
          do
          {
            d--;
            dest[d] = '0';
 8002068:	2230      	movs	r2, #48	; 0x30
 800206a:	f803 2d01 	strb.w	r2, [r3, #-1]!
          }while(d);
 800206e:	454b      	cmp	r3, r9
 8002070:	d1fb      	bne.n	800206a <int_to_ascii+0x1a>

          return d_aux;
 8002072:	463c      	mov	r4, r7
    if(negative)
        dest[0] = '-';

    return digit;

}
 8002074:	4620      	mov	r0, r4
 8002076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            dest[0] = '0';
 800207a:	2330      	movs	r3, #48	; 0x30
 800207c:	700b      	strb	r3, [r1, #0]
          dest[1] = '\0';
 800207e:	2300      	movs	r3, #0
 8002080:	704b      	strb	r3, [r1, #1]
          return 1;
 8002082:	2401      	movs	r4, #1
 8002084:	e7f6      	b.n	8002074 <int_to_ascii+0x24>
 8002086:	4606      	mov	r6, r0
    if(x<0)
 8002088:	2800      	cmp	r0, #0
 800208a:	db04      	blt.n	8002096 <int_to_ascii+0x46>
    else str = dest;
 800208c:	4688      	mov	r8, r1
    __uint8_t negative = 0;
 800208e:	f04f 0a00 	mov.w	sl, #0
    for(digit = 0 ; x/pow_10(digit); digit++);
 8002092:	2500      	movs	r5, #0
 8002094:	e006      	b.n	80020a4 <int_to_ascii+0x54>
        x = -x;
 8002096:	4246      	negs	r6, r0
        str = dest +1;
 8002098:	f101 0801 	add.w	r8, r1, #1
        negative = 1;
 800209c:	f04f 0a01 	mov.w	sl, #1
 80020a0:	e7f7      	b.n	8002092 <int_to_ascii+0x42>
 80020a2:	461d      	mov	r5, r3
 80020a4:	b2ec      	uxtb	r4, r5
    for(digit = 0 ; x/pow_10(digit); digit++);
 80020a6:	4620      	mov	r0, r4
 80020a8:	f7ff ff23 	bl	8001ef2 <pow_10>
 80020ac:	1c6b      	adds	r3, r5, #1
 80020ae:	fb96 f0f0 	sdiv	r0, r6, r0
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d1f5      	bne.n	80020a2 <int_to_ascii+0x52>
    if(d>digit)
 80020b6:	42bc      	cmp	r4, r7
 80020b8:	d209      	bcs.n	80020ce <int_to_ascii+0x7e>
 80020ba:	1e7b      	subs	r3, r7, #1
 80020bc:	1b1b      	subs	r3, r3, r4
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	4443      	add	r3, r8
        *str = '0';
 80020c4:	2230      	movs	r2, #48	; 0x30
 80020c6:	f808 2b01 	strb.w	r2, [r8], #1
       while(d>digit )
 80020ca:	4598      	cmp	r8, r3
 80020cc:	d1fb      	bne.n	80020c6 <int_to_ascii+0x76>
    str[digit] = '\0';
 80020ce:	b2ed      	uxtb	r5, r5
 80020d0:	eb08 0705 	add.w	r7, r8, r5
 80020d4:	2300      	movs	r3, #0
 80020d6:	f808 3005 	strb.w	r3, [r8, r5]
    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 80020da:	b1a4      	cbz	r4, 8002106 <int_to_ascii+0xb6>
        str[digit - decimal -1 ] = (x/pow_10(decimal))%pow_10(1) +'0';
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff ff08 	bl	8001ef2 <pow_10>
 80020e2:	4680      	mov	r8, r0
 80020e4:	2500      	movs	r5, #0
 80020e6:	b2e8      	uxtb	r0, r5
 80020e8:	f7ff ff03 	bl	8001ef2 <pow_10>
 80020ec:	fb96 f3f0 	sdiv	r3, r6, r0
 80020f0:	fb93 f0f8 	sdiv	r0, r3, r8
 80020f4:	fb08 3010 	mls	r0, r8, r0, r3
 80020f8:	3030      	adds	r0, #48	; 0x30
 80020fa:	f807 0d01 	strb.w	r0, [r7, #-1]!
 80020fe:	3501      	adds	r5, #1
    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 8002100:	b2eb      	uxtb	r3, r5
 8002102:	429c      	cmp	r4, r3
 8002104:	d8ef      	bhi.n	80020e6 <int_to_ascii+0x96>
    if(negative)
 8002106:	f1ba 0f00 	cmp.w	sl, #0
 800210a:	d0b3      	beq.n	8002074 <int_to_ascii+0x24>
        dest[0] = '-';
 800210c:	232d      	movs	r3, #45	; 0x2d
 800210e:	f889 3000 	strb.w	r3, [r9]
 8002112:	e7af      	b.n	8002074 <int_to_ascii+0x24>

08002114 <float_to_ascii>:

// Converts a floating-point/double number to a string.
void float_to_ascii(float n, uint8_t* res, uint8_t afterpoint)
{
 8002114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002118:	4605      	mov	r5, r0
 800211a:	460c      	mov	r4, r1
 800211c:	4616      	mov	r6, r2
    if(n<0)
 800211e:	2100      	movs	r1, #0
 8002120:	f7fe fac8 	bl	80006b4 <__aeabi_fcmplt>
 8002124:	b958      	cbnz	r0, 800213e <float_to_ascii+0x2a>
        *res = '-';
        res++;
        n = -n;
    }
    // Extract integer part
    int ipart = (int)n;
 8002126:	4628      	mov	r0, r5
 8002128:	f7fe faec 	bl	8000704 <__aeabi_f2iz>
 800212c:	4680      	mov	r8, r0
    float fpart = n - (float)ipart;

    //if(fpart<0) fpart = -fpart;

    // convert integer part to string
    int i = int_to_ascii(ipart, res, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	4621      	mov	r1, r4
 8002132:	f7ff ff8d 	bl	8002050 <int_to_ascii>
 8002136:	4607      	mov	r7, r0

    // check for display option after point
    if (afterpoint != 0) {
 8002138:	b93e      	cbnz	r6, 800214a <float_to_ascii+0x36>
        fpart = fpart * pow_10(afterpoint);

        int_to_ascii((int)fpart, res + i, afterpoint);
    }

}
 800213a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *res = '-';
 800213e:	232d      	movs	r3, #45	; 0x2d
 8002140:	f804 3b01 	strb.w	r3, [r4], #1
        n = -n;
 8002144:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002148:	e7ed      	b.n	8002126 <float_to_ascii+0x12>
        res[i++] = '.'; // add dot
 800214a:	232e      	movs	r3, #46	; 0x2e
 800214c:	5423      	strb	r3, [r4, r0]
        fpart = fpart * pow_10(afterpoint);
 800214e:	4630      	mov	r0, r6
 8002150:	f7ff fecf 	bl	8001ef2 <pow_10>
 8002154:	4681      	mov	r9, r0
    float fpart = n - (float)ipart;
 8002156:	4640      	mov	r0, r8
 8002158:	f7fe f8ba 	bl	80002d0 <__aeabi_i2f>
 800215c:	4601      	mov	r1, r0
 800215e:	4628      	mov	r0, r5
 8002160:	f7fe f800 	bl	8000164 <__aeabi_fsub>
 8002164:	4605      	mov	r5, r0
        res[i++] = '.'; // add dot
 8002166:	3701      	adds	r7, #1
        int_to_ascii((int)fpart, res + i, afterpoint);
 8002168:	443c      	add	r4, r7
        fpart = fpart * pow_10(afterpoint);
 800216a:	4648      	mov	r0, r9
 800216c:	f7fe f8b0 	bl	80002d0 <__aeabi_i2f>
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe f901 	bl	8000378 <__aeabi_fmul>
        int_to_ascii((int)fpart, res + i, afterpoint);
 8002176:	f7fe fac5 	bl	8000704 <__aeabi_f2iz>
 800217a:	4632      	mov	r2, r6
 800217c:	4621      	mov	r1, r4
 800217e:	f7ff ff67 	bl	8002050 <int_to_ascii>
}
 8002182:	e7da      	b.n	800213a <float_to_ascii+0x26>

08002184 <insert_chars>:

void insert_chars(uint8_t *dest, uint8_t *src, uint8_t d)
{
	if(!dest || !src || *src == '\0' || !d) return;
 8002184:	b190      	cbz	r0, 80021ac <insert_chars+0x28>
 8002186:	4603      	mov	r3, r0
 8002188:	b181      	cbz	r1, 80021ac <insert_chars+0x28>
 800218a:	7808      	ldrb	r0, [r1, #0]
 800218c:	b170      	cbz	r0, 80021ac <insert_chars+0x28>
 800218e:	b16a      	cbz	r2, 80021ac <insert_chars+0x28>
{
 8002190:	b410      	push	{r4}
 8002192:	1e4c      	subs	r4, r1, #1
 8002194:	1e58      	subs	r0, r3, #1
 8002196:	3a01      	subs	r2, #1
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	4411      	add	r1, r2
    for(uint8_t i = 0; i<d; i++)
        dest[i] = src[i];
 800219c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80021a0:	f800 3f01 	strb.w	r3, [r0, #1]!
    for(uint8_t i = 0; i<d; i++)
 80021a4:	428c      	cmp	r4, r1
 80021a6:	d1f9      	bne.n	800219c <insert_chars+0x18>
}
 80021a8:	bc10      	pop	{r4}
 80021aa:	4770      	bx	lr
 80021ac:	4770      	bx	lr
	...

080021b0 <get_time_string>:

void get_time_string(RTC_TimeTypeDef *Time, uint8_t *time_string)
{
 80021b0:	b530      	push	{r4, r5, lr}
 80021b2:	b083      	sub	sp, #12
 80021b4:	4605      	mov	r5, r0
 80021b6:	460c      	mov	r4, r1
	uint8_t few_chars[3] = "";
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <get_time_string+0x58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8ad 3005 	strh.w	r3, [sp, #5]
	int_to_ascii( (int) Time->Hours , few_chars, 2);
 80021c6:	2202      	movs	r2, #2
 80021c8:	a901      	add	r1, sp, #4
 80021ca:	7800      	ldrb	r0, [r0, #0]
 80021cc:	f7ff ff40 	bl	8002050 <int_to_ascii>
	insert_chars(time_string, few_chars, 2);
 80021d0:	2202      	movs	r2, #2
 80021d2:	a901      	add	r1, sp, #4
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ffd5 	bl	8002184 <insert_chars>
	int_to_ascii( (int) Time->Minutes , few_chars, 2);
 80021da:	2202      	movs	r2, #2
 80021dc:	a901      	add	r1, sp, #4
 80021de:	7868      	ldrb	r0, [r5, #1]
 80021e0:	f7ff ff36 	bl	8002050 <int_to_ascii>
	insert_chars(time_string+3, few_chars, 2);
 80021e4:	2202      	movs	r2, #2
 80021e6:	a901      	add	r1, sp, #4
 80021e8:	1ce0      	adds	r0, r4, #3
 80021ea:	f7ff ffcb 	bl	8002184 <insert_chars>
	int_to_ascii( (int) Time->Seconds , few_chars, 2);
 80021ee:	2202      	movs	r2, #2
 80021f0:	a901      	add	r1, sp, #4
 80021f2:	78a8      	ldrb	r0, [r5, #2]
 80021f4:	f7ff ff2c 	bl	8002050 <int_to_ascii>
	insert_chars(time_string+6, few_chars, 2);
 80021f8:	2202      	movs	r2, #2
 80021fa:	a901      	add	r1, sp, #4
 80021fc:	1da0      	adds	r0, r4, #6
 80021fe:	f7ff ffc1 	bl	8002184 <insert_chars>
}
 8002202:	b003      	add	sp, #12
 8002204:	bd30      	pop	{r4, r5, pc}
 8002206:	bf00      	nop
 8002208:	08008668 	.word	0x08008668

0800220c <get_date_string>:

void get_date_string(RTC_DateTypeDef *Date, uint8_t *date_string)
{
 800220c:	b530      	push	{r4, r5, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	4605      	mov	r5, r0
 8002212:	460c      	mov	r4, r1
	uint8_t few_chars[3] = "";
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <get_date_string+0x58>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f88d 3004 	strb.w	r3, [sp, #4]
 800221c:	2300      	movs	r3, #0
 800221e:	f8ad 3005 	strh.w	r3, [sp, #5]
	int_to_ascii( (int) Date->Date , few_chars, 2);
 8002222:	2202      	movs	r2, #2
 8002224:	a901      	add	r1, sp, #4
 8002226:	7880      	ldrb	r0, [r0, #2]
 8002228:	f7ff ff12 	bl	8002050 <int_to_ascii>
	insert_chars(date_string, few_chars, 2);
 800222c:	2202      	movs	r2, #2
 800222e:	a901      	add	r1, sp, #4
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff ffa7 	bl	8002184 <insert_chars>
	int_to_ascii( (int) Date->Month , few_chars, 2);
 8002236:	2202      	movs	r2, #2
 8002238:	a901      	add	r1, sp, #4
 800223a:	7868      	ldrb	r0, [r5, #1]
 800223c:	f7ff ff08 	bl	8002050 <int_to_ascii>
	insert_chars(date_string+3, few_chars, 2);
 8002240:	2202      	movs	r2, #2
 8002242:	a901      	add	r1, sp, #4
 8002244:	1ce0      	adds	r0, r4, #3
 8002246:	f7ff ff9d 	bl	8002184 <insert_chars>
	int_to_ascii( (int) Date->Year, few_chars, 2);
 800224a:	2202      	movs	r2, #2
 800224c:	a901      	add	r1, sp, #4
 800224e:	78e8      	ldrb	r0, [r5, #3]
 8002250:	f7ff fefe 	bl	8002050 <int_to_ascii>
	insert_chars(date_string+6, few_chars, 2);
 8002254:	2202      	movs	r2, #2
 8002256:	a901      	add	r1, sp, #4
 8002258:	1da0      	adds	r0, r4, #6
 800225a:	f7ff ff93 	bl	8002184 <insert_chars>
}
 800225e:	b003      	add	sp, #12
 8002260:	bd30      	pop	{r4, r5, pc}
 8002262:	bf00      	nop
 8002264:	08008668 	.word	0x08008668

08002268 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800226c:	b083      	sub	sp, #12
 800226e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8002272:	b18d      	cbz	r5, 8002298 <u8g2_DrawBox+0x30>
 8002274:	4681      	mov	r9, r0
 8002276:	460f      	mov	r7, r1
 8002278:	4614      	mov	r4, r2
 800227a:	4698      	mov	r8, r3
 800227c:	4415      	add	r5, r2
 800227e:	b2ed      	uxtb	r5, r5
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002280:	2600      	movs	r6, #0
 8002282:	9600      	str	r6, [sp, #0]
 8002284:	4643      	mov	r3, r8
 8002286:	4622      	mov	r2, r4
 8002288:	4639      	mov	r1, r7
 800228a:	4648      	mov	r0, r9
 800228c:	f000 fb58 	bl	8002940 <u8g2_DrawHVLine>
    y++;    
 8002290:	3401      	adds	r4, #1
 8002292:	b2e4      	uxtb	r4, r4
  while( h != 0 )
 8002294:	42a5      	cmp	r5, r4
 8002296:	d1f4      	bne.n	8002282 <u8g2_DrawBox+0x1a>
    h--;
  }
}
 8002298:	b003      	add	sp, #12
 800229a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800229e <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800229e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	4606      	mov	r6, r0
 80022a6:	460f      	mov	r7, r1
 80022a8:	4614      	mov	r4, r2
 80022aa:	4698      	mov	r8, r3
 80022ac:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80022b0:	f04f 0900 	mov.w	r9, #0
 80022b4:	f8cd 9000 	str.w	r9, [sp]
 80022b8:	f000 fb42 	bl	8002940 <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80022bc:	f04f 0a01 	mov.w	sl, #1
 80022c0:	f8cd a000 	str.w	sl, [sp]
 80022c4:	462b      	mov	r3, r5
 80022c6:	4622      	mov	r2, r4
 80022c8:	4639      	mov	r1, r7
 80022ca:	4630      	mov	r0, r6
 80022cc:	f000 fb38 	bl	8002940 <u8g2_DrawHVLine>
  x+=w;
  x--;
 80022d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80022d4:	4439      	add	r1, r7
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80022d6:	f8cd a000 	str.w	sl, [sp]
 80022da:	462b      	mov	r3, r5
 80022dc:	4622      	mov	r2, r4
 80022de:	b2c9      	uxtb	r1, r1
 80022e0:	4630      	mov	r0, r6
 80022e2:	f000 fb2d 	bl	8002940 <u8g2_DrawHVLine>
  y+=h;
  y--;
 80022e6:	1e6a      	subs	r2, r5, #1
 80022e8:	4422      	add	r2, r4
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80022ea:	f8cd 9000 	str.w	r9, [sp]
 80022ee:	4643      	mov	r3, r8
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	4639      	mov	r1, r7
 80022f4:	4630      	mov	r0, r6
 80022f6:	f000 fb23 	bl	8002940 <u8g2_DrawHVLine>
}
 80022fa:	b002      	add	sp, #8
 80022fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002300 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002304:	b083      	sub	sp, #12
 8002306:	4606      	mov	r6, r0
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 8002308:	f890 803c 	ldrb.w	r8, [r0, #60]	; 0x3c
  dest_row = u8g2->tile_curr_row;
 800230c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002310:	6803      	ldr	r3, [r0, #0]
 8002312:	f893 9011 	ldrb.w	r9, [r3, #17]
 8002316:	2500      	movs	r5, #0
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002318:	462f      	mov	r7, r5
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800231a:	6833      	ldr	r3, [r6, #0]
 800231c:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
 800231e:	b2aa      	uxth	r2, r5
  ptr = u8g2->tile_buf_ptr;
 8002320:	6bb0      	ldr	r0, [r6, #56]	; 0x38
  offset *= 8;
 8002322:	00d9      	lsls	r1, r3, #3
 8002324:	fb01 f202 	mul.w	r2, r1, r2
  ptr += offset;
 8002328:	b292      	uxth	r2, r2
 800232a:	4402      	add	r2, r0
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800232c:	9200      	str	r2, [sp, #0]
 800232e:	4622      	mov	r2, r4
 8002330:	4639      	mov	r1, r7
 8002332:	4630      	mov	r0, r6
 8002334:	f000 feb6 	bl	80030a4 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
 8002338:	3401      	adds	r4, #1
 800233a:	b2e4      	uxtb	r4, r4
  } while( src_row < src_max && dest_row < dest_max );
 800233c:	1c6b      	adds	r3, r5, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4598      	cmp	r8, r3
 8002342:	d902      	bls.n	800234a <u8g2_send_buffer+0x4a>
 8002344:	3501      	adds	r5, #1
 8002346:	45a1      	cmp	r9, r4
 8002348:	d8e7      	bhi.n	800231a <u8g2_send_buffer+0x1a>
}
 800234a:	b003      	add	sp, #12
 800234c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002350 <u8g2_ClearBuffer>:
{
 8002350:	b508      	push	{r3, lr}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002352:	6803      	ldr	r3, [r0, #0]
 8002354:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 8002356:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  cnt *= 8;
 800235a:	00db      	lsls	r3, r3, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800235c:	fb02 f203 	mul.w	r2, r2, r3
 8002360:	2100      	movs	r1, #0
 8002362:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002364:	f006 f939 	bl	80085da <memset>
}
 8002368:	bd08      	pop	{r3, pc}

0800236a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800236a:	b510      	push	{r4, lr}
 800236c:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 800236e:	f7ff ffc7 	bl	8002300 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8002372:	4620      	mov	r0, r4
 8002374:	f000 febd 	bl	80030f2 <u8x8_RefreshDisplay>
}
 8002378:	bd10      	pop	{r4, pc}

0800237a <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800237a:	b510      	push	{r4, lr}
 800237c:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
 800237e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8002382:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002388:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4620      	mov	r0, r4
 800238e:	4798      	blx	r3
}
 8002390:	bd10      	pop	{r4, pc}

08002392 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002392:	b510      	push	{r4, lr}
 8002394:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 8002396:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 800239a:	b923      	cbnz	r3, 80023a6 <u8g2_FirstPage+0x14>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800239c:	2100      	movs	r1, #0
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff ffeb 	bl	800237a <u8g2_SetBufferCurrTileRow>
}
 80023a4:	bd10      	pop	{r4, pc}
    u8g2_ClearBuffer(u8g2);
 80023a6:	f7ff ffd3 	bl	8002350 <u8g2_ClearBuffer>
 80023aa:	e7f7      	b.n	800239c <u8g2_FirstPage+0xa>

080023ac <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4605      	mov	r5, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80023b0:	f7ff ffa6 	bl	8002300 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80023b4:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
  row += u8g2->tile_buf_height;
 80023b8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80023bc:	441c      	add	r4, r3
 80023be:	b2e4      	uxtb	r4, r4
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	7c5b      	ldrb	r3, [r3, #17]
 80023c4:	42a3      	cmp	r3, r4
 80023c6:	d908      	bls.n	80023da <u8g2_NextPage+0x2e>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 80023c8:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
 80023cc:	b953      	cbnz	r3, 80023e4 <u8g2_NextPage+0x38>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80023ce:	4621      	mov	r1, r4
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7ff ffd2 	bl	800237a <u8g2_SetBufferCurrTileRow>
  return 1;
 80023d6:	2001      	movs	r0, #1
}
 80023d8:	bd38      	pop	{r3, r4, r5, pc}
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80023da:	4628      	mov	r0, r5
 80023dc:	f000 fe89 	bl	80030f2 <u8x8_RefreshDisplay>
    return 0;
 80023e0:	2000      	movs	r0, #0
 80023e2:	e7f9      	b.n	80023d8 <u8g2_NextPage+0x2c>
    u8g2_ClearBuffer(u8g2);
 80023e4:	4628      	mov	r0, r5
 80023e6:	f7ff ffb3 	bl	8002350 <u8g2_ClearBuffer>
 80023ea:	e7f0      	b.n	80023ce <u8g2_NextPage+0x22>

080023ec <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 80023f0:	f7ff ffcf 	bl	8002392 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff ffd9 	bl	80023ac <u8g2_NextPage>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d1fa      	bne.n	80023f4 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80023fe:	2100      	movs	r1, #0
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff ffba 	bl	800237a <u8g2_SetBufferCurrTileRow>
}
 8002406:	bd10      	pop	{r4, pc}

08002408 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002408:	2308      	movs	r3, #8
 800240a:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 800240c:	4800      	ldr	r0, [pc, #0]	; (8002410 <u8g2_m_16_8_f+0x8>)
 800240e:	4770      	bx	lr
 8002410:	2000006c 	.word	0x2000006c

08002414 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002414:	b530      	push	{r4, r5, lr}
 8002416:	b085      	sub	sp, #20
 8002418:	4604      	mov	r4, r0
 800241a:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x30>)
 8002422:	4909      	ldr	r1, [pc, #36]	; (8002448 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x34>)
 8002424:	f000 fe8a 	bl	800313c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002428:	f10d 000f 	add.w	r0, sp, #15
 800242c:	f7ff ffec 	bl	8002408 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002430:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002434:	9500      	str	r5, [sp, #0]
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x38>)
 8002438:	4601      	mov	r1, r0
 800243a:	4620      	mov	r0, r4
 800243c:	f000 fbfb 	bl	8002c36 <u8g2_SetupBuffer>
}
 8002440:	b005      	add	sp, #20
 8002442:	bd30      	pop	{r4, r5, pc}
 8002444:	08002e4d 	.word	0x08002e4d
 8002448:	08002ff9 	.word	0x08002ff9
 800244c:	08002a21 	.word	0x08002a21

08002450 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8002450:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 8002452:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8002454:	7850      	ldrb	r0, [r2, #1]
 8002456:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 800245a:	b280      	uxth	r0, r0
 800245c:	4770      	bx	lr

0800245e <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 800245e:	2000      	movs	r0, #0
 8002460:	4770      	bx	lr

08002462 <u8g2_read_font_info>:
{
 8002462:	b538      	push	{r3, r4, r5, lr}
 8002464:	4604      	mov	r4, r0
 8002466:	460d      	mov	r5, r1
  return u8x8_pgm_read( font );  
 8002468:	780b      	ldrb	r3, [r1, #0]
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800246a:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 800246c:	784b      	ldrb	r3, [r1, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800246e:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 8002470:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002472:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 8002474:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002476:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 8002478:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800247a:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 800247c:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800247e:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 8002480:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002482:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 8002484:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002486:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 8002488:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800248a:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800248c:	7a4b      	ldrb	r3, [r1, #9]
 800248e:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002490:	7a8b      	ldrb	r3, [r1, #10]
 8002492:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002494:	7acb      	ldrb	r3, [r1, #11]
 8002496:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002498:	7b0b      	ldrb	r3, [r1, #12]
 800249a:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800249c:	7b4b      	ldrb	r3, [r1, #13]
 800249e:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80024a0:	7b8b      	ldrb	r3, [r1, #14]
 80024a2:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80024a4:	7bcb      	ldrb	r3, [r1, #15]
 80024a6:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80024a8:	7c0b      	ldrb	r3, [r1, #16]
 80024aa:	7403      	strb	r3, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80024ac:	2111      	movs	r1, #17
 80024ae:	4628      	mov	r0, r5
 80024b0:	f7ff ffce 	bl	8002450 <u8g2_font_get_word>
 80024b4:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80024b6:	2113      	movs	r1, #19
 80024b8:	4628      	mov	r0, r5
 80024ba:	f7ff ffc9 	bl	8002450 <u8g2_font_get_word>
 80024be:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80024c0:	2115      	movs	r1, #21
 80024c2:	4628      	mov	r0, r5
 80024c4:	f7ff ffc4 	bl	8002450 <u8g2_font_get_word>
 80024c8:	82e0      	strh	r0, [r4, #22]
}
 80024ca:	bd38      	pop	{r3, r4, r5, pc}

080024cc <u8g2_font_decode_get_unsigned_bits>:
{
 80024cc:	b470      	push	{r4, r5, r6}
  uint8_t bit_pos = f->decode_bit_pos;
 80024ce:	7a82      	ldrb	r2, [r0, #10]
  val = u8x8_pgm_read( f->decode_ptr );  
 80024d0:	6804      	ldr	r4, [r0, #0]
  val >>= bit_pos;
 80024d2:	7825      	ldrb	r5, [r4, #0]
 80024d4:	4115      	asrs	r5, r2
  bit_pos_plus_cnt += cnt;
 80024d6:	1853      	adds	r3, r2, r1
 80024d8:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 80024da:	2b07      	cmp	r3, #7
 80024dc:	d913      	bls.n	8002506 <u8g2_font_decode_get_unsigned_bits+0x3a>
    f->decode_ptr++;
 80024de:	1c66      	adds	r6, r4, #1
 80024e0:	6006      	str	r6, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80024e2:	7864      	ldrb	r4, [r4, #1]
    s -= bit_pos;
 80024e4:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	fa04 f202 	lsl.w	r2, r4, r2
 80024ee:	432a      	orrs	r2, r5
 80024f0:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 80024f2:	3b08      	subs	r3, #8
 80024f4:	b2db      	uxtb	r3, r3
  f->decode_bit_pos = bit_pos_plus_cnt;
 80024f6:	7283      	strb	r3, [r0, #10]
  val &= (1U<<cnt)-1;
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	4088      	lsls	r0, r1
}
 80024fe:	ea22 0000 	bic.w	r0, r2, r0
 8002502:	bc70      	pop	{r4, r5, r6}
 8002504:	4770      	bx	lr
  val >>= bit_pos;
 8002506:	b2ea      	uxtb	r2, r5
 8002508:	e7f5      	b.n	80024f6 <u8g2_font_decode_get_unsigned_bits+0x2a>

0800250a <u8g2_font_setup_decode>:
{
 800250a:	b538      	push	{r3, r4, r5, lr}
 800250c:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800250e:	f100 0554 	add.w	r5, r0, #84	; 0x54
  decode->decode_ptr = glyph_data;
 8002512:	6541      	str	r1, [r0, #84]	; 0x54
  decode->decode_bit_pos = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800251a:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 800251e:	4628      	mov	r0, r5
 8002520:	f7ff ffd4 	bl	80024cc <u8g2_font_decode_get_unsigned_bits>
 8002524:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002528:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 800252c:	4628      	mov	r0, r5
 800252e:	f7ff ffcd 	bl	80024cc <u8g2_font_decode_get_unsigned_bits>
 8002532:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  decode->fg_color = u8g2->draw_color;
 8002536:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800253a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8002548:	bd38      	pop	{r3, r4, r5, pc}

0800254a <u8g2_font_decode_get_signed_bits>:
{
 800254a:	b510      	push	{r4, lr}
 800254c:	460c      	mov	r4, r1
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800254e:	f7ff ffbd 	bl	80024cc <u8g2_font_decode_get_unsigned_bits>
  cnt--;
 8002552:	3c01      	subs	r4, #1
  d <<= cnt;
 8002554:	b2e4      	uxtb	r4, r4
 8002556:	2301      	movs	r3, #1
 8002558:	40a3      	lsls	r3, r4
  v -= d;
 800255a:	1ac0      	subs	r0, r0, r3
}
 800255c:	b240      	sxtb	r0, r0
 800255e:	bd10      	pop	{r4, pc}

08002560 <u8g2_font_decode_len>:
{
 8002560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	4605      	mov	r5, r0
 8002568:	460f      	mov	r7, r1
 800256a:	4692      	mov	sl, r2
  lx = decode->x;
 800256c:	f890 805a 	ldrb.w	r8, [r0, #90]	; 0x5a
  ly = decode->y;
 8002570:	f890 605b 	ldrb.w	r6, [r0, #91]	; 0x5b
      u8g2_DrawHVLine(u8g2, 
 8002574:	f04f 0900 	mov.w	r9, #0
 8002578:	e00f      	b.n	800259a <u8g2_font_decode_len+0x3a>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800257a:	f895 0060 	ldrb.w	r0, [r5, #96]	; 0x60
 800257e:	f885 0081 	strb.w	r0, [r5, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 8002582:	f8cd 9000 	str.w	r9, [sp]
 8002586:	4628      	mov	r0, r5
 8002588:	f000 f9da 	bl	8002940 <u8g2_DrawHVLine>
    if ( cnt < rem )
 800258c:	42a7      	cmp	r7, r4
 800258e:	d326      	bcc.n	80025de <u8g2_font_decode_len+0x7e>
    cnt -= rem;
 8002590:	1b3f      	subs	r7, r7, r4
 8002592:	b2ff      	uxtb	r7, r7
    ly++;
 8002594:	3601      	adds	r6, #1
 8002596:	b2f6      	uxtb	r6, r6
    lx = 0;
 8002598:	46c8      	mov	r8, r9
    rem = decode->glyph_width;
 800259a:	f895 405c 	ldrb.w	r4, [r5, #92]	; 0x5c
    rem -= lx;
 800259e:	eba4 0408 	sub.w	r4, r4, r8
 80025a2:	b2e4      	uxtb	r4, r4
 80025a4:	463b      	mov	r3, r7
 80025a6:	42a7      	cmp	r7, r4
 80025a8:	bf28      	it	cs
 80025aa:	4623      	movcs	r3, r4
    x = decode->target_x;
 80025ac:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
    y = decode->target_y;
 80025b0:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
    x += lx;
 80025b4:	4441      	add	r1, r8
 80025b6:	b2c9      	uxtb	r1, r1
    y += ly;
 80025b8:	4432      	add	r2, r6
 80025ba:	b2d2      	uxtb	r2, r2
    if ( is_foreground )
 80025bc:	f1ba 0f00 	cmp.w	sl, #0
 80025c0:	d1db      	bne.n	800257a <u8g2_font_decode_len+0x1a>
    else if ( decode->is_transparent == 0 )    
 80025c2:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d1e0      	bne.n	800258c <u8g2_font_decode_len+0x2c>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80025ca:	f895 0061 	ldrb.w	r0, [r5, #97]	; 0x61
 80025ce:	f885 0081 	strb.w	r0, [r5, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 80025d2:	f8cd 9000 	str.w	r9, [sp]
 80025d6:	4628      	mov	r0, r5
 80025d8:	f000 f9b2 	bl	8002940 <u8g2_DrawHVLine>
 80025dc:	e7d6      	b.n	800258c <u8g2_font_decode_len+0x2c>
  lx += cnt;
 80025de:	4447      	add	r7, r8
  decode->x = lx;
 80025e0:	f885 705a 	strb.w	r7, [r5, #90]	; 0x5a
  decode->y = ly;
 80025e4:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
}
 80025e8:	b002      	add	sp, #8
 80025ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080025ee <u8g2_font_decode_glyph>:
{
 80025ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f2:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80025f4:	f100 0654 	add.w	r6, r0, #84	; 0x54
  u8g2_font_setup_decode(u8g2, glyph_data);
 80025f8:	f7ff ff87 	bl	800250a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80025fc:	f994 a05d 	ldrsb.w	sl, [r4, #93]	; 0x5d
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002600:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 8002604:	4630      	mov	r0, r6
 8002606:	f7ff ffa0 	bl	800254a <u8g2_font_decode_get_signed_bits>
 800260a:	4607      	mov	r7, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800260c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8002610:	4630      	mov	r0, r6
 8002612:	f7ff ff9a 	bl	800254a <u8g2_font_decode_get_signed_bits>
 8002616:	4605      	mov	r5, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002618:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 800261c:	4630      	mov	r0, r6
 800261e:	f7ff ff94 	bl	800254a <u8g2_font_decode_get_signed_bits>
 8002622:	4683      	mov	fp, r0
  if ( decode->glyph_width > 0 )
 8002624:	f994 305c 	ldrsb.w	r3, [r4, #92]	; 0x5c
 8002628:	2b00      	cmp	r3, #0
 800262a:	dd36      	ble.n	800269a <u8g2_font_decode_glyph+0xac>
    decode->target_x += x;
 800262c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8002630:	4438      	add	r0, r7
 8002632:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    decode->target_y -= h+y;
 8002636:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800263a:	eba0 000a 	sub.w	r0, r0, sl
 800263e:	1b40      	subs	r0, r0, r5
 8002640:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
    decode->x = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
    decode->y = 0;
 800264a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
	u8g2_font_decode_len(u8g2, a, 0);
 800264e:	4699      	mov	r9, r3
	u8g2_font_decode_len(u8g2, b, 1);
 8002650:	2501      	movs	r5, #1
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002652:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 8002656:	4630      	mov	r0, r6
 8002658:	f7ff ff38 	bl	80024cc <u8g2_font_decode_get_unsigned_bits>
 800265c:	4680      	mov	r8, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800265e:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
 8002662:	4630      	mov	r0, r6
 8002664:	f7ff ff32 	bl	80024cc <u8g2_font_decode_get_unsigned_bits>
 8002668:	4607      	mov	r7, r0
	u8g2_font_decode_len(u8g2, a, 0);
 800266a:	464a      	mov	r2, r9
 800266c:	4641      	mov	r1, r8
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff ff76 	bl	8002560 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002674:	462a      	mov	r2, r5
 8002676:	4639      	mov	r1, r7
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff ff71 	bl	8002560 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800267e:	4629      	mov	r1, r5
 8002680:	4630      	mov	r0, r6
 8002682:	f7ff ff23 	bl	80024cc <u8g2_font_decode_get_unsigned_bits>
 8002686:	2800      	cmp	r0, #0
 8002688:	d1ef      	bne.n	800266a <u8g2_font_decode_glyph+0x7c>
      if ( decode->y >= h )
 800268a:	f994 305b 	ldrsb.w	r3, [r4, #91]	; 0x5b
 800268e:	4553      	cmp	r3, sl
 8002690:	dbdf      	blt.n	8002652 <u8g2_font_decode_glyph+0x64>
    u8g2->draw_color = decode->fg_color;
 8002692:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8002696:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800269a:	4658      	mov	r0, fp
 800269c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080026a0 <u8g2_font_get_glyph_data>:
{
 80026a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t *font = u8g2->font;
 80026a4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80026a6:	3417      	adds	r4, #23
  if ( encoding <= 255 )
 80026a8:	29ff      	cmp	r1, #255	; 0xff
 80026aa:	d819      	bhi.n	80026e0 <u8g2_font_get_glyph_data+0x40>
    if ( encoding >= 'a' )
 80026ac:	2960      	cmp	r1, #96	; 0x60
 80026ae:	d911      	bls.n	80026d4 <u8g2_font_get_glyph_data+0x34>
      font += u8g2->font_info.start_pos_lower_a;
 80026b0:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
 80026b4:	441c      	add	r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80026b6:	7863      	ldrb	r3, [r4, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d039      	beq.n	8002730 <u8g2_font_get_glyph_data+0x90>
      if ( u8x8_pgm_read( font ) == encoding )
 80026bc:	7822      	ldrb	r2, [r4, #0]
 80026be:	428a      	cmp	r2, r1
 80026c0:	d005      	beq.n	80026ce <u8g2_font_get_glyph_data+0x2e>
      font += u8x8_pgm_read( font + 1 );
 80026c2:	441c      	add	r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80026c4:	7863      	ldrb	r3, [r4, #1]
 80026c6:	b3ab      	cbz	r3, 8002734 <u8g2_font_get_glyph_data+0x94>
      if ( u8x8_pgm_read( font ) == encoding )
 80026c8:	7822      	ldrb	r2, [r4, #0]
 80026ca:	428a      	cmp	r2, r1
 80026cc:	d1f9      	bne.n	80026c2 <u8g2_font_get_glyph_data+0x22>
	return font+2;	/* skip encoding and glyph size */
 80026ce:	1ca0      	adds	r0, r4, #2
}
 80026d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if ( encoding >= 'A' )
 80026d4:	2940      	cmp	r1, #64	; 0x40
      font += u8g2->font_info.start_pos_upper_A;
 80026d6:	bf84      	itt	hi
 80026d8:	f8b0 3076 	ldrhhi.w	r3, [r0, #118]	; 0x76
 80026dc:	18e4      	addhi	r4, r4, r3
 80026de:	e7ea      	b.n	80026b6 <u8g2_font_get_glyph_data+0x16>
 80026e0:	460e      	mov	r6, r1
    font += u8g2->font_info.start_pos_unicode;
 80026e2:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
 80026e6:	4404      	add	r4, r0
    unicode_lookup_table = font; 
 80026e8:	4625      	mov	r5, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80026ea:	f04f 0800 	mov.w	r8, #0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80026ee:	2702      	movs	r7, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80026f0:	4641      	mov	r1, r8
 80026f2:	4628      	mov	r0, r5
 80026f4:	f7ff feac 	bl	8002450 <u8g2_font_get_word>
 80026f8:	4404      	add	r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80026fa:	4639      	mov	r1, r7
 80026fc:	4628      	mov	r0, r5
 80026fe:	f7ff fea7 	bl	8002450 <u8g2_font_get_word>
      unicode_lookup_table+=4;
 8002702:	3504      	adds	r5, #4
    } while( e < encoding );
 8002704:	4286      	cmp	r6, r0
 8002706:	d8f3      	bhi.n	80026f0 <u8g2_font_get_glyph_data+0x50>
      e = u8x8_pgm_read( font );
 8002708:	7822      	ldrb	r2, [r4, #0]
      e |= u8x8_pgm_read( font + 1 );
 800270a:	7863      	ldrb	r3, [r4, #1]
      if ( e == 0 )
 800270c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8002710:	d012      	beq.n	8002738 <u8g2_font_get_glyph_data+0x98>
      if ( e == encoding )
 8002712:	429e      	cmp	r6, r3
 8002714:	d008      	beq.n	8002728 <u8g2_font_get_glyph_data+0x88>
      font += u8x8_pgm_read( font + 2 );
 8002716:	78a3      	ldrb	r3, [r4, #2]
 8002718:	441c      	add	r4, r3
      e = u8x8_pgm_read( font );
 800271a:	7822      	ldrb	r2, [r4, #0]
      e |= u8x8_pgm_read( font + 1 );
 800271c:	7863      	ldrb	r3, [r4, #1]
      if ( e == 0 )
 800271e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8002722:	d003      	beq.n	800272c <u8g2_font_get_glyph_data+0x8c>
      if ( e == encoding )
 8002724:	429e      	cmp	r6, r3
 8002726:	d1f6      	bne.n	8002716 <u8g2_font_get_glyph_data+0x76>
	return font+3;	/* skip encoding and glyph size */
 8002728:	1ce0      	adds	r0, r4, #3
 800272a:	e7d1      	b.n	80026d0 <u8g2_font_get_glyph_data+0x30>
  return NULL;
 800272c:	2000      	movs	r0, #0
 800272e:	e7cf      	b.n	80026d0 <u8g2_font_get_glyph_data+0x30>
 8002730:	2000      	movs	r0, #0
 8002732:	e7cd      	b.n	80026d0 <u8g2_font_get_glyph_data+0x30>
 8002734:	2000      	movs	r0, #0
 8002736:	e7cb      	b.n	80026d0 <u8g2_font_get_glyph_data+0x30>
 8002738:	2000      	movs	r0, #0
 800273a:	e7c9      	b.n	80026d0 <u8g2_font_get_glyph_data+0x30>

0800273c <u8g2_GetGlyphWidth>:
{
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	4604      	mov	r4, r0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8002740:	f7ff ffae 	bl	80026a0 <u8g2_font_get_glyph_data>
  if ( glyph_data == NULL )
 8002744:	b1b8      	cbz	r0, 8002776 <u8g2_GetGlyphWidth+0x3a>
 8002746:	4601      	mov	r1, r0
  u8g2_font_setup_decode(u8g2, glyph_data);
 8002748:	4620      	mov	r0, r4
 800274a:	f7ff fede 	bl	800250a <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800274e:	f104 0554 	add.w	r5, r4, #84	; 0x54
 8002752:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 8002756:	4628      	mov	r0, r5
 8002758:	f7ff fef7 	bl	800254a <u8g2_font_decode_get_signed_bits>
 800275c:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8002760:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8002764:	4628      	mov	r0, r5
 8002766:	f7ff fef0 	bl	800254a <u8g2_font_decode_get_signed_bits>
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 800276a:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 800276e:	4628      	mov	r0, r5
 8002770:	f7ff feeb 	bl	800254a <u8g2_font_decode_get_signed_bits>
}
 8002774:	bd38      	pop	{r3, r4, r5, pc}
    return 0; 
 8002776:	2000      	movs	r0, #0
 8002778:	e7fc      	b.n	8002774 <u8g2_GetGlyphWidth+0x38>

0800277a <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 800277a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800277e:	4604      	mov	r4, r0
 8002780:	460e      	mov	r6, r1
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8002782:	2500      	movs	r5, #0
 8002784:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002788:	f000 facc 	bl	8002d24 <u8x8_utf8_init>
 800278c:	3e01      	subs	r6, #1
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
  dx = 0;
 800278e:	46a8      	mov	r8, r5
  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 8002790:	f64f 77ff 	movw	r7, #65535	; 0xffff
      break;
    str++;
    if ( e != 0x0fffe )
 8002794:	f64f 79fe 	movw	r9, #65534	; 0xfffe
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002798:	6863      	ldr	r3, [r4, #4]
 800279a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800279e:	4620      	mov	r0, r4
 80027a0:	4798      	blx	r3
    if ( e == 0x0ffff )
 80027a2:	42b8      	cmp	r0, r7
 80027a4:	d00a      	beq.n	80027bc <u8g2_string_width+0x42>
    if ( e != 0x0fffe )
 80027a6:	4548      	cmp	r0, r9
 80027a8:	d0f6      	beq.n	8002798 <u8g2_string_width+0x1e>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 80027aa:	4601      	mov	r1, r0
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ffc5 	bl	800273c <u8g2_GetGlyphWidth>
 80027b2:	fa5f f880 	uxtb.w	r8, r0
      w += dx;
 80027b6:	4445      	add	r5, r8
 80027b8:	b2ed      	uxtb	r5, r5
 80027ba:	e7ed      	b.n	8002798 <u8g2_string_width+0x1e>
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80027bc:	f994 205c 	ldrsb.w	r2, [r4, #92]	; 0x5c
 80027c0:	b13a      	cbz	r2, 80027d2 <u8g2_string_width+0x58>
 80027c2:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 80027c6:	4413      	add	r3, r2
 80027c8:	441d      	add	r5, r3
  {
    w -= dx;
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80027ca:	eba5 0508 	sub.w	r5, r5, r8
 80027ce:	f005 05ff 	and.w	r5, r5, #255	; 0xff
  }
  // printf("w=%d \n", w);
  
  return w;  
}
 80027d2:	4628      	mov	r0, r5
 80027d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080027d8 <u8g2_SetFontMode>:
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80027d8:	f880 105f 	strb.w	r1, [r0, #95]	; 0x5f
}
 80027dc:	4770      	bx	lr

080027de <u8g2_DrawGlyph>:
{
 80027de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e0:	4604      	mov	r4, r0
 80027e2:	460f      	mov	r7, r1
 80027e4:	4615      	mov	r5, r2
 80027e6:	461e      	mov	r6, r3
  y += u8g2->font_calc_vref(u8g2);
 80027e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027ea:	4798      	blx	r3
  u8g2->font_decode.target_x = x;
 80027ec:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
  y += u8g2->font_calc_vref(u8g2);
 80027f0:	4428      	add	r0, r5
  u8g2->font_decode.target_y = y;
 80027f2:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80027f6:	4631      	mov	r1, r6
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff ff51 	bl	80026a0 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 80027fe:	b128      	cbz	r0, 800280c <u8g2_DrawGlyph+0x2e>
 8002800:	4601      	mov	r1, r0
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002802:	4620      	mov	r0, r4
 8002804:	f7ff fef3 	bl	80025ee <u8g2_font_decode_glyph>
 8002808:	b2c0      	uxtb	r0, r0
}
 800280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  u8g2_uint_t dx = 0;
 800280c:	2000      	movs	r0, #0
 800280e:	e7fc      	b.n	800280a <u8g2_DrawGlyph+0x2c>

08002810 <u8g2_draw_string>:
{
 8002810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002814:	4604      	mov	r4, r0
 8002816:	460e      	mov	r6, r1
 8002818:	4692      	mov	sl, r2
 800281a:	461d      	mov	r5, r3
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800281c:	f000 fa82 	bl	8002d24 <u8x8_utf8_init>
 8002820:	3d01      	subs	r5, #1
  sum = 0;
 8002822:	f04f 0800 	mov.w	r8, #0
    if ( e == 0x0ffff )
 8002826:	f64f 77ff 	movw	r7, #65535	; 0xffff
    if ( e != 0x0fffe )
 800282a:	f64f 79fe 	movw	r9, #65534	; 0xfffe
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800282e:	6863      	ldr	r3, [r4, #4]
 8002830:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002834:	4620      	mov	r0, r4
 8002836:	4798      	blx	r3
    if ( e == 0x0ffff )
 8002838:	42b8      	cmp	r0, r7
 800283a:	d00d      	beq.n	8002858 <u8g2_draw_string+0x48>
    if ( e != 0x0fffe )
 800283c:	4548      	cmp	r0, r9
 800283e:	d0f6      	beq.n	800282e <u8g2_draw_string+0x1e>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002840:	4603      	mov	r3, r0
 8002842:	4652      	mov	r2, sl
 8002844:	4631      	mov	r1, r6
 8002846:	4620      	mov	r0, r4
 8002848:	f7ff ffc9 	bl	80027de <u8g2_DrawGlyph>
      x += delta;
 800284c:	4406      	add	r6, r0
 800284e:	b2f6      	uxtb	r6, r6
      sum += delta;    
 8002850:	4480      	add	r8, r0
 8002852:	fa5f f888 	uxtb.w	r8, r8
 8002856:	e7ea      	b.n	800282e <u8g2_draw_string+0x1e>
}
 8002858:	4640      	mov	r0, r8
 800285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002860 <u8g2_DrawStr>:
{
 8002860:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002862:	4c02      	ldr	r4, [pc, #8]	; (800286c <u8g2_DrawStr+0xc>)
 8002864:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002866:	f7ff ffd3 	bl	8002810 <u8g2_draw_string>
}
 800286a:	bd10      	pop	{r4, pc}
 800286c:	08002c75 	.word	0x08002c75

08002870 <u8g2_DrawUTF8>:
{
 8002870:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002872:	4c02      	ldr	r4, [pc, #8]	; (800287c <u8g2_DrawUTF8+0xc>)
 8002874:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002876:	f7ff ffcb 	bl	8002810 <u8g2_draw_string>
}
 800287a:	bd10      	pop	{r4, pc}
 800287c:	08002c8b 	.word	0x08002c8b

08002880 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 8002880:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002882:	b353      	cbz	r3, 80028da <u8g2_UpdateRefHeight+0x5a>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002884:	f990 2071 	ldrsb.w	r2, [r0, #113]	; 0x71
 8002888:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800288c:	f990 3072 	ldrsb.w	r3, [r0, #114]	; 0x72
 8002890:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002894:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 8002898:	b1f9      	cbz	r1, 80028da <u8g2_UpdateRefHeight+0x5a>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800289a:	2901      	cmp	r1, #1
 800289c:	d010      	beq.n	80028c0 <u8g2_UpdateRefHeight+0x40>
{
 800289e:	b430      	push	{r4, r5}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80028a0:	f990 406e 	ldrsb.w	r4, [r0, #110]	; 0x6e
 80028a4:	f990 1070 	ldrsb.w	r1, [r0, #112]	; 0x70
 80028a8:	1865      	adds	r5, r4, r1
 80028aa:	42aa      	cmp	r2, r5
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80028ac:	bfbc      	itt	lt
 80028ae:	462c      	movlt	r4, r5
 80028b0:	f880 407d 	strblt.w	r4, [r0, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80028b4:	428b      	cmp	r3, r1
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80028b6:	bfc8      	it	gt
 80028b8:	f880 107e 	strbgt.w	r1, [r0, #126]	; 0x7e
}
 80028bc:	bc30      	pop	{r4, r5}
 80028be:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80028c0:	f990 1073 	ldrsb.w	r1, [r0, #115]	; 0x73
 80028c4:	428a      	cmp	r2, r1
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80028c6:	bfb8      	it	lt
 80028c8:	f880 107d 	strblt.w	r1, [r0, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80028cc:	f990 2074 	ldrsb.w	r2, [r0, #116]	; 0x74
 80028d0:	4293      	cmp	r3, r2
 80028d2:	dd02      	ble.n	80028da <u8g2_UpdateRefHeight+0x5a>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80028d4:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
 80028d8:	4770      	bx	lr
 80028da:	4770      	bx	lr

080028dc <u8g2_SetFontPosBaseline>:
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80028dc:	4b01      	ldr	r3, [pc, #4]	; (80028e4 <u8g2_SetFontPosBaseline+0x8>)
 80028de:	6503      	str	r3, [r0, #80]	; 0x50
}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	0800245f 	.word	0x0800245f

080028e8 <u8g2_SetFont>:
  if ( u8g2->font != font )
 80028e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80028ea:	428b      	cmp	r3, r1
 80028ec:	d009      	beq.n	8002902 <u8g2_SetFont+0x1a>
{
 80028ee:	b510      	push	{r4, lr}
 80028f0:	4604      	mov	r4, r0
    u8g2->font = font;
 80028f2:	64c1      	str	r1, [r0, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80028f4:	3064      	adds	r0, #100	; 0x64
 80028f6:	f7ff fdb4 	bl	8002462 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7ff ffc0 	bl	8002880 <u8g2_UpdateRefHeight>
}
 8002900:	bd10      	pop	{r4, pc}
 8002902:	4770      	bx	lr

08002904 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002904:	b508      	push	{r3, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002906:	4b02      	ldr	r3, [pc, #8]	; (8002910 <u8g2_GetStrWidth+0xc>)
 8002908:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, s);
 800290a:	f7ff ff36 	bl	800277a <u8g2_string_width>
}
 800290e:	bd08      	pop	{r3, pc}
 8002910:	08002c75 	.word	0x08002c75

08002914 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8002914:	b508      	push	{r3, lr}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002916:	4b02      	ldr	r3, [pc, #8]	; (8002920 <u8g2_GetUTF8Width+0xc>)
 8002918:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, str);
 800291a:	f7ff ff2e 	bl	800277a <u8g2_string_width>
}
 800291e:	bd08      	pop	{r3, pc}
 8002920:	08002c8b 	.word	0x08002c8b

08002924 <u8g2_SetFontDirection>:
void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
#endif
}
 8002924:	4770      	bx	lr

08002926 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002926:	b530      	push	{r4, r5, lr}
 8002928:	b083      	sub	sp, #12

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800292a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800292e:	1b12      	subs	r2, r2, r4
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002930:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8002934:	9400      	str	r4, [sp, #0]
 8002936:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	47a0      	blx	r4
}
 800293c:	b003      	add	sp, #12
 800293e:	bd30      	pop	{r4, r5, pc}

08002940 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002940:	b530      	push	{r4, r5, lr}
 8002942:	b083      	sub	sp, #12
 8002944:	f89d 5018 	ldrb.w	r5, [sp, #24]
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002948:	b34b      	cbz	r3, 800299e <u8g2_DrawHVLine+0x5e>
 800294a:	461c      	mov	r4, r3
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800294c:	2b01      	cmp	r3, #1
 800294e:	d903      	bls.n	8002958 <u8g2_DrawHVLine+0x18>
      {
	if ( dir == 2 )
 8002950:	2d02      	cmp	r5, #2
 8002952:	d019      	beq.n	8002988 <u8g2_DrawHVLine+0x48>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
 8002954:	2d03      	cmp	r5, #3
 8002956:	d024      	beq.n	80029a2 <u8g2_DrawHVLine+0x62>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 8002958:	f015 0f01 	tst.w	r5, #1
 800295c:	d017      	beq.n	800298e <u8g2_DrawHVLine+0x4e>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800295e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002962:	428b      	cmp	r3, r1
 8002964:	d81b      	bhi.n	800299e <u8g2_DrawHVLine+0x5e>
	  return;
	if ( x >= u8g2->user_x1 )
 8002966:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800296a:	428b      	cmp	r3, r1
 800296c:	d917      	bls.n	800299e <u8g2_DrawHVLine+0x5e>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800296e:	f890 5047 	ldrb.w	r5, [r0, #71]	; 0x47
 8002972:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  b += *len;
 8002976:	4414      	add	r4, r2
 8002978:	b2e4      	uxtb	r4, r4
  if ( a > b )
 800297a:	42a2      	cmp	r2, r4
 800297c:	d938      	bls.n	80029f0 <u8g2_DrawHVLine+0xb0>
    if ( a < d )
 800297e:	4293      	cmp	r3, r2
 8002980:	d935      	bls.n	80029ee <u8g2_DrawHVLine+0xae>
      b--;
 8002982:	1e5c      	subs	r4, r3, #1
 8002984:	b2e4      	uxtb	r4, r4
 8002986:	e035      	b.n	80029f4 <u8g2_DrawHVLine+0xb4>
	  x++;
 8002988:	3101      	adds	r1, #1
 800298a:	1ac9      	subs	r1, r1, r3
 800298c:	b2c9      	uxtb	r1, r1
	if ( y < u8g2->user_y0 )
 800298e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8002992:	4293      	cmp	r3, r2
 8002994:	d803      	bhi.n	800299e <u8g2_DrawHVLine+0x5e>
	if ( y >= u8g2->user_y1 )
 8002996:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800299a:	4293      	cmp	r3, r2
 800299c:	d805      	bhi.n	80029aa <u8g2_DrawHVLine+0x6a>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
 800299e:	b003      	add	sp, #12
 80029a0:	bd30      	pop	{r4, r5, pc}
	  y++;
 80029a2:	3201      	adds	r2, #1
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	e7d9      	b.n	800295e <u8g2_DrawHVLine+0x1e>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80029aa:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
 80029ae:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  b += *len;
 80029b2:	440c      	add	r4, r1
 80029b4:	b2e4      	uxtb	r4, r4
  if ( a > b )
 80029b6:	428c      	cmp	r4, r1
 80029b8:	d205      	bcs.n	80029c6 <u8g2_DrawHVLine+0x86>
    if ( a < d )
 80029ba:	428b      	cmp	r3, r1
 80029bc:	d902      	bls.n	80029c4 <u8g2_DrawHVLine+0x84>
      b--;
 80029be:	1e5c      	subs	r4, r3, #1
 80029c0:	b2e4      	uxtb	r4, r4
 80029c2:	e002      	b.n	80029ca <u8g2_DrawHVLine+0x8a>
      a = c;
 80029c4:	4629      	mov	r1, r5
  if ( a >= d )
 80029c6:	428b      	cmp	r3, r1
 80029c8:	d9e9      	bls.n	800299e <u8g2_DrawHVLine+0x5e>
  if ( b <= c )
 80029ca:	42a5      	cmp	r5, r4
 80029cc:	d2e7      	bcs.n	800299e <u8g2_DrawHVLine+0x5e>
 80029ce:	42a9      	cmp	r1, r5
 80029d0:	bf38      	it	cc
 80029d2:	4629      	movcc	r1, r5
  b -= a;
 80029d4:	42a3      	cmp	r3, r4
 80029d6:	bf94      	ite	ls
 80029d8:	ebc1 0303 	rsbls	r3, r1, r3
 80029dc:	ebc1 0304 	rsbhi	r3, r1, r4
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2500      	movs	r5, #0
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80029e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80029e6:	9500      	str	r5, [sp, #0]
 80029e8:	68a4      	ldr	r4, [r4, #8]
 80029ea:	47a0      	blx	r4
 80029ec:	e7d7      	b.n	800299e <u8g2_DrawHVLine+0x5e>
      a = c;
 80029ee:	462a      	mov	r2, r5
  if ( a >= d )
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d9d4      	bls.n	800299e <u8g2_DrawHVLine+0x5e>
  if ( b <= c )
 80029f4:	42a5      	cmp	r5, r4
 80029f6:	d2d2      	bcs.n	800299e <u8g2_DrawHVLine+0x5e>
 80029f8:	42aa      	cmp	r2, r5
 80029fa:	bf38      	it	cc
 80029fc:	462a      	movcc	r2, r5
  b -= a;
 80029fe:	42a3      	cmp	r3, r4
 8002a00:	bf94      	ite	ls
 8002a02:	ebc2 0303 	rsbls	r3, r2, r3
 8002a06:	ebc2 0304 	rsbhi	r3, r2, r4
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2501      	movs	r5, #1
 8002a0e:	e7e9      	b.n	80029e4 <u8g2_DrawHVLine+0xa4>

08002a10 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
 8002a10:	2902      	cmp	r1, #2
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002a12:	bf92      	itee	ls
 8002a14:	f880 1081 	strbls.w	r1, [r0, #129]	; 0x81
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002a18:	2301      	movhi	r3, #1
 8002a1a:	f880 3081 	strbhi.w	r3, [r0, #129]	; 0x81
}
 8002a1e:	4770      	bx	lr

08002a20 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a22:	f89d 7014 	ldrb.w	r7, [sp, #20]
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002a26:	f002 0607 	and.w	r6, r2, #7
  mask = 1;
  mask <<= bit_pos;
 8002a2a:	2401      	movs	r4, #1
 8002a2c:	40b4      	lsls	r4, r6
 8002a2e:	b2e4      	uxtb	r4, r4

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8002a30:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 8002a34:	2d01      	cmp	r5, #1
 8002a36:	d90d      	bls.n	8002a54 <u8g2_ll_hvline_vertical_top_lsb+0x34>
  or_mask = 0;
 8002a38:	2500      	movs	r5, #0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8002a3a:	f002 0cf8 	and.w	ip, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002a3e:	6802      	ldr	r2, [r0, #0]
 8002a40:	f892 e010 	ldrb.w	lr, [r2, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 8002a44:	fb0e 110c 	mla	r1, lr, ip, r1
 8002a48:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002a4a:	4411      	add	r1, r2
  
  if ( dir == 0 )
 8002a4c:	b147      	cbz	r7, 8002a60 <u8g2_ll_hvline_vertical_top_lsb+0x40>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
 8002a4e:	2701      	movs	r7, #1
	  or_mask  = 1;
 8002a50:	46bc      	mov	ip, r7
 8002a52:	e01d      	b.n	8002a90 <u8g2_ll_hvline_vertical_top_lsb+0x70>
    or_mask  = mask;
 8002a54:	bf18      	it	ne
 8002a56:	4625      	movne	r5, r4
  if ( u8g2->draw_color != 1 )
 8002a58:	d1ef      	bne.n	8002a3a <u8g2_ll_hvline_vertical_top_lsb+0x1a>
    or_mask  = mask;
 8002a5a:	4625      	mov	r5, r4
  xor_mask = 0;
 8002a5c:	2400      	movs	r4, #0
 8002a5e:	e7ec      	b.n	8002a3a <u8g2_ll_hvline_vertical_top_lsb+0x1a>
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	3201      	adds	r2, #1
 8002a66:	440a      	add	r2, r1
	*ptr |= or_mask;
 8002a68:	780b      	ldrb	r3, [r1, #0]
 8002a6a:	432b      	orrs	r3, r5
	*ptr ^= xor_mask;
 8002a6c:	4063      	eors	r3, r4
 8002a6e:	f801 3b01 	strb.w	r3, [r1], #1
      } while( len != 0 );
 8002a72:	428a      	cmp	r2, r1
 8002a74:	d1f8      	bne.n	8002a68 <u8g2_ll_hvline_vertical_top_lsb+0x48>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  or_mask  = 1;
 8002a78:	bf08      	it	eq
 8002a7a:	4615      	moveq	r5, r2
	if ( u8g2->draw_color != 1 )
 8002a7c:	d006      	beq.n	8002a8c <u8g2_ll_hvline_vertical_top_lsb+0x6c>
	  xor_mask = 1;
 8002a7e:	463c      	mov	r4, r7
	  or_mask  = 1;
 8002a80:	4665      	mov	r5, ip
 8002a82:	e003      	b.n	8002a8c <u8g2_ll_hvline_vertical_top_lsb+0x6c>
	or_mask <<= 1;
 8002a84:	006d      	lsls	r5, r5, #1
 8002a86:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8002a88:	0064      	lsls	r4, r4, #1
 8002a8a:	b2e4      	uxtb	r4, r4
    } while( len != 0 );
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f2      	beq.n	8002a76 <u8g2_ll_hvline_vertical_top_lsb+0x56>
      *ptr |= or_mask;
 8002a90:	780a      	ldrb	r2, [r1, #0]
 8002a92:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 8002a94:	4062      	eors	r2, r4
 8002a96:	700a      	strb	r2, [r1, #0]
      bit_pos++;
 8002a98:	1c72      	adds	r2, r6, #1
      len--;
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
      if ( bit_pos == 0 )
 8002a9e:	f012 0607 	ands.w	r6, r2, #7
 8002aa2:	d1ef      	bne.n	8002a84 <u8g2_ll_hvline_vertical_top_lsb+0x64>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002aa4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002aa8:	4411      	add	r1, r2
	if ( u8g2->draw_color <= 1 )
 8002aaa:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002aae:	2a01      	cmp	r2, #1
 8002ab0:	d9e2      	bls.n	8002a78 <u8g2_ll_hvline_vertical_top_lsb+0x58>
	  xor_mask = 1;
 8002ab2:	463c      	mov	r4, r7
 8002ab4:	e7ea      	b.n	8002a8c <u8g2_ll_hvline_vertical_top_lsb+0x6c>

08002ab6 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 8002ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aba:	b087      	sub	sp, #28
 8002abc:	4606      	mov	r6, r0
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4617      	mov	r7, r2
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8002ac8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002acc:	9304      	str	r3, [sp, #16]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	f7ff ff28 	bl	8002924 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 8002ad4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	4798      	blx	r3
 8002ada:	4438      	add	r0, r7
 8002adc:	b2c3      	uxtb	r3, r0
 8002ade:	9303      	str	r3, [sp, #12]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 8002ae0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f7ff ff16 	bl	8002914 <u8g2_GetUTF8Width>
 8002ae8:	4682      	mov	sl, r0

  /* calculate delta d within the box */
  d = 0;
  if ( str_width < w )
 8002aea:	42a8      	cmp	r0, r5
 8002aec:	d238      	bcs.n	8002b60 <u8g2_DrawUTF8Line+0xaa>
  {
    d = w;
    d -=str_width;
 8002aee:	eba5 0a00 	sub.w	sl, r5, r0
    d /= 2;
 8002af2:	f3ca 0346 	ubfx	r3, sl, #1, #7
 8002af6:	9305      	str	r3, [sp, #20]
 8002af8:	46aa      	mov	sl, r5
    w = str_width;
  }

  /* caluclate text box */
  fx = x;
  fy = y - u8g2_GetAscent(u8g2) ;
 8002afa:	f896 707d 	ldrb.w	r7, [r6, #125]	; 0x7d
 8002afe:	9b03      	ldr	r3, [sp, #12]
 8002b00:	eba3 0b07 	sub.w	fp, r3, r7
 8002b04:	fa5f fb8b 	uxtb.w	fp, fp
  fw = w;
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 8002b08:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
 8002b0c:	1aff      	subs	r7, r7, r3
 8002b0e:	b2ff      	uxtb	r7, r7

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8002b10:	2101      	movs	r1, #1
 8002b12:	4630      	mov	r0, r6
 8002b14:	f7ff ff7c 	bl	8002a10 <u8g2_SetDrawColor>
  if ( is_invert )
 8002b18:	9b04      	ldr	r3, [sp, #16]
 8002b1a:	bb23      	cbnz	r3, 8002b66 <u8g2_DrawUTF8Line+0xb0>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
  }

  /* draw the frame */
  while( border_size > 0 )
 8002b1c:	b36c      	cbz	r4, 8002b7a <u8g2_DrawUTF8Line+0xc4>
 8002b1e:	eba8 0904 	sub.w	r9, r8, r4
 8002b22:	fa5f f989 	uxtb.w	r9, r9
  d = 0;
 8002b26:	4655      	mov	r5, sl
 8002b28:	4644      	mov	r4, r8
  {
    fx--;
 8002b2a:	3c01      	subs	r4, #1
 8002b2c:	b2e4      	uxtb	r4, r4
    fy--;
    fw +=2;
 8002b2e:	3502      	adds	r5, #2
 8002b30:	b2ed      	uxtb	r5, r5
    fh +=2;
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 8002b32:	eba4 0208 	sub.w	r2, r4, r8
 8002b36:	445a      	add	r2, fp
 8002b38:	197b      	adds	r3, r7, r5
 8002b3a:	eba3 030a 	sub.w	r3, r3, sl
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	462b      	mov	r3, r5
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4621      	mov	r1, r4
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f7ff fba8 	bl	800229e <u8g2_DrawFrame>
  while( border_size > 0 )
 8002b4e:	454c      	cmp	r4, r9
 8002b50:	d1eb      	bne.n	8002b2a <u8g2_DrawUTF8Line+0x74>
    border_size--;
  }

  if ( is_invert )
 8002b52:	9b04      	ldr	r3, [sp, #16]
 8002b54:	b18b      	cbz	r3, 8002b7a <u8g2_DrawUTF8Line+0xc4>
  {
    u8g2_SetDrawColor(u8g2, 0);
 8002b56:	2100      	movs	r1, #0
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f7ff ff59 	bl	8002a10 <u8g2_SetDrawColor>
 8002b5e:	e010      	b.n	8002b82 <u8g2_DrawUTF8Line+0xcc>
  d = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	9305      	str	r3, [sp, #20]
 8002b64:	e7c9      	b.n	8002afa <u8g2_DrawUTF8Line+0x44>
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8002b66:	9700      	str	r7, [sp, #0]
 8002b68:	4653      	mov	r3, sl
 8002b6a:	465a      	mov	r2, fp
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f7ff fb7a 	bl	8002268 <u8g2_DrawBox>
  while( border_size > 0 )
 8002b74:	2c00      	cmp	r4, #0
 8002b76:	d1d2      	bne.n	8002b1e <u8g2_DrawUTF8Line+0x68>
 8002b78:	e7ed      	b.n	8002b56 <u8g2_DrawUTF8Line+0xa0>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f7ff ff47 	bl	8002a10 <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 8002b82:	9b05      	ldr	r3, [sp, #20]
 8002b84:	4443      	add	r3, r8
 8002b86:	4619      	mov	r1, r3
 8002b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b8a:	9a03      	ldr	r2, [sp, #12]
 8002b8c:	b2c9      	uxtb	r1, r1
 8002b8e:	4630      	mov	r0, r6
 8002b90:	f7ff fe6e 	bl	8002870 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 8002b94:	2101      	movs	r1, #1
 8002b96:	4630      	mov	r0, r6
 8002b98:	f7ff ff3a 	bl	8002a10 <u8g2_SetDrawColor>

}
 8002b9c:	b007      	add	sp, #28
 8002b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002ba2 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002ba2:	b470      	push	{r4, r5, r6}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002ba4:	6801      	ldr	r1, [r0, #0]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002ba6:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
  t *= 8;
 8002baa:	00e3      	lsls	r3, r4, #3
  u8g2->pixel_buf_height = t;
 8002bac:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
  
  t = display_info->tile_width;
 8002bb0:	7c0a      	ldrb	r2, [r1, #16]
 8002bb2:	2a1f      	cmp	r2, #31
 8002bb4:	bf28      	it	cs
 8002bb6:	221f      	movcs	r2, #31
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002bb8:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_buf_width = t;
 8002bba:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8002bbe:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
  t *= 8;
 8002bc2:	00eb      	lsls	r3, r5, #3
 8002bc4:	b2db      	uxtb	r3, r3
  u8g2->pixel_curr_row = t;
 8002bc6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002bca:	7c4a      	ldrb	r2, [r1, #17]
 8002bcc:	1966      	adds	r6, r4, r5
 8002bce:	4296      	cmp	r6, r2
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002bd0:	bfc4      	itt	gt
 8002bd2:	1b54      	subgt	r4, r2, r5
 8002bd4:	b2e4      	uxtbgt	r4, r4
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002bd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 8002bda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002bde:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002be2:	23f0      	movs	r3, #240	; 0xf0
 8002be4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8002be8:	8a8b      	ldrh	r3, [r1, #20]
 8002bea:	2bf0      	cmp	r3, #240	; 0xf0
    u8g2->width = display_info->pixel_width;
 8002bec:	bf98      	it	ls
 8002bee:	f880 3043 	strbls.w	r3, [r0, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8002bf2:	8acb      	ldrh	r3, [r1, #22]
 8002bf4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
#endif

}
 8002bf8:	bc70      	pop	{r4, r5, r6}
 8002bfa:	4770      	bx	lr

08002bfc <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002bfc:	b508      	push	{r3, lr}
  u8g2_update_dimension_common(u8g2);  
 8002bfe:	f7ff ffd0 	bl	8002ba2 <u8g2_update_dimension_common>
}
 8002c02:	bd08      	pop	{r3, pc}

08002c04 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
  u8g2->user_x0 = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002c0a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002c0e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002c12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c16:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002c1a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002c1e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002c22:	4770      	bx	lr

08002c24 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c24:	b510      	push	{r4, lr}
 8002c26:	b082      	sub	sp, #8
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002c28:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002c2c:	9400      	str	r4, [sp, #0]
 8002c2e:	f7ff fe7a 	bl	8002926 <u8g2_draw_hv_line_2dir>
}
 8002c32:	b002      	add	sp, #8
 8002c34:	bd10      	pop	{r4, pc}

08002c36 <u8g2_SetupBuffer>:
{
 8002c36:	b570      	push	{r4, r5, r6, lr}
 8002c38:	4604      	mov	r4, r0
 8002c3a:	9e04      	ldr	r6, [sp, #16]
  u8g2->font = NULL;
 8002c3c:	2500      	movs	r5, #0
 8002c3e:	64c5      	str	r5, [r0, #76]	; 0x4c
  u8g2->ll_hvline = ll_hvline_cb;
 8002c40:	6303      	str	r3, [r0, #48]	; 0x30
  u8g2->tile_buf_ptr = buf;
 8002c42:	6381      	str	r1, [r0, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8002c44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  u8g2->tile_curr_row = 0;
 8002c48:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002c4c:	f880 505f 	strb.w	r5, [r0, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8002c50:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
  u8g2->draw_color = 1;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  u8g2->is_auto_page_clear = 1;
 8002c5a:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  u8g2->cb = u8g2_cb;
 8002c5e:	6346      	str	r6, [r0, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002c60:	6833      	ldr	r3, [r6, #0]
 8002c62:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4798      	blx	r3
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f7ff fe35 	bl	80028dc <u8g2_SetFontPosBaseline>
}
 8002c72:	bd70      	pop	{r4, r5, r6, pc}

08002c74 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002c74:	b119      	cbz	r1, 8002c7e <u8x8_ascii_next+0xa>
 8002c76:	290a      	cmp	r1, #10
 8002c78:	d004      	beq.n	8002c84 <u8x8_ascii_next+0x10>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8002c7a:	b288      	uxth	r0, r1
 8002c7c:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 8002c7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c82:	4770      	bx	lr
 8002c84:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8002c88:	4770      	bx	lr

08002c8a <u8x8_utf8_next>:
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d042      	beq.n	8002d16 <u8x8_utf8_next+0x8c>
 8002c90:	290a      	cmp	r1, #10
 8002c92:	d044      	beq.n	8002d1e <u8x8_utf8_next+0x94>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
  if ( u8x8->utf8_state == 0 )
 8002c94:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 8002c98:	bb62      	cbnz	r2, 8002cf4 <u8x8_utf8_next+0x6a>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002c9a:	29fb      	cmp	r1, #251	; 0xfb
 8002c9c:	d809      	bhi.n	8002cb2 <u8x8_utf8_next+0x28>
    {
      u8x8->utf8_state = 5;
      b &= 1;
    }
    else if ( b >= 0xf8 )
 8002c9e:	29f7      	cmp	r1, #247	; 0xf7
 8002ca0:	d810      	bhi.n	8002cc4 <u8x8_utf8_next+0x3a>
    {
      u8x8->utf8_state = 4;
      b &= 3;
    }
    else if ( b >= 0xf0 )
 8002ca2:	29ef      	cmp	r1, #239	; 0xef
 8002ca4:	d814      	bhi.n	8002cd0 <u8x8_utf8_next+0x46>
    {
      u8x8->utf8_state = 3;
      b &= 7;      
    }
    else if ( b >= 0xe0 )
 8002ca6:	29df      	cmp	r1, #223	; 0xdf
 8002ca8:	d818      	bhi.n	8002cdc <u8x8_utf8_next+0x52>
    {
      u8x8->utf8_state = 2;
      b &= 15;
    }
    else if ( b >= 0xc0 )
 8002caa:	29bf      	cmp	r1, #191	; 0xbf
 8002cac:	d81c      	bhi.n	8002ce8 <u8x8_utf8_next+0x5e>
      b &= 0x01f;
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002cae:	b28b      	uxth	r3, r1
 8002cb0:	e033      	b.n	8002d1a <u8x8_utf8_next+0x90>
      u8x8->utf8_state = 5;
 8002cb2:	2205      	movs	r2, #5
 8002cb4:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
      b &= 1;
 8002cb8:	f001 0301 	and.w	r3, r1, #1
    }
    u8x8->encoding = b;
 8002cbc:	8403      	strh	r3, [r0, #32]
    return 0x0fffe;
 8002cbe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002cc2:	e02a      	b.n	8002d1a <u8x8_utf8_next+0x90>
      u8x8->utf8_state = 4;
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
      b &= 3;
 8002cca:	f001 0303 	and.w	r3, r1, #3
 8002cce:	e7f5      	b.n	8002cbc <u8x8_utf8_next+0x32>
      u8x8->utf8_state = 3;
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
      b &= 7;      
 8002cd6:	f001 0307 	and.w	r3, r1, #7
 8002cda:	e7ef      	b.n	8002cbc <u8x8_utf8_next+0x32>
      u8x8->utf8_state = 2;
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
      b &= 15;
 8002ce2:	f001 030f 	and.w	r3, r1, #15
 8002ce6:	e7e9      	b.n	8002cbc <u8x8_utf8_next+0x32>
      u8x8->utf8_state = 1;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
      b &= 0x01f;
 8002cee:	f001 031f 	and.w	r3, r1, #31
 8002cf2:	e7e3      	b.n	8002cbc <u8x8_utf8_next+0x32>
  }
  else
  {
    u8x8->utf8_state--;
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002cfc:	8c01      	ldrh	r1, [r0, #32]
    b &= 0x03f;
    u8x8->encoding |= b;
 8002cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d02:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8403      	strh	r3, [r0, #32]
    if ( u8x8->utf8_state != 0 )
      return 0x0fffe;	/* nothing to do yet */
 8002d0a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002d0e:	2a00      	cmp	r2, #0
 8002d10:	bf18      	it	ne
 8002d12:	460b      	movne	r3, r1
 8002d14:	e001      	b.n	8002d1a <u8x8_utf8_next+0x90>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
  }
  return u8x8->encoding;
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d22:	e7fa      	b.n	8002d1a <u8x8_utf8_next+0x90>

08002d24 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002d24:	2300      	movs	r3, #0
 8002d26:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 8002d2a:	4770      	bx	lr

08002d2c <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002d2c:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002d2e:	6904      	ldr	r4, [r0, #16]
 8002d30:	4613      	mov	r3, r2
 8002d32:	460a      	mov	r2, r1
 8002d34:	2117      	movs	r1, #23
 8002d36:	47a0      	blx	r4
}
 8002d38:	bd10      	pop	{r4, pc}

08002d3a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002d3a:	b500      	push	{lr}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	aa02      	add	r2, sp, #8
 8002d40:	f802 1d01 	strb.w	r1, [r2, #-1]!
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002d44:	2101      	movs	r1, #1
 8002d46:	f7ff fff1 	bl	8002d2c <u8x8_byte_SendBytes>
}
 8002d4a:	b003      	add	sp, #12
 8002d4c:	f85d fb04 	ldr.w	pc, [sp], #4

08002d50 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002d50:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002d52:	6904      	ldr	r4, [r0, #16]
 8002d54:	2300      	movs	r3, #0
 8002d56:	461a      	mov	r2, r3
 8002d58:	2118      	movs	r1, #24
 8002d5a:	47a0      	blx	r4
}
 8002d5c:	bd10      	pop	{r4, pc}

08002d5e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002d5e:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002d60:	6904      	ldr	r4, [r0, #16]
 8002d62:	2300      	movs	r3, #0
 8002d64:	461a      	mov	r2, r3
 8002d66:	2119      	movs	r1, #25
 8002d68:	47a0      	blx	r4
}
 8002d6a:	bd10      	pop	{r4, pc}

08002d6c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	4604      	mov	r4, r0
 8002d70:	460e      	mov	r6, r1
 8002d72:	4617      	mov	r7, r2
    u8x8_byte_StartTransfer(u8x8);    
 8002d74:	f7ff ffec 	bl	8002d50 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002d78:	2140      	movs	r1, #64	; 0x40
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff ffdd 	bl	8002d3a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002d80:	6925      	ldr	r5, [r4, #16]
 8002d82:	463b      	mov	r3, r7
 8002d84:	4632      	mov	r2, r6
 8002d86:	2117      	movs	r1, #23
 8002d88:	4620      	mov	r0, r4
 8002d8a:	47a8      	blx	r5
    u8x8_byte_EndTransfer(u8x8);
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff ffe6 	bl	8002d5e <u8x8_byte_EndTransfer>
}
 8002d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d94 <u8x8_cad_SendCmd>:
{
 8002d94:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002d96:	68c4      	ldr	r4, [r0, #12]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	2115      	movs	r1, #21
 8002d9e:	47a0      	blx	r4
}
 8002da0:	bd10      	pop	{r4, pc}

08002da2 <u8x8_cad_SendArg>:
{
 8002da2:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002da4:	68c4      	ldr	r4, [r0, #12]
 8002da6:	2300      	movs	r3, #0
 8002da8:	460a      	mov	r2, r1
 8002daa:	2116      	movs	r1, #22
 8002dac:	47a0      	blx	r4
}
 8002dae:	bd10      	pop	{r4, pc}

08002db0 <u8x8_cad_SendData>:
{
 8002db0:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002db2:	68c4      	ldr	r4, [r0, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	460a      	mov	r2, r1
 8002db8:	2117      	movs	r1, #23
 8002dba:	47a0      	blx	r4
}
 8002dbc:	bd10      	pop	{r4, pc}

08002dbe <u8x8_cad_StartTransfer>:
{
 8002dbe:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002dc0:	68c4      	ldr	r4, [r0, #12]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2118      	movs	r1, #24
 8002dc8:	47a0      	blx	r4
}
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <u8x8_cad_EndTransfer>:
{
 8002dcc:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002dce:	68c4      	ldr	r4, [r0, #12]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2119      	movs	r1, #25
 8002dd6:	47a0      	blx	r4
}
 8002dd8:	bd10      	pop	{r4, pc}

08002dda <u8x8_cad_SendSequence>:
{
 8002dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	4605      	mov	r5, r0
 8002de2:	460c      	mov	r4, r1
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002de4:	f04f 0801 	mov.w	r8, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002de8:	2700      	movs	r7, #0
    cmd = *data;
 8002dea:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 8002dec:	2917      	cmp	r1, #23
 8002dee:	d018      	beq.n	8002e22 <u8x8_cad_SendSequence+0x48>
 8002df0:	d90c      	bls.n	8002e0c <u8x8_cad_SendSequence+0x32>
 8002df2:	2919      	cmp	r1, #25
 8002df4:	d920      	bls.n	8002e38 <u8x8_cad_SendSequence+0x5e>
 8002df6:	29fe      	cmp	r1, #254	; 0xfe
 8002df8:	d125      	bne.n	8002e46 <u8x8_cad_SendSequence+0x6c>
	  v = *data;
 8002dfa:	7862      	ldrb	r2, [r4, #1]
 8002dfc:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002e00:	2129      	movs	r1, #41	; 0x29
 8002e02:	4628      	mov	r0, r5
 8002e04:	f000 f97c 	bl	8003100 <u8x8_gpio_call>
	  data++;
 8002e08:	3402      	adds	r4, #2
	  break;
 8002e0a:	e7ee      	b.n	8002dea <u8x8_cad_SendSequence+0x10>
    switch( cmd )
 8002e0c:	2915      	cmp	r1, #21
 8002e0e:	d31a      	bcc.n	8002e46 <u8x8_cad_SendSequence+0x6c>
	  v = *data;
 8002e10:	7862      	ldrb	r2, [r4, #1]
 8002e12:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002e16:	68ee      	ldr	r6, [r5, #12]
 8002e18:	463b      	mov	r3, r7
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	47b0      	blx	r6
	  data++;
 8002e1e:	3402      	adds	r4, #2
	  break;
 8002e20:	e7e3      	b.n	8002dea <u8x8_cad_SendSequence+0x10>
	  v = *data;
 8002e22:	7863      	ldrb	r3, [r4, #1]
 8002e24:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002e28:	f10d 0207 	add.w	r2, sp, #7
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f7ff ffbe 	bl	8002db0 <u8x8_cad_SendData>
	  data++;
 8002e34:	3402      	adds	r4, #2
	  break;
 8002e36:	e7d8      	b.n	8002dea <u8x8_cad_SendSequence+0x10>
    data++;
 8002e38:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002e3a:	68ee      	ldr	r6, [r5, #12]
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	463a      	mov	r2, r7
 8002e40:	4628      	mov	r0, r5
 8002e42:	47b0      	blx	r6
	  break;
 8002e44:	e7d1      	b.n	8002dea <u8x8_cad_SendSequence+0x10>
}
 8002e46:	b002      	add	sp, #8
 8002e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e4c <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	4606      	mov	r6, r0
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002e54:	3914      	subs	r1, #20
 8002e56:	2905      	cmp	r1, #5
 8002e58:	d857      	bhi.n	8002f0a <u8x8_cad_ssd13xx_fast_i2c+0xbe>
 8002e5a:	e8df f001 	tbb	[pc, r1]
 8002e5e:	033a      	.short	0x033a
 8002e60:	4b461d18 	.word	0x4b461d18
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b973      	cbnz	r3, 8002e88 <u8x8_cad_ssd13xx_fast_i2c+0x3c>
	 u8x8_byte_EndTransfer(u8x8); 
      
      u8x8_byte_StartTransfer(u8x8);
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f7ff ff70 	bl	8002d50 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002e70:	2100      	movs	r1, #0
 8002e72:	4630      	mov	r0, r6
 8002e74:	f7ff ff61 	bl	8002d3a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f7ff ff5d 	bl	8002d3a <u8x8_byte_SendByte>
      in_transfer = 1;
 8002e80:	2001      	movs	r0, #1
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002e84:	7018      	strb	r0, [r3, #0]
      break;
    default:
      return 0;
  }
  return 1;
}
 8002e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	 u8x8_byte_EndTransfer(u8x8); 
 8002e88:	f7ff ff69 	bl	8002d5e <u8x8_byte_EndTransfer>
 8002e8c:	e7ed      	b.n	8002e6a <u8x8_cad_ssd13xx_fast_i2c+0x1e>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e8e:	4611      	mov	r1, r2
 8002e90:	f7ff ff53 	bl	8002d3a <u8x8_byte_SendByte>
  return 1;
 8002e94:	2001      	movs	r0, #1
      break;      
 8002e96:	e7f6      	b.n	8002e86 <u8x8_cad_ssd13xx_fast_i2c+0x3a>
      if ( in_transfer != 0 )
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	b9b3      	cbnz	r3, 8002ecc <u8x8_cad_ssd13xx_fast_i2c+0x80>
       while( arg_int > 24 )
 8002e9e:	2c18      	cmp	r4, #24
 8002ea0:	d90a      	bls.n	8002eb8 <u8x8_cad_ssd13xx_fast_i2c+0x6c>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002ea2:	2718      	movs	r7, #24
 8002ea4:	462a      	mov	r2, r5
 8002ea6:	4639      	mov	r1, r7
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f7ff ff5f 	bl	8002d6c <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002eae:	3c18      	subs	r4, #24
 8002eb0:	b2e4      	uxtb	r4, r4
	p+=24;
 8002eb2:	3518      	adds	r5, #24
       while( arg_int > 24 )
 8002eb4:	2c18      	cmp	r4, #24
 8002eb6:	d8f5      	bhi.n	8002ea4 <u8x8_cad_ssd13xx_fast_i2c+0x58>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002eb8:	462a      	mov	r2, r5
 8002eba:	4621      	mov	r1, r4
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	f7ff ff55 	bl	8002d6c <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
  return 1;
 8002ec8:	2001      	movs	r0, #1
      break;
 8002eca:	e7dc      	b.n	8002e86 <u8x8_cad_ssd13xx_fast_i2c+0x3a>
	u8x8_byte_EndTransfer(u8x8); 
 8002ecc:	f7ff ff47 	bl	8002d5e <u8x8_byte_EndTransfer>
 8002ed0:	e7e5      	b.n	8002e9e <u8x8_cad_ssd13xx_fast_i2c+0x52>
      if ( u8x8->i2c_address == 255 )
 8002ed2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002ed6:	2bff      	cmp	r3, #255	; 0xff
	u8x8->i2c_address = 0x078;
 8002ed8:	bf04      	itt	eq
 8002eda:	2378      	moveq	r3, #120	; 0x78
 8002edc:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002ee0:	6907      	ldr	r7, [r0, #16]
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	2114      	movs	r1, #20
 8002ee6:	47b8      	blx	r7
 8002ee8:	e7cd      	b.n	8002e86 <u8x8_cad_ssd13xx_fast_i2c+0x3a>
      in_transfer = 0;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
  return 1;
 8002ef0:	2001      	movs	r0, #1
      break;
 8002ef2:	e7c8      	b.n	8002e86 <u8x8_cad_ssd13xx_fast_i2c+0x3a>
      if ( in_transfer != 0 )
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b923      	cbnz	r3, 8002f04 <u8x8_cad_ssd13xx_fast_i2c+0xb8>
      in_transfer = 0;
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
  return 1;
 8002f00:	2001      	movs	r0, #1
      break;
 8002f02:	e7c0      	b.n	8002e86 <u8x8_cad_ssd13xx_fast_i2c+0x3a>
	u8x8_byte_EndTransfer(u8x8); 
 8002f04:	f7ff ff2b 	bl	8002d5e <u8x8_byte_EndTransfer>
 8002f08:	e7f7      	b.n	8002efa <u8x8_cad_ssd13xx_fast_i2c+0xae>
      return 0;
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e7bb      	b.n	8002e86 <u8x8_cad_ssd13xx_fast_i2c+0x3a>
 8002f0e:	bf00      	nop
 8002f10:	2000046c 	.word	0x2000046c

08002f14 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	4605      	mov	r5, r0
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461e      	mov	r6, r3
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002f1c:	390b      	subs	r1, #11
 8002f1e:	2904      	cmp	r1, #4
 8002f20:	d860      	bhi.n	8002fe4 <u8x8_d_ssd1306_sh1106_generic+0xd0>
 8002f22:	e8df f001 	tbb	[pc, r1]
 8002f26:	5f03      	.short	0x5f03
 8002f28:	210e      	.short	0x210e
 8002f2a:	30          	.byte	0x30
 8002f2b:	00          	.byte	0x00
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002f2c:	b922      	cbnz	r2, 8002f38 <u8x8_d_ssd1306_sh1106_generic+0x24>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002f2e:	492e      	ldr	r1, [pc, #184]	; (8002fe8 <u8x8_d_ssd1306_sh1106_generic+0xd4>)
 8002f30:	f7ff ff53 	bl	8002dda <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002f34:	2001      	movs	r0, #1
 8002f36:	e025      	b.n	8002f84 <u8x8_d_ssd1306_sh1106_generic+0x70>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002f38:	492c      	ldr	r1, [pc, #176]	; (8002fec <u8x8_d_ssd1306_sh1106_generic+0xd8>)
 8002f3a:	f7ff ff4e 	bl	8002dda <u8x8_cad_SendSequence>
  return 1;
 8002f3e:	2001      	movs	r0, #1
 8002f40:	e020      	b.n	8002f84 <u8x8_d_ssd1306_sh1106_generic+0x70>
      if ( arg_int == 0 )
 8002f42:	b942      	cbnz	r2, 8002f56 <u8x8_d_ssd1306_sh1106_generic+0x42>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002f44:	492a      	ldr	r1, [pc, #168]	; (8002ff0 <u8x8_d_ssd1306_sh1106_generic+0xdc>)
 8002f46:	f7ff ff48 	bl	8002dda <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	7c9b      	ldrb	r3, [r3, #18]
 8002f4e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  return 1;
 8002f52:	2001      	movs	r0, #1
 8002f54:	e016      	b.n	8002f84 <u8x8_d_ssd1306_sh1106_generic+0x70>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002f56:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <u8x8_d_ssd1306_sh1106_generic+0xe0>)
 8002f58:	f7ff ff3f 	bl	8002dda <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	7cdb      	ldrb	r3, [r3, #19]
 8002f60:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  return 1;
 8002f64:	2001      	movs	r0, #1
 8002f66:	e00d      	b.n	8002f84 <u8x8_d_ssd1306_sh1106_generic+0x70>
      u8x8_cad_StartTransfer(u8x8);
 8002f68:	f7ff ff29 	bl	8002dbe <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f6c:	2181      	movs	r1, #129	; 0x81
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f7ff ff10 	bl	8002d94 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002f74:	4621      	mov	r1, r4
 8002f76:	4628      	mov	r0, r5
 8002f78:	f7ff ff13 	bl	8002da2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f7ff ff25 	bl	8002dcc <u8x8_cad_EndTransfer>
  return 1;
 8002f82:	2001      	movs	r0, #1
}
 8002f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_cad_StartTransfer(u8x8);
 8002f86:	f7ff ff1a 	bl	8002dbe <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002f8a:	7973      	ldrb	r3, [r6, #5]
      x += u8x8->x_offset;
 8002f8c:	f895 7022 	ldrb.w	r7, [r5, #34]	; 0x22
 8002f90:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8002f94:	f007 07ff 	and.w	r7, r7, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f7ff fefa 	bl	8002d94 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002fa0:	0939      	lsrs	r1, r7, #4
 8002fa2:	f041 0110 	orr.w	r1, r1, #16
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	f7ff fef4 	bl	8002d94 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8002fac:	f007 010f 	and.w	r1, r7, #15
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	f7ff fef6 	bl	8002da2 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002fb6:	79b1      	ldrb	r1, [r6, #6]
 8002fb8:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f7ff fef0 	bl	8002da2 <u8x8_cad_SendArg>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002fc2:	7931      	ldrb	r1, [r6, #4]
 8002fc4:	00c9      	lsls	r1, r1, #3
 8002fc6:	6832      	ldr	r2, [r6, #0]
 8002fc8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f7ff feef 	bl	8002db0 <u8x8_cad_SendData>
	arg_int--;
 8002fd2:	3c01      	subs	r4, #1
      } while( arg_int > 0 );
 8002fd4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002fd8:	d1f3      	bne.n	8002fc2 <u8x8_d_ssd1306_sh1106_generic+0xae>
      u8x8_cad_EndTransfer(u8x8);
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f7ff fef6 	bl	8002dcc <u8x8_cad_EndTransfer>
  return 1;
 8002fe0:	2001      	movs	r0, #1
      break;
 8002fe2:	e7cf      	b.n	8002f84 <u8x8_d_ssd1306_sh1106_generic+0x70>
      return 0;
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e7cd      	b.n	8002f84 <u8x8_d_ssd1306_sh1106_generic+0x70>
 8002fe8:	08008fb4 	.word	0x08008fb4
 8002fec:	08008fbc 	.word	0x08008fbc
 8002ff0:	08008f6c 	.word	0x08008f6c
 8002ff4:	08008f74 	.word	0x08008f74

08002ff8 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	460c      	mov	r4, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002ffe:	f7ff ff89 	bl	8002f14 <u8x8_d_ssd1306_sh1106_generic>
 8003002:	b998      	cbnz	r0, 800302c <u8x8_d_ssd1306_128x64_noname+0x34>
 8003004:	4603      	mov	r3, r0
    return 1;
  
  switch(msg)
 8003006:	2c09      	cmp	r4, #9
 8003008:	d00a      	beq.n	8003020 <u8x8_d_ssd1306_128x64_noname+0x28>
 800300a:	2c0a      	cmp	r4, #10
 800300c:	d10f      	bne.n	800302e <u8x8_d_ssd1306_128x64_noname+0x36>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800300e:	4628      	mov	r0, r5
 8003010:	f000 f819 	bl	8003046 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <u8x8_d_ssd1306_128x64_noname+0x3c>)
 8003016:	4628      	mov	r0, r5
 8003018:	f7ff fedf 	bl	8002dda <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 800301c:	2301      	movs	r3, #1
      break;
 800301e:	e006      	b.n	800302e <u8x8_d_ssd1306_128x64_noname+0x36>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8003020:	4905      	ldr	r1, [pc, #20]	; (8003038 <u8x8_d_ssd1306_128x64_noname+0x40>)
 8003022:	4628      	mov	r0, r5
 8003024:	f000 f80a 	bl	800303c <u8x8_d_helper_display_setup_memory>
  return 1;
 8003028:	2301      	movs	r3, #1
      break;
 800302a:	e000      	b.n	800302e <u8x8_d_ssd1306_128x64_noname+0x36>
    return 1;
 800302c:	2301      	movs	r3, #1
}
 800302e:	4618      	mov	r0, r3
 8003030:	bd38      	pop	{r3, r4, r5, pc}
 8003032:	bf00      	nop
 8003034:	08008f7c 	.word	0x08008f7c
 8003038:	08008fc4 	.word	0x08008fc4

0800303c <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800303c:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800303e:	7c8b      	ldrb	r3, [r1, #18]
 8003040:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8003044:	4770      	bx	lr

08003046 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003046:	b538      	push	{r3, r4, r5, lr}
 8003048:	4604      	mov	r4, r0
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800304a:	6945      	ldr	r5, [r0, #20]
 800304c:	2300      	movs	r3, #0
 800304e:	461a      	mov	r2, r3
 8003050:	2128      	movs	r1, #40	; 0x28
 8003052:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8003054:	68e5      	ldr	r5, [r4, #12]
 8003056:	2300      	movs	r3, #0
 8003058:	461a      	mov	r2, r3
 800305a:	2114      	movs	r1, #20
 800305c:	4620      	mov	r0, r4
 800305e:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003060:	2201      	movs	r2, #1
 8003062:	214b      	movs	r1, #75	; 0x4b
 8003064:	4620      	mov	r0, r4
 8003066:	f000 f84b 	bl	8003100 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	791a      	ldrb	r2, [r3, #4]
 800306e:	2129      	movs	r1, #41	; 0x29
 8003070:	4620      	mov	r0, r4
 8003072:	f000 f845 	bl	8003100 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	214b      	movs	r1, #75	; 0x4b
 800307a:	4620      	mov	r0, r4
 800307c:	f000 f840 	bl	8003100 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	791a      	ldrb	r2, [r3, #4]
 8003084:	2129      	movs	r1, #41	; 0x29
 8003086:	4620      	mov	r0, r4
 8003088:	f000 f83a 	bl	8003100 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800308c:	2201      	movs	r2, #1
 800308e:	214b      	movs	r1, #75	; 0x4b
 8003090:	4620      	mov	r0, r4
 8003092:	f000 f835 	bl	8003100 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	795a      	ldrb	r2, [r3, #5]
 800309a:	2129      	movs	r1, #41	; 0x29
 800309c:	4620      	mov	r0, r4
 800309e:	f000 f82f 	bl	8003100 <u8x8_gpio_call>
}    
 80030a2:	bd38      	pop	{r3, r4, r5, pc}

080030a4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80030a4:	b510      	push	{r4, lr}
 80030a6:	b082      	sub	sp, #8
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030a8:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 80030ac:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
 80030b0:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 80030b4:	ab02      	add	r3, sp, #8
 80030b6:	9a04      	ldr	r2, [sp, #16]
 80030b8:	f843 2d08 	str.w	r2, [r3, #-8]!
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030bc:	6884      	ldr	r4, [r0, #8]
 80030be:	2201      	movs	r2, #1
 80030c0:	210f      	movs	r1, #15
 80030c2:	47a0      	blx	r4
}
 80030c4:	b002      	add	sp, #8
 80030c6:	bd10      	pop	{r4, pc}

080030c8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80030c8:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80030ca:	6884      	ldr	r4, [r0, #8]
 80030cc:	2300      	movs	r3, #0
 80030ce:	461a      	mov	r2, r3
 80030d0:	2109      	movs	r1, #9
 80030d2:	47a0      	blx	r4
}
 80030d4:	bd10      	pop	{r4, pc}

080030d6 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80030d6:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80030d8:	6884      	ldr	r4, [r0, #8]
 80030da:	2300      	movs	r3, #0
 80030dc:	461a      	mov	r2, r3
 80030de:	210a      	movs	r1, #10
 80030e0:	47a0      	blx	r4
}
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80030e4:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80030e6:	6884      	ldr	r4, [r0, #8]
 80030e8:	2300      	movs	r3, #0
 80030ea:	460a      	mov	r2, r1
 80030ec:	210b      	movs	r1, #11
 80030ee:	47a0      	blx	r4
}
 80030f0:	bd10      	pop	{r4, pc}

080030f2 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80030f2:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80030f4:	6884      	ldr	r4, [r0, #8]
 80030f6:	2300      	movs	r3, #0
 80030f8:	461a      	mov	r2, r3
 80030fa:	2110      	movs	r1, #16
 80030fc:	47a0      	blx	r4
}
 80030fe:	bd10      	pop	{r4, pc}

08003100 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003100:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003102:	6944      	ldr	r4, [r0, #20]
 8003104:	2300      	movs	r3, #0
 8003106:	47a0      	blx	r4
}
 8003108:	bd10      	pop	{r4, pc}

0800310a <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 800310a:	2000      	movs	r0, #0
 800310c:	4770      	bx	lr
	...

08003110 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8003110:	2300      	movs	r3, #0
 8003112:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003114:	4a08      	ldr	r2, [pc, #32]	; (8003138 <u8x8_SetupDefaults+0x28>)
 8003116:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003118:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800311a:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800311c:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
 800311e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    u8x8->device_address = 0;
 8003122:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003126:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800312a:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 800312c:	23ff      	movs	r3, #255	; 0xff
 800312e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003132:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003136:	4770      	bx	lr
 8003138:	0800310b 	.word	0x0800310b

0800313c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	4604      	mov	r4, r0
 8003140:	460f      	mov	r7, r1
 8003142:	4616      	mov	r6, r2
 8003144:	461d      	mov	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003146:	f7ff ffe3 	bl	8003110 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800314a:	60a7      	str	r7, [r4, #8]
  u8x8->cad_cb = cad_cb;
 800314c:	60e6      	str	r6, [r4, #12]
  u8x8->byte_cb = byte_cb;
 800314e:	6125      	str	r5, [r4, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003150:	9b06      	ldr	r3, [sp, #24]
 8003152:	6163      	str	r3, [r4, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003154:	4620      	mov	r0, r4
 8003156:	f7ff ffb7 	bl	80030c8 <u8x8_SetupMemory>
}
 800315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800315c <u8x8_GetStringLineCnt>:

uint8_t u8x8_GetStringLineCnt(const char *str)
{
  char e;
  uint8_t line_cnt = 1;
  if ( str == NULL )
 800315c:	b148      	cbz	r0, 8003172 <u8x8_GetStringLineCnt+0x16>
 800315e:	1e42      	subs	r2, r0, #1
  uint8_t line_cnt = 1;
 8003160:	2001      	movs	r0, #1
    return 0;
  for(;;)
  {
    e = *str;
 8003162:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    if ( e == '\0' )
 8003166:	b12b      	cbz	r3, 8003174 <u8x8_GetStringLineCnt+0x18>
      break;
    str++;
    if ( e == '\n' )
 8003168:	2b0a      	cmp	r3, #10
 800316a:	d1fa      	bne.n	8003162 <u8x8_GetStringLineCnt+0x6>
      line_cnt++;
 800316c:	3001      	adds	r0, #1
 800316e:	b2c0      	uxtb	r0, r0
 8003170:	e7f7      	b.n	8003162 <u8x8_GetStringLineCnt+0x6>
    return 0;
 8003172:	2000      	movs	r0, #0
  }
  return line_cnt;
}
 8003174:	4770      	bx	lr

08003176 <u8x8_GetStringLineStart>:
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
  char e;
  uint8_t line_cnt = 1;
  
  if ( line_idx == 0 )
 8003176:	b168      	cbz	r0, 8003194 <u8x8_GetStringLineStart+0x1e>
{
 8003178:	b410      	push	{r4}
 800317a:	4604      	mov	r4, r0
  uint8_t line_cnt = 1;
 800317c:	2201      	movs	r2, #1
    return str;

  for(;;)
  {
    e = *str;
 800317e:	f811 3b01 	ldrb.w	r3, [r1], #1
    if ( e == '\0' )
 8003182:	b14b      	cbz	r3, 8003198 <u8x8_GetStringLineStart+0x22>
      break;
    str++;
 8003184:	4608      	mov	r0, r1
    if ( e == '\n' )
 8003186:	2b0a      	cmp	r3, #10
 8003188:	d1f9      	bne.n	800317e <u8x8_GetStringLineStart+0x8>
    {
      if ( line_cnt == line_idx )
 800318a:	42a2      	cmp	r2, r4
 800318c:	d005      	beq.n	800319a <u8x8_GetStringLineStart+0x24>
	return str;
      line_cnt++;
 800318e:	3201      	adds	r2, #1
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	e7f4      	b.n	800317e <u8x8_GetStringLineStart+0x8>
    return str;
 8003194:	4608      	mov	r0, r1
    }
  }
  return NULL;	/* line not found */
}
 8003196:	4770      	bx	lr
  return NULL;	/* line not found */
 8003198:	2000      	movs	r0, #0
}
 800319a:	bc10      	pop	{r4}
 800319c:	4770      	bx	lr
	...

080031a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031a2:	e003      	b.n	80031ac <LoopCopyDataInit>

080031a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031aa:	3104      	adds	r1, #4

080031ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031ac:	480a      	ldr	r0, [pc, #40]	; (80031d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031b4:	d3f6      	bcc.n	80031a4 <CopyDataInit>
  ldr r2, =_sbss
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031b8:	e002      	b.n	80031c0 <LoopFillZerobss>

080031ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031bc:	f842 3b04 	str.w	r3, [r2], #4

080031c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031c4:	d3f9      	bcc.n	80031ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031c6:	f7fe fe93 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ca:	f005 f9d7 	bl	800857c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031ce:	f7fe fab9 	bl	8001744 <main>
  bx lr
 80031d2:	4770      	bx	lr
  ldr r3, =_sidata
 80031d4:	08009548 	.word	0x08009548
  ldr r0, =_sdata
 80031d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031dc:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 80031e0:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 80031e4:	20002bb8 	.word	0x20002bb8

080031e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031e8:	e7fe      	b.n	80031e8 <ADC1_2_IRQHandler>
	...

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_InitTick+0x40>)
 80031f2:	7818      	ldrb	r0, [r3, #0]
 80031f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80031fc:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_InitTick+0x44>)
 80031fe:	6810      	ldr	r0, [r2, #0]
 8003200:	fbb0 f0f3 	udiv	r0, r0, r3
 8003204:	f000 f8a2 	bl	800334c <HAL_SYSTICK_Config>
 8003208:	b968      	cbnz	r0, 8003226 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320a:	2c0f      	cmp	r4, #15
 800320c:	d901      	bls.n	8003212 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800320e:	2001      	movs	r0, #1
 8003210:	e00a      	b.n	8003228 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003212:	2200      	movs	r2, #0
 8003214:	4621      	mov	r1, r4
 8003216:	f04f 30ff 	mov.w	r0, #4294967295
 800321a:	f000 f857 	bl	80032cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_InitTick+0x48>)
 8003220:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2000      	movs	r0, #0
 8003224:	e000      	b.n	8003228 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003226:	2001      	movs	r0, #1
}
 8003228:	bd10      	pop	{r4, pc}
 800322a:	bf00      	nop
 800322c:	20000008 	.word	0x20000008
 8003230:	20000004 	.word	0x20000004
 8003234:	2000000c 	.word	0x2000000c

08003238 <HAL_Init>:
{
 8003238:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_Init+0x20>)
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	f043 0310 	orr.w	r3, r3, #16
 8003242:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003244:	2003      	movs	r0, #3
 8003246:	f000 f82f 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800324a:	2000      	movs	r0, #0
 800324c:	f7ff ffce 	bl	80031ec <HAL_InitTick>
  HAL_MspInit();
 8003250:	f7fe fcb4 	bl	8001bbc <HAL_MspInit>
}
 8003254:	2000      	movs	r0, #0
 8003256:	bd08      	pop	{r3, pc}
 8003258:	40022000 	.word	0x40022000

0800325c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800325c:	4a03      	ldr	r2, [pc, #12]	; (800326c <HAL_IncTick+0x10>)
 800325e:	6811      	ldr	r1, [r2, #0]
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_IncTick+0x14>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	440b      	add	r3, r1
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000b50 	.word	0x20000b50
 8003270:	20000008 	.word	0x20000008

08003274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003274:	4b01      	ldr	r3, [pc, #4]	; (800327c <HAL_GetTick+0x8>)
 8003276:	6818      	ldr	r0, [r3, #0]
}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000b50 	.word	0x20000b50

08003280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff fff6 	bl	8003274 <HAL_GetTick>
 8003288:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800328e:	d002      	beq.n	8003296 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_Delay+0x24>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003296:	f7ff ffed 	bl	8003274 <HAL_GetTick>
 800329a:	1b40      	subs	r0, r0, r5
 800329c:	42a0      	cmp	r0, r4
 800329e:	d3fa      	bcc.n	8003296 <HAL_Delay+0x16>
  {
  }
}
 80032a0:	bd38      	pop	{r3, r4, r5, pc}
 80032a2:	bf00      	nop
 80032a4:	20000008 	.word	0x20000008

080032a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a8:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80032aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032bc:	0200      	lsls	r0, r0, #8
 80032be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80032c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80032c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032cc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_NVIC_SetPriority+0x5c>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d6:	f1c3 0407 	rsb	r4, r3, #7
 80032da:	2c04      	cmp	r4, #4
 80032dc:	bf28      	it	cs
 80032de:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e0:	1d1d      	adds	r5, r3, #4
 80032e2:	2d06      	cmp	r5, #6
 80032e4:	bf8c      	ite	hi
 80032e6:	3b03      	subhi	r3, #3
 80032e8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ea:	f04f 35ff 	mov.w	r5, #4294967295
 80032ee:	fa05 f404 	lsl.w	r4, r5, r4
 80032f2:	ea21 0104 	bic.w	r1, r1, r4
 80032f6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f8:	fa05 f303 	lsl.w	r3, r5, r3
 80032fc:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003302:	2800      	cmp	r0, #0
 8003304:	db09      	blt.n	800331a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	0109      	lsls	r1, r1, #4
 8003308:	b2c9      	uxtb	r1, r1
 800330a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800330e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003312:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003316:	bc30      	pop	{r4, r5}
 8003318:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	f000 000f 	and.w	r0, r0, #15
 800331e:	0109      	lsls	r1, r1, #4
 8003320:	b2c9      	uxtb	r1, r1
 8003322:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_NVIC_SetPriority+0x60>)
 8003324:	5419      	strb	r1, [r3, r0]
 8003326:	e7f6      	b.n	8003316 <HAL_NVIC_SetPriority+0x4a>
 8003328:	e000ed00 	.word	0xe000ed00
 800332c:	e000ed14 	.word	0xe000ed14

08003330 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003330:	2800      	cmp	r0, #0
 8003332:	db08      	blt.n	8003346 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003334:	0942      	lsrs	r2, r0, #5
 8003336:	f000 001f 	and.w	r0, r0, #31
 800333a:	2301      	movs	r3, #1
 800333c:	fa03 f000 	lsl.w	r0, r3, r0
 8003340:	4b01      	ldr	r3, [pc, #4]	; (8003348 <HAL_NVIC_EnableIRQ+0x18>)
 8003342:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100

0800334c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800334c:	3801      	subs	r0, #1
 800334e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003352:	d20a      	bcs.n	800336a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_SYSTICK_Config+0x24>)
 8003356:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003358:	4a06      	ldr	r2, [pc, #24]	; (8003374 <HAL_SYSTICK_Config+0x28>)
 800335a:	21f0      	movs	r1, #240	; 0xf0
 800335c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	2000      	movs	r0, #0
 8003362:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003364:	2207      	movs	r2, #7
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800336a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e010 	.word	0xe000e010
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003378:	b360      	cbz	r0, 80033d4 <HAL_DMA_Init+0x5c>
{
 800337a:	b410      	push	{r4}
 800337c:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800337e:	6801      	ldr	r1, [r0, #0]
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_DMA_Init+0x60>)
 8003382:	440b      	add	r3, r1
 8003384:	4815      	ldr	r0, [pc, #84]	; (80033dc <HAL_DMA_Init+0x64>)
 8003386:	fba0 0303 	umull	r0, r3, r0, r3
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_DMA_Init+0x68>)
 8003392:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003394:	2302      	movs	r3, #2
 8003396:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800339a:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800339c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80033a0:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033a4:	6853      	ldr	r3, [r2, #4]
 80033a6:	6894      	ldr	r4, [r2, #8]
 80033a8:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	68d4      	ldr	r4, [r2, #12]
 80033ac:	4323      	orrs	r3, r4
 80033ae:	6914      	ldr	r4, [r2, #16]
 80033b0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b2:	6954      	ldr	r4, [r2, #20]
 80033b4:	4323      	orrs	r3, r4
 80033b6:	6994      	ldr	r4, [r2, #24]
 80033b8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ba:	69d4      	ldr	r4, [r2, #28]
 80033bc:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80033be:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033c0:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c2:	2000      	movs	r0, #0
 80033c4:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033cc:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 80033d0:	bc10      	pop	{r4}
 80033d2:	4770      	bx	lr
    return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
}
 80033d6:	4770      	bx	lr
 80033d8:	bffdfff8 	.word	0xbffdfff8
 80033dc:	cccccccd 	.word	0xcccccccd
 80033e0:	40020000 	.word	0x40020000

080033e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e4:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033e6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80033ea:	2c01      	cmp	r4, #1
 80033ec:	d042      	beq.n	8003474 <HAL_DMA_Start_IT+0x90>
 80033ee:	2401      	movs	r4, #1
 80033f0:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033f4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80033f8:	2c01      	cmp	r4, #1
 80033fa:	d005      	beq.n	8003408 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80033fc:	2300      	movs	r3, #0
 80033fe:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003402:	2002      	movs	r0, #2
  }    
  return status;
}
 8003404:	bc70      	pop	{r4, r5, r6}
 8003406:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	2402      	movs	r4, #2
 800340a:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340e:	2400      	movs	r4, #0
 8003410:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8003412:	6805      	ldr	r5, [r0, #0]
 8003414:	682c      	ldr	r4, [r5, #0]
 8003416:	f024 0401 	bic.w	r4, r4, #1
 800341a:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800341c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800341e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003420:	2401      	movs	r4, #1
 8003422:	40b4      	lsls	r4, r6
 8003424:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003426:	6804      	ldr	r4, [r0, #0]
 8003428:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800342a:	6843      	ldr	r3, [r0, #4]
 800342c:	2b10      	cmp	r3, #16
 800342e:	d011      	beq.n	8003454 <HAL_DMA_Start_IT+0x70>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003430:	6803      	ldr	r3, [r0, #0]
 8003432:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003434:	6803      	ldr	r3, [r0, #0]
 8003436:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003438:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800343a:	b183      	cbz	r3, 800345e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800343c:	6802      	ldr	r2, [r0, #0]
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	f043 030e 	orr.w	r3, r3, #14
 8003444:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003446:	6802      	ldr	r2, [r0, #0]
 8003448:	6813      	ldr	r3, [r2, #0]
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2000      	movs	r0, #0
 8003452:	e7d7      	b.n	8003404 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8003454:	6803      	ldr	r3, [r0, #0]
 8003456:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003458:	6803      	ldr	r3, [r0, #0]
 800345a:	60d9      	str	r1, [r3, #12]
 800345c:	e7ec      	b.n	8003438 <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800345e:	6802      	ldr	r2, [r0, #0]
 8003460:	6813      	ldr	r3, [r2, #0]
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003468:	6802      	ldr	r2, [r0, #0]
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	f043 030a 	orr.w	r3, r3, #10
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e7e8      	b.n	8003446 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8003474:	2002      	movs	r0, #2
 8003476:	e7c5      	b.n	8003404 <HAL_DMA_Start_IT+0x20>

08003478 <HAL_DMA_Abort_IT>:
{  
 8003478:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800347a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003482:	2304      	movs	r3, #4
 8003484:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8003486:	2001      	movs	r0, #1
}
 8003488:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800348a:	6802      	ldr	r2, [r0, #0]
 800348c:	6813      	ldr	r3, [r2, #0]
 800348e:	f023 030e 	bic.w	r3, r3, #14
 8003492:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003494:	6802      	ldr	r2, [r0, #0]
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_DMA_Abort_IT+0x8c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_DMA_Abort_IT+0x56>
 80034a6:	3214      	adds	r2, #20
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d01e      	beq.n	80034ea <HAL_DMA_Abort_IT+0x72>
 80034ac:	3214      	adds	r2, #20
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_Abort_IT+0x76>
 80034b2:	3214      	adds	r2, #20
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x7c>
 80034b8:	3214      	adds	r2, #20
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_Abort_IT+0x82>
 80034be:	3214      	adds	r2, #20
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf0c      	ite	eq
 80034c4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80034c8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80034cc:	e000      	b.n	80034d0 <HAL_DMA_Abort_IT+0x58>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <HAL_DMA_Abort_IT+0x90>)
 80034d2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80034da:	2300      	movs	r3, #0
 80034dc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80034e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034e2:	b16b      	cbz	r3, 8003500 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 80034e4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2000      	movs	r0, #0
 80034e8:	e7ce      	b.n	8003488 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034ea:	2310      	movs	r3, #16
 80034ec:	e7f0      	b.n	80034d0 <HAL_DMA_Abort_IT+0x58>
 80034ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f2:	e7ed      	b.n	80034d0 <HAL_DMA_Abort_IT+0x58>
 80034f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f8:	e7ea      	b.n	80034d0 <HAL_DMA_Abort_IT+0x58>
 80034fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fe:	e7e7      	b.n	80034d0 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8003500:	2000      	movs	r0, #0
 8003502:	e7c1      	b.n	8003488 <HAL_DMA_Abort_IT+0x10>
 8003504:	40020008 	.word	0x40020008
 8003508:	40020000 	.word	0x40020000

0800350c <HAL_DMA_IRQHandler>:
{
 800350c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800350e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003510:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003512:	6804      	ldr	r4, [r0, #0]
 8003514:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003516:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003518:	2304      	movs	r3, #4
 800351a:	408b      	lsls	r3, r1
 800351c:	4213      	tst	r3, r2
 800351e:	d034      	beq.n	800358a <HAL_DMA_IRQHandler+0x7e>
 8003520:	f015 0f04 	tst.w	r5, #4
 8003524:	d031      	beq.n	800358a <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	f013 0f20 	tst.w	r3, #32
 800352c:	d103      	bne.n	8003536 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	4a42      	ldr	r2, [pc, #264]	; (8003644 <HAL_DMA_IRQHandler+0x138>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_DMA_IRQHandler+0x5a>
 800353e:	3214      	adds	r2, #20
 8003540:	4293      	cmp	r3, r2
 8003542:	d017      	beq.n	8003574 <HAL_DMA_IRQHandler+0x68>
 8003544:	3214      	adds	r2, #20
 8003546:	4293      	cmp	r3, r2
 8003548:	d016      	beq.n	8003578 <HAL_DMA_IRQHandler+0x6c>
 800354a:	3214      	adds	r2, #20
 800354c:	4293      	cmp	r3, r2
 800354e:	d016      	beq.n	800357e <HAL_DMA_IRQHandler+0x72>
 8003550:	3214      	adds	r2, #20
 8003552:	4293      	cmp	r3, r2
 8003554:	d016      	beq.n	8003584 <HAL_DMA_IRQHandler+0x78>
 8003556:	3214      	adds	r2, #20
 8003558:	4293      	cmp	r3, r2
 800355a:	bf0c      	ite	eq
 800355c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8003560:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003564:	e000      	b.n	8003568 <HAL_DMA_IRQHandler+0x5c>
 8003566:	2304      	movs	r3, #4
 8003568:	4a37      	ldr	r2, [pc, #220]	; (8003648 <HAL_DMA_IRQHandler+0x13c>)
 800356a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800356c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800356e:	b103      	cbz	r3, 8003572 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8003570:	4798      	blx	r3
}
 8003572:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003574:	2340      	movs	r3, #64	; 0x40
 8003576:	e7f7      	b.n	8003568 <HAL_DMA_IRQHandler+0x5c>
 8003578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357c:	e7f4      	b.n	8003568 <HAL_DMA_IRQHandler+0x5c>
 800357e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003582:	e7f1      	b.n	8003568 <HAL_DMA_IRQHandler+0x5c>
 8003584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003588:	e7ee      	b.n	8003568 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800358a:	2302      	movs	r3, #2
 800358c:	408b      	lsls	r3, r1
 800358e:	4213      	tst	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_IRQHandler+0xfe>
 8003592:	f015 0f02 	tst.w	r5, #2
 8003596:	d038      	beq.n	800360a <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	f013 0f20 	tst.w	r3, #32
 800359e:	d106      	bne.n	80035ae <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	f023 030a 	bic.w	r3, r3, #10
 80035a6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035ae:	6803      	ldr	r3, [r0, #0]
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <HAL_DMA_IRQHandler+0x138>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_IRQHandler+0xd2>
 80035b6:	3214      	adds	r2, #20
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01b      	beq.n	80035f4 <HAL_DMA_IRQHandler+0xe8>
 80035bc:	3214      	adds	r2, #20
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01a      	beq.n	80035f8 <HAL_DMA_IRQHandler+0xec>
 80035c2:	3214      	adds	r2, #20
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01a      	beq.n	80035fe <HAL_DMA_IRQHandler+0xf2>
 80035c8:	3214      	adds	r2, #20
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01a      	beq.n	8003604 <HAL_DMA_IRQHandler+0xf8>
 80035ce:	3214      	adds	r2, #20
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf0c      	ite	eq
 80035d4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80035d8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80035dc:	e000      	b.n	80035e0 <HAL_DMA_IRQHandler+0xd4>
 80035de:	2302      	movs	r3, #2
 80035e0:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_DMA_IRQHandler+0x13c>)
 80035e2:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80035e4:	2300      	movs	r3, #0
 80035e6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80035ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0c0      	beq.n	8003572 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 80035f0:	4798      	blx	r3
 80035f2:	e7be      	b.n	8003572 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035f4:	2320      	movs	r3, #32
 80035f6:	e7f3      	b.n	80035e0 <HAL_DMA_IRQHandler+0xd4>
 80035f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fc:	e7f0      	b.n	80035e0 <HAL_DMA_IRQHandler+0xd4>
 80035fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003602:	e7ed      	b.n	80035e0 <HAL_DMA_IRQHandler+0xd4>
 8003604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003608:	e7ea      	b.n	80035e0 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800360a:	2308      	movs	r3, #8
 800360c:	fa03 f101 	lsl.w	r1, r3, r1
 8003610:	4211      	tst	r1, r2
 8003612:	d0ae      	beq.n	8003572 <HAL_DMA_IRQHandler+0x66>
 8003614:	f015 0f08 	tst.w	r5, #8
 8003618:	d0ab      	beq.n	8003572 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	f023 030e 	bic.w	r3, r3, #14
 8003620:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003622:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003624:	2301      	movs	r3, #1
 8003626:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003628:	fa03 f202 	lsl.w	r2, r3, r2
 800362c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800362e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003630:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003634:	2300      	movs	r3, #0
 8003636:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800363a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800363c:	2b00      	cmp	r3, #0
 800363e:	d098      	beq.n	8003572 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003640:	4798      	blx	r3
  return;
 8003642:	e796      	b.n	8003572 <HAL_DMA_IRQHandler+0x66>
 8003644:	40020008 	.word	0x40020008
 8003648:	40020000 	.word	0x40020000

0800364c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80e0 	beq.w	8003814 <HAL_GPIO_Init+0x1c8>
{
 8003654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	b083      	sub	sp, #12
  uint32_t config = 0x00u;
 800365a:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 800365c:	462a      	mov	r2, r5
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800365e:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8003824 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003662:	4c6d      	ldr	r4, [pc, #436]	; (8003818 <HAL_GPIO_Init+0x1cc>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003828 <HAL_GPIO_Init+0x1dc>
      switch (GPIO_Init->Mode)
 8003668:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800382c <HAL_GPIO_Init+0x1e0>
 800366c:	e0a2      	b.n	80037b4 <HAL_GPIO_Init+0x168>
 800366e:	f1b9 0f00 	cmp.w	r9, #0
 8003672:	d01b      	beq.n	80036ac <HAL_GPIO_Init+0x60>
 8003674:	f1b9 0f01 	cmp.w	r9, #1
 8003678:	d123      	bne.n	80036c2 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800367a:	68cd      	ldr	r5, [r1, #12]
          break;
 800367c:	e021      	b.n	80036c2 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 800367e:	45f1      	cmp	r9, lr
 8003680:	d014      	beq.n	80036ac <HAL_GPIO_Init+0x60>
 8003682:	d90b      	bls.n	800369c <HAL_GPIO_Init+0x50>
 8003684:	4f65      	ldr	r7, [pc, #404]	; (800381c <HAL_GPIO_Init+0x1d0>)
 8003686:	45b9      	cmp	r9, r7
 8003688:	d010      	beq.n	80036ac <HAL_GPIO_Init+0x60>
 800368a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800368e:	45b9      	cmp	r9, r7
 8003690:	d00c      	beq.n	80036ac <HAL_GPIO_Init+0x60>
 8003692:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8003830 <HAL_GPIO_Init+0x1e4>
 8003696:	45d1      	cmp	r9, sl
 8003698:	d113      	bne.n	80036c2 <HAL_GPIO_Init+0x76>
 800369a:	e007      	b.n	80036ac <HAL_GPIO_Init+0x60>
 800369c:	f8df a194 	ldr.w	sl, [pc, #404]	; 8003834 <HAL_GPIO_Init+0x1e8>
 80036a0:	45d1      	cmp	r9, sl
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x60>
 80036a4:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
 80036a8:	45d1      	cmp	r9, sl
 80036aa:	d10a      	bne.n	80036c2 <HAL_GPIO_Init+0x76>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036ac:	688d      	ldr	r5, [r1, #8]
 80036ae:	2d00      	cmp	r5, #0
 80036b0:	f000 80a2 	beq.w	80037f8 <HAL_GPIO_Init+0x1ac>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036b4:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 80036b6:	bf0c      	ite	eq
 80036b8:	6106      	streq	r6, [r0, #16]
            GPIOx->BRR = ioposition;
 80036ba:	6146      	strne	r6, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036bc:	2508      	movs	r5, #8
 80036be:	e000      	b.n	80036c2 <HAL_GPIO_Init+0x76>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036c0:	2500      	movs	r5, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036c2:	2bff      	cmp	r3, #255	; 0xff
 80036c4:	bf99      	ittee	ls
 80036c6:	4682      	movls	sl, r0
 80036c8:	6806      	ldrls	r6, [r0, #0]
 80036ca:	f100 0a04 	addhi.w	sl, r0, #4
 80036ce:	6846      	ldrhi	r6, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036d0:	2bff      	cmp	r3, #255	; 0xff
 80036d2:	bf91      	iteee	ls
 80036d4:	ea4f 0982 	movls.w	r9, r2, lsl #2
 80036d8:	f102 4980 	addhi.w	r9, r2, #1073741824	; 0x40000000
 80036dc:	f1a9 0908 	subhi.w	r9, r9, #8
 80036e0:	ea4f 0989 	movhi.w	r9, r9, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036e4:	f04f 0b0f 	mov.w	fp, #15
 80036e8:	fa0b fb09 	lsl.w	fp, fp, r9
 80036ec:	ea26 060b 	bic.w	r6, r6, fp
 80036f0:	fa05 f909 	lsl.w	r9, r5, r9
 80036f4:	ea46 0609 	orr.w	r6, r6, r9
 80036f8:	f8ca 6000 	str.w	r6, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036fc:	684e      	ldr	r6, [r1, #4]
 80036fe:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8003702:	d052      	beq.n	80037aa <HAL_GPIO_Init+0x15e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003704:	4f46      	ldr	r7, [pc, #280]	; (8003820 <HAL_GPIO_Init+0x1d4>)
 8003706:	69be      	ldr	r6, [r7, #24]
 8003708:	f046 0601 	orr.w	r6, r6, #1
 800370c:	61be      	str	r6, [r7, #24]
 800370e:	69be      	ldr	r6, [r7, #24]
 8003710:	f006 0601 	and.w	r6, r6, #1
 8003714:	9601      	str	r6, [sp, #4]
 8003716:	9e01      	ldr	r6, [sp, #4]
 8003718:	f022 0603 	bic.w	r6, r2, #3
 800371c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003720:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2u];
 8003724:	f8d6 a008 	ldr.w	sl, [r6, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003728:	f002 0903 	and.w	r9, r2, #3
 800372c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8003730:	f04f 090f 	mov.w	r9, #15
 8003734:	fa09 f90b 	lsl.w	r9, r9, fp
 8003738:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800373c:	4560      	cmp	r0, ip
 800373e:	d05d      	beq.n	80037fc <HAL_GPIO_Init+0x1b0>
 8003740:	4540      	cmp	r0, r8
 8003742:	d05e      	beq.n	8003802 <HAL_GPIO_Init+0x1b6>
 8003744:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
 8003748:	42b8      	cmp	r0, r7
 800374a:	d05d      	beq.n	8003808 <HAL_GPIO_Init+0x1bc>
 800374c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003750:	42b8      	cmp	r0, r7
 8003752:	bf0c      	ite	eq
 8003754:	f04f 0903 	moveq.w	r9, #3
 8003758:	f04f 0904 	movne.w	r9, #4
 800375c:	fa09 f90b 	lsl.w	r9, r9, fp
 8003760:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8003764:	f8c6 9008 	str.w	r9, [r6, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003768:	684e      	ldr	r6, [r1, #4]
 800376a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800376e:	6826      	ldr	r6, [r4, #0]
 8003770:	bf14      	ite	ne
 8003772:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003774:	439e      	biceq	r6, r3
 8003776:	6026      	str	r6, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003778:	684e      	ldr	r6, [r1, #4]
 800377a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800377e:	6866      	ldr	r6, [r4, #4]
 8003780:	bf14      	ite	ne
 8003782:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003784:	439e      	biceq	r6, r3
 8003786:	6066      	str	r6, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003788:	684e      	ldr	r6, [r1, #4]
 800378a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800378e:	68a6      	ldr	r6, [r4, #8]
 8003790:	bf14      	ite	ne
 8003792:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003794:	439e      	biceq	r6, r3
 8003796:	60a6      	str	r6, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003798:	684e      	ldr	r6, [r1, #4]
 800379a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800379e:	68e6      	ldr	r6, [r4, #12]
 80037a0:	bf14      	ite	ne
 80037a2:	4333      	orrne	r3, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037a4:	ea26 0303 	biceq.w	r3, r6, r3
 80037a8:	60e3      	str	r3, [r4, #12]
        }
      }
    }

	position++;
 80037aa:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ac:	680b      	ldr	r3, [r1, #0]
 80037ae:	fa33 f602 	lsrs.w	r6, r3, r2
 80037b2:	d02c      	beq.n	800380e <HAL_GPIO_Init+0x1c2>
    ioposition = (0x01uL << position);
 80037b4:	2601      	movs	r6, #1
 80037b6:	4096      	lsls	r6, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b8:	4033      	ands	r3, r6
    if (iocurrent == ioposition)
 80037ba:	429e      	cmp	r6, r3
 80037bc:	d1f5      	bne.n	80037aa <HAL_GPIO_Init+0x15e>
      switch (GPIO_Init->Mode)
 80037be:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80037c2:	f1b9 0f12 	cmp.w	r9, #18
 80037c6:	d014      	beq.n	80037f2 <HAL_GPIO_Init+0x1a6>
 80037c8:	f63f af59 	bhi.w	800367e <HAL_GPIO_Init+0x32>
 80037cc:	f1b9 0f02 	cmp.w	r9, #2
 80037d0:	d00c      	beq.n	80037ec <HAL_GPIO_Init+0x1a0>
 80037d2:	f67f af4c 	bls.w	800366e <HAL_GPIO_Init+0x22>
 80037d6:	f1b9 0f03 	cmp.w	r9, #3
 80037da:	f43f af71 	beq.w	80036c0 <HAL_GPIO_Init+0x74>
 80037de:	f1b9 0f11 	cmp.w	r9, #17
 80037e2:	f47f af6e 	bne.w	80036c2 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037e6:	68cd      	ldr	r5, [r1, #12]
 80037e8:	3504      	adds	r5, #4
          break;
 80037ea:	e76a      	b.n	80036c2 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037ec:	68cd      	ldr	r5, [r1, #12]
 80037ee:	3508      	adds	r5, #8
          break;
 80037f0:	e767      	b.n	80036c2 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037f2:	68cd      	ldr	r5, [r1, #12]
 80037f4:	350c      	adds	r5, #12
          break;
 80037f6:	e764      	b.n	80036c2 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037f8:	2504      	movs	r5, #4
 80037fa:	e762      	b.n	80036c2 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037fc:	f04f 0900 	mov.w	r9, #0
 8003800:	e7ac      	b.n	800375c <HAL_GPIO_Init+0x110>
 8003802:	f04f 0901 	mov.w	r9, #1
 8003806:	e7a9      	b.n	800375c <HAL_GPIO_Init+0x110>
 8003808:	f04f 0902 	mov.w	r9, #2
 800380c:	e7a6      	b.n	800375c <HAL_GPIO_Init+0x110>
  }
}
 800380e:	b003      	add	sp, #12
 8003810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010400 	.word	0x40010400
 800381c:	10310000 	.word	0x10310000
 8003820:	40021000 	.word	0x40021000
 8003824:	40010800 	.word	0x40010800
 8003828:	40010c00 	.word	0x40010c00
 800382c:	10210000 	.word	0x10210000
 8003830:	10220000 	.word	0x10220000
 8003834:	10110000 	.word	0x10110000

08003838 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003838:	6883      	ldr	r3, [r0, #8]
 800383a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800383c:	bf14      	ite	ne
 800383e:	2001      	movne	r0, #1
 8003840:	2000      	moveq	r0, #0
 8003842:	4770      	bx	lr

08003844 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003844:	b912      	cbnz	r2, 800384c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003846:	0409      	lsls	r1, r1, #16
 8003848:	6101      	str	r1, [r0, #16]
  }
}
 800384a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800384c:	6101      	str	r1, [r0, #16]
 800384e:	4770      	bx	lr

08003850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003850:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4203      	tst	r3, r0
 8003858:	d100      	bne.n	800385c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800385a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800385c:	4b02      	ldr	r3, [pc, #8]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800385e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003860:	f7fd fec4 	bl	80015ec <HAL_GPIO_EXTI_Callback>
}
 8003864:	e7f9      	b.n	800385a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003866:	bf00      	nop
 8003868:	40010400 	.word	0x40010400

0800386c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386c:	6803      	ldr	r3, [r0, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003874:	d011      	beq.n	800389a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800387a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800387c:	2300      	movs	r3, #0
 800387e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003880:	2220      	movs	r2, #32
 8003882:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003886:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800388a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800388c:	f042 0204 	orr.w	r2, r2, #4
 8003890:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003892:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8003896:	2001      	movs	r0, #1
 8003898:	4770      	bx	lr
  }
  return HAL_OK;
 800389a:	2000      	movs	r0, #0
}
 800389c:	4770      	bx	lr

0800389e <I2C_WaitOnFlagUntilTimeout>:
{
 800389e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a2:	4606      	mov	r6, r0
 80038a4:	4690      	mov	r8, r2
 80038a6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a8:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80038ac:	b28c      	uxth	r4, r1
 80038ae:	2f01      	cmp	r7, #1
 80038b0:	6833      	ldr	r3, [r6, #0]
 80038b2:	bf0c      	ite	eq
 80038b4:	695b      	ldreq	r3, [r3, #20]
 80038b6:	699b      	ldrne	r3, [r3, #24]
 80038b8:	ea34 0303 	bics.w	r3, r4, r3
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	4598      	cmp	r8, r3
 80038c4:	d119      	bne.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80038ca:	d0f0      	beq.n	80038ae <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7ff fcd2 	bl	8003274 <HAL_GetTick>
 80038d0:	9b06      	ldr	r3, [sp, #24]
 80038d2:	1ac0      	subs	r0, r0, r3
 80038d4:	42a8      	cmp	r0, r5
 80038d6:	d801      	bhi.n	80038dc <I2C_WaitOnFlagUntilTimeout+0x3e>
 80038d8:	2d00      	cmp	r5, #0
 80038da:	d1e8      	bne.n	80038ae <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038e0:	2220      	movs	r2, #32
 80038e2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038e6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80038ec:	f042 0220 	orr.w	r2, r2, #32
 80038f0:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038f2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80038f6:	2001      	movs	r0, #1
 80038f8:	e000      	b.n	80038fc <I2C_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80038fa:	2000      	movs	r0, #0
}
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003900 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003904:	4604      	mov	r4, r0
 8003906:	4617      	mov	r7, r2
 8003908:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800390a:	f3c1 4607 	ubfx	r6, r1, #16, #8
 800390e:	b28d      	uxth	r5, r1
 8003910:	2e01      	cmp	r6, #1
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	bf0c      	ite	eq
 8003916:	695b      	ldreq	r3, [r3, #20]
 8003918:	699b      	ldrne	r3, [r3, #24]
 800391a:	ea35 0303 	bics.w	r3, r5, r3
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d035      	beq.n	8003994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003930:	d119      	bne.n	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8003932:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003936:	d0eb      	beq.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003938:	f7ff fc9c 	bl	8003274 <HAL_GetTick>
 800393c:	eba0 0008 	sub.w	r0, r0, r8
 8003940:	42b8      	cmp	r0, r7
 8003942:	d801      	bhi.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
 8003944:	2f00      	cmp	r7, #0
 8003946:	d1e3      	bne.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	2220      	movs	r2, #32
 800394e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003956:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003958:	f042 0220 	orr.w	r2, r2, #32
 800395c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800395e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
 8003964:	e017      	b.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x96>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003974:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	2300      	movs	r3, #0
 8003978:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800397a:	2220      	movs	r2, #32
 800397c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003984:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003986:	f042 0204 	orr.w	r2, r2, #4
 800398a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800398c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003990:	2001      	movs	r0, #1
 8003992:	e000      	b.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x96>
  return HAL_OK;
 8003994:	2000      	movs	r0, #0
}
 8003996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800399a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800399a:	b570      	push	{r4, r5, r6, lr}
 800399c:	4604      	mov	r4, r0
 800399e:	460d      	mov	r5, r1
 80039a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039aa:	d11c      	bne.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7ff ff5d 	bl	800386c <I2C_IsAcknowledgeFailed>
 80039b2:	b9d0      	cbnz	r0, 80039ea <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80039b4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039b8:	d0f3      	beq.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7ff fc5b 	bl	8003274 <HAL_GetTick>
 80039be:	1b80      	subs	r0, r0, r6
 80039c0:	42a8      	cmp	r0, r5
 80039c2:	d801      	bhi.n	80039c8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	d1ec      	bne.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	2220      	movs	r2, #32
 80039ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039d8:	f042 0220 	orr.w	r2, r2, #32
 80039dc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80039e2:	2001      	movs	r0, #1
 80039e4:	e000      	b.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80039e6:	2000      	movs	r0, #0
}
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80039ea:	2001      	movs	r0, #1
 80039ec:	e7fc      	b.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080039ee <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80039ee:	b570      	push	{r4, r5, r6, lr}
 80039f0:	4604      	mov	r4, r0
 80039f2:	460d      	mov	r5, r1
 80039f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f013 0f04 	tst.w	r3, #4
 80039fe:	d11c      	bne.n	8003a3a <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ff33 	bl	800386c <I2C_IsAcknowledgeFailed>
 8003a06:	b9d0      	cbnz	r0, 8003a3e <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a0c:	d0f3      	beq.n	80039f6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7ff fc31 	bl	8003274 <HAL_GetTick>
 8003a12:	1b80      	subs	r0, r0, r6
 8003a14:	42a8      	cmp	r0, r5
 8003a16:	d801      	bhi.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	d1ec      	bne.n	80039f6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	2220      	movs	r2, #32
 8003a22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a2c:	f042 0220 	orr.w	r2, r2, #32
 8003a30:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003a32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
 8003a38:	e000      	b.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003a3a:	2000      	movs	r0, #0
}
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003a3e:	2001      	movs	r0, #1
 8003a40:	e7fc      	b.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
	...

08003a44 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f000 80ac 	beq.w	8003ba2 <HAL_I2C_Init+0x15e>
{
 8003a4a:	b570      	push	{r4, r5, r6, lr}
 8003a4c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d076      	beq.n	8003b44 <HAL_I2C_Init+0x100>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a56:	2324      	movs	r3, #36	; 0x24
 8003a58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a66:	6822      	ldr	r2, [r4, #0]
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a78:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a7a:	f000 fcb1 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a7e:	6862      	ldr	r2, [r4, #4]
 8003a80:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_I2C_Init+0x168>)
 8003a82:	429a      	cmp	r2, r3
 8003a84:	bf94      	ite	ls
 8003a86:	4b4a      	ldrls	r3, [pc, #296]	; (8003bb0 <HAL_I2C_Init+0x16c>)
 8003a88:	4b4a      	ldrhi	r3, [pc, #296]	; (8003bb4 <HAL_I2C_Init+0x170>)
 8003a8a:	4298      	cmp	r0, r3
 8003a8c:	bf8c      	ite	hi
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	2301      	movls	r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8087 	bne.w	8003ba6 <HAL_I2C_Init+0x162>
  freqrange = I2C_FREQRANGE(pclk1);
 8003a98:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_I2C_Init+0x174>)
 8003a9a:	fba3 2300 	umull	r2, r3, r3, r0
 8003a9e:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aa0:	6821      	ldr	r1, [r4, #0]
 8003aa2:	684a      	ldr	r2, [r1, #4]
 8003aa4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aac:	6825      	ldr	r5, [r4, #0]
 8003aae:	6a2a      	ldr	r2, [r5, #32]
 8003ab0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003ab4:	6866      	ldr	r6, [r4, #4]
 8003ab6:	493d      	ldr	r1, [pc, #244]	; (8003bac <HAL_I2C_Init+0x168>)
 8003ab8:	428e      	cmp	r6, r1
 8003aba:	d848      	bhi.n	8003b4e <HAL_I2C_Init+0x10a>
 8003abc:	3301      	adds	r3, #1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac2:	6825      	ldr	r5, [r4, #0]
 8003ac4:	69e9      	ldr	r1, [r5, #28]
 8003ac6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003aca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_I2C_Init+0x168>)
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d845      	bhi.n	8003b62 <HAL_I2C_Init+0x11e>
 8003ad6:	3801      	subs	r0, #1
 8003ad8:	0053      	lsls	r3, r2, #1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	bf38      	it	cc
 8003ae8:	2304      	movcc	r3, #4
 8003aea:	430b      	orrs	r3, r1
 8003aec:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aee:	6821      	ldr	r1, [r4, #0]
 8003af0:	680a      	ldr	r2, [r1, #0]
 8003af2:	69e3      	ldr	r3, [r4, #28]
 8003af4:	6a20      	ldr	r0, [r4, #32]
 8003af6:	4303      	orrs	r3, r0
 8003af8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	688a      	ldr	r2, [r1, #8]
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	68e0      	ldr	r0, [r4, #12]
 8003b08:	4303      	orrs	r3, r0
 8003b0a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8003b0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b16:	6821      	ldr	r1, [r4, #0]
 8003b18:	68ca      	ldr	r2, [r1, #12]
 8003b1a:	6963      	ldr	r3, [r4, #20]
 8003b1c:	69a0      	ldr	r0, [r4, #24]
 8003b1e:	4303      	orrs	r3, r0
 8003b20:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	6813      	ldr	r3, [r2, #0]
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b32:	2000      	movs	r0, #0
 8003b34:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	2320      	movs	r3, #32
 8003b38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003b44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003b48:	f7fe f85a 	bl	8001c00 <HAL_I2C_MspInit>
 8003b4c:	e783      	b.n	8003a56 <HAL_I2C_Init+0x12>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4919      	ldr	r1, [pc, #100]	; (8003bbc <HAL_I2C_Init+0x178>)
 8003b58:	fba1 1303 	umull	r1, r3, r1, r3
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	3301      	adds	r3, #1
 8003b60:	e7ad      	b.n	8003abe <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	b953      	cbnz	r3, 8003b7c <HAL_I2C_Init+0x138>
 8003b66:	3801      	subs	r0, #1
 8003b68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b6c:	fbb0 f2f2 	udiv	r2, r0, r2
 8003b70:	3201      	adds	r2, #1
 8003b72:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003b76:	b97a      	cbnz	r2, 8003b98 <HAL_I2C_Init+0x154>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e7b6      	b.n	8003aea <HAL_I2C_Init+0xa6>
 8003b7c:	3801      	subs	r0, #1
 8003b7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b86:	fbb0 f2f2 	udiv	r2, r0, r2
 8003b8a:	3201      	adds	r2, #1
 8003b8c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003b90:	b12a      	cbz	r2, 8003b9e <HAL_I2C_Init+0x15a>
 8003b92:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003b96:	e7a8      	b.n	8003aea <HAL_I2C_Init+0xa6>
 8003b98:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003b9c:	e7a5      	b.n	8003aea <HAL_I2C_Init+0xa6>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e7a3      	b.n	8003aea <HAL_I2C_Init+0xa6>
    return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
}
 8003ba4:	4770      	bx	lr
    return HAL_ERROR;
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	e7cb      	b.n	8003b42 <HAL_I2C_Init+0xfe>
 8003baa:	bf00      	nop
 8003bac:	000186a0 	.word	0x000186a0
 8003bb0:	001e847f 	.word	0x001e847f
 8003bb4:	003d08ff 	.word	0x003d08ff
 8003bb8:	431bde83 	.word	0x431bde83
 8003bbc:	10624dd3 	.word	0x10624dd3

08003bc0 <HAL_I2C_Master_Transmit>:
{
 8003bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	460e      	mov	r6, r1
 8003bca:	4690      	mov	r8, r2
 8003bcc:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003bce:	f7ff fb51 	bl	8003274 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d004      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003bdc:	2602      	movs	r6, #2
}
 8003bde:	4630      	mov	r0, r6
 8003be0:	b004      	add	sp, #16
 8003be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be8:	9000      	str	r0, [sp, #0]
 8003bea:	2319      	movs	r3, #25
 8003bec:	2201      	movs	r2, #1
 8003bee:	4971      	ldr	r1, [pc, #452]	; (8003db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff fe54 	bl	800389e <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f040 80d5 	bne.w	8003da6 <HAL_I2C_Master_Transmit+0x1e6>
    __HAL_LOCK(hi2c);
 8003bfc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f000 80d2 	beq.w	8003daa <HAL_I2C_Master_Transmit+0x1ea>
 8003c06:	2301      	movs	r3, #1
 8003c08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	f012 0f01 	tst.w	r2, #1
 8003c14:	d103      	bne.n	8003c1e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c26:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c28:	2321      	movs	r3, #33	; 0x21
 8003c2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c2e:	2310      	movs	r3, #16
 8003c30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003c38:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c3c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c40:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c42:	4b5d      	ldr	r3, [pc, #372]	; (8003db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c44:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d00d      	beq.n	8003c68 <HAL_I2C_Master_Transmit+0xa8>
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d00b      	beq.n	8003c68 <HAL_I2C_Master_Transmit+0xa8>
 8003c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c54:	d008      	beq.n	8003c68 <HAL_I2C_Master_Transmit+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c58:	2b12      	cmp	r3, #18
 8003c5a:	d10a      	bne.n	8003c72 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e004      	b.n	8003c72 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	9500      	str	r5, [sp, #0]
 8003c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c76:	2200      	movs	r2, #0
 8003c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff fe0e 	bl	800389e <I2C_WaitOnFlagUntilTimeout>
 8003c82:	b148      	cbz	r0, 8003c98 <HAL_I2C_Master_Transmit+0xd8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c8c:	d002      	beq.n	8003c94 <HAL_I2C_Master_Transmit+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c92:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003c94:	2601      	movs	r6, #1
 8003c96:	e7a2      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c98:	6923      	ldr	r3, [r4, #16]
 8003c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c9e:	d115      	bne.n	8003ccc <HAL_I2C_Master_Transmit+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003ca6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca8:	462b      	mov	r3, r5
 8003caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cac:	4943      	ldr	r1, [pc, #268]	; (8003dbc <HAL_I2C_Master_Transmit+0x1fc>)
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff fe26 	bl	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d179      	bne.n	8003dae <HAL_I2C_Master_Transmit+0x1ee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9303      	str	r3, [sp, #12]
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	9203      	str	r2, [sp, #12]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	9303      	str	r3, [sp, #12]
 8003cc8:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003cca:	e025      	b.n	8003d18 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	11f3      	asrs	r3, r6, #7
 8003cd0:	f003 0306 	and.w	r3, r3, #6
 8003cd4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003cd8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cda:	462b      	mov	r3, r5
 8003cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cde:	4938      	ldr	r1, [pc, #224]	; (8003dc0 <HAL_I2C_Master_Transmit+0x200>)
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff fe0d 	bl	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d1d4      	bne.n	8003c94 <HAL_I2C_Master_Transmit+0xd4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	b2f6      	uxtb	r6, r6
 8003cee:	611e      	str	r6, [r3, #16]
 8003cf0:	e7da      	b.n	8003ca8 <HAL_I2C_Master_Transmit+0xe8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Master_Transmit+0x13c>
        return HAL_ERROR;
 8003cf8:	2601      	movs	r6, #1
 8003cfa:	e770      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	6822      	ldr	r2, [r4, #0]
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d04:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003d06:	2601      	movs	r6, #1
 8003d08:	e769      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0a:	462a      	mov	r2, r5
 8003d0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f7ff fe6d 	bl	80039ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d12c      	bne.n	8003d72 <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 8003d18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d035      	beq.n	8003d8a <HAL_I2C_Master_Transmit+0x1ca>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1e:	462a      	mov	r2, r5
 8003d20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7ff fe39 	bl	800399a <I2C_WaitOnTXEFlagUntilTimeout>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d1e2      	bne.n	8003cf2 <HAL_I2C_Master_Transmit+0x132>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d36:	1c4b      	adds	r3, r1, #1
 8003d38:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	6950      	ldr	r0, [r2, #20]
 8003d4e:	f010 0f04 	tst.w	r0, #4
 8003d52:	d0da      	beq.n	8003d0a <HAL_I2C_Master_Transmit+0x14a>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0d8      	beq.n	8003d0a <HAL_I2C_Master_Transmit+0x14a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d58:	784b      	ldrb	r3, [r1, #1]
 8003d5a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d5e:	3301      	adds	r3, #1
 8003d60:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003d62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003d6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	8523      	strh	r3, [r4, #40]	; 0x28
 8003d70:	e7cb      	b.n	8003d0a <HAL_I2C_Master_Transmit+0x14a>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Master_Transmit+0x1bc>
        return HAL_ERROR;
 8003d78:	2601      	movs	r6, #1
 8003d7a:	e730      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	6822      	ldr	r2, [r4, #0]
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d84:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003d86:	2601      	movs	r6, #1
 8003d88:	e729      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d92:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	2320      	movs	r3, #32
 8003d96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003da0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003da4:	e71b      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003da6:	2602      	movs	r6, #2
 8003da8:	e719      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003daa:	2602      	movs	r6, #2
 8003dac:	e717      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8003dae:	2601      	movs	r6, #1
 8003db0:	e715      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1e>
 8003db2:	bf00      	nop
 8003db4:	00100002 	.word	0x00100002
 8003db8:	ffff0000 	.word	0xffff0000
 8003dbc:	00010002 	.word	0x00010002
 8003dc0:	00010008 	.word	0x00010008

08003dc4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003dc4:	4b01      	ldr	r3, [pc, #4]	; (8003dcc <HAL_PWR_EnableBkUpAccess+0x8>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	4770      	bx	lr
 8003dcc:	420e0020 	.word	0x420e0020

08003dd0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	f000 8206 	beq.w	80041e2 <HAL_RCC_OscConfig+0x412>
{
 8003dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dde:	6803      	ldr	r3, [r0, #0]
 8003de0:	f013 0f01 	tst.w	r3, #1
 8003de4:	d02c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de6:	4bab      	ldr	r3, [pc, #684]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d01d      	beq.n	8003e2e <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003df2:	4ba8      	ldr	r3, [pc, #672]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d012      	beq.n	8003e24 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e04:	d041      	beq.n	8003e8a <HAL_RCC_OscConfig+0xba>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d155      	bne.n	8003eb6 <HAL_RCC_OscConfig+0xe6>
 8003e0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e0e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e037      	b.n	8003e94 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e24:	4b9b      	ldr	r3, [pc, #620]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e2c:	d0e7      	beq.n	8003dfe <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2e:	4b99      	ldr	r3, [pc, #612]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e36:	d003      	beq.n	8003e40 <HAL_RCC_OscConfig+0x70>
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 81d3 	beq.w	80041e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	f013 0f02 	tst.w	r3, #2
 8003e46:	d076      	beq.n	8003f36 <HAL_RCC_OscConfig+0x166>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e48:	4b92      	ldr	r3, [pc, #584]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f013 0f0c 	tst.w	r3, #12
 8003e50:	d05f      	beq.n	8003f12 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e52:	4b90      	ldr	r3, [pc, #576]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d054      	beq.n	8003f08 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e5e:	6923      	ldr	r3, [r4, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 808a 	beq.w	8003f7a <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e66:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <HAL_RCC_OscConfig+0x2c8>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7ff fa02 	bl	8003274 <HAL_GetTick>
 8003e70:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4d88      	ldr	r5, [pc, #544]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	f013 0f02 	tst.w	r3, #2
 8003e7a:	d175      	bne.n	8003f68 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7ff f9fa 	bl	8003274 <HAL_GetTick>
 8003e80:	1b80      	subs	r0, r0, r6
 8003e82:	2802      	cmp	r0, #2
 8003e84:	d9f6      	bls.n	8003e74 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003e86:	2003      	movs	r0, #3
 8003e88:	e1b0      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8a:	4a82      	ldr	r2, [pc, #520]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003e8c:	6813      	ldr	r3, [r2, #0]
 8003e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	b343      	cbz	r3, 8003eea <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003e98:	f7ff f9ec 	bl	8003274 <HAL_GetTick>
 8003e9c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4d7d      	ldr	r5, [pc, #500]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ea6:	d1cb      	bne.n	8003e40 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7ff f9e4 	bl	8003274 <HAL_GetTick>
 8003eac:	1b80      	subs	r0, r0, r6
 8003eae:	2864      	cmp	r0, #100	; 0x64
 8003eb0:	d9f6      	bls.n	8003ea0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	e19a      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eba:	d009      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x100>
 8003ebc:	4b75      	ldr	r3, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e7e1      	b.n	8003e94 <HAL_RCC_OscConfig+0xc4>
 8003ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ed4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e7d4      	b.n	8003e94 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003eea:	f7ff f9c3 	bl	8003274 <HAL_GetTick>
 8003eee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef0:	4d68      	ldr	r5, [pc, #416]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ef8:	d0a2      	beq.n	8003e40 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efa:	f7ff f9bb 	bl	8003274 <HAL_GetTick>
 8003efe:	1b80      	subs	r0, r0, r6
 8003f00:	2864      	cmp	r0, #100	; 0x64
 8003f02:	d9f6      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8003f04:	2003      	movs	r0, #3
 8003f06:	e171      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f08:	4b62      	ldr	r3, [pc, #392]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f10:	d1a5      	bne.n	8003e5e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f013 0f02 	tst.w	r3, #2
 8003f1a:	d004      	beq.n	8003f26 <HAL_RCC_OscConfig+0x156>
 8003f1c:	6923      	ldr	r3, [r4, #16]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x156>
        return HAL_ERROR;
 8003f22:	2001      	movs	r0, #1
 8003f24:	e162      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4a5b      	ldr	r2, [pc, #364]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	6961      	ldr	r1, [r4, #20]
 8003f2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f34:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	f013 0f08 	tst.w	r3, #8
 8003f3c:	d03c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3e:	69a3      	ldr	r3, [r4, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d065      	beq.n	8004010 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f44:	4b55      	ldr	r3, [pc, #340]	; (800409c <HAL_RCC_OscConfig+0x2cc>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7ff f993 	bl	8003274 <HAL_GetTick>
 8003f4e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f50:	4d50      	ldr	r5, [pc, #320]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003f52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f54:	f013 0f02 	tst.w	r3, #2
 8003f58:	d121      	bne.n	8003f9e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7ff f98b 	bl	8003274 <HAL_GetTick>
 8003f5e:	1b80      	subs	r0, r0, r6
 8003f60:	2802      	cmp	r0, #2
 8003f62:	d9f6      	bls.n	8003f52 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003f64:	2003      	movs	r0, #3
 8003f66:	e141      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	4a4a      	ldr	r2, [pc, #296]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	6961      	ldr	r1, [r4, #20]
 8003f6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e7dd      	b.n	8003f36 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_HSI_DISABLE();
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_OscConfig+0x2c8>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f80:	f7ff f978 	bl	8003274 <HAL_GetTick>
 8003f84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	4d43      	ldr	r5, [pc, #268]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	f013 0f02 	tst.w	r3, #2
 8003f8e:	d0d2      	beq.n	8003f36 <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7ff f970 	bl	8003274 <HAL_GetTick>
 8003f94:	1b80      	subs	r0, r0, r6
 8003f96:	2802      	cmp	r0, #2
 8003f98:	d9f6      	bls.n	8003f88 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003f9a:	2003      	movs	r0, #3
 8003f9c:	e126      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f9e:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <HAL_RCC_OscConfig+0x2d0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a40      	ldr	r2, [pc, #256]	; (80040a4 <HAL_RCC_OscConfig+0x2d4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	0a5b      	lsrs	r3, r3, #9
 8003faa:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003fac:	bf00      	nop
  }
  while (Delay --);
 8003fae:	9b01      	ldr	r3, [sp, #4]
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	9201      	str	r2, [sp, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f9      	bne.n	8003fac <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f013 0f04 	tst.w	r3, #4
 8003fbe:	f000 809e 	beq.w	80040fe <HAL_RCC_OscConfig+0x32e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003fca:	d133      	bne.n	8004034 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fd4:	61da      	str	r2, [r3, #28]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003fe0:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x2d8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fea:	d025      	beq.n	8004038 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	68e3      	ldr	r3, [r4, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d036      	beq.n	8004060 <HAL_RCC_OscConfig+0x290>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d15a      	bne.n	80040ac <HAL_RCC_OscConfig+0x2dc>
 8003ff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ffa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	621a      	str	r2, [r3, #32]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	f022 0204 	bic.w	r2, r2, #4
 800400c:	621a      	str	r2, [r3, #32]
 800400e:	e02c      	b.n	800406a <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_LSI_DISABLE();
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_RCC_OscConfig+0x2cc>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004016:	f7ff f92d 	bl	8003274 <HAL_GetTick>
 800401a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4d1d      	ldr	r5, [pc, #116]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 800401e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004020:	f013 0f02 	tst.w	r3, #2
 8004024:	d0c8      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004026:	f7ff f925 	bl	8003274 <HAL_GetTick>
 800402a:	1b80      	subs	r0, r0, r6
 800402c:	2802      	cmp	r0, #2
 800402e:	d9f6      	bls.n	800401e <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8004030:	2003      	movs	r0, #3
 8004032:	e0db      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 8004034:	2500      	movs	r5, #0
 8004036:	e7d4      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x2d8>)
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004042:	f7ff f917 	bl	8003274 <HAL_GetTick>
 8004046:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	4e17      	ldr	r6, [pc, #92]	; (80040a8 <HAL_RCC_OscConfig+0x2d8>)
 800404a:	6833      	ldr	r3, [r6, #0]
 800404c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004050:	d1cc      	bne.n	8003fec <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7ff f90f 	bl	8003274 <HAL_GetTick>
 8004056:	1bc0      	subs	r0, r0, r7
 8004058:	2864      	cmp	r0, #100	; 0x64
 800405a:	d9f6      	bls.n	800404a <HAL_RCC_OscConfig+0x27a>
          return HAL_TIMEOUT;
 800405c:	2003      	movs	r0, #3
 800405e:	e0c5      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
 8004062:	6a13      	ldr	r3, [r2, #32]
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800406a:	68e3      	ldr	r3, [r4, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d033      	beq.n	80040d8 <HAL_RCC_OscConfig+0x308>
      tickstart = HAL_GetTick();
 8004070:	f7ff f900 	bl	8003274 <HAL_GetTick>
 8004074:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	4e07      	ldr	r6, [pc, #28]	; (8004094 <HAL_RCC_OscConfig+0x2c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	6a33      	ldr	r3, [r6, #32]
 800407e:	f013 0f02 	tst.w	r3, #2
 8004082:	d13b      	bne.n	80040fc <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7ff f8f6 	bl	8003274 <HAL_GetTick>
 8004088:	eba0 0008 	sub.w	r0, r0, r8
 800408c:	42b8      	cmp	r0, r7
 800408e:	d9f5      	bls.n	800407c <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 8004090:	2003      	movs	r0, #3
 8004092:	e0ab      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
 8004094:	40021000 	.word	0x40021000
 8004098:	42420000 	.word	0x42420000
 800409c:	42420480 	.word	0x42420480
 80040a0:	20000004 	.word	0x20000004
 80040a4:	10624dd3 	.word	0x10624dd3
 80040a8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d009      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2f4>
 80040b0:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	621a      	str	r2, [r3, #32]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	f022 0204 	bic.w	r2, r2, #4
 80040c0:	621a      	str	r2, [r3, #32]
 80040c2:	e7d2      	b.n	800406a <HAL_RCC_OscConfig+0x29a>
 80040c4:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	f042 0204 	orr.w	r2, r2, #4
 80040cc:	621a      	str	r2, [r3, #32]
 80040ce:	6a1a      	ldr	r2, [r3, #32]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	621a      	str	r2, [r3, #32]
 80040d6:	e7c8      	b.n	800406a <HAL_RCC_OscConfig+0x29a>
      tickstart = HAL_GetTick();
 80040d8:	f7ff f8cc 	bl	8003274 <HAL_GetTick>
 80040dc:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040de:	4e46      	ldr	r6, [pc, #280]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e4:	6a33      	ldr	r3, [r6, #32]
 80040e6:	f013 0f02 	tst.w	r3, #2
 80040ea:	d007      	beq.n	80040fc <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7ff f8c2 	bl	8003274 <HAL_GetTick>
 80040f0:	eba0 0008 	sub.w	r0, r0, r8
 80040f4:	42b8      	cmp	r0, r7
 80040f6:	d9f5      	bls.n	80040e4 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 80040f8:	2003      	movs	r0, #3
 80040fa:	e077      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
    if (pwrclkchanged == SET)
 80040fc:	b9e5      	cbnz	r5, 8004138 <HAL_RCC_OscConfig+0x368>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fe:	69e3      	ldr	r3, [r4, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d072      	beq.n	80041ea <HAL_RCC_OscConfig+0x41a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004104:	4a3c      	ldr	r2, [pc, #240]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 8004106:	6852      	ldr	r2, [r2, #4]
 8004108:	f002 020c 	and.w	r2, r2, #12
 800410c:	2a08      	cmp	r2, #8
 800410e:	d056      	beq.n	80041be <HAL_RCC_OscConfig+0x3ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004110:	2b02      	cmp	r3, #2
 8004112:	d017      	beq.n	8004144 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCC_OscConfig+0x42c>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800411a:	f7ff f8ab 	bl	8003274 <HAL_GetTick>
 800411e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004120:	4c35      	ldr	r4, [pc, #212]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004128:	d047      	beq.n	80041ba <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412a:	f7ff f8a3 	bl	8003274 <HAL_GetTick>
 800412e:	1b40      	subs	r0, r0, r5
 8004130:	2802      	cmp	r0, #2
 8004132:	d9f6      	bls.n	8004122 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8004134:	2003      	movs	r0, #3
 8004136:	e059      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 800413a:	69d3      	ldr	r3, [r2, #28]
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]
 8004142:	e7dc      	b.n	80040fe <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <HAL_RCC_OscConfig+0x42c>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800414a:	f7ff f893 	bl	8003274 <HAL_GetTick>
 800414e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004150:	4d29      	ldr	r5, [pc, #164]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004158:	d006      	beq.n	8004168 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7ff f88b 	bl	8003274 <HAL_GetTick>
 800415e:	1b80      	subs	r0, r0, r6
 8004160:	2802      	cmp	r0, #2
 8004162:	d9f6      	bls.n	8004152 <HAL_RCC_OscConfig+0x382>
            return HAL_TIMEOUT;
 8004164:	2003      	movs	r0, #3
 8004166:	e041      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004168:	6a23      	ldr	r3, [r4, #32]
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d01a      	beq.n	80041a6 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004170:	4921      	ldr	r1, [pc, #132]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 8004172:	684a      	ldr	r2, [r1, #4]
 8004174:	6a23      	ldr	r3, [r4, #32]
 8004176:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004178:	4303      	orrs	r3, r0
 800417a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_RCC_OscConfig+0x42c>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004188:	f7ff f874 	bl	8003274 <HAL_GetTick>
 800418c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800418e:	4c1a      	ldr	r4, [pc, #104]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004196:	d10e      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7ff f86c 	bl	8003274 <HAL_GetTick>
 800419c:	1b40      	subs	r0, r0, r5
 800419e:	2802      	cmp	r0, #2
 80041a0:	d9f6      	bls.n	8004190 <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 80041a2:	2003      	movs	r0, #3
 80041a4:	e022      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041a6:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 80041a8:	6853      	ldr	r3, [r2, #4]
 80041aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041ae:	68a1      	ldr	r1, [r4, #8]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6053      	str	r3, [r2, #4]
 80041b4:	e7dc      	b.n	8004170 <HAL_RCC_OscConfig+0x3a0>
  return HAL_OK;
 80041b6:	2000      	movs	r0, #0
 80041b8:	e018      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e016      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d017      	beq.n	80041f2 <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->CFGR;
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <HAL_RCC_OscConfig+0x428>)
 80041c4:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80041ca:	6a22      	ldr	r2, [r4, #32]
 80041cc:	4291      	cmp	r1, r2
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0x404>
          return HAL_ERROR;
 80041d0:	2001      	movs	r0, #1
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 80041da:	1a18      	subs	r0, r3, r0
 80041dc:	bf18      	it	ne
 80041de:	2001      	movne	r0, #1
 80041e0:	e004      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
 80041e2:	2001      	movs	r0, #1
}
 80041e4:	4770      	bx	lr
        return HAL_ERROR;
 80041e6:	2001      	movs	r0, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 80041ea:	2000      	movs	r0, #0
}
 80041ec:	b002      	add	sp, #8
 80041ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80041f2:	2001      	movs	r0, #1
 80041f4:	e7fa      	b.n	80041ec <HAL_RCC_OscConfig+0x41c>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	42420060 	.word	0x42420060

08004200 <HAL_RCC_GetSysClockFreq>:
{
 8004200:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004202:	4b17      	ldr	r3, [pc, #92]	; (8004260 <HAL_RCC_GetSysClockFreq+0x60>)
 8004204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004206:	f10d 0c18 	add.w	ip, sp, #24
 800420a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800420e:	2301      	movs	r3, #1
 8004210:	f88d 3004 	strb.w	r3, [sp, #4]
 8004214:	2302      	movs	r3, #2
 8004216:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_GetSysClockFreq+0x64>)
 800421c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800421e:	f003 020c 	and.w	r2, r3, #12
 8004222:	2a08      	cmp	r2, #8
 8004224:	d119      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004226:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800422a:	4462      	add	r2, ip
 800422c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004230:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004234:	d104      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004236:	480c      	ldr	r0, [pc, #48]	; (8004268 <HAL_RCC_GetSysClockFreq+0x68>)
 8004238:	fb00 f002 	mul.w	r0, r0, r2
}
 800423c:	b006      	add	sp, #24
 800423e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_RCC_GetSysClockFreq+0x64>)
 8004242:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004244:	4809      	ldr	r0, [pc, #36]	; (800426c <HAL_RCC_GetSysClockFreq+0x6c>)
 8004246:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800424a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800424e:	4463      	add	r3, ip
 8004250:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004254:	fbb0 f0f3 	udiv	r0, r0, r3
 8004258:	e7f0      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800425a:	4804      	ldr	r0, [pc, #16]	; (800426c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800425c:	e7ee      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x3c>
 800425e:	bf00      	nop
 8004260:	0800866c 	.word	0x0800866c
 8004264:	40021000 	.word	0x40021000
 8004268:	003d0900 	.word	0x003d0900
 800426c:	007a1200 	.word	0x007a1200

08004270 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004270:	2800      	cmp	r0, #0
 8004272:	f000 80a6 	beq.w	80043c2 <HAL_RCC_ClockConfig+0x152>
{
 8004276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800427c:	4b53      	ldr	r3, [pc, #332]	; (80043cc <HAL_RCC_ClockConfig+0x15c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	428b      	cmp	r3, r1
 8004286:	d20d      	bcs.n	80042a4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	4a50      	ldr	r2, [pc, #320]	; (80043cc <HAL_RCC_ClockConfig+0x15c>)
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	f023 0307 	bic.w	r3, r3, #7
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004294:	6813      	ldr	r3, [r2, #0]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	428b      	cmp	r3, r1
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800429e:	2001      	movs	r0, #1
}
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f013 0f02 	tst.w	r3, #2
 80042aa:	d017      	beq.n	80042dc <HAL_RCC_ClockConfig+0x6c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	f013 0f04 	tst.w	r3, #4
 80042b0:	d004      	beq.n	80042bc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b2:	4a47      	ldr	r2, [pc, #284]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 80042b4:	6853      	ldr	r3, [r2, #4]
 80042b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ba:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	f013 0f08 	tst.w	r3, #8
 80042c2:	d004      	beq.n	80042ce <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c4:	4a42      	ldr	r2, [pc, #264]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 80042c6:	6853      	ldr	r3, [r2, #4]
 80042c8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042cc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ce:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 80042d0:	6853      	ldr	r3, [r2, #4]
 80042d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d6:	68a0      	ldr	r0, [r4, #8]
 80042d8:	4303      	orrs	r3, r0
 80042da:	6053      	str	r3, [r2, #4]
 80042dc:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	f013 0f01 	tst.w	r3, #1
 80042e4:	d032      	beq.n	800434c <HAL_RCC_ClockConfig+0xdc>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	6862      	ldr	r2, [r4, #4]
 80042e8:	2a01      	cmp	r2, #1
 80042ea:	d021      	beq.n	8004330 <HAL_RCC_ClockConfig+0xc0>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ec:	2a02      	cmp	r2, #2
 80042ee:	d026      	beq.n	800433e <HAL_RCC_ClockConfig+0xce>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f013 0f02 	tst.w	r3, #2
 80042f8:	d065      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fa:	4935      	ldr	r1, [pc, #212]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 80042fc:	684b      	ldr	r3, [r1, #4]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	4313      	orrs	r3, r2
 8004304:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004306:	f7fe ffb5 	bl	8003274 <HAL_GetTick>
 800430a:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430c:	4e30      	ldr	r6, [pc, #192]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430e:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	6873      	ldr	r3, [r6, #4]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	6862      	ldr	r2, [r4, #4]
 800431a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800431e:	d015      	beq.n	800434c <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004320:	f7fe ffa8 	bl	8003274 <HAL_GetTick>
 8004324:	eba0 0008 	sub.w	r0, r0, r8
 8004328:	42b8      	cmp	r0, r7
 800432a:	d9f2      	bls.n	8004312 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800432c:	2003      	movs	r0, #3
 800432e:	e7b7      	b.n	80042a0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004338:	d1df      	bne.n	80042fa <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 800433a:	2001      	movs	r0, #1
 800433c:	e7b0      	b.n	80042a0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004346:	d1d8      	bne.n	80042fa <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8004348:	2001      	movs	r0, #1
 800434a:	e7a9      	b.n	80042a0 <HAL_RCC_ClockConfig+0x30>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800434c:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <HAL_RCC_ClockConfig+0x15c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	42ab      	cmp	r3, r5
 8004356:	d90c      	bls.n	8004372 <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004358:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <HAL_RCC_ClockConfig+0x15c>)
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	f023 0307 	bic.w	r3, r3, #7
 8004360:	432b      	orrs	r3, r5
 8004362:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004364:	6813      	ldr	r3, [r2, #0]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	42ab      	cmp	r3, r5
 800436c:	d001      	beq.n	8004372 <HAL_RCC_ClockConfig+0x102>
    return HAL_ERROR;
 800436e:	2001      	movs	r0, #1
 8004370:	e796      	b.n	80042a0 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f013 0f04 	tst.w	r3, #4
 8004378:	d006      	beq.n	8004388 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 800437c:	6853      	ldr	r3, [r2, #4]
 800437e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004382:	68e1      	ldr	r1, [r4, #12]
 8004384:	430b      	orrs	r3, r1
 8004386:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f013 0f08 	tst.w	r3, #8
 800438e:	d007      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x130>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004390:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 8004392:	6853      	ldr	r3, [r2, #4]
 8004394:	6921      	ldr	r1, [r4, #16]
 8004396:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800439a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800439e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043a0:	f7ff ff2e 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_RCC_ClockConfig+0x160>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043ac:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x164>)
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	40d8      	lsrs	r0, r3
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x168>)
 80043b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x16c>)
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f7fe ff17 	bl	80031ec <HAL_InitTick>
  return HAL_OK;
 80043be:	2000      	movs	r0, #0
 80043c0:	e76e      	b.n	80042a0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80043c2:	2001      	movs	r0, #1
}
 80043c4:	4770      	bx	lr
        return HAL_ERROR;
 80043c6:	2001      	movs	r0, #1
 80043c8:	e76a      	b.n	80042a0 <HAL_RCC_ClockConfig+0x30>
 80043ca:	bf00      	nop
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40021000 	.word	0x40021000
 80043d4:	0800872c 	.word	0x0800872c
 80043d8:	20000004 	.word	0x20000004
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80043e8:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	4a03      	ldr	r2, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043ee:	6810      	ldr	r0, [r2, #0]
}
 80043f0:	40d8      	lsrs	r0, r3
 80043f2:	4770      	bx	lr
 80043f4:	40021000 	.word	0x40021000
 80043f8:	0800873c 	.word	0x0800873c
 80043fc:	20000004 	.word	0x20000004

08004400 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004408:	4a03      	ldr	r2, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x18>)
 800440a:	5cd3      	ldrb	r3, [r2, r3]
 800440c:	4a03      	ldr	r2, [pc, #12]	; (800441c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800440e:	6810      	ldr	r0, [r2, #0]
}
 8004410:	40d8      	lsrs	r0, r3
 8004412:	4770      	bx	lr
 8004414:	40021000 	.word	0x40021000
 8004418:	0800873c 	.word	0x0800873c
 800441c:	20000004 	.word	0x20000004

08004420 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004428:	6803      	ldr	r3, [r0, #0]
 800442a:	f013 0f01 	tst.w	r3, #1
 800442e:	d034      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004430:	4b40      	ldr	r3, [pc, #256]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004438:	d149      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	4b3e      	ldr	r3, [pc, #248]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004442:	61da      	str	r2, [r3, #28]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800444e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	4b39      	ldr	r3, [pc, #228]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004458:	d03b      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800445e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004462:	d011      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004464:	6862      	ldr	r2, [r4, #4]
 8004466:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800446a:	429a      	cmp	r2, r3
 800446c:	d00c      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800446e:	4a31      	ldr	r2, [pc, #196]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004470:	6a13      	ldr	r3, [r2, #32]
 8004472:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004476:	4931      	ldr	r1, [pc, #196]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004478:	2601      	movs	r6, #1
 800447a:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800447c:	2600      	movs	r6, #0
 800447e:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004480:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004482:	f013 0f01 	tst.w	r3, #1
 8004486:	d138      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004488:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800448a:	6a13      	ldr	r3, [r2, #32]
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	6861      	ldr	r1, [r4, #4]
 8004492:	430b      	orrs	r3, r1
 8004494:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004496:	2d00      	cmp	r5, #0
 8004498:	d144      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	f013 0f02 	tst.w	r3, #2
 80044a0:	d006      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a2:	4a24      	ldr	r2, [pc, #144]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80044a4:	6853      	ldr	r3, [r2, #4]
 80044a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044aa:	68a1      	ldr	r1, [r4, #8]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f013 0f10 	tst.w	r3, #16
 80044b6:	d03a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044b8:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80044ba:	6853      	ldr	r3, [r2, #4]
 80044bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80044c0:	68e1      	ldr	r1, [r4, #12]
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044c6:	2000      	movs	r0, #0
}
 80044c8:	b002      	add	sp, #8
 80044ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2500      	movs	r5, #0
 80044d0:	e7be      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d2:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80044dc:	f7fe feca 	bl	8003274 <HAL_GetTick>
 80044e0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4e15      	ldr	r6, [pc, #84]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044ea:	d1b6      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fe fec2 	bl	8003274 <HAL_GetTick>
 80044f0:	1bc0      	subs	r0, r0, r7
 80044f2:	2864      	cmp	r0, #100	; 0x64
 80044f4:	d9f6      	bls.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 80044f6:	2003      	movs	r0, #3
 80044f8:	e7e6      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        tickstart = HAL_GetTick();
 80044fa:	f7fe febb 	bl	8003274 <HAL_GetTick>
 80044fe:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004504:	f506 3604 	add.w	r6, r6, #135168	; 0x21000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	6a33      	ldr	r3, [r6, #32]
 800450e:	f013 0f02 	tst.w	r3, #2
 8004512:	d1b9      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fe feae 	bl	8003274 <HAL_GetTick>
 8004518:	eba0 0008 	sub.w	r0, r0, r8
 800451c:	42b8      	cmp	r0, r7
 800451e:	d9f5      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xec>
            return HAL_TIMEOUT;
 8004520:	2003      	movs	r0, #3
 8004522:	e7d1      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004524:	69d3      	ldr	r3, [r2, #28]
 8004526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452a:	61d3      	str	r3, [r2, #28]
 800452c:	e7b5      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 800452e:	2000      	movs	r0, #0
 8004530:	e7ca      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
 800453c:	42420440 	.word	0x42420440

08004540 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004540:	b510      	push	{r4, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8004548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800454a:	f10d 0c18 	add.w	ip, sp, #24
 800454e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004552:	2301      	movs	r3, #1
 8004554:	f88d 3004 	strb.w	r3, [sp, #4]
 8004558:	2302      	movs	r3, #2
 800455a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800455e:	429c      	cmp	r4, r3
 8004560:	d053      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8004562:	2c10      	cmp	r4, #16
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8004566:	2c01      	cmp	r4, #1
 8004568:	d02b      	beq.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  uint32_t temp_reg = 0U, frequency = 0U;
 800456a:	2000      	movs	r0, #0
 800456c:	e057      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8004570:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004578:	d053      	beq.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800457a:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800457e:	a906      	add	r1, sp, #24
 8004580:	440b      	add	r3, r1
 8004582:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004586:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800458a:	d016      	beq.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800458c:	4b29      	ldr	r3, [pc, #164]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004594:	440b      	add	r3, r1
 8004596:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800459a:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800459c:	fbb3 f3f2 	udiv	r3, r3, r2
 80045a0:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045a4:	4b23      	ldr	r3, [pc, #140]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80045ac:	d137      	bne.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80045ae:	0040      	lsls	r0, r0, #1
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80045b2:	fba3 3000 	umull	r3, r0, r3, r0
 80045b6:	0840      	lsrs	r0, r0, #1
 80045b8:	e031      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 80045bc:	fb03 f000 	mul.w	r0, r3, r0
 80045c0:	e7f0      	b.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80045c6:	f240 3202 	movw	r2, #770	; 0x302
 80045ca:	401a      	ands	r2, r3
 80045cc:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80045d0:	d029      	beq.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045da:	d00c      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80045dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e0:	d124      	bne.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
      {
        frequency = HSE_VALUE / 128U;
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f24f 4024 	movw	r0, #62500	; 0xf424
 80045f0:	bf08      	it	eq
 80045f2:	2000      	moveq	r0, #0
 80045f4:	e013      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0302 	and.w	r3, r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f649 4040 	movw	r0, #40000	; 0x9c40
 8004604:	bf08      	it	eq
 8004606:	2000      	moveq	r0, #0
 8004608:	e009      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800460a:	f7ff fef9 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 800461e:	b006      	add	sp, #24
 8004620:	bd10      	pop	{r4, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 8004622:	2000      	movs	r0, #0
 8004624:	e7fb      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 8004626:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800462a:	e7f8      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
  uint32_t temp_reg = 0U, frequency = 0U;
 800462c:	2000      	movs	r0, #0
 800462e:	e7f6      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8004630:	0800867c 	.word	0x0800867c
 8004634:	40021000 	.word	0x40021000
 8004638:	007a1200 	.word	0x007a1200
 800463c:	aaaaaaab 	.word	0xaaaaaaab
 8004640:	003d0900 	.word	0x003d0900

08004644 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004644:	b430      	push	{r4, r5}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004646:	6802      	ldr	r2, [r0, #0]
 8004648:	6994      	ldr	r4, [r2, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800464a:	69d3      	ldr	r3, [r2, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800464c:	6991      	ldr	r1, [r2, #24]

  if (high1 != high2)
 800464e:	b2a5      	uxth	r5, r4
 8004650:	b288      	uxth	r0, r1
 8004652:	4285      	cmp	r5, r0
 8004654:	d005      	beq.n	8004662 <RTC_ReadTimeCounter+0x1e>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004656:	69d0      	ldr	r0, [r2, #28]
 8004658:	b280      	uxth	r0, r0
 800465a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 800465e:	bc30      	pop	{r4, r5}
 8004660:	4770      	bx	lr
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004662:	b298      	uxth	r0, r3
 8004664:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
  return timecounter;
 8004668:	e7f9      	b.n	800465e <RTC_ReadTimeCounter+0x1a>

0800466a <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800466a:	6803      	ldr	r3, [r0, #0]
 800466c:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8004670:	b29b      	uxth	r3, r3
}
 8004672:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004676:	4770      	bx	lr

08004678 <RTC_ByteToBcd2>:
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;

  while (Value >= 10U)
 8004678:	2809      	cmp	r0, #9
 800467a:	d909      	bls.n	8004690 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 800467c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 800467e:	3301      	adds	r3, #1
    Value -= 10U;
 8004680:	380a      	subs	r0, #10
 8004682:	b2c0      	uxtb	r0, r0
  while (Value >= 10U)
 8004684:	2809      	cmp	r0, #9
 8004686:	d8fa      	bhi.n	800467e <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004688:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800468c:	b2c0      	uxtb	r0, r0
 800468e:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	e7f9      	b.n	8004688 <RTC_ByteToBcd2+0x10>

08004694 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004694:	0903      	lsrs	r3, r0, #4
 8004696:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800469a:	f000 000f 	and.w	r0, r0, #15
 800469e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80046a2:	b2c0      	uxtb	r0, r0
 80046a4:	4770      	bx	lr
	...

080046a8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80046a8:	b410      	push	{r4}
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 80046aa:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 80046ae:	2902      	cmp	r1, #2
 80046b0:	d920      	bls.n	80046f4 <RTC_WeekDayNum+0x4c>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80046b2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80046b6:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80046ba:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <RTC_WeekDayNum+0x90>)
 80046bc:	fba3 3101 	umull	r3, r1, r3, r1
 80046c0:	1c93      	adds	r3, r2, #2
 80046c2:	4423      	add	r3, r4
 80046c4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80046c8:	eb03 0394 	add.w	r3, r3, r4, lsr #2
 80046cc:	4a1b      	ldr	r2, [pc, #108]	; (800473c <RTC_WeekDayNum+0x94>)
 80046ce:	fba2 2404 	umull	r2, r4, r2, r4
 80046d2:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 80046d6:	eba3 1354 	sub.w	r3, r3, r4, lsr #5
 80046da:	4819      	ldr	r0, [pc, #100]	; (8004740 <RTC_WeekDayNum+0x98>)
 80046dc:	fba0 2003 	umull	r2, r0, r0, r3
 80046e0:	1a1a      	subs	r2, r3, r0
 80046e2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80046e6:	0880      	lsrs	r0, r0, #2
 80046e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80046ec:	1a18      	subs	r0, r3, r0
  }

  return (uint8_t)weekday;
}
 80046ee:	b2c0      	uxtb	r0, r0
 80046f0:	bc10      	pop	{r4}
 80046f2:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80046f4:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 80046f8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80046fc:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <RTC_WeekDayNum+0x90>)
 8004702:	fba3 3101 	umull	r3, r1, r3, r1
 8004706:	3204      	adds	r2, #4
 8004708:	1913      	adds	r3, r2, r4
 800470a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800470e:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <RTC_WeekDayNum+0x94>)
 8004714:	fba2 2000 	umull	r2, r0, r2, r0
 8004718:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 800471c:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 8004720:	4807      	ldr	r0, [pc, #28]	; (8004740 <RTC_WeekDayNum+0x98>)
 8004722:	fba0 2003 	umull	r2, r0, r0, r3
 8004726:	1a1a      	subs	r2, r3, r0
 8004728:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800472c:	0880      	lsrs	r0, r0, #2
 800472e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004732:	1a18      	subs	r0, r3, r0
 8004734:	e7db      	b.n	80046ee <RTC_WeekDayNum+0x46>
 8004736:	bf00      	nop
 8004738:	38e38e39 	.word	0x38e38e39
 800473c:	51eb851f 	.word	0x51eb851f
 8004740:	24924925 	.word	0x24924925

08004744 <RTC_EnterInitMode>:
{
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8004748:	f7fe fd94 	bl	8003274 <HAL_GetTick>
 800474c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	f012 0f20 	tst.w	r2, #32
 8004756:	d107      	bne.n	8004768 <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004758:	f7fe fd8c 	bl	8003274 <HAL_GetTick>
 800475c:	1b40      	subs	r0, r0, r5
 800475e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004762:	d9f4      	bls.n	800474e <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8004764:	2003      	movs	r0, #3
 8004766:	e004      	b.n	8004772 <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	f042 0210 	orr.w	r2, r2, #16
 800476e:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8004770:	2000      	movs	r0, #0
}
 8004772:	bd38      	pop	{r3, r4, r5, pc}

08004774 <RTC_ExitInitMode>:
{
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004778:	6802      	ldr	r2, [r0, #0]
 800477a:	6853      	ldr	r3, [r2, #4]
 800477c:	f023 0310 	bic.w	r3, r3, #16
 8004780:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004782:	f7fe fd77 	bl	8003274 <HAL_GetTick>
 8004786:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f013 0f20 	tst.w	r3, #32
 8004790:	d107      	bne.n	80047a2 <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004792:	f7fe fd6f 	bl	8003274 <HAL_GetTick>
 8004796:	1b40      	subs	r0, r0, r5
 8004798:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800479c:	d9f4      	bls.n	8004788 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800479e:	2003      	movs	r0, #3
 80047a0:	e000      	b.n	80047a4 <RTC_ExitInitMode+0x30>
  return HAL_OK;
 80047a2:	2000      	movs	r0, #0
}
 80047a4:	bd38      	pop	{r3, r4, r5, pc}

080047a6 <RTC_WriteTimeCounter>:
{
 80047a6:	b538      	push	{r3, r4, r5, lr}
 80047a8:	4605      	mov	r5, r0
 80047aa:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047ac:	f7ff ffca 	bl	8004744 <RTC_EnterInitMode>
 80047b0:	b108      	cbz	r0, 80047b6 <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 80047b2:	2001      	movs	r0, #1
}
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	0c22      	lsrs	r2, r4, #16
 80047ba:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b2a4      	uxth	r4, r4
 80047c0:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047c2:	4628      	mov	r0, r5
 80047c4:	f7ff ffd6 	bl	8004774 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80047c8:	3000      	adds	r0, #0
 80047ca:	bf18      	it	ne
 80047cc:	2001      	movne	r0, #1
 80047ce:	e7f1      	b.n	80047b4 <RTC_WriteTimeCounter+0xe>

080047d0 <RTC_WriteAlarmCounter>:
{
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047d6:	f7ff ffb5 	bl	8004744 <RTC_EnterInitMode>
 80047da:	b108      	cbz	r0, 80047e0 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 80047dc:	2001      	movs	r0, #1
}
 80047de:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	0c22      	lsrs	r2, r4, #16
 80047e4:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	b2a4      	uxth	r4, r4
 80047ea:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047ec:	4628      	mov	r0, r5
 80047ee:	f7ff ffc1 	bl	8004774 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80047f2:	3000      	adds	r0, #0
 80047f4:	bf18      	it	ne
 80047f6:	2001      	movne	r0, #1
 80047f8:	e7f1      	b.n	80047de <RTC_WriteAlarmCounter+0xe>

080047fa <HAL_RTC_SetTime>:
{
 80047fa:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d057      	beq.n	80048b0 <HAL_RTC_SetTime+0xb6>
 8004800:	4604      	mov	r4, r0
 8004802:	2900      	cmp	r1, #0
 8004804:	d056      	beq.n	80048b4 <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 8004806:	7c03      	ldrb	r3, [r0, #16]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d055      	beq.n	80048b8 <HAL_RTC_SetTime+0xbe>
 800480c:	460e      	mov	r6, r1
 800480e:	2301      	movs	r3, #1
 8004810:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004812:	2302      	movs	r3, #2
 8004814:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8004816:	b9ba      	cbnz	r2, 8004848 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004818:	780d      	ldrb	r5, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 800481a:	784b      	ldrb	r3, [r1, #1]
 800481c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004820:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004822:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004826:	fb02 3505 	mla	r5, r2, r5, r3
                              ((uint32_t)sTime->Seconds));
 800482a:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800482c:	441d      	add	r5, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800482e:	4629      	mov	r1, r5
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff ffb8 	bl	80047a6 <RTC_WriteTimeCounter>
 8004836:	4606      	mov	r6, r0
 8004838:	b1c8      	cbz	r0, 800486e <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800483a:	2304      	movs	r3, #4
 800483c:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800483e:	2300      	movs	r3, #0
 8004840:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8004842:	2601      	movs	r6, #1
}
 8004844:	4630      	mov	r0, r6
 8004846:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004848:	7808      	ldrb	r0, [r1, #0]
 800484a:	f7ff ff23 	bl	8004694 <RTC_Bcd2ToByte>
 800484e:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004850:	7870      	ldrb	r0, [r6, #1]
 8004852:	f7ff ff1f 	bl	8004694 <RTC_Bcd2ToByte>
 8004856:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800485a:	0080      	lsls	r0, r0, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800485c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004860:	fb03 0505 	mla	r5, r3, r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004864:	78b0      	ldrb	r0, [r6, #2]
 8004866:	f7ff ff15 	bl	8004694 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800486a:	4405      	add	r5, r0
 800486c:	e7df      	b.n	800482e <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	6853      	ldr	r3, [r2, #4]
 8004872:	f023 0305 	bic.w	r3, r3, #5
 8004876:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004878:	4620      	mov	r0, r4
 800487a:	f7ff fef6 	bl	800466a <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800487e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004882:	d001      	beq.n	8004888 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 8004884:	4285      	cmp	r5, r0
 8004886:	d804      	bhi.n	8004892 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8004888:	2301      	movs	r3, #1
 800488a:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800488c:	2300      	movs	r3, #0
 800488e:	7423      	strb	r3, [r4, #16]
    return HAL_OK;
 8004890:	e7d8      	b.n	8004844 <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004892:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004896:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800489a:	4620      	mov	r0, r4
 800489c:	f7ff ff98 	bl	80047d0 <RTC_WriteAlarmCounter>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d0f1      	beq.n	8004888 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80048a4:	2304      	movs	r3, #4
 80048a6:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 80048a8:	2300      	movs	r3, #0
 80048aa:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 80048ac:	2601      	movs	r6, #1
 80048ae:	e7c9      	b.n	8004844 <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 80048b0:	2601      	movs	r6, #1
 80048b2:	e7c7      	b.n	8004844 <HAL_RTC_SetTime+0x4a>
 80048b4:	2601      	movs	r6, #1
 80048b6:	e7c5      	b.n	8004844 <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 80048b8:	2602      	movs	r6, #2
 80048ba:	e7c3      	b.n	8004844 <HAL_RTC_SetTime+0x4a>

080048bc <HAL_RTC_GetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 80048bc:	2800      	cmp	r0, #0
 80048be:	f000 80d9 	beq.w	8004a74 <HAL_RTC_GetTime+0x1b8>
{
 80048c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c6:	4605      	mov	r5, r0
  if ((hrtc == NULL) || (sTime == NULL))
 80048c8:	2900      	cmp	r1, #0
 80048ca:	f000 80d5 	beq.w	8004a78 <HAL_RTC_GetTime+0x1bc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80048ce:	6800      	ldr	r0, [r0, #0]
 80048d0:	6840      	ldr	r0, [r0, #4]
 80048d2:	f010 0f04 	tst.w	r0, #4
 80048d6:	d002      	beq.n	80048de <HAL_RTC_GetTime+0x22>
    return HAL_ERROR;
 80048d8:	2001      	movs	r0, #1
}
 80048da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048de:	4616      	mov	r6, r2
 80048e0:	460c      	mov	r4, r1
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048e2:	4628      	mov	r0, r5
 80048e4:	f7ff feae 	bl	8004644 <RTC_ReadTimeCounter>
 80048e8:	4607      	mov	r7, r0
  hours = counter_time / 3600U;
 80048ea:	4a71      	ldr	r2, [pc, #452]	; (8004ab0 <HAL_RTC_GetTime+0x1f4>)
 80048ec:	fba2 3200 	umull	r3, r2, r2, r0
 80048f0:	0ad2      	lsrs	r2, r2, #11
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80048f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80048f6:	fb01 0112 	mls	r1, r1, r2, r0
 80048fa:	4b6e      	ldr	r3, [pc, #440]	; (8004ab4 <HAL_RTC_GetTime+0x1f8>)
 80048fc:	fba3 0301 	umull	r0, r3, r3, r1
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	7063      	strb	r3, [r4, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004904:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004908:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 800490c:	70a3      	strb	r3, [r4, #2]
  if (hours >= 24U)
 800490e:	2a17      	cmp	r2, #23
 8004910:	d811      	bhi.n	8004936 <HAL_RTC_GetTime+0x7a>
    sTime->Hours = hours;
 8004912:	7022      	strb	r2, [r4, #0]
  if (Format != RTC_FORMAT_BIN)
 8004914:	2e00      	cmp	r6, #0
 8004916:	f000 80b5 	beq.w	8004a84 <HAL_RTC_GetTime+0x1c8>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800491a:	7820      	ldrb	r0, [r4, #0]
 800491c:	f7ff feac 	bl	8004678 <RTC_ByteToBcd2>
 8004920:	7020      	strb	r0, [r4, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004922:	7860      	ldrb	r0, [r4, #1]
 8004924:	f7ff fea8 	bl	8004678 <RTC_ByteToBcd2>
 8004928:	7060      	strb	r0, [r4, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800492a:	78a0      	ldrb	r0, [r4, #2]
 800492c:	f7ff fea4 	bl	8004678 <RTC_ByteToBcd2>
 8004930:	70a0      	strb	r0, [r4, #2]
  return HAL_OK;
 8004932:	2000      	movs	r0, #0
 8004934:	e7d1      	b.n	80048da <HAL_RTC_GetTime+0x1e>
    sTime->Hours = (hours % 24U);
 8004936:	4b60      	ldr	r3, [pc, #384]	; (8004ab8 <HAL_RTC_GetTime+0x1fc>)
 8004938:	fba3 1302 	umull	r1, r3, r3, r2
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004942:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004946:	7022      	strb	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004948:	4628      	mov	r0, r5
 800494a:	f7ff fe8e 	bl	800466a <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800494e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004952:	f000 8099 	beq.w	8004a88 <HAL_RTC_GetTime+0x1cc>
 8004956:	4287      	cmp	r7, r0
 8004958:	f080 8096 	bcs.w	8004a88 <HAL_RTC_GetTime+0x1cc>
      counter_alarm -= counter_time;
 800495c:	eba0 0907 	sub.w	r9, r0, r7
 8004960:	4b56      	ldr	r3, [pc, #344]	; (8004abc <HAL_RTC_GetTime+0x200>)
 8004962:	fba3 3807 	umull	r3, r8, r3, r7
 8004966:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800496a:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <HAL_RTC_GetTime+0x204>)
 800496c:	fb03 7818 	mls	r8, r3, r8, r7
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004970:	4641      	mov	r1, r8
 8004972:	4628      	mov	r0, r5
 8004974:	f7ff ff17 	bl	80047a6 <RTC_WriteTimeCounter>
 8004978:	2800      	cmp	r0, #0
 800497a:	d17f      	bne.n	8004a7c <HAL_RTC_GetTime+0x1c0>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800497c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004980:	d017      	beq.n	80049b2 <HAL_RTC_GetTime+0xf6>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004982:	eb08 0109 	add.w	r1, r8, r9
 8004986:	4628      	mov	r0, r5
 8004988:	f7ff ff22 	bl	80047d0 <RTC_WriteAlarmCounter>
 800498c:	2800      	cmp	r0, #0
 800498e:	d177      	bne.n	8004a80 <HAL_RTC_GetTime+0x1c4>
    days_elapsed = (hours / 24U);
 8004990:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <HAL_RTC_GetTime+0x200>)
 8004992:	fba3 3707 	umull	r3, r7, r3, r7
  year = hrtc->DateToUpdate.Year;
 8004996:	7be8      	ldrb	r0, [r5, #15]
  month = hrtc->DateToUpdate.Month;
 8004998:	f895 c00d 	ldrb.w	ip, [r5, #13]
  day = hrtc->DateToUpdate.Date;
 800499c:	7baa      	ldrb	r2, [r5, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 800499e:	0c3f      	lsrs	r7, r7, #16
 80049a0:	d05e      	beq.n	8004a60 <HAL_RTC_GetTime+0x1a4>
 80049a2:	2100      	movs	r1, #0
  if ((nYear % 100U) != 0U)
 80049a4:	f04f 0964 	mov.w	r9, #100	; 0x64
  if ((nYear % 400U) == 0U)
 80049a8:	f44f 78c8 	mov.w	r8, #400	; 0x190
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80049ac:	f240 2ed5 	movw	lr, #725	; 0x2d5
 80049b0:	e01e      	b.n	80049f0 <HAL_RTC_GetTime+0x134>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049b2:	f04f 31ff 	mov.w	r1, #4294967295
 80049b6:	4628      	mov	r0, r5
 80049b8:	f7ff ff0a 	bl	80047d0 <RTC_WriteAlarmCounter>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d0e7      	beq.n	8004990 <HAL_RTC_GetTime+0xd4>
        return HAL_ERROR;
 80049c0:	2001      	movs	r0, #1
 80049c2:	e78a      	b.n	80048da <HAL_RTC_GetTime+0x1e>
        (month == 8U) || (month == 10U) || (month == 12U))
 80049c4:	f1bc 0f0c 	cmp.w	ip, #12
 80049c8:	d06c      	beq.n	8004aa4 <HAL_RTC_GetTime+0x1e8>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80049ca:	f02c 0302 	bic.w	r3, ip, #2
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d01b      	beq.n	8004a0a <HAL_RTC_GetTime+0x14e>
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	d019      	beq.n	8004a0a <HAL_RTC_GetTime+0x14e>
    else if (month == 2U)
 80049d6:	f1bc 0f02 	cmp.w	ip, #2
 80049da:	d106      	bne.n	80049ea <HAL_RTC_GetTime+0x12e>
      if (day < 28U)
 80049dc:	2a1b      	cmp	r2, #27
 80049de:	d81b      	bhi.n	8004a18 <HAL_RTC_GetTime+0x15c>
        day++;
 80049e0:	3201      	adds	r2, #1
 80049e2:	e002      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
          month++;
 80049e4:	f10c 0c01 	add.w	ip, ip, #1
          day = 1U;
 80049e8:	2201      	movs	r2, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 80049ea:	3101      	adds	r1, #1
 80049ec:	428f      	cmp	r7, r1
 80049ee:	d037      	beq.n	8004a60 <HAL_RTC_GetTime+0x1a4>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80049f0:	f10c 33ff 	add.w	r3, ip, #4294967295
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	d8e5      	bhi.n	80049c4 <HAL_RTC_GetTime+0x108>
 80049f8:	fa2e f303 	lsr.w	r3, lr, r3
 80049fc:	f013 0f01 	tst.w	r3, #1
 8004a00:	d0e0      	beq.n	80049c4 <HAL_RTC_GetTime+0x108>
      if (day < 31U)
 8004a02:	2a1e      	cmp	r2, #30
 8004a04:	d8ee      	bhi.n	80049e4 <HAL_RTC_GetTime+0x128>
        day++;
 8004a06:	3201      	adds	r2, #1
 8004a08:	e7ef      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
      if (day < 30U)
 8004a0a:	2a1d      	cmp	r2, #29
        day++;
 8004a0c:	bf92      	itee	ls
 8004a0e:	3201      	addls	r2, #1
        month++;
 8004a10:	f10c 0c01 	addhi.w	ip, ip, #1
        day = 1U;
 8004a14:	2201      	movhi	r2, #1
 8004a16:	e7e8      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
      else if (day == 28U)
 8004a18:	2a1c      	cmp	r2, #28
 8004a1a:	d115      	bne.n	8004a48 <HAL_RTC_GetTime+0x18c>
        if (RTC_IsLeapYear(year))
 8004a1c:	b282      	uxth	r2, r0
  if ((nYear % 4U) != 0U)
 8004a1e:	f012 0f03 	tst.w	r2, #3
 8004a22:	d117      	bne.n	8004a54 <HAL_RTC_GetTime+0x198>
  if ((nYear % 100U) != 0U)
 8004a24:	fbb2 f3f9 	udiv	r3, r2, r9
 8004a28:	fb09 2313 	mls	r3, r9, r3, r2
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	b9ab      	cbnz	r3, 8004a5c <HAL_RTC_GetTime+0x1a0>
  if ((nYear % 400U) == 0U)
 8004a30:	fbb2 f3f8 	udiv	r3, r2, r8
 8004a34:	fb08 2313 	mls	r3, r8, r3, r2
        if (RTC_IsLeapYear(year))
 8004a38:	b29b      	uxth	r3, r3
          day++;
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf16      	itet	ne
 8004a3e:	2201      	movne	r2, #1
 8004a40:	221d      	moveq	r2, #29
 8004a42:	f04f 0c03 	movne.w	ip, #3
 8004a46:	e7d0      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
      else if (day == 29U)
 8004a48:	2a1d      	cmp	r2, #29
 8004a4a:	d1ce      	bne.n	80049ea <HAL_RTC_GetTime+0x12e>
        day = 1U;
 8004a4c:	2201      	movs	r2, #1
        month++;
 8004a4e:	f04f 0c03 	mov.w	ip, #3
 8004a52:	e7ca      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
          day = 1U;
 8004a54:	2201      	movs	r2, #1
          month++;
 8004a56:	f04f 0c03 	mov.w	ip, #3
 8004a5a:	e7c6      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
          day++;
 8004a5c:	221d      	movs	r2, #29
 8004a5e:	e7c4      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
  hrtc->DateToUpdate.Year = year;
 8004a60:	73e8      	strb	r0, [r5, #15]
  hrtc->DateToUpdate.Month = month;
 8004a62:	fa5f f18c 	uxtb.w	r1, ip
 8004a66:	7369      	strb	r1, [r5, #13]
  hrtc->DateToUpdate.Date = day;
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	73aa      	strb	r2, [r5, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004a6c:	f7ff fe1c 	bl	80046a8 <RTC_WeekDayNum>
 8004a70:	7328      	strb	r0, [r5, #12]
 8004a72:	e74f      	b.n	8004914 <HAL_RTC_GetTime+0x58>
    return HAL_ERROR;
 8004a74:	2001      	movs	r0, #1
}
 8004a76:	4770      	bx	lr
    return HAL_ERROR;
 8004a78:	2001      	movs	r0, #1
 8004a7a:	e72e      	b.n	80048da <HAL_RTC_GetTime+0x1e>
      return HAL_ERROR;
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	e72c      	b.n	80048da <HAL_RTC_GetTime+0x1e>
        return HAL_ERROR;
 8004a80:	2001      	movs	r0, #1
 8004a82:	e72a      	b.n	80048da <HAL_RTC_GetTime+0x1e>
  return HAL_OK;
 8004a84:	2000      	movs	r0, #0
 8004a86:	e728      	b.n	80048da <HAL_RTC_GetTime+0x1e>
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_RTC_GetTime+0x200>)
 8004a8a:	fba3 2307 	umull	r2, r3, r3, r7
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	490b      	ldr	r1, [pc, #44]	; (8004ac0 <HAL_RTC_GetTime+0x204>)
 8004a92:	fb01 7113 	mls	r1, r1, r3, r7
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7ff fe85 	bl	80047a6 <RTC_WriteTimeCounter>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d088      	beq.n	80049b2 <HAL_RTC_GetTime+0xf6>
      return HAL_ERROR;
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	e71a      	b.n	80048da <HAL_RTC_GetTime+0x1e>
      if (day < 31U)
 8004aa4:	2a1e      	cmp	r2, #30
 8004aa6:	d9ae      	bls.n	8004a06 <HAL_RTC_GetTime+0x14a>
          year++;
 8004aa8:	3001      	adds	r0, #1
          day = 1U;
 8004aaa:	2201      	movs	r2, #1
          month = 1U;
 8004aac:	4694      	mov	ip, r2
 8004aae:	e79c      	b.n	80049ea <HAL_RTC_GetTime+0x12e>
 8004ab0:	91a2b3c5 	.word	0x91a2b3c5
 8004ab4:	88888889 	.word	0x88888889
 8004ab8:	aaaaaaab 	.word	0xaaaaaaab
 8004abc:	c22e4507 	.word	0xc22e4507
 8004ac0:	00015180 	.word	0x00015180

08004ac4 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d05a      	beq.n	8004b7e <HAL_RTC_SetDate+0xba>
{
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 8004acc:	2900      	cmp	r1, #0
 8004ace:	d058      	beq.n	8004b82 <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 8004ad0:	7c03      	ldrb	r3, [r0, #16]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d057      	beq.n	8004b86 <HAL_RTC_SetDate+0xc2>
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	2301      	movs	r3, #1
 8004ada:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004adc:	2302      	movs	r3, #2
 8004ade:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8004ae0:	b9ba      	cbnz	r2, 8004b12 <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004ae2:	78cb      	ldrb	r3, [r1, #3]
 8004ae4:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004ae6:	784b      	ldrb	r3, [r1, #1]
 8004ae8:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004aea:	788b      	ldrb	r3, [r1, #2]
 8004aec:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004aee:	7ba2      	ldrb	r2, [r4, #14]
 8004af0:	7b61      	ldrb	r1, [r4, #13]
 8004af2:	7be0      	ldrb	r0, [r4, #15]
 8004af4:	f7ff fdd8 	bl	80046a8 <RTC_WeekDayNum>
 8004af8:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004afa:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7ff fda1 	bl	8004644 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8004b02:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <HAL_RTC_SetDate+0xc8>)
 8004b04:	4298      	cmp	r0, r3
 8004b06:	d811      	bhi.n	8004b2c <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	7420      	strb	r0, [r4, #16]
}
 8004b10:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004b12:	78c8      	ldrb	r0, [r1, #3]
 8004b14:	f7ff fdbe 	bl	8004694 <RTC_Bcd2ToByte>
 8004b18:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004b1a:	7868      	ldrb	r0, [r5, #1]
 8004b1c:	f7ff fdba 	bl	8004694 <RTC_Bcd2ToByte>
 8004b20:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004b22:	78a8      	ldrb	r0, [r5, #2]
 8004b24:	f7ff fdb6 	bl	8004694 <RTC_Bcd2ToByte>
 8004b28:	73a0      	strb	r0, [r4, #14]
 8004b2a:	e7e0      	b.n	8004aee <HAL_RTC_SetDate+0x2a>
 8004b2c:	4d18      	ldr	r5, [pc, #96]	; (8004b90 <HAL_RTC_SetDate+0xcc>)
 8004b2e:	fba5 3500 	umull	r3, r5, r5, r0
 8004b32:	0c2d      	lsrs	r5, r5, #16
 8004b34:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <HAL_RTC_SetDate+0xd0>)
 8004b36:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7ff fe32 	bl	80047a6 <RTC_WriteTimeCounter>
 8004b42:	b128      	cbz	r0, 8004b50 <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b44:	2304      	movs	r3, #4
 8004b46:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	e7df      	b.n	8004b10 <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7ff fd8a 	bl	800466a <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004b56:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b5a:	d0d5      	beq.n	8004b08 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 8004b5c:	4285      	cmp	r5, r0
 8004b5e:	d9d3      	bls.n	8004b08 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b60:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004b64:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff fe31 	bl	80047d0 <RTC_WriteAlarmCounter>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d0ca      	beq.n	8004b08 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b72:	2304      	movs	r3, #4
 8004b74:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8004b76:	2300      	movs	r3, #0
 8004b78:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	e7c8      	b.n	8004b10 <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 8004b7e:	2001      	movs	r0, #1
}
 8004b80:	4770      	bx	lr
    return HAL_ERROR;
 8004b82:	2001      	movs	r0, #1
 8004b84:	e7c4      	b.n	8004b10 <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 8004b86:	2002      	movs	r0, #2
 8004b88:	e7c2      	b.n	8004b10 <HAL_RTC_SetDate+0x4c>
 8004b8a:	bf00      	nop
 8004b8c:	00015f8f 	.word	0x00015f8f
 8004b90:	c22e4507 	.word	0xc22e4507
 8004b94:	00015180 	.word	0x00015180

08004b98 <HAL_RTC_GetDate>:
{
 8004b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9c:	b082      	sub	sp, #8
  RTC_TimeTypeDef stime = {0U};
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004ba4:	f88d 3006 	strb.w	r3, [sp, #6]
  if ((hrtc == NULL) || (sDate == NULL))
 8004ba8:	b300      	cbz	r0, 8004bec <HAL_RTC_GetDate+0x54>
 8004baa:	4605      	mov	r5, r0
 8004bac:	b301      	cbz	r1, 8004bf0 <HAL_RTC_GetDate+0x58>
 8004bae:	4617      	mov	r7, r2
 8004bb0:	460c      	mov	r4, r1
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	a901      	add	r1, sp, #4
 8004bb6:	f7ff fe81 	bl	80048bc <HAL_RTC_GetTime>
 8004bba:	4606      	mov	r6, r0
 8004bbc:	b9e8      	cbnz	r0, 8004bfa <HAL_RTC_GetDate+0x62>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004bbe:	7b2b      	ldrb	r3, [r5, #12]
 8004bc0:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004bc2:	7be8      	ldrb	r0, [r5, #15]
 8004bc4:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004bc6:	f895 800d 	ldrb.w	r8, [r5, #13]
 8004bca:	f884 8001 	strb.w	r8, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004bce:	7bad      	ldrb	r5, [r5, #14]
 8004bd0:	70a5      	strb	r5, [r4, #2]
  if (Format != RTC_FORMAT_BIN)
 8004bd2:	b177      	cbz	r7, 8004bf2 <HAL_RTC_GetDate+0x5a>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004bd4:	f7ff fd50 	bl	8004678 <RTC_ByteToBcd2>
 8004bd8:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f7ff fd4c 	bl	8004678 <RTC_ByteToBcd2>
 8004be0:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004be2:	4628      	mov	r0, r5
 8004be4:	f7ff fd48 	bl	8004678 <RTC_ByteToBcd2>
 8004be8:	70a0      	strb	r0, [r4, #2]
 8004bea:	e002      	b.n	8004bf2 <HAL_RTC_GetDate+0x5a>
    return HAL_ERROR;
 8004bec:	2601      	movs	r6, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_RTC_GetDate+0x5a>
 8004bf0:	2601      	movs	r6, #1
}
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	b002      	add	sp, #8
 8004bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004bfa:	2601      	movs	r6, #1
 8004bfc:	e7f9      	b.n	8004bf2 <HAL_RTC_GetDate+0x5a>

08004bfe <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 8004bfe:	b1c0      	cbz	r0, 8004c32 <HAL_RTC_WaitForSynchro+0x34>
{
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4604      	mov	r4, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004c04:	6802      	ldr	r2, [r0, #0]
 8004c06:	6853      	ldr	r3, [r2, #4]
 8004c08:	f023 0308 	bic.w	r3, r3, #8
 8004c0c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004c0e:	f7fe fb31 	bl	8003274 <HAL_GetTick>
 8004c12:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f013 0f08 	tst.w	r3, #8
 8004c1c:	d107      	bne.n	8004c2e <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c1e:	f7fe fb29 	bl	8003274 <HAL_GetTick>
 8004c22:	1b40      	subs	r0, r0, r5
 8004c24:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004c28:	d9f4      	bls.n	8004c14 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004c2a:	2003      	movs	r0, #3
 8004c2c:	e000      	b.n	8004c30 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8004c2e:	2000      	movs	r0, #0
}
 8004c30:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004c32:	2001      	movs	r0, #1
}
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d05a      	beq.n	8004cf2 <HAL_RTC_Init+0xba>
{
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c40:	7c43      	ldrb	r3, [r0, #17]
 8004c42:	b153      	cbz	r3, 8004c5a <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c44:	2302      	movs	r3, #2
 8004c46:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff ffd8 	bl	8004bfe <HAL_RTC_WaitForSynchro>
 8004c4e:	b140      	cbz	r0, 8004c62 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c50:	2304      	movs	r3, #4
 8004c52:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004c5a:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8004c5c:	f7fd f802 	bl	8001c64 <HAL_RTC_MspInit>
 8004c60:	e7f0      	b.n	8004c44 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7ff fd6e 	bl	8004744 <RTC_EnterInitMode>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d130      	bne.n	8004cce <HAL_RTC_Init+0x96>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	6853      	ldr	r3, [r2, #4]
 8004c70:	f023 0307 	bic.w	r3, r3, #7
 8004c74:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004c76:	68a3      	ldr	r3, [r4, #8]
 8004c78:	b123      	cbz	r3, 8004c84 <HAL_RTC_Init+0x4c>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_RTC_Init+0xc0>)
 8004c7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_RTC_Init+0xc0>)
 8004c86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c88:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8004c8c:	68a1      	ldr	r1, [r4, #8]
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004c92:	6862      	ldr	r2, [r4, #4]
 8004c94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004c98:	d01d      	beq.n	8004cd6 <HAL_RTC_Init+0x9e>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	688b      	ldr	r3, [r1, #8]
 8004c9e:	f023 030f 	bic.w	r3, r3, #15
 8004ca2:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8004ca6:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004ca8:	6821      	ldr	r1, [r4, #0]
 8004caa:	68cb      	ldr	r3, [r1, #12]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60cb      	str	r3, [r1, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7ff fd5c 	bl	8004774 <RTC_ExitInitMode>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	b9a0      	cbnz	r0, 8004cea <HAL_RTC_Init+0xb2>
    hrtc->DateToUpdate.Year = 0x00U;
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	73e2      	strb	r2, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	7362      	strb	r2, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004cc8:	73a2      	strb	r2, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8004cca:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 8004ccc:	e7c3      	b.n	8004c56 <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cce:	2304      	movs	r3, #4
 8004cd0:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e7bf      	b.n	8004c56 <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	f7ff fc32 	bl	8004540 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8004cdc:	b108      	cbz	r0, 8004ce2 <HAL_RTC_Init+0xaa>
        prescaler = prescaler - 1U;
 8004cde:	1e42      	subs	r2, r0, #1
 8004ce0:	e7db      	b.n	8004c9a <HAL_RTC_Init+0x62>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e7b5      	b.n	8004c56 <HAL_RTC_Init+0x1e>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004cea:	2304      	movs	r3, #4
 8004cec:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7b1      	b.n	8004c56 <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	4770      	bx	lr
 8004cf8:	40006c00 	.word	0x40006c00

08004cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d00:	b083      	sub	sp, #12
 8004d02:	4680      	mov	r8, r0
 8004d04:	460e      	mov	r6, r1
 8004d06:	4615      	mov	r5, r2
 8004d08:	461c      	mov	r4, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d0a:	f7fe fab3 	bl	8003274 <HAL_GetTick>
 8004d0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004d10:	4427      	add	r7, r4
 8004d12:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8004d14:	f7fe faae 	bl	8003274 <HAL_GetTick>
 8004d18:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004d22:	fb07 f303 	mul.w	r3, r7, r3
 8004d26:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d28:	f8d8 2000 	ldr.w	r2, [r8]
 8004d2c:	6893      	ldr	r3, [r2, #8]
 8004d2e:	ea36 0303 	bics.w	r3, r6, r3
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	d045      	beq.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004d40:	d0f4      	beq.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x30>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d42:	f7fe fa97 	bl	8003274 <HAL_GetTick>
 8004d46:	eba0 0009 	sub.w	r0, r0, r9
 8004d4a:	42b8      	cmp	r0, r7
 8004d4c:	d208      	bcs.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x64>
 8004d4e:	b13f      	cbz	r7, 8004d60 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d50:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf08      	it	eq
 8004d56:	2700      	moveq	r7, #0
      }
      count--;
 8004d58:	9b01      	ldr	r3, [sp, #4]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	e7e3      	b.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0x2c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d60:	f8d8 2000 	ldr.w	r2, [r8]
 8004d64:	6853      	ldr	r3, [r2, #4]
 8004d66:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004d6a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d74:	d00c      	beq.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d76:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d016      	beq.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f888 3051 	strb.w	r3, [r8, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004d86:	2300      	movs	r3, #0
 8004d88:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
        return HAL_TIMEOUT;
 8004d8c:	2003      	movs	r0, #3
 8004d8e:	e01c      	b.n	8004dca <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d98:	d002      	beq.n	8004da0 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9e:	d1ea      	bne.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004da0:	f8d8 2000 	ldr.w	r2, [r8]
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	e7e3      	b.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004dae:	f8d8 2000 	ldr.w	r2, [r8]
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	f8d8 2000 	ldr.w	r2, [r8]
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e7db      	b.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8004dc8:	2000      	movs	r0, #0
}
 8004dca:	b003      	add	sp, #12
 8004dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dd0:	20000004 	.word	0x20000004

08004dd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dda:	9200      	str	r2, [sp, #0]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	2200      	movs	r2, #0
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	f7ff ff8b 	bl	8004cfc <SPI_WaitFlagStateUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	b910      	cbnz	r0, 8004df0 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	b002      	add	sp, #8
 8004dee:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004df2:	f043 0320 	orr.w	r3, r3, #32
 8004df6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e7f6      	b.n	8004dea <SPI_EndRxTxTransaction+0x16>

08004dfc <HAL_SPI_Init>:
  if (hspi == NULL)
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d056      	beq.n	8004eae <HAL_SPI_Init+0xb2>
{
 8004e00:	b510      	push	{r4, lr}
 8004e02:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e06:	b933      	cbnz	r3, 8004e16 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e08:	6843      	ldr	r3, [r0, #4]
 8004e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0e:	d005      	beq.n	8004e1c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61c3      	str	r3, [r0, #28]
 8004e14:	e002      	b.n	8004e1c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e16:	2300      	movs	r3, #0
 8004e18:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e1a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e20:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d03c      	beq.n	8004ea2 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	6813      	ldr	r3, [r2, #0]
 8004e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e36:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e38:	6822      	ldr	r2, [r4, #0]
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004e40:	68a1      	ldr	r1, [r4, #8]
 8004e42:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004e46:	430b      	orrs	r3, r1
 8004e48:	68e1      	ldr	r1, [r4, #12]
 8004e4a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	f001 0102 	and.w	r1, r1, #2
 8004e56:	430b      	orrs	r3, r1
 8004e58:	6961      	ldr	r1, [r4, #20]
 8004e5a:	f001 0101 	and.w	r1, r1, #1
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	69a1      	ldr	r1, [r4, #24]
 8004e62:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004e66:	430b      	orrs	r3, r1
 8004e68:	69e1      	ldr	r1, [r4, #28]
 8004e6a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	6a21      	ldr	r1, [r4, #32]
 8004e72:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004e7a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	8b63      	ldrh	r3, [r4, #26]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	69d3      	ldr	r3, [r2, #28]
 8004e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e94:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e96:	2000      	movs	r0, #0
 8004e98:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004ea0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004ea2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7fc fefc 	bl	8001ca4 <HAL_SPI_MspInit>
 8004eac:	e7bc      	b.n	8004e28 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004eae:	2001      	movs	r0, #1
}
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_SPI_Transmit>:
{
 8004eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb6:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004eb8:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004ebc:	2c01      	cmp	r4, #1
 8004ebe:	f000 80c7 	beq.w	8005050 <HAL_SPI_Transmit+0x19e>
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4617      	mov	r7, r2
 8004ec6:	4688      	mov	r8, r1
 8004ec8:	4604      	mov	r4, r0
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004ed0:	f7fe f9d0 	bl	8003274 <HAL_GetTick>
 8004ed4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004ed6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d009      	beq.n	8004ef4 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004ee0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004eee:	b002      	add	sp, #8
 8004ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004ef4:	f1b8 0f00 	cmp.w	r8, #0
 8004ef8:	f000 80a2 	beq.w	8005040 <HAL_SPI_Transmit+0x18e>
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	f000 80a1 	beq.w	8005044 <HAL_SPI_Transmit+0x192>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f02:	2303      	movs	r3, #3
 8004f04:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f0c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f10:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f12:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f14:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f16:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f18:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f1a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f1c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1e:	68a3      	ldr	r3, [r4, #8]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f24:	d01c      	beq.n	8004f60 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f2e:	d103      	bne.n	8004f38 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f36:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f38:	68e3      	ldr	r3, [r4, #12]
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d01a      	beq.n	8004f76 <HAL_SPI_Transmit+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f40:	6863      	ldr	r3, [r4, #4]
 8004f42:	b10b      	cbz	r3, 8004f48 <HAL_SPI_Transmit+0x96>
 8004f44:	2f01      	cmp	r7, #1
 8004f46:	d14e      	bne.n	8004fe6 <HAL_SPI_Transmit+0x134>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f52:	3301      	adds	r3, #1
 8004f54:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004f5e:	e042      	b.n	8004fe6 <HAL_SPI_Transmit+0x134>
    __HAL_SPI_DISABLE(hspi);
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f68:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	6813      	ldr	r3, [r2, #0]
 8004f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e7d7      	b.n	8004f26 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	b10b      	cbz	r3, 8004f7e <HAL_SPI_Transmit+0xcc>
 8004f7a:	2f01      	cmp	r7, #1
 8004f7c:	d113      	bne.n	8004fa6 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f82:	8812      	ldrh	r2, [r2, #0]
 8004f84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f88:	3302      	adds	r3, #2
 8004f8a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004f94:	e007      	b.n	8004fa6 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f96:	f7fe f96d 	bl	8003274 <HAL_GetTick>
 8004f9a:	1b80      	subs	r0, r0, r6
 8004f9c:	42a8      	cmp	r0, r5
 8004f9e:	d316      	bcc.n	8004fce <HAL_SPI_Transmit+0x11c>
 8004fa0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004fa4:	d150      	bne.n	8005048 <HAL_SPI_Transmit+0x196>
    while (hspi->TxXferCount > 0U)
 8004fa6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d032      	beq.n	8005014 <HAL_SPI_Transmit+0x162>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	f012 0f02 	tst.w	r2, #2
 8004fb6:	d0ee      	beq.n	8004f96 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fba:	8812      	ldrh	r2, [r2, #0]
 8004fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004fc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004fcc:	e7eb      	b.n	8004fa6 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fce:	2d00      	cmp	r5, #0
 8004fd0:	d1e9      	bne.n	8004fa6 <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8004fd2:	2003      	movs	r0, #3
 8004fd4:	e785      	b.n	8004ee2 <HAL_SPI_Transmit+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd6:	f7fe f94d 	bl	8003274 <HAL_GetTick>
 8004fda:	1b80      	subs	r0, r0, r6
 8004fdc:	42a8      	cmp	r0, r5
 8004fde:	d315      	bcc.n	800500c <HAL_SPI_Transmit+0x15a>
 8004fe0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004fe4:	d132      	bne.n	800504c <HAL_SPI_Transmit+0x19a>
    while (hspi->TxXferCount > 0U)
 8004fe6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	b19b      	cbz	r3, 8005014 <HAL_SPI_Transmit+0x162>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	f012 0f02 	tst.w	r2, #2
 8004ff4:	d0ef      	beq.n	8004fd6 <HAL_SPI_Transmit+0x124>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ff6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ff8:	7812      	ldrb	r2, [r2, #0]
 8004ffa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ffc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ffe:	3301      	adds	r3, #1
 8005000:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005002:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005004:	3b01      	subs	r3, #1
 8005006:	b29b      	uxth	r3, r3
 8005008:	86e3      	strh	r3, [r4, #54]	; 0x36
 800500a:	e7ec      	b.n	8004fe6 <HAL_SPI_Transmit+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800500c:	2d00      	cmp	r5, #0
 800500e:	d1ea      	bne.n	8004fe6 <HAL_SPI_Transmit+0x134>
          errorcode = HAL_TIMEOUT;
 8005010:	2003      	movs	r0, #3
 8005012:	e766      	b.n	8004ee2 <HAL_SPI_Transmit+0x30>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005014:	4632      	mov	r2, r6
 8005016:	4629      	mov	r1, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff fedb 	bl	8004dd4 <SPI_EndRxTxTransaction>
 800501e:	b108      	cbz	r0, 8005024 <HAL_SPI_Transmit+0x172>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005020:	2320      	movs	r3, #32
 8005022:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	b933      	cbnz	r3, 8005036 <HAL_SPI_Transmit+0x184>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	9201      	str	r2, [sp, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005036:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005038:	3000      	adds	r0, #0
 800503a:	bf18      	it	ne
 800503c:	2001      	movne	r0, #1
error:
 800503e:	e750      	b.n	8004ee2 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8005040:	2001      	movs	r0, #1
 8005042:	e74e      	b.n	8004ee2 <HAL_SPI_Transmit+0x30>
 8005044:	2001      	movs	r0, #1
 8005046:	e74c      	b.n	8004ee2 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8005048:	2003      	movs	r0, #3
 800504a:	e74a      	b.n	8004ee2 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800504c:	2003      	movs	r0, #3
 800504e:	e748      	b.n	8004ee2 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8005050:	2002      	movs	r0, #2
 8005052:	e74c      	b.n	8004eee <HAL_SPI_Transmit+0x3c>

08005054 <HAL_SPI_TransmitReceive>:
{
 8005054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005058:	b083      	sub	sp, #12
 800505a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800505e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8005062:	2c01      	cmp	r4, #1
 8005064:	f000 810f 	beq.w	8005286 <HAL_SPI_TransmitReceive+0x232>
 8005068:	461d      	mov	r5, r3
 800506a:	4617      	mov	r7, r2
 800506c:	460e      	mov	r6, r1
 800506e:	4604      	mov	r4, r0
 8005070:	2301      	movs	r3, #1
 8005072:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005076:	f7fe f8fd 	bl	8003274 <HAL_GetTick>
 800507a:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800507c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005080:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005082:	2801      	cmp	r0, #1
 8005084:	d016      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x60>
 8005086:	6863      	ldr	r3, [r4, #4]
 8005088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508c:	d00a      	beq.n	80050a4 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 800508e:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005090:	2201      	movs	r2, #1
 8005092:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005096:	2200      	movs	r2, #0
 8005098:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800509c:	4618      	mov	r0, r3
 800509e:	b003      	add	sp, #12
 80050a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050a4:	68a3      	ldr	r3, [r4, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 80e1 	bne.w	800526e <HAL_SPI_TransmitReceive+0x21a>
 80050ac:	2804      	cmp	r0, #4
 80050ae:	d001      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	e7ed      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	f000 80dc 	beq.w	8005272 <HAL_SPI_TransmitReceive+0x21e>
 80050ba:	2f00      	cmp	r7, #0
 80050bc:	f000 80db 	beq.w	8005276 <HAL_SPI_TransmitReceive+0x222>
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	f000 80da 	beq.w	800527a <HAL_SPI_TransmitReceive+0x226>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050ce:	bf1c      	itt	ne
 80050d0:	2305      	movne	r3, #5
 80050d2:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050da:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050dc:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050de:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050e0:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050e2:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050e4:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80050e6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050e8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050f2:	d103      	bne.n	80050fc <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050fa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050fc:	68e3      	ldr	r3, [r4, #12]
 80050fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005102:	d012      	beq.n	800512a <HAL_SPI_TransmitReceive+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	b10b      	cbz	r3, 800510c <HAL_SPI_TransmitReceive+0xb8>
 8005108:	2d01      	cmp	r5, #1
 800510a:	d10a      	bne.n	8005122 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005110:	7812      	ldrb	r2, [r2, #0]
 8005112:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005114:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005116:	3301      	adds	r3, #1
 8005118:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800511a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800511c:	3b01      	subs	r3, #1
 800511e:	b29b      	uxth	r3, r3
 8005120:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005122:	2501      	movs	r5, #1
        txallowed = 0U;
 8005124:	2700      	movs	r7, #0
        txallowed = 1U;
 8005126:	462e      	mov	r6, r5
 8005128:	e068      	b.n	80051fc <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	b10b      	cbz	r3, 8005132 <HAL_SPI_TransmitReceive+0xde>
 800512e:	2d01      	cmp	r5, #1
 8005130:	d10a      	bne.n	8005148 <HAL_SPI_TransmitReceive+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005136:	8812      	ldrh	r2, [r2, #0]
 8005138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800513c:	3302      	adds	r3, #2
 800513e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005140:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005142:	3b01      	subs	r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005148:	2501      	movs	r5, #1
        txallowed = 0U;
 800514a:	2700      	movs	r7, #0
        txallowed = 1U;
 800514c:	462e      	mov	r6, r5
 800514e:	e01b      	b.n	8005188 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	f012 0f01 	tst.w	r2, #1
 8005158:	d00d      	beq.n	8005176 <HAL_SPI_TransmitReceive+0x122>
 800515a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800515c:	b292      	uxth	r2, r2
 800515e:	b152      	cbz	r2, 8005176 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005168:	3302      	adds	r3, #2
 800516a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800516c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800516e:	3b01      	subs	r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005174:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005176:	f7fe f87d 	bl	8003274 <HAL_GetTick>
 800517a:	eba0 0009 	sub.w	r0, r0, r9
 800517e:	4540      	cmp	r0, r8
 8005180:	d302      	bcc.n	8005188 <HAL_SPI_TransmitReceive+0x134>
 8005182:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005186:	d17a      	bne.n	800527e <HAL_SPI_TransmitReceive+0x22a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800518a:	b29b      	uxth	r3, r3
 800518c:	b91b      	cbnz	r3, 8005196 <HAL_SPI_TransmitReceive+0x142>
 800518e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d054      	beq.n	8005240 <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	f012 0f02 	tst.w	r2, #2
 800519e:	d0d7      	beq.n	8005150 <HAL_SPI_TransmitReceive+0xfc>
 80051a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80051a2:	b292      	uxth	r2, r2
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d0d3      	beq.n	8005150 <HAL_SPI_TransmitReceive+0xfc>
 80051a8:	2d00      	cmp	r5, #0
 80051aa:	d0d1      	beq.n	8005150 <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051ae:	8812      	ldrh	r2, [r2, #0]
 80051b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051b4:	3302      	adds	r3, #2
 80051b6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80051b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80051c0:	463d      	mov	r5, r7
 80051c2:	e7c5      	b.n	8005150 <HAL_SPI_TransmitReceive+0xfc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	f012 0f01 	tst.w	r2, #1
 80051cc:	d00d      	beq.n	80051ea <HAL_SPI_TransmitReceive+0x196>
 80051ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051d0:	b292      	uxth	r2, r2
 80051d2:	b152      	cbz	r2, 80051ea <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051dc:	3301      	adds	r3, #1
 80051de:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80051e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80051e8:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ea:	f7fe f843 	bl	8003274 <HAL_GetTick>
 80051ee:	eba0 0009 	sub.w	r0, r0, r9
 80051f2:	4540      	cmp	r0, r8
 80051f4:	d31f      	bcc.n	8005236 <HAL_SPI_TransmitReceive+0x1e2>
 80051f6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80051fa:	d142      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x22e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051fe:	b29b      	uxth	r3, r3
 8005200:	b913      	cbnz	r3, 8005208 <HAL_SPI_TransmitReceive+0x1b4>
 8005202:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005204:	b29b      	uxth	r3, r3
 8005206:	b1db      	cbz	r3, 8005240 <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	f012 0f02 	tst.w	r2, #2
 8005210:	d0d8      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x170>
 8005212:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005214:	b292      	uxth	r2, r2
 8005216:	2a00      	cmp	r2, #0
 8005218:	d0d4      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x170>
 800521a:	2d01      	cmp	r5, #1
 800521c:	d1d2      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x170>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800521e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005220:	7812      	ldrb	r2, [r2, #0]
 8005222:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005226:	3301      	adds	r3, #1
 8005228:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800522a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800522c:	3b01      	subs	r3, #1
 800522e:	b29b      	uxth	r3, r3
 8005230:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005232:	463d      	mov	r5, r7
 8005234:	e7c6      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x170>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005236:	f1b8 0f00 	cmp.w	r8, #0
 800523a:	d1df      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x1a8>
        errorcode = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e727      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005240:	464a      	mov	r2, r9
 8005242:	4641      	mov	r1, r8
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff fdc5 	bl	8004dd4 <SPI_EndRxTxTransaction>
 800524a:	4603      	mov	r3, r0
 800524c:	b118      	cbz	r0, 8005256 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800524e:	2320      	movs	r3, #32
 8005250:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
    goto error;
 8005254:	e71c      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005256:	68a2      	ldr	r2, [r4, #8]
 8005258:	2a00      	cmp	r2, #0
 800525a:	f47f af19 	bne.w	8005090 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800525e:	9201      	str	r2, [sp, #4]
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	68d1      	ldr	r1, [r2, #12]
 8005264:	9101      	str	r1, [sp, #4]
 8005266:	6892      	ldr	r2, [r2, #8]
 8005268:	9201      	str	r2, [sp, #4]
 800526a:	9a01      	ldr	r2, [sp, #4]
 800526c:	e710      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 800526e:	2302      	movs	r3, #2
 8005270:	e70e      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e70c      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
 8005276:	2301      	movs	r3, #1
 8005278:	e70a      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
 800527a:	2301      	movs	r3, #1
 800527c:	e708      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e706      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e704      	b.n	8005090 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8005286:	2302      	movs	r3, #2
 8005288:	e708      	b.n	800509c <HAL_SPI_TransmitReceive+0x48>
	...

0800528c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800528c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d001      	beq.n	800529a <HAL_TIM_Base_Start_IT+0xe>
  {
    return HAL_ERROR;
 8005296:	2001      	movs	r0, #1
 8005298:	4770      	bx	lr
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529a:	2302      	movs	r3, #2
 800529c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a0:	6802      	ldr	r2, [r0, #0]
 80052a2:	68d3      	ldr	r3, [r2, #12]
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052aa:	6803      	ldr	r3, [r0, #0]
 80052ac:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <HAL_TIM_Base_Start_IT+0x64>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d010      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x48>
 80052b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b6:	d00d      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x48>
 80052b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80052bc:	4293      	cmp	r3, r2
 80052be:	d009      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x48>
 80052c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d005      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2000      	movs	r0, #0
 80052d2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	2a06      	cmp	r2, #6
 80052dc:	d005      	beq.n	80052ea <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80052e6:	2000      	movs	r0, #0
 80052e8:	4770      	bx	lr
 80052ea:	2000      	movs	r0, #0
}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40012c00 	.word	0x40012c00

080052f4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f8:	4770      	bx	lr

080052fa <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_IRQHandler>:
{
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005300:	6803      	ldr	r3, [r0, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	f012 0f02 	tst.w	r2, #2
 8005308:	d011      	beq.n	800532e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	f012 0f02 	tst.w	r2, #2
 8005310:	d00d      	beq.n	800532e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005312:	f06f 0202 	mvn.w	r2, #2
 8005316:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005318:	2301      	movs	r3, #1
 800531a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	6803      	ldr	r3, [r0, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f013 0f03 	tst.w	r3, #3
 8005324:	d070      	beq.n	8005408 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005326:	f7ff ffe6 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	2300      	movs	r3, #0
 800532c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	f012 0f04 	tst.w	r2, #4
 8005336:	d012      	beq.n	800535e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	f012 0f04 	tst.w	r2, #4
 800533e:	d00e      	beq.n	800535e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005340:	f06f 0204 	mvn.w	r2, #4
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005346:	2302      	movs	r3, #2
 8005348:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005352:	d05f      	beq.n	8005414 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff ffce 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	2300      	movs	r3, #0
 800535c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	f012 0f08 	tst.w	r2, #8
 8005366:	d012      	beq.n	800538e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	f012 0f08 	tst.w	r2, #8
 800536e:	d00e      	beq.n	800538e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005370:	f06f 0208 	mvn.w	r2, #8
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005376:	2304      	movs	r3, #4
 8005378:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f013 0f03 	tst.w	r3, #3
 8005382:	d04e      	beq.n	8005422 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005384:	4620      	mov	r0, r4
 8005386:	f7ff ffb6 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	2300      	movs	r3, #0
 800538c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	f012 0f10 	tst.w	r2, #16
 8005396:	d012      	beq.n	80053be <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	f012 0f10 	tst.w	r2, #16
 800539e:	d00e      	beq.n	80053be <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a0:	f06f 0210 	mvn.w	r2, #16
 80053a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a6:	2308      	movs	r3, #8
 80053a8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 80053b2:	d03d      	beq.n	8005430 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80053b4:	4620      	mov	r0, r4
 80053b6:	f7ff ff9e 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	2300      	movs	r3, #0
 80053bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	f012 0f01 	tst.w	r2, #1
 80053c6:	d003      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	f012 0f01 	tst.w	r2, #1
 80053ce:	d136      	bne.n	800543e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053e0:	d134      	bne.n	800544c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053ea:	d003      	beq.n	80053f4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053f2:	d132      	bne.n	800545a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	f012 0f20 	tst.w	r2, #32
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	f012 0f20 	tst.w	r2, #32
 8005404:	d130      	bne.n	8005468 <HAL_TIM_IRQHandler+0x16c>
}
 8005406:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005408:	f7ff ff74 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	4620      	mov	r0, r4
 800540e:	f7ff ff73 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005412:	e78a      	b.n	800532a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005414:	4620      	mov	r0, r4
 8005416:	f7ff ff6d 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541a:	4620      	mov	r0, r4
 800541c:	f7ff ff6c 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005420:	e79b      	b.n	800535a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	4620      	mov	r0, r4
 8005424:	f7ff ff66 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff ff65 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800542e:	e7ac      	b.n	800538a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005430:	4620      	mov	r0, r4
 8005432:	f7ff ff5f 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff ff5e 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800543c:	e7bd      	b.n	80053ba <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800543e:	f06f 0201 	mvn.w	r2, #1
 8005442:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005444:	4620      	mov	r0, r4
 8005446:	f7fc f8c3 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
 800544a:	e7c1      	b.n	80053d0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800544c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005450:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005452:	4620      	mov	r0, r4
 8005454:	f000 f963 	bl	800571e <HAL_TIMEx_BreakCallback>
 8005458:	e7c3      	b.n	80053e2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800545a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800545e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff ff4a 	bl	80052fa <HAL_TIM_TriggerCallback>
 8005466:	e7c5      	b.n	80053f4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005468:	f06f 0220 	mvn.w	r2, #32
 800546c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800546e:	4620      	mov	r0, r4
 8005470:	f000 f954 	bl	800571c <HAL_TIMEx_CommutCallback>
}
 8005474:	e7c7      	b.n	8005406 <HAL_TIM_IRQHandler+0x10a>
	...

08005478 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005478:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800547a:	4a20      	ldr	r2, [pc, #128]	; (80054fc <TIM_Base_SetConfig+0x84>)
 800547c:	4290      	cmp	r0, r2
 800547e:	d014      	beq.n	80054aa <TIM_Base_SetConfig+0x32>
 8005480:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005484:	d02a      	beq.n	80054dc <TIM_Base_SetConfig+0x64>
 8005486:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800548a:	4290      	cmp	r0, r2
 800548c:	d02b      	beq.n	80054e6 <TIM_Base_SetConfig+0x6e>
 800548e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005492:	4290      	cmp	r0, r2
 8005494:	d02c      	beq.n	80054f0 <TIM_Base_SetConfig+0x78>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549a:	694a      	ldr	r2, [r1, #20]
 800549c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800549e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	688b      	ldr	r3, [r1, #8]
 80054a2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a4:	680b      	ldr	r3, [r1, #0]
 80054a6:	6283      	str	r3, [r0, #40]	; 0x28
 80054a8:	e015      	b.n	80054d6 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80054ae:	684a      	ldr	r2, [r1, #4]
 80054b0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b6:	68ca      	ldr	r2, [r1, #12]
 80054b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054be:	694a      	ldr	r2, [r1, #20]
 80054c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80054c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c4:	688b      	ldr	r3, [r1, #8]
 80054c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054c8:	680b      	ldr	r3, [r1, #0]
 80054ca:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <TIM_Base_SetConfig+0x84>)
 80054ce:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d0:	bf04      	itt	eq
 80054d2:	690a      	ldreq	r2, [r1, #16]
 80054d4:	631a      	streq	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d6:	2301      	movs	r3, #1
 80054d8:	6143      	str	r3, [r0, #20]
}
 80054da:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80054e0:	684a      	ldr	r2, [r1, #4]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	e7e5      	b.n	80054b2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80054ea:	684a      	ldr	r2, [r1, #4]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	e7e0      	b.n	80054b2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80054f4:	684a      	ldr	r2, [r1, #4]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	e7db      	b.n	80054b2 <TIM_Base_SetConfig+0x3a>
 80054fa:	bf00      	nop
 80054fc:	40012c00 	.word	0x40012c00

08005500 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005500:	b338      	cbz	r0, 8005552 <HAL_TIM_Base_Init+0x52>
{
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800550a:	b1eb      	cbz	r3, 8005548 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005512:	1d21      	adds	r1, r4, #4
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	f7ff ffaf 	bl	8005478 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551a:	2301      	movs	r3, #1
 800551c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005524:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005528:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800552c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800553c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005540:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005544:	2000      	movs	r0, #0
}
 8005546:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005548:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800554c:	f7fc fbe4 	bl	8001d18 <HAL_TIM_Base_MspInit>
 8005550:	e7dc      	b.n	800550c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005552:	2001      	movs	r0, #1
}
 8005554:	4770      	bx	lr

08005556 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005556:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005558:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800555e:	430a      	orrs	r2, r1
 8005560:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005564:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005566:	6083      	str	r3, [r0, #8]
}
 8005568:	bc10      	pop	{r4}
 800556a:	4770      	bx	lr

0800556c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800556c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	f000 809d 	beq.w	80056b0 <HAL_TIM_ConfigClockSource+0x144>
{
 8005576:	b570      	push	{r4, r5, r6, lr}
 8005578:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800557a:	2301      	movs	r3, #1
 800557c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	2302      	movs	r3, #2
 8005582:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005586:	6802      	ldr	r2, [r0, #0]
 8005588:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005592:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005594:	680b      	ldr	r3, [r1, #0]
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d070      	beq.n	800567c <HAL_TIM_ConfigClockSource+0x110>
 800559a:	d913      	bls.n	80055c4 <HAL_TIM_ConfigClockSource+0x58>
 800559c:	2b60      	cmp	r3, #96	; 0x60
 800559e:	d052      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xda>
 80055a0:	d923      	bls.n	80055ea <HAL_TIM_ConfigClockSource+0x7e>
 80055a2:	2b70      	cmp	r3, #112	; 0x70
 80055a4:	d03d      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xb6>
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	d145      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_ETR_SetConfig(htim->Instance,
 80055ac:	68cb      	ldr	r3, [r1, #12]
 80055ae:	684a      	ldr	r2, [r1, #4]
 80055b0:	6889      	ldr	r1, [r1, #8]
 80055b2:	6800      	ldr	r0, [r0, #0]
 80055b4:	f7ff ffcf 	bl	8005556 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	6893      	ldr	r3, [r2, #8]
 80055bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055c0:	6093      	str	r3, [r2, #8]
      break;
 80055c2:	e039      	b.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
  switch (sClockSourceConfig->ClockSource)
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_ConfigClockSource+0x6c>
 80055c8:	d904      	bls.n	80055d4 <HAL_TIM_ConfigClockSource+0x68>
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d004      	beq.n	80055d8 <HAL_TIM_ConfigClockSource+0x6c>
 80055ce:	2b30      	cmp	r3, #48	; 0x30
 80055d0:	d002      	beq.n	80055d8 <HAL_TIM_ConfigClockSource+0x6c>
 80055d2:	e031      	b.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d12f      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055d8:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80055da:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e0:	f043 0307 	orr.w	r3, r3, #7
 80055e4:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80055e6:	608b      	str	r3, [r1, #8]
 80055e8:	e026      	b.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
  switch (sClockSourceConfig->ClockSource)
 80055ea:	2b50      	cmp	r3, #80	; 0x50
 80055ec:	d124      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	6803      	ldr	r3, [r0, #0]
 80055f0:	6848      	ldr	r0, [r1, #4]
 80055f2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80055f4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	6a1d      	ldr	r5, [r3, #32]
 80055f8:	f025 0501 	bic.w	r5, r5, #1
 80055fc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005600:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005604:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005608:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800560c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005612:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005614:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800561e:	6093      	str	r3, [r2, #8]
 8005620:	e00a      	b.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	68cb      	ldr	r3, [r1, #12]
 8005624:	684a      	ldr	r2, [r1, #4]
 8005626:	6889      	ldr	r1, [r1, #8]
 8005628:	6800      	ldr	r0, [r0, #0]
 800562a:	f7ff ff94 	bl	8005556 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005632:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005636:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005638:	2301      	movs	r3, #1
 800563a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800563e:	2000      	movs	r0, #0
 8005640:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005644:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005646:	6803      	ldr	r3, [r0, #0]
 8005648:	684d      	ldr	r5, [r1, #4]
 800564a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564c:	6a18      	ldr	r0, [r3, #32]
 800564e:	f020 0010 	bic.w	r0, r0, #16
 8005652:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005654:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8005656:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005658:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005664:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005668:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800566a:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800566c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800566e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005674:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	e7dd      	b.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	6848      	ldr	r0, [r1, #4]
 8005680:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005682:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005684:	6a1d      	ldr	r5, [r3, #32]
 8005686:	f025 0501 	bic.w	r5, r5, #1
 800568a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800568e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005692:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005696:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800569a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800569c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056a0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80056a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80056ac:	6093      	str	r3, [r2, #8]
 80056ae:	e7c3      	b.n	8005638 <HAL_TIM_ConfigClockSource+0xcc>
  __HAL_LOCK(htim);
 80056b0:	2002      	movs	r0, #2
}
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d02b      	beq.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80056bc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80056be:	2301      	movs	r3, #1
 80056c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	2302      	movs	r3, #2
 80056c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ca:	6804      	ldr	r4, [r0, #0]
 80056cc:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ce:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d4:	680d      	ldr	r5, [r1, #0]
 80056d6:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d8:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056da:	6803      	ldr	r3, [r0, #0]
 80056dc:	4c0e      	ldr	r4, [pc, #56]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80056de:	42a3      	cmp	r3, r4
 80056e0:	d00a      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d007      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80056e8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	d003      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80056f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	d104      	bne.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fc:	6849      	ldr	r1, [r1, #4]
 80056fe:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005700:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005702:	2301      	movs	r3, #1
 8005704:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005708:	2300      	movs	r3, #0
 800570a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800570e:	4618      	mov	r0, r3
}
 8005710:	bc30      	pop	{r4, r5}
 8005712:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005714:	2002      	movs	r0, #2
}
 8005716:	4770      	bx	lr
 8005718:	40012c00 	.word	0x40012c00

0800571c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800571c:	4770      	bx	lr

0800571e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800571e:	4770      	bx	lr

08005720 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005720:	6802      	ldr	r2, [r0, #0]
 8005722:	68d3      	ldr	r3, [r2, #12]
 8005724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005728:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572a:	6802      	ldr	r2, [r0, #0]
 800572c:	6953      	ldr	r3, [r2, #20]
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005734:	2320      	movs	r3, #32
 8005736:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800573a:	4770      	bx	lr

0800573c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005740:	6802      	ldr	r2, [r0, #0]
 8005742:	6913      	ldr	r3, [r2, #16]
 8005744:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005748:	68c1      	ldr	r1, [r0, #12]
 800574a:	430b      	orrs	r3, r1
 800574c:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 800574e:	6801      	ldr	r1, [r0, #0]
 8005750:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005752:	6883      	ldr	r3, [r0, #8]
 8005754:	6900      	ldr	r0, [r0, #16]
 8005756:	4303      	orrs	r3, r0
 8005758:	6960      	ldr	r0, [r4, #20]
 800575a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800575c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8005760:	f022 020c 	bic.w	r2, r2, #12
 8005764:	4313      	orrs	r3, r2
 8005766:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	6953      	ldr	r3, [r2, #20]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	69a1      	ldr	r1, [r4, #24]
 8005772:	430b      	orrs	r3, r1
 8005774:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <UART_SetConfig+0x80>)
 800577a:	429a      	cmp	r2, r3
 800577c:	d01b      	beq.n	80057b6 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7fe fe2f 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005782:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005786:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005792:	6824      	ldr	r4, [r4, #0]
 8005794:	490a      	ldr	r1, [pc, #40]	; (80057c0 <UART_SetConfig+0x84>)
 8005796:	fba1 3200 	umull	r3, r2, r1, r0
 800579a:	0952      	lsrs	r2, r2, #5
 800579c:	2364      	movs	r3, #100	; 0x64
 800579e:	fb03 0312 	mls	r3, r3, r2, r0
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	3332      	adds	r3, #50	; 0x32
 80057a6:	fba1 1303 	umull	r1, r3, r1, r3
 80057aa:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80057ae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80057b2:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 80057b4:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80057b6:	f7fe fe23 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 80057ba:	e7e2      	b.n	8005782 <UART_SetConfig+0x46>
 80057bc:	40013800 	.word	0x40013800
 80057c0:	51eb851f 	.word	0x51eb851f

080057c4 <UART_WaitOnFlagUntilTimeout>:
{
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	4607      	mov	r7, r0
 80057ca:	460e      	mov	r6, r1
 80057cc:	4615      	mov	r5, r2
 80057ce:	4698      	mov	r8, r3
 80057d0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	6813      	ldr	r3, [r2, #0]
 80057d6:	ea36 0303 	bics.w	r3, r6, r3
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	42ab      	cmp	r3, r5
 80057e2:	d11d      	bne.n	8005820 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80057e8:	d0f4      	beq.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057ea:	b12c      	cbz	r4, 80057f8 <UART_WaitOnFlagUntilTimeout+0x34>
 80057ec:	f7fd fd42 	bl	8003274 <HAL_GetTick>
 80057f0:	eba0 0008 	sub.w	r0, r0, r8
 80057f4:	42a0      	cmp	r0, r4
 80057f6:	d9ec      	bls.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	68d3      	ldr	r3, [r2, #12]
 80057fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005800:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	6953      	ldr	r3, [r2, #20]
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800580c:	2320      	movs	r3, #32
 800580e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005812:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005816:	2300      	movs	r3, #0
 8005818:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 800581c:	2003      	movs	r0, #3
 800581e:	e000      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8005820:	2000      	movs	r0, #0
}
 8005822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005826 <HAL_UART_Init>:
  if (huart == NULL)
 8005826:	b358      	cbz	r0, 8005880 <HAL_UART_Init+0x5a>
{
 8005828:	b510      	push	{r4, lr}
 800582a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800582c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005830:	b30b      	cbz	r3, 8005876 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005832:	2324      	movs	r3, #36	; 0x24
 8005834:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	68d3      	ldr	r3, [r2, #12]
 800583c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005840:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff ff7a 	bl	800573c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005848:	6822      	ldr	r2, [r4, #0]
 800584a:	6913      	ldr	r3, [r2, #16]
 800584c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005850:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	6953      	ldr	r3, [r2, #20]
 8005856:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800585a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	68d3      	ldr	r3, [r2, #12]
 8005860:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005864:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005866:	2000      	movs	r0, #0
 8005868:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800586a:	2320      	movs	r3, #32
 800586c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005874:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005876:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800587a:	f7fc fa6d 	bl	8001d58 <HAL_UART_MspInit>
 800587e:	e7d8      	b.n	8005832 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005880:	2001      	movs	r0, #1
}
 8005882:	4770      	bx	lr

08005884 <HAL_UART_Transmit>:
{
 8005884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800588c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b20      	cmp	r3, #32
 8005894:	d15b      	bne.n	800594e <HAL_UART_Transmit+0xca>
 8005896:	4604      	mov	r4, r0
 8005898:	460d      	mov	r5, r1
 800589a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800589c:	2900      	cmp	r1, #0
 800589e:	d05b      	beq.n	8005958 <HAL_UART_Transmit+0xd4>
 80058a0:	2a00      	cmp	r2, #0
 80058a2:	d05b      	beq.n	800595c <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 80058a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d059      	beq.n	8005960 <HAL_UART_Transmit+0xdc>
 80058ac:	2301      	movs	r3, #1
 80058ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058b6:	2321      	movs	r3, #33	; 0x21
 80058b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80058bc:	f7fd fcda 	bl	8003274 <HAL_GetTick>
 80058c0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80058c2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80058c6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ca:	68a3      	ldr	r3, [r4, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d0:	d00c      	beq.n	80058ec <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 80058d2:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80058d6:	2300      	movs	r3, #0
 80058d8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80058dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80058de:	b29b      	uxth	r3, r3
 80058e0:	b343      	cbz	r3, 8005934 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e2:	f04f 0900 	mov.w	r9, #0
 80058e6:	f04f 0880 	mov.w	r8, #128	; 0x80
 80058ea:	e014      	b.n	8005916 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	b913      	cbnz	r3, 80058f6 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 80058f0:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80058f2:	2500      	movs	r5, #0
 80058f4:	e7ef      	b.n	80058d6 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 80058f6:	f04f 0a00 	mov.w	sl, #0
 80058fa:	e7ec      	b.n	80058d6 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fc:	6822      	ldr	r2, [r4, #0]
 80058fe:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005908:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800590a:	3b01      	subs	r3, #1
 800590c:	b29b      	uxth	r3, r3
 800590e:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005910:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005912:	b29b      	uxth	r3, r3
 8005914:	b173      	cbz	r3, 8005934 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005916:	9600      	str	r6, [sp, #0]
 8005918:	463b      	mov	r3, r7
 800591a:	464a      	mov	r2, r9
 800591c:	4641      	mov	r1, r8
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff ff50 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 8005924:	b9f0      	cbnz	r0, 8005964 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 8005926:	2d00      	cmp	r5, #0
 8005928:	d0e8      	beq.n	80058fc <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	e7e9      	b.n	8005908 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005934:	9600      	str	r6, [sp, #0]
 8005936:	463b      	mov	r3, r7
 8005938:	2200      	movs	r2, #0
 800593a:	2140      	movs	r1, #64	; 0x40
 800593c:	4620      	mov	r0, r4
 800593e:	f7ff ff41 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	b980      	cbnz	r0, 8005968 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 8005946:	2220      	movs	r2, #32
 8005948:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 800594c:	e000      	b.n	8005950 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 800594e:	2302      	movs	r3, #2
}
 8005950:	4618      	mov	r0, r3
 8005952:	b002      	add	sp, #8
 8005954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e7f9      	b.n	8005950 <HAL_UART_Transmit+0xcc>
 800595c:	2301      	movs	r3, #1
 800595e:	e7f7      	b.n	8005950 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005960:	2302      	movs	r3, #2
 8005962:	e7f5      	b.n	8005950 <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e7f3      	b.n	8005950 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e7f1      	b.n	8005950 <HAL_UART_Transmit+0xcc>

0800596c <HAL_UART_Receive_DMA>:
{
 800596c:	b530      	push	{r4, r5, lr}
 800596e:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8005970:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8005974:	b2e4      	uxtb	r4, r4
 8005976:	2c20      	cmp	r4, #32
 8005978:	d13d      	bne.n	80059f6 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800597a:	2900      	cmp	r1, #0
 800597c:	d03e      	beq.n	80059fc <HAL_UART_Receive_DMA+0x90>
 800597e:	2a00      	cmp	r2, #0
 8005980:	d03e      	beq.n	8005a00 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8005982:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005986:	2b01      	cmp	r3, #1
 8005988:	d03c      	beq.n	8005a04 <HAL_UART_Receive_DMA+0x98>
 800598a:	4613      	mov	r3, r2
 800598c:	460a      	mov	r2, r1
 800598e:	4604      	mov	r4, r0
 8005990:	2101      	movs	r1, #1
 8005992:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8005996:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8005998:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599a:	2500      	movs	r5, #0
 800599c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800599e:	2122      	movs	r1, #34	; 0x22
 80059a0:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80059a6:	4818      	ldr	r0, [pc, #96]	; (8005a08 <HAL_UART_Receive_DMA+0x9c>)
 80059a8:	6288      	str	r0, [r1, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ac:	4817      	ldr	r0, [pc, #92]	; (8005a0c <HAL_UART_Receive_DMA+0xa0>)
 80059ae:	62c8      	str	r0, [r1, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b2:	4817      	ldr	r0, [pc, #92]	; (8005a10 <HAL_UART_Receive_DMA+0xa4>)
 80059b4:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 80059b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b8:	634d      	str	r5, [r1, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059ba:	6821      	ldr	r1, [r4, #0]
 80059bc:	3104      	adds	r1, #4
 80059be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80059c0:	f7fd fd10 	bl	80033e4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80059c4:	9501      	str	r5, [sp, #4]
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	9201      	str	r2, [sp, #4]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	9201      	str	r2, [sp, #4]
 80059d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80059d2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059dc:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	6953      	ldr	r3, [r2, #20]
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	6953      	ldr	r3, [r2, #20]
 80059ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f0:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80059f2:	4628      	mov	r0, r5
 80059f4:	e000      	b.n	80059f8 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 80059f6:	2002      	movs	r0, #2
}
 80059f8:	b003      	add	sp, #12
 80059fa:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80059fc:	2001      	movs	r0, #1
 80059fe:	e7fb      	b.n	80059f8 <HAL_UART_Receive_DMA+0x8c>
 8005a00:	2001      	movs	r0, #1
 8005a02:	e7f9      	b.n	80059f8 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8005a04:	2002      	movs	r0, #2
 8005a06:	e7f7      	b.n	80059f8 <HAL_UART_Receive_DMA+0x8c>
 8005a08:	08005a19 	.word	0x08005a19
 8005a0c:	08005aeb 	.word	0x08005aeb
 8005a10:	08005af7 	.word	0x08005af7

08005a14 <HAL_UART_TxCpltCallback>:
}
 8005a14:	4770      	bx	lr

08005a16 <HAL_UART_RxCpltCallback>:
}
 8005a16:	4770      	bx	lr

08005a18 <UART_DMAReceiveCplt>:
{
 8005a18:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a1c:	6802      	ldr	r2, [r0, #0]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	f012 0f20 	tst.w	r2, #32
 8005a24:	d113      	bne.n	8005a4e <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8005a26:	2200      	movs	r2, #0
 8005a28:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	68ca      	ldr	r2, [r1, #12]
 8005a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a32:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	694a      	ldr	r2, [r1, #20]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	694a      	ldr	r2, [r1, #20]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a46:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff ffe1 	bl	8005a16 <HAL_UART_RxCpltCallback>
}
 8005a54:	bd08      	pop	{r3, pc}

08005a56 <UART_Receive_IT>:
{
 8005a56:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a58:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b22      	cmp	r3, #34	; 0x22
 8005a60:	d131      	bne.n	8005ac6 <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a62:	6883      	ldr	r3, [r0, #8]
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	d007      	beq.n	8005a7a <UART_Receive_IT+0x24>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a6c:	b18b      	cbz	r3, 8005a92 <UART_Receive_IT+0x3c>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a6e:	6803      	ldr	r3, [r0, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a76:	7013      	strb	r3, [r2, #0]
 8005a78:	e02b      	b.n	8005ad2 <UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7a:	6903      	ldr	r3, [r0, #16]
 8005a7c:	bb2b      	cbnz	r3, 8005aca <UART_Receive_IT+0x74>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a80:	6803      	ldr	r3, [r0, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a88:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005a8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	6283      	str	r3, [r0, #40]	; 0x28
 8005a90:	e022      	b.n	8005ad8 <UART_Receive_IT+0x82>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a92:	6903      	ldr	r3, [r0, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1ea      	bne.n	8005a6e <UART_Receive_IT+0x18>
 8005a98:	e018      	b.n	8005acc <UART_Receive_IT+0x76>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a9a:	6802      	ldr	r2, [r0, #0]
 8005a9c:	68d3      	ldr	r3, [r2, #12]
 8005a9e:	f023 0320 	bic.w	r3, r3, #32
 8005aa2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aa4:	6802      	ldr	r2, [r0, #0]
 8005aa6:	68d3      	ldr	r3, [r2, #12]
 8005aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aac:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aae:	6802      	ldr	r2, [r0, #0]
 8005ab0:	6953      	ldr	r3, [r2, #20]
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005abe:	f7ff ffaa 	bl	8005a16 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	e000      	b.n	8005ac8 <UART_Receive_IT+0x72>
    return HAL_BUSY;
 8005ac6:	2002      	movs	r0, #2
}
 8005ac8:	bd08      	pop	{r3, pc}
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aca:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005acc:	6803      	ldr	r3, [r0, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005ad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005ad8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0da      	beq.n	8005a9a <UART_Receive_IT+0x44>
    return HAL_OK;
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e7ef      	b.n	8005ac8 <UART_Receive_IT+0x72>

08005ae8 <HAL_UART_RxHalfCpltCallback>:
}
 8005ae8:	4770      	bx	lr

08005aea <UART_DMARxHalfCplt>:
{
 8005aea:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8005aec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005aee:	f7ff fffb 	bl	8005ae8 <HAL_UART_RxHalfCpltCallback>
}
 8005af2:	bd08      	pop	{r3, pc}

08005af4 <HAL_UART_ErrorCallback>:
}
 8005af4:	4770      	bx	lr

08005af6 <UART_DMAError>:
{
 8005af6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005afe:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b21      	cmp	r3, #33	; 0x21
 8005b06:	d00e      	beq.n	8005b26 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b0c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b22      	cmp	r3, #34	; 0x22
 8005b14:	d014      	beq.n	8005b40 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b18:	f043 0310 	orr.w	r3, r3, #16
 8005b1c:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff ffe8 	bl	8005af4 <HAL_UART_ErrorCallback>
}
 8005b24:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005b2a:	d0ed      	beq.n	8005b08 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b30:	68d3      	ldr	r3, [r2, #12]
 8005b32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b36:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8005b3e:	e7e3      	b.n	8005b08 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b40:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b44:	d0e7      	beq.n	8005b16 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f7ff fde8 	bl	8005720 <UART_EndRxTransfer>
 8005b50:	e7e1      	b.n	8005b16 <UART_DMAError+0x20>
	...

08005b54 <HAL_UART_IRQHandler>:
{
 8005b54:	b510      	push	{r4, lr}
 8005b56:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b58:	6802      	ldr	r2, [r0, #0]
 8005b5a:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b5c:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b5e:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8005b60:	f013 0f0f 	tst.w	r3, #15
 8005b64:	d117      	bne.n	8005b96 <HAL_UART_IRQHandler+0x42>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b66:	f013 0f20 	tst.w	r3, #32
 8005b6a:	d002      	beq.n	8005b72 <HAL_UART_IRQHandler+0x1e>
 8005b6c:	f010 0f20 	tst.w	r0, #32
 8005b70:	d10d      	bne.n	8005b8e <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b76:	d002      	beq.n	8005b7e <HAL_UART_IRQHandler+0x2a>
 8005b78:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005b7c:	d178      	bne.n	8005c70 <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b82:	d003      	beq.n	8005b8c <HAL_UART_IRQHandler+0x38>
 8005b84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b88:	f040 809e 	bne.w	8005cc8 <HAL_UART_IRQHandler+0x174>
}
 8005b8c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f7ff ff61 	bl	8005a56 <UART_Receive_IT>
      return;
 8005b94:	e7fa      	b.n	8005b8c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b96:	f011 0101 	ands.w	r1, r1, #1
 8005b9a:	d102      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x4e>
 8005b9c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005ba0:	d0e7      	beq.n	8005b72 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ba2:	f013 0f01 	tst.w	r3, #1
 8005ba6:	d006      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x62>
 8005ba8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005bac:	d003      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bb6:	f013 0f04 	tst.w	r3, #4
 8005bba:	d041      	beq.n	8005c40 <HAL_UART_IRQHandler+0xec>
 8005bbc:	b151      	cbz	r1, 8005bd4 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bbe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bc0:	f042 0202 	orr.w	r2, r2, #2
 8005bc4:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc6:	f013 0f02 	tst.w	r3, #2
 8005bca:	d003      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bcc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bce:	f042 0204 	orr.w	r2, r2, #4
 8005bd2:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bd4:	f013 0f08 	tst.w	r3, #8
 8005bd8:	d007      	beq.n	8005bea <HAL_UART_IRQHandler+0x96>
 8005bda:	f010 0f20 	tst.w	r0, #32
 8005bde:	d100      	bne.n	8005be2 <HAL_UART_IRQHandler+0x8e>
 8005be0:	b119      	cbz	r1, 8005bea <HAL_UART_IRQHandler+0x96>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005be2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005be4:	f042 0208 	orr.w	r2, r2, #8
 8005be8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	d0cd      	beq.n	8005b8c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bf0:	f013 0f20 	tst.w	r3, #32
 8005bf4:	d002      	beq.n	8005bfc <HAL_UART_IRQHandler+0xa8>
 8005bf6:	f010 0f20 	tst.w	r0, #32
 8005bfa:	d127      	bne.n	8005c4c <HAL_UART_IRQHandler+0xf8>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c02:	f013 0f08 	tst.w	r3, #8
 8005c06:	d102      	bne.n	8005c0e <HAL_UART_IRQHandler+0xba>
 8005c08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005c0c:	d02a      	beq.n	8005c64 <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f7ff fd86 	bl	8005720 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	695a      	ldr	r2, [r3, #20]
 8005c18:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005c1c:	d01e      	beq.n	8005c5c <HAL_UART_IRQHandler+0x108>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1e:	695a      	ldr	r2, [r3, #20]
 8005c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c24:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c28:	b1a3      	cbz	r3, 8005c54 <HAL_UART_IRQHandler+0x100>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ce0 <HAL_UART_IRQHandler+0x18c>)
 8005c2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005c30:	f7fd fc22 	bl	8003478 <HAL_DMA_Abort_IT>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d0a9      	beq.n	8005b8c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c38:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005c3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005c3c:	4798      	blx	r3
 8005c3e:	e7a5      	b.n	8005b8c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c40:	f013 0f02 	tst.w	r3, #2
 8005c44:	d0c6      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x80>
 8005c46:	2900      	cmp	r1, #0
 8005c48:	d0c4      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x80>
 8005c4a:	e7bf      	b.n	8005bcc <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7ff ff02 	bl	8005a56 <UART_Receive_IT>
 8005c52:	e7d3      	b.n	8005bfc <HAL_UART_IRQHandler+0xa8>
            HAL_UART_ErrorCallback(huart);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff ff4d 	bl	8005af4 <HAL_UART_ErrorCallback>
 8005c5a:	e797      	b.n	8005b8c <HAL_UART_IRQHandler+0x38>
          HAL_UART_ErrorCallback(huart);
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f7ff ff49 	bl	8005af4 <HAL_UART_ErrorCallback>
 8005c62:	e793      	b.n	8005b8c <HAL_UART_IRQHandler+0x38>
        HAL_UART_ErrorCallback(huart);
 8005c64:	4620      	mov	r0, r4
 8005c66:	f7ff ff45 	bl	8005af4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005c6e:	e78d      	b.n	8005b8c <HAL_UART_IRQHandler+0x38>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c70:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b21      	cmp	r3, #33	; 0x21
 8005c78:	d188      	bne.n	8005b8c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7a:	68a3      	ldr	r3, [r4, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	d016      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x15c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c82:	6a23      	ldr	r3, [r4, #32]
 8005c84:	1c59      	adds	r1, r3, #1
 8005c86:	6221      	str	r1, [r4, #32]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8005c8c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	84e3      	strh	r3, [r4, #38]	; 0x26
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f af79 	bne.w	8005b8c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	68d3      	ldr	r3, [r2, #12]
 8005c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	68d3      	ldr	r3, [r2, #12]
 8005ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cac:	60d3      	str	r3, [r2, #12]
 8005cae:	e76d      	b.n	8005b8c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e5      	bne.n	8005c82 <HAL_UART_IRQHandler+0x12e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cb6:	6a23      	ldr	r3, [r4, #32]
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbe:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8005cc0:	6a23      	ldr	r3, [r4, #32]
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	6223      	str	r3, [r4, #32]
 8005cc6:	e7e1      	b.n	8005c8c <HAL_UART_IRQHandler+0x138>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cc8:	68d3      	ldr	r3, [r2, #12]
 8005cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cce:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff fe9c 	bl	8005a14 <HAL_UART_TxCpltCallback>
 8005cdc:	e756      	b.n	8005b8c <HAL_UART_IRQHandler+0x38>
 8005cde:	bf00      	nop
 8005ce0:	08005ce5 	.word	0x08005ce5

08005ce4 <UART_DMAAbortOnError>:
{
 8005ce4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005cee:	f7ff ff01 	bl	8005af4 <HAL_UART_ErrorCallback>
}
 8005cf2:	bd08      	pop	{r3, pc}

08005cf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005cf4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005cf6:	4903      	ldr	r1, [pc, #12]	; (8005d04 <MX_FATFS_Init+0x10>)
 8005cf8:	4803      	ldr	r0, [pc, #12]	; (8005d08 <MX_FATFS_Init+0x14>)
 8005cfa:	f002 fbff 	bl	80084fc <FATFS_LinkDriver>
 8005cfe:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <MX_FATFS_Init+0x18>)
 8005d00:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d02:	bd08      	pop	{r3, pc}
 8005d04:	20002bb4 	.word	0x20002bb4
 8005d08:	20000010 	.word	0x20000010
 8005d0c:	20002bb0 	.word	0x20002bb0

08005d10 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8005d10:	2000      	movs	r0, #0
 8005d12:	4770      	bx	lr

08005d14 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8005d16:	f7fb fa17 	bl	8001148 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8005d1a:	bd08      	pop	{r3, pc}

08005d1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005d1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005d1e:	f7fb fae1 	bl	80012e4 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8005d22:	bd08      	pop	{r3, pc}

08005d24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005d24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005d26:	f7fb fae7 	bl	80012f8 <SD_disk_read>
  /* USER CODE END READ */
}
 8005d2a:	bd08      	pop	{r3, pc}

08005d2c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005d2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8005d2e:	f7fb fb2f 	bl	8001390 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8005d32:	bd08      	pop	{r3, pc}

08005d34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005d34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005d36:	f7fb fb8d 	bl	8001454 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8005d3a:	bd08      	pop	{r3, pc}

08005d3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005d3c:	b508      	push	{r3, lr}
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <disk_status+0x14>)
 8005d40:	181a      	adds	r2, r3, r0
 8005d42:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	7a10      	ldrb	r0, [r2, #8]
 8005d4c:	4798      	blx	r3
  return stat;
}
 8005d4e:	bd08      	pop	{r3, pc}
 8005d50:	20000690 	.word	0x20000690

08005d54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d54:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8005d56:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <disk_initialize+0x24>)
 8005d58:	5c1b      	ldrb	r3, [r3, r0]
 8005d5a:	b953      	cbnz	r3, 8005d72 <disk_initialize+0x1e>
  { 
    disk.is_initialized[pdrv] = 1;
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <disk_initialize+0x24>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d62:	181a      	adds	r2, r3, r0
 8005d64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d68:	6843      	ldr	r3, [r0, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	7a10      	ldrb	r0, [r2, #8]
 8005d6e:	4798      	blx	r3
  }
  return stat;
}
 8005d70:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8005d72:	2000      	movs	r0, #0
 8005d74:	e7fc      	b.n	8005d70 <disk_initialize+0x1c>
 8005d76:	bf00      	nop
 8005d78:	20000690 	.word	0x20000690

08005d7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d7c:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d7e:	4c04      	ldr	r4, [pc, #16]	; (8005d90 <disk_read+0x14>)
 8005d80:	1825      	adds	r5, r4, r0
 8005d82:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005d86:	6860      	ldr	r0, [r4, #4]
 8005d88:	6884      	ldr	r4, [r0, #8]
 8005d8a:	7a28      	ldrb	r0, [r5, #8]
 8005d8c:	47a0      	blx	r4
  return res;
}
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20000690 	.word	0x20000690

08005d94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d94:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d96:	4c04      	ldr	r4, [pc, #16]	; (8005da8 <disk_write+0x14>)
 8005d98:	1825      	adds	r5, r4, r0
 8005d9a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005d9e:	6860      	ldr	r0, [r4, #4]
 8005da0:	68c4      	ldr	r4, [r0, #12]
 8005da2:	7a28      	ldrb	r0, [r5, #8]
 8005da4:	47a0      	blx	r4
  return res;
}
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	20000690 	.word	0x20000690

08005dac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005dac:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <disk_ioctl+0x14>)
 8005db0:	181c      	adds	r4, r3, r0
 8005db2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	7a20      	ldrb	r0, [r4, #8]
 8005dbc:	4798      	blx	r3
  return res;
}
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	20000690 	.word	0x20000690

08005dc4 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005dc4:	b13a      	cbz	r2, 8005dd6 <mem_cpy+0x12>
 8005dc6:	3801      	subs	r0, #1
 8005dc8:	188a      	adds	r2, r1, r2
		*d++ = *s++;
 8005dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dce:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	d1f9      	bne.n	8005dca <mem_cpy+0x6>
}
 8005dd6:	4770      	bx	lr

08005dd8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8005dd8:	b122      	cbz	r2, 8005de4 <mem_set+0xc>
 8005dda:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
 8005ddc:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
 8005de0:	4282      	cmp	r2, r0
 8005de2:	d1fb      	bne.n	8005ddc <mem_set+0x4>
}
 8005de4:	4770      	bx	lr
	...

08005de8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005de8:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8005dea:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <chk_lock+0xa4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	b32b      	cbz	r3, 8005e3c <chk_lock+0x54>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005df0:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <chk_lock+0x30>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005dfa:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 8005dfc:	4b23      	ldr	r3, [pc, #140]	; (8005e8c <chk_lock+0xa4>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	b373      	cbz	r3, 8005e60 <chk_lock+0x78>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005e02:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8005e06:	6824      	ldr	r4, [r4, #0]
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	d019      	beq.n	8005e40 <chk_lock+0x58>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e0c:	bb52      	cbnz	r2, 8005e64 <chk_lock+0x7c>
 8005e0e:	2902      	cmp	r1, #2
 8005e10:	bf0c      	ite	eq
 8005e12:	2000      	moveq	r0, #0
 8005e14:	2012      	movne	r0, #18
 8005e16:	e037      	b.n	8005e88 <chk_lock+0xa0>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005e18:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <chk_lock+0xa4>)
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	f241 0308 	movw	r3, #4104	; 0x1008
 8005e20:	58c3      	ldr	r3, [r0, r3]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d001      	beq.n	8005e2a <chk_lock+0x42>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e26:	2200      	movs	r2, #0
 8005e28:	e7e8      	b.n	8005dfc <chk_lock+0x14>
				Files[i].clu == dp->sclust &&
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <chk_lock+0xa4>)
 8005e2c:	891a      	ldrh	r2, [r3, #8]
 8005e2e:	f241 0306 	movw	r3, #4102	; 0x1006
 8005e32:	5ac3      	ldrh	r3, [r0, r3]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d019      	beq.n	8005e6c <chk_lock+0x84>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e38:	2200      	movs	r2, #0
 8005e3a:	e7df      	b.n	8005dfc <chk_lock+0x14>
			be = 1;
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	e7dd      	b.n	8005dfc <chk_lock+0x14>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <chk_lock+0xa4>)
 8005e42:	691c      	ldr	r4, [r3, #16]
 8005e44:	f241 0308 	movw	r3, #4104	; 0x1008
 8005e48:	58c3      	ldr	r3, [r0, r3]
 8005e4a:	429c      	cmp	r4, r3
 8005e4c:	d1de      	bne.n	8005e0c <chk_lock+0x24>
				Files[i].clu == dp->sclust &&
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <chk_lock+0xa4>)
 8005e50:	8a9c      	ldrh	r4, [r3, #20]
 8005e52:	f241 0306 	movw	r3, #4102	; 0x1006
 8005e56:	5ac3      	ldrh	r3, [r0, r3]
 8005e58:	429c      	cmp	r4, r3
 8005e5a:	d1d7      	bne.n	8005e0c <chk_lock+0x24>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	e006      	b.n	8005e6e <chk_lock+0x86>
			be = 1;
 8005e60:	2201      	movs	r2, #1
 8005e62:	e7d3      	b.n	8005e0c <chk_lock+0x24>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e64:	2000      	movs	r0, #0
 8005e66:	e00f      	b.n	8005e88 <chk_lock+0xa0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005e68:	2010      	movs	r0, #16
 8005e6a:	e00d      	b.n	8005e88 <chk_lock+0xa0>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e6c:	2200      	movs	r2, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	d1fa      	bne.n	8005e68 <chk_lock+0x80>
 8005e72:	0053      	lsls	r3, r2, #1
 8005e74:	441a      	add	r2, r3
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <chk_lock+0xa4>)
 8005e78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005e7c:	895b      	ldrh	r3, [r3, #10]
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	bf0c      	ite	eq
 8005e84:	2010      	moveq	r0, #16
 8005e86:	2000      	movne	r0, #0
}
 8005e88:	bc10      	pop	{r4}
 8005e8a:	4770      	bx	lr
 8005e8c:	20000474 	.word	0x20000474

08005e90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e90:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8005e92:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b32      	ldr	r3, [pc, #200]	; (8005f64 <inc_lock+0xd4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d00b      	beq.n	8005eb8 <inc_lock+0x28>
 8005ea0:	4c30      	ldr	r4, [pc, #192]	; (8005f64 <inc_lock+0xd4>)
 8005ea2:	68e4      	ldr	r4, [r4, #12]
 8005ea4:	4294      	cmp	r4, r2
 8005ea6:	d029      	beq.n	8005efc <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d039      	beq.n	8005f20 <inc_lock+0x90>
 8005eac:	4b2d      	ldr	r3, [pc, #180]	; (8005f64 <inc_lock+0xd4>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d033      	beq.n	8005f1c <inc_lock+0x8c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e01f      	b.n	8005ef8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005eb8:	4c2a      	ldr	r4, [pc, #168]	; (8005f64 <inc_lock+0xd4>)
 8005eba:	6865      	ldr	r5, [r4, #4]
 8005ebc:	f241 0408 	movw	r4, #4104	; 0x1008
 8005ec0:	5904      	ldr	r4, [r0, r4]
 8005ec2:	42a5      	cmp	r5, r4
 8005ec4:	d1ec      	bne.n	8005ea0 <inc_lock+0x10>
			Files[i].clu == dp->sclust &&
 8005ec6:	4c27      	ldr	r4, [pc, #156]	; (8005f64 <inc_lock+0xd4>)
 8005ec8:	8925      	ldrh	r5, [r4, #8]
 8005eca:	f241 0406 	movw	r4, #4102	; 0x1006
 8005ece:	5b04      	ldrh	r4, [r0, r4]
 8005ed0:	42a5      	cmp	r5, r4
 8005ed2:	d1e5      	bne.n	8005ea0 <inc_lock+0x10>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ed4:	2300      	movs	r3, #0
		Files[i].clu = dp->sclust;
		Files[i].idx = dp->index;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ed6:	2900      	cmp	r1, #0
 8005ed8:	d138      	bne.n	8005f4c <inc_lock+0xbc>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005eda:	005a      	lsls	r2, r3, #1
 8005edc:	18d1      	adds	r1, r2, r3
 8005ede:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <inc_lock+0xd4>)
 8005ee0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005ee4:	8950      	ldrh	r0, [r2, #10]
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	b280      	uxth	r0, r0
 8005eea:	005a      	lsls	r2, r3, #1
 8005eec:	18d1      	adds	r1, r2, r3
 8005eee:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <inc_lock+0xd4>)
 8005ef0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005ef4:	8150      	strh	r0, [r2, #10]

	return i + 1;
 8005ef6:	1c58      	adds	r0, r3, #1
}
 8005ef8:	bc70      	pop	{r4, r5, r6}
 8005efa:	4770      	bx	lr
		if (Files[i].fs == dp->fs &&
 8005efc:	4c19      	ldr	r4, [pc, #100]	; (8005f64 <inc_lock+0xd4>)
 8005efe:	6925      	ldr	r5, [r4, #16]
 8005f00:	f241 0408 	movw	r4, #4104	; 0x1008
 8005f04:	5904      	ldr	r4, [r0, r4]
 8005f06:	42a5      	cmp	r5, r4
 8005f08:	d1ce      	bne.n	8005ea8 <inc_lock+0x18>
			Files[i].clu == dp->sclust &&
 8005f0a:	4c16      	ldr	r4, [pc, #88]	; (8005f64 <inc_lock+0xd4>)
 8005f0c:	8aa5      	ldrh	r5, [r4, #20]
 8005f0e:	f241 0406 	movw	r4, #4102	; 0x1006
 8005f12:	5b04      	ldrh	r4, [r0, r4]
 8005f14:	42a5      	cmp	r5, r4
 8005f16:	d1c7      	bne.n	8005ea8 <inc_lock+0x18>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e7dc      	b.n	8005ed6 <inc_lock+0x46>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <inc_lock+0x92>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f20:	2300      	movs	r3, #0
		Files[i].fs = dp->fs;
 8005f22:	4e10      	ldr	r6, [pc, #64]	; (8005f64 <inc_lock+0xd4>)
 8005f24:	005c      	lsls	r4, r3, #1
 8005f26:	441c      	add	r4, r3
 8005f28:	00a4      	lsls	r4, r4, #2
 8005f2a:	1935      	adds	r5, r6, r4
 8005f2c:	5132      	str	r2, [r6, r4]
		Files[i].clu = dp->sclust;
 8005f2e:	f241 0208 	movw	r2, #4104	; 0x1008
 8005f32:	5882      	ldr	r2, [r0, r2]
 8005f34:	606a      	str	r2, [r5, #4]
		Files[i].idx = dp->index;
 8005f36:	f241 0206 	movw	r2, #4102	; 0x1006
 8005f3a:	5a82      	ldrh	r2, [r0, r2]
 8005f3c:	812a      	strh	r2, [r5, #8]
		Files[i].ctr = 0;
 8005f3e:	2200      	movs	r2, #0
 8005f40:	816a      	strh	r2, [r5, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005f42:	2900      	cmp	r1, #0
 8005f44:	d0c9      	beq.n	8005eda <inc_lock+0x4a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f4a:	e7ce      	b.n	8005eea <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005f4c:	005a      	lsls	r2, r3, #1
 8005f4e:	18d1      	adds	r1, r2, r3
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <inc_lock+0xd4>)
 8005f52:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005f56:	8952      	ldrh	r2, [r2, #10]
 8005f58:	b10a      	cbz	r2, 8005f5e <inc_lock+0xce>
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	e7cc      	b.n	8005ef8 <inc_lock+0x68>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f62:	e7c2      	b.n	8005eea <inc_lock+0x5a>
 8005f64:	20000474 	.word	0x20000474

08005f68 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005f68:	3801      	subs	r0, #1
 8005f6a:	2801      	cmp	r0, #1
 8005f6c:	d814      	bhi.n	8005f98 <dec_lock+0x30>
		n = Files[i].ctr;
 8005f6e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005f72:	4a11      	ldr	r2, [pc, #68]	; (8005fb8 <dec_lock+0x50>)
 8005f74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f78:	895a      	ldrh	r2, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8005f7a:	f422 7380 	bic.w	r3, r2, #256	; 0x100
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	b163      	cbz	r3, 8005f9c <dec_lock+0x34>
 8005f82:	3a01      	subs	r2, #1
 8005f84:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8005f86:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005f8a:	490b      	ldr	r1, [pc, #44]	; (8005fb8 <dec_lock+0x50>)
 8005f8c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005f90:	815a      	strh	r2, [r3, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005f92:	b152      	cbz	r2, 8005faa <dec_lock+0x42>
		res = FR_OK;
 8005f94:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 8005f96:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005f98:	2002      	movs	r0, #2
 8005f9a:	4770      	bx	lr
		Files[i].ctr = n;
 8005f9c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005fa0:	4a05      	ldr	r2, [pc, #20]	; (8005fb8 <dec_lock+0x50>)
 8005fa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	815a      	strh	r2, [r3, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005faa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005fae:	0083      	lsls	r3, r0, #2
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	4a01      	ldr	r2, [pc, #4]	; (8005fb8 <dec_lock+0x50>)
 8005fb4:	50d0      	str	r0, [r2, r3]
 8005fb6:	4770      	bx	lr
 8005fb8:	20000474 	.word	0x20000474

08005fbc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005fbc:	b410      	push	{r4}
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005fbe:	f241 0324 	movw	r3, #4132	; 0x1024
 8005fc2:	58c4      	ldr	r4, [r0, r3]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005fc4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8005fc8:	6800      	ldr	r0, [r0, #0]
 8005fca:	f241 030a 	movw	r3, #4106	; 0x100a
 8005fce:	5ac3      	ldrh	r3, [r0, r3]
 8005fd0:	fbb1 f1f3 	udiv	r1, r1, r3
 8005fd4:	f241 0302 	movw	r3, #4098	; 0x1002
 8005fd8:	5cc3      	ldrb	r3, [r0, r3]
 8005fda:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005fde:	6860      	ldr	r0, [r4, #4]
		if (!ncl) return 0;		/* End of table? (error) */
 8005fe0:	b150      	cbz	r0, 8005ff8 <clmt_clust+0x3c>
 8005fe2:	1d22      	adds	r2, r4, #4
		if (cl < ncl) break;	/* In this fragment? */
 8005fe4:	4281      	cmp	r1, r0
 8005fe6:	d305      	bcc.n	8005ff4 <clmt_clust+0x38>
		cl -= ncl; tbl++;		/* Next fragment */
 8005fe8:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005fea:	f852 0f08 	ldr.w	r0, [r2, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 8005fee:	b118      	cbz	r0, 8005ff8 <clmt_clust+0x3c>
		if (cl < ncl) break;	/* In this fragment? */
 8005ff0:	4288      	cmp	r0, r1
 8005ff2:	d9f9      	bls.n	8005fe8 <clmt_clust+0x2c>
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ff4:	6850      	ldr	r0, [r2, #4]
 8005ff6:	4408      	add	r0, r1
}
 8005ff8:	bc10      	pop	{r4}
 8005ffa:	4770      	bx	lr

08005ffc <ld_clust>:
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005ffc:	7eca      	ldrb	r2, [r1, #27]
 8005ffe:	7e8b      	ldrb	r3, [r1, #26]
 8006000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
 8006004:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8006008:	7802      	ldrb	r2, [r0, #0]
 800600a:	2a03      	cmp	r2, #3
 800600c:	d001      	beq.n	8006012 <ld_clust+0x16>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
 800600e:	4618      	mov	r0, r3
 8006010:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006012:	7d48      	ldrb	r0, [r1, #21]
 8006014:	7d0a      	ldrb	r2, [r1, #20]
 8006016:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800601a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
 800601e:	e7f6      	b.n	800600e <ld_clust+0x12>

08006020 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006020:	4602      	mov	r2, r0
 8006022:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8006026:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006028:	01c3      	lsls	r3, r0, #7
 800602a:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800602e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8006032:	4403      	add	r3, r0
 8006034:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006038:	428a      	cmp	r2, r1
 800603a:	d1f5      	bne.n	8006028 <sum_sfn+0x8>
	return sum;
}
 800603c:	4770      	bx	lr

0800603e <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800603e:	6801      	ldr	r1, [r0, #0]
 8006040:	b1e9      	cbz	r1, 800607e <get_ldnumber+0x40>
{
 8006042:	b410      	push	{r4}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006044:	780c      	ldrb	r4, [r1, #0]
 8006046:	2c1f      	cmp	r4, #31
 8006048:	d911      	bls.n	800606e <get_ldnumber+0x30>
 800604a:	2c3a      	cmp	r4, #58	; 0x3a
 800604c:	d020      	beq.n	8006090 <get_ldnumber+0x52>
 800604e:	460a      	mov	r2, r1
 8006050:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006054:	2b1f      	cmp	r3, #31
 8006056:	d90c      	bls.n	8006072 <get_ldnumber+0x34>
 8006058:	2b3a      	cmp	r3, #58	; 0x3a
 800605a:	d1f9      	bne.n	8006050 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800605c:	1c4b      	adds	r3, r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800605e:	429a      	cmp	r2, r3
 8006060:	d110      	bne.n	8006084 <get_ldnumber+0x46>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006062:	2c30      	cmp	r4, #48	; 0x30
 8006064:	d111      	bne.n	800608a <get_ldnumber+0x4c>
					vol = (int)i;
					*path = ++tt;
 8006066:	3102      	adds	r1, #2
 8006068:	6001      	str	r1, [r0, #0]
					vol = (int)i;
 800606a:	2000      	movs	r0, #0
 800606c:	e005      	b.n	800607a <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800606e:	460a      	mov	r2, r1
 8006070:	4623      	mov	r3, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006072:	2b3a      	cmp	r3, #58	; 0x3a
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006074:	bf18      	it	ne
 8006076:	2000      	movne	r0, #0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006078:	d0f0      	beq.n	800605c <get_ldnumber+0x1e>
#endif
	}
	return vol;
}
 800607a:	bc10      	pop	{r4}
 800607c:	4770      	bx	lr
	int vol = -1;
 800607e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006082:	4770      	bx	lr
	int vol = -1;
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	e7f7      	b.n	800607a <get_ldnumber+0x3c>
 800608a:	f04f 30ff 	mov.w	r0, #4294967295
 800608e:	e7f4      	b.n	800607a <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006090:	460a      	mov	r2, r1
 8006092:	e7e3      	b.n	800605c <get_ldnumber+0x1e>

08006094 <sync_window>:
{
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006098:	f241 0304 	movw	r3, #4100	; 0x1004
 800609c:	5cc3      	ldrb	r3, [r0, r3]
 800609e:	b913      	cbnz	r3, 80060a6 <sync_window+0x12>
	FRESULT res = FR_OK;
 80060a0:	2000      	movs	r0, #0
}
 80060a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a6:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80060a8:	f241 032c 	movw	r3, #4140	; 0x102c
 80060ac:	58c5      	ldr	r5, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80060ae:	4607      	mov	r7, r0
 80060b0:	2301      	movs	r3, #1
 80060b2:	462a      	mov	r2, r5
 80060b4:	4601      	mov	r1, r0
 80060b6:	f241 0001 	movw	r0, #4097	; 0x1001
 80060ba:	5c20      	ldrb	r0, [r4, r0]
 80060bc:	f7ff fe6a 	bl	8005d94 <disk_write>
 80060c0:	bb40      	cbnz	r0, 8006114 <sync_window+0x80>
			fs->wflag = 0;
 80060c2:	f241 0304 	movw	r3, #4100	; 0x1004
 80060c6:	2200      	movs	r2, #0
 80060c8:	54e2      	strb	r2, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80060ca:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1aeb      	subs	r3, r5, r3
 80060d2:	f241 0218 	movw	r2, #4120	; 0x1018
 80060d6:	58a2      	ldr	r2, [r4, r2]
 80060d8:	4293      	cmp	r3, r2
 80060da:	d21d      	bcs.n	8006118 <sync_window+0x84>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80060e0:	5ce6      	ldrb	r6, [r4, r3]
 80060e2:	2e01      	cmp	r6, #1
 80060e4:	d91a      	bls.n	800611c <sync_window+0x88>
					wsect += fs->fsize;
 80060e6:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
 80060ea:	f108 0818 	add.w	r8, r8, #24
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80060ee:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80060f2:	3401      	adds	r4, #1
 80060f4:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 80060f8:	f8d8 3000 	ldr.w	r3, [r8]
 80060fc:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80060fe:	464b      	mov	r3, r9
 8006100:	462a      	mov	r2, r5
 8006102:	4639      	mov	r1, r7
 8006104:	7820      	ldrb	r0, [r4, #0]
 8006106:	f7ff fe45 	bl	8005d94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800610a:	3e01      	subs	r6, #1
 800610c:	2e01      	cmp	r6, #1
 800610e:	d1f3      	bne.n	80060f8 <sync_window+0x64>
	FRESULT res = FR_OK;
 8006110:	2000      	movs	r0, #0
 8006112:	e7c6      	b.n	80060a2 <sync_window+0xe>
			res = FR_DISK_ERR;
 8006114:	2001      	movs	r0, #1
 8006116:	e7c4      	b.n	80060a2 <sync_window+0xe>
	FRESULT res = FR_OK;
 8006118:	2000      	movs	r0, #0
 800611a:	e7c2      	b.n	80060a2 <sync_window+0xe>
 800611c:	2000      	movs	r0, #0
 800611e:	e7c0      	b.n	80060a2 <sync_window+0xe>

08006120 <move_window>:
{
 8006120:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006122:	f241 032c 	movw	r3, #4140	; 0x102c
 8006126:	58c3      	ldr	r3, [r0, r3]
 8006128:	428b      	cmp	r3, r1
 800612a:	d016      	beq.n	800615a <move_window+0x3a>
 800612c:	4604      	mov	r4, r0
 800612e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8006130:	f7ff ffb0 	bl	8006094 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006134:	4606      	mov	r6, r0
 8006136:	b988      	cbnz	r0, 800615c <move_window+0x3c>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006138:	2301      	movs	r3, #1
 800613a:	462a      	mov	r2, r5
 800613c:	4621      	mov	r1, r4
 800613e:	f241 0001 	movw	r0, #4097	; 0x1001
 8006142:	5c20      	ldrb	r0, [r4, r0]
 8006144:	f7ff fe1a 	bl	8005d7c <disk_read>
 8006148:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800614a:	bf1c      	itt	ne
 800614c:	2601      	movne	r6, #1
 800614e:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8006152:	f241 032c 	movw	r3, #4140	; 0x102c
 8006156:	50e5      	str	r5, [r4, r3]
 8006158:	e000      	b.n	800615c <move_window+0x3c>
	FRESULT res = FR_OK;
 800615a:	2600      	movs	r6, #0
}
 800615c:	4630      	mov	r0, r6
 800615e:	bd70      	pop	{r4, r5, r6, pc}

08006160 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006160:	b510      	push	{r4, lr}
 8006162:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006164:	f241 0304 	movw	r3, #4100	; 0x1004
 8006168:	2200      	movs	r2, #0
 800616a:	54c2      	strb	r2, [r0, r3]
 800616c:	f241 032c 	movw	r3, #4140	; 0x102c
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
 8006174:	50c2      	str	r2, [r0, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006176:	f7ff ffd3 	bl	8006120 <move_window>
 800617a:	bb80      	cbnz	r0, 80061de <check_fs+0x7e>
		return 3;

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800617c:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8006180:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8006184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006188:	b21b      	sxth	r3, r3
 800618a:	4a18      	ldr	r2, [pc, #96]	; (80061ec <check_fs+0x8c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d128      	bne.n	80061e2 <check_fs+0x82>
		return 2;

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006190:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006194:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800619e:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80061a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061b0:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <check_fs+0x90>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d017      	beq.n	80061e6 <check_fs+0x86>
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80061b6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80061ba:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
 80061be:	0400      	lsls	r0, r0, #16
 80061c0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80061c4:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80061c8:	4318      	orrs	r0, r3
 80061ca:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80061ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80061d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80061d6:	1a80      	subs	r0, r0, r2
 80061d8:	bf18      	it	ne
 80061da:	2001      	movne	r0, #1
 80061dc:	e002      	b.n	80061e4 <check_fs+0x84>
 80061de:	2003      	movs	r0, #3
 80061e0:	e000      	b.n	80061e4 <check_fs+0x84>
		return 2;
 80061e2:	2002      	movs	r0, #2
		return 0;

	return 1;
}
 80061e4:	bd10      	pop	{r4, pc}
		return 0;
 80061e6:	2000      	movs	r0, #0
 80061e8:	e7fc      	b.n	80061e4 <check_fs+0x84>
 80061ea:	bf00      	nop
 80061ec:	ffffaa55 	.word	0xffffaa55
 80061f0:	00544146 	.word	0x00544146

080061f4 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80061f4:	b1f8      	cbz	r0, 8006236 <validate+0x42>
{
 80061f6:	b508      	push	{r3, lr}
 80061f8:	4602      	mov	r2, r0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80061fa:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	b1db      	cbz	r3, 800623a <validate+0x46>
 8006202:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8006206:	7809      	ldrb	r1, [r1, #0]
 8006208:	b1c9      	cbz	r1, 800623e <validate+0x4a>
 800620a:	f241 0106 	movw	r1, #4102	; 0x1006
 800620e:	5a59      	ldrh	r1, [r3, r1]
 8006210:	f241 0004 	movw	r0, #4100	; 0x1004
 8006214:	5a12      	ldrh	r2, [r2, r0]
 8006216:	4291      	cmp	r1, r2
 8006218:	d001      	beq.n	800621e <validate+0x2a>
		return FR_INVALID_OBJECT;
 800621a:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 800621c:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800621e:	f241 0201 	movw	r2, #4097	; 0x1001
 8006222:	5c98      	ldrb	r0, [r3, r2]
 8006224:	f7ff fd8a 	bl	8005d3c <disk_status>
 8006228:	f000 0001 	and.w	r0, r0, #1
		return FR_INVALID_OBJECT;
 800622c:	2800      	cmp	r0, #0
 800622e:	bf0c      	ite	eq
 8006230:	2000      	moveq	r0, #0
 8006232:	2009      	movne	r0, #9
 8006234:	e7f2      	b.n	800621c <validate+0x28>
 8006236:	2009      	movs	r0, #9
}
 8006238:	4770      	bx	lr
		return FR_INVALID_OBJECT;
 800623a:	2009      	movs	r0, #9
 800623c:	e7ee      	b.n	800621c <validate+0x28>
 800623e:	2009      	movs	r0, #9
 8006240:	e7ec      	b.n	800621c <validate+0x28>
	...

08006244 <find_volume>:
{
 8006244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	4606      	mov	r6, r0
 800624c:	4617      	mov	r7, r2
	*rfs = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 8006252:	4608      	mov	r0, r1
 8006254:	f7ff fef3 	bl	800603e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006258:	1e05      	subs	r5, r0, #0
 800625a:	f2c0 81ce 	blt.w	80065fa <find_volume+0x3b6>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800625e:	4bb2      	ldr	r3, [pc, #712]	; (8006528 <find_volume+0x2e4>)
 8006260:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006264:	2c00      	cmp	r4, #0
 8006266:	f000 81cc 	beq.w	8006602 <find_volume+0x3be>
	*rfs = fs;							/* Return pointer to the file system object */
 800626a:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800626c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b18b      	cbz	r3, 8006298 <find_volume+0x54>
		stat = disk_status(fs->drv);
 8006274:	f241 0301 	movw	r3, #4097	; 0x1001
 8006278:	5ce0      	ldrb	r0, [r4, r3]
 800627a:	f7ff fd5f 	bl	8005d3c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800627e:	f010 0f01 	tst.w	r0, #1
 8006282:	d109      	bne.n	8006298 <find_volume+0x54>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006284:	2f00      	cmp	r7, #0
 8006286:	f000 81be 	beq.w	8006606 <find_volume+0x3c2>
 800628a:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
 800628e:	2800      	cmp	r0, #0
 8006290:	bf0c      	ite	eq
 8006292:	2000      	moveq	r0, #0
 8006294:	200a      	movne	r0, #10
 8006296:	e1b1      	b.n	80065fc <find_volume+0x3b8>
	fs->fs_type = 0;					/* Clear the file system object */
 8006298:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80062a0:	b2e8      	uxtb	r0, r5
 80062a2:	f241 0301 	movw	r3, #4097	; 0x1001
 80062a6:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80062a8:	f7ff fd54 	bl	8005d54 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80062ac:	f010 0f01 	tst.w	r0, #1
 80062b0:	f040 81ab 	bne.w	800660a <find_volume+0x3c6>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80062b4:	b11f      	cbz	r7, 80062be <find_volume+0x7a>
 80062b6:	f010 0f04 	tst.w	r0, #4
 80062ba:	f040 81a8 	bne.w	800660e <find_volume+0x3ca>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80062be:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80062c2:	320a      	adds	r2, #10
 80062c4:	2102      	movs	r1, #2
 80062c6:	f241 0301 	movw	r3, #4097	; 0x1001
 80062ca:	5ce0      	ldrb	r0, [r4, r3]
 80062cc:	f7ff fd6e 	bl	8005dac <disk_ioctl>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f040 819e 	bne.w	8006612 <find_volume+0x3ce>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80062d6:	f241 030a 	movw	r3, #4106	; 0x100a
 80062da:	5ae3      	ldrh	r3, [r4, r3]
 80062dc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80062e6:	f200 8196 	bhi.w	8006616 <find_volume+0x3d2>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80062ea:	2100      	movs	r1, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7ff ff37 	bl	8006160 <check_fs>
 80062f2:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80062f4:	2801      	cmp	r0, #1
 80062f6:	f000 80e0 	beq.w	80064ba <find_volume+0x276>
	bsect = 0;
 80062fa:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	f000 818c 	beq.w	800661a <find_volume+0x3d6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 818b 	bne.w	800661e <find_volume+0x3da>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006308:	7b22      	ldrb	r2, [r4, #12]
 800630a:	7ae3      	ldrb	r3, [r4, #11]
 800630c:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
 8006310:	f241 030a 	movw	r3, #4106	; 0x100a
 8006314:	5ae3      	ldrh	r3, [r4, r3]
 8006316:	428b      	cmp	r3, r1
 8006318:	f040 8183 	bne.w	8006622 <find_volume+0x3de>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800631c:	7de3      	ldrb	r3, [r4, #23]
 800631e:	7da2      	ldrb	r2, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006320:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8006324:	d10d      	bne.n	8006342 <find_volume+0xfe>
 8006326:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800632a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800632e:	0412      	lsls	r2, r2, #16
 8006330:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8006334:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006338:	431a      	orrs	r2, r3
 800633a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800633e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
 8006342:	f241 0318 	movw	r3, #4120	; 0x1018
 8006346:	50e2      	str	r2, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006348:	7c20      	ldrb	r0, [r4, #16]
 800634a:	f241 0303 	movw	r3, #4099	; 0x1003
 800634e:	54e0      	strb	r0, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006350:	1e43      	subs	r3, r0, #1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	f200 8166 	bhi.w	8006626 <find_volume+0x3e2>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800635a:	f894 c00d 	ldrb.w	ip, [r4, #13]
 800635e:	f241 0302 	movw	r3, #4098	; 0x1002
 8006362:	f804 c003 	strb.w	ip, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006366:	f1bc 0f00 	cmp.w	ip, #0
 800636a:	f000 815e 	beq.w	800662a <find_volume+0x3e6>
 800636e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8006372:	ea13 0f0c 	tst.w	r3, ip
 8006376:	f040 815a 	bne.w	800662e <find_volume+0x3ea>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800637a:	7ca3      	ldrb	r3, [r4, #18]
 800637c:	7c67      	ldrb	r7, [r4, #17]
 800637e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8006382:	f241 0308 	movw	r3, #4104	; 0x1008
 8006386:	52e7      	strh	r7, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006388:	094d      	lsrs	r5, r1, #5
 800638a:	fbb7 f3f5 	udiv	r3, r7, r5
 800638e:	fb05 7313 	mls	r3, r5, r3, r7
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	f040 814c 	bne.w	8006632 <find_volume+0x3ee>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800639a:	f894 e014 	ldrb.w	lr, [r4, #20]
 800639e:	7ce3      	ldrb	r3, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80063a0:	ea53 230e 	orrs.w	r3, r3, lr, lsl #8
 80063a4:	d10e      	bne.n	80063c4 <find_volume+0x180>
 80063a6:	f894 e023 	ldrb.w	lr, [r4, #35]	; 0x23
 80063aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80063ae:	041b      	lsls	r3, r3, #16
 80063b0:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80063b4:	f894 e020 	ldrb.w	lr, [r4, #32]
 80063b8:	ea43 030e 	orr.w	r3, r3, lr
 80063bc:	f894 e021 	ldrb.w	lr, [r4, #33]	; 0x21
 80063c0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80063c4:	f894 800f 	ldrb.w	r8, [r4, #15]
 80063c8:	f894 e00e 	ldrb.w	lr, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80063cc:	ea5e 2e08 	orrs.w	lr, lr, r8, lsl #8
 80063d0:	f000 8131 	beq.w	8006636 <find_volume+0x3f2>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80063d4:	fb02 f000 	mul.w	r0, r2, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80063d8:	fbb7 f5f5 	udiv	r5, r7, r5
 80063dc:	4475      	add	r5, lr
 80063de:	4405      	add	r5, r0
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80063e0:	42ab      	cmp	r3, r5
 80063e2:	f0c0 812a 	bcc.w	800663a <find_volume+0x3f6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80063e6:	1b5b      	subs	r3, r3, r5
 80063e8:	fbb3 f3fc 	udiv	r3, r3, ip
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8126 	beq.w	800663e <find_volume+0x3fa>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80063f2:	f640 7cf5 	movw	ip, #4085	; 0xff5
 80063f6:	4563      	cmp	r3, ip
 80063f8:	bf94      	ite	ls
 80063fa:	f04f 0c01 	movls.w	ip, #1
 80063fe:	f04f 0c02 	movhi.w	ip, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006402:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 8006406:	4543      	cmp	r3, r8
 8006408:	f200 8123 	bhi.w	8006652 <find_volume+0x40e>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800640c:	3302      	adds	r3, #2
 800640e:	f241 0814 	movw	r8, #4116	; 0x1014
 8006412:	f844 3008 	str.w	r3, [r4, r8]
	fs->volbase = bsect;								/* Volume start sector */
 8006416:	f241 081c 	movw	r8, #4124	; 0x101c
 800641a:	f844 6008 	str.w	r6, [r4, r8]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800641e:	44b6      	add	lr, r6
 8006420:	f504 5881 	add.w	r8, r4, #4128	; 0x1020
 8006424:	f8c8 e000 	str.w	lr, [r8]
	fs->database = bsect + sysect;						/* Data start sector */
 8006428:	4435      	add	r5, r6
 800642a:	f241 0828 	movw	r8, #4136	; 0x1028
 800642e:	f844 5008 	str.w	r5, [r4, r8]
	if (fmt == FS_FAT32) {
 8006432:	f1bc 0f03 	cmp.w	ip, #3
 8006436:	f000 811d 	beq.w	8006674 <find_volume+0x430>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800643a:	2f00      	cmp	r7, #0
 800643c:	f000 8105 	beq.w	800664a <find_volume+0x406>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006440:	4470      	add	r0, lr
 8006442:	f241 0524 	movw	r5, #4132	; 0x1024
 8006446:	5160      	str	r0, [r4, r5]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006448:	f1bc 0f02 	cmp.w	ip, #2
 800644c:	bf0f      	iteee	eq
 800644e:	005b      	lsleq	r3, r3, #1
 8006450:	eb03 0043 	addne.w	r0, r3, r3, lsl #1
 8006454:	f003 0301 	andne.w	r3, r3, #1
 8006458:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800645c:	1e48      	subs	r0, r1, #1
 800645e:	4403      	add	r3, r0
 8006460:	fbb3 f3f1 	udiv	r3, r3, r1
 8006464:	429a      	cmp	r2, r3
 8006466:	f0c0 80f2 	bcc.w	800664e <find_volume+0x40a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	f241 0210 	movw	r2, #4112	; 0x1010
 8006472:	50a3      	str	r3, [r4, r2]
 8006474:	f241 020c 	movw	r2, #4108	; 0x100c
 8006478:	50a3      	str	r3, [r4, r2]
	fs->fsi_flag = 0x80;
 800647a:	f241 0305 	movw	r3, #4101	; 0x1005
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	54e2      	strb	r2, [r4, r3]
	fs->fs_type = fmt;	/* FAT sub-type */
 8006482:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8006486:	f883 c000 	strb.w	ip, [r3]
	fs->id = ++Fsid;	/* File system mount ID */
 800648a:	4a28      	ldr	r2, [pc, #160]	; (800652c <find_volume+0x2e8>)
 800648c:	8813      	ldrh	r3, [r2, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	8013      	strh	r3, [r2, #0]
 8006494:	f241 0206 	movw	r2, #4102	; 0x1006
 8006498:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800649a:	4b25      	ldr	r3, [pc, #148]	; (8006530 <find_volume+0x2ec>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429c      	cmp	r4, r3
 80064a0:	d102      	bne.n	80064a8 <find_volume+0x264>
 80064a2:	4b23      	ldr	r3, [pc, #140]	; (8006530 <find_volume+0x2ec>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	4b21      	ldr	r3, [pc, #132]	; (8006530 <find_volume+0x2ec>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	429c      	cmp	r4, r3
 80064ae:	d102      	bne.n	80064b6 <find_volume+0x272>
 80064b0:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <find_volume+0x2ec>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	60da      	str	r2, [r3, #12]
	return FR_OK;
 80064b6:	2000      	movs	r0, #0
 80064b8:	e0a0      	b.n	80065fc <find_volume+0x3b8>
 80064ba:	4623      	mov	r3, r4
 80064bc:	466d      	mov	r5, sp
 80064be:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80064c2:	4629      	mov	r1, r5
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80064c4:	2700      	movs	r7, #0
 80064c6:	e005      	b.n	80064d4 <find_volume+0x290>
 80064c8:	463a      	mov	r2, r7
 80064ca:	f841 2b04 	str.w	r2, [r1], #4
 80064ce:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80064d0:	4283      	cmp	r3, r0
 80064d2:	d012      	beq.n	80064fa <find_volume+0x2b6>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80064d4:	f893 21c2 	ldrb.w	r2, [r3, #450]	; 0x1c2
 80064d8:	2a00      	cmp	r2, #0
 80064da:	d0f5      	beq.n	80064c8 <find_volume+0x284>
 80064dc:	f893 61c9 	ldrb.w	r6, [r3, #457]	; 0x1c9
 80064e0:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
 80064e4:	0412      	lsls	r2, r2, #16
 80064e6:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 80064ea:	f893 61c6 	ldrb.w	r6, [r3, #454]	; 0x1c6
 80064ee:	4332      	orrs	r2, r6
 80064f0:	f893 61c7 	ldrb.w	r6, [r3, #455]	; 0x1c7
 80064f4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80064f8:	e7e7      	b.n	80064ca <find_volume+0x286>
 80064fa:	f105 0710 	add.w	r7, r5, #16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80064fe:	f04f 0802 	mov.w	r8, #2
 8006502:	e00a      	b.n	800651a <find_volume+0x2d6>
 8006504:	4631      	mov	r1, r6
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff fe2a 	bl	8006160 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800650c:	4603      	mov	r3, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f aefa 	beq.w	8006308 <find_volume+0xc4>
 8006514:	42af      	cmp	r7, r5
 8006516:	f43f aef1 	beq.w	80062fc <find_volume+0xb8>
			bsect = br[i];
 800651a:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800651e:	2e00      	cmp	r6, #0
 8006520:	d1f0      	bne.n	8006504 <find_volume+0x2c0>
 8006522:	4643      	mov	r3, r8
 8006524:	e7f6      	b.n	8006514 <find_volume+0x2d0>
 8006526:	bf00      	nop
 8006528:	20000470 	.word	0x20000470
 800652c:	2000048c 	.word	0x2000048c
 8006530:	20000474 	.word	0x20000474
		&& move_window(fs, bsect + 1) == FR_OK)
 8006534:	1c71      	adds	r1, r6, #1
 8006536:	4620      	mov	r0, r4
 8006538:	f7ff fdf2 	bl	8006120 <move_window>
 800653c:	2800      	cmp	r0, #0
 800653e:	d150      	bne.n	80065e2 <find_volume+0x39e>
		fs->fsi_flag = 0;
 8006540:	f241 0305 	movw	r3, #4101	; 0x1005
 8006544:	2200      	movs	r2, #0
 8006546:	54e2      	strb	r2, [r4, r3]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006548:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800654c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8006550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006554:	b21b      	sxth	r3, r3
 8006556:	4a61      	ldr	r2, [pc, #388]	; (80066dc <find_volume+0x498>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d145      	bne.n	80065e8 <find_volume+0x3a4>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800655c:	78e2      	ldrb	r2, [r4, #3]
 800655e:	78a3      	ldrb	r3, [r4, #2]
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006566:	7822      	ldrb	r2, [r4, #0]
 8006568:	4313      	orrs	r3, r2
 800656a:	7862      	ldrb	r2, [r4, #1]
 800656c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006570:	4a5b      	ldr	r2, [pc, #364]	; (80066e0 <find_volume+0x49c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d13b      	bne.n	80065ee <find_volume+0x3aa>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006576:	f894 21e7 	ldrb.w	r2, [r4, #487]	; 0x1e7
 800657a:	f894 31e6 	ldrb.w	r3, [r4, #486]	; 0x1e6
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006584:	f894 21e4 	ldrb.w	r2, [r4, #484]	; 0x1e4
 8006588:	4313      	orrs	r3, r2
 800658a:	f894 21e5 	ldrb.w	r2, [r4, #485]	; 0x1e5
 800658e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006592:	4a54      	ldr	r2, [pc, #336]	; (80066e4 <find_volume+0x4a0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d12d      	bne.n	80065f4 <find_volume+0x3b0>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006598:	f894 21eb 	ldrb.w	r2, [r4, #491]	; 0x1eb
 800659c:	f894 31ea 	ldrb.w	r3, [r4, #490]	; 0x1ea
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80065a6:	f894 21e8 	ldrb.w	r2, [r4, #488]	; 0x1e8
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f894 21e9 	ldrb.w	r2, [r4, #489]	; 0x1e9
 80065b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80065b4:	f241 0210 	movw	r2, #4112	; 0x1010
 80065b8:	50a3      	str	r3, [r4, r2]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80065ba:	f894 21ef 	ldrb.w	r2, [r4, #495]	; 0x1ef
 80065be:	f894 31ee 	ldrb.w	r3, [r4, #494]	; 0x1ee
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80065c8:	f894 21ec 	ldrb.w	r2, [r4, #492]	; 0x1ec
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f894 21ed 	ldrb.w	r2, [r4, #493]	; 0x1ed
 80065d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80065d6:	f241 020c 	movw	r2, #4108	; 0x100c
 80065da:	50a3      	str	r3, [r4, r2]
 80065dc:	f04f 0c03 	mov.w	ip, #3
 80065e0:	e74f      	b.n	8006482 <find_volume+0x23e>
 80065e2:	f04f 0c03 	mov.w	ip, #3
 80065e6:	e74c      	b.n	8006482 <find_volume+0x23e>
 80065e8:	f04f 0c03 	mov.w	ip, #3
 80065ec:	e749      	b.n	8006482 <find_volume+0x23e>
 80065ee:	f04f 0c03 	mov.w	ip, #3
 80065f2:	e746      	b.n	8006482 <find_volume+0x23e>
 80065f4:	f04f 0c03 	mov.w	ip, #3
 80065f8:	e743      	b.n	8006482 <find_volume+0x23e>
	if (vol < 0) return FR_INVALID_DRIVE;
 80065fa:	200b      	movs	r0, #11
}
 80065fc:	b004      	add	sp, #16
 80065fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006602:	200c      	movs	r0, #12
 8006604:	e7fa      	b.n	80065fc <find_volume+0x3b8>
			return FR_OK;				/* The file system object is valid */
 8006606:	2000      	movs	r0, #0
 8006608:	e7f8      	b.n	80065fc <find_volume+0x3b8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800660a:	2003      	movs	r0, #3
 800660c:	e7f6      	b.n	80065fc <find_volume+0x3b8>
		return FR_WRITE_PROTECTED;
 800660e:	200a      	movs	r0, #10
 8006610:	e7f4      	b.n	80065fc <find_volume+0x3b8>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006612:	2001      	movs	r0, #1
 8006614:	e7f2      	b.n	80065fc <find_volume+0x3b8>
 8006616:	2001      	movs	r0, #1
 8006618:	e7f0      	b.n	80065fc <find_volume+0x3b8>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800661a:	2001      	movs	r0, #1
 800661c:	e7ee      	b.n	80065fc <find_volume+0x3b8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800661e:	200d      	movs	r0, #13
 8006620:	e7ec      	b.n	80065fc <find_volume+0x3b8>
		return FR_NO_FILESYSTEM;
 8006622:	200d      	movs	r0, #13
 8006624:	e7ea      	b.n	80065fc <find_volume+0x3b8>
		return FR_NO_FILESYSTEM;
 8006626:	200d      	movs	r0, #13
 8006628:	e7e8      	b.n	80065fc <find_volume+0x3b8>
		return FR_NO_FILESYSTEM;
 800662a:	200d      	movs	r0, #13
 800662c:	e7e6      	b.n	80065fc <find_volume+0x3b8>
 800662e:	200d      	movs	r0, #13
 8006630:	e7e4      	b.n	80065fc <find_volume+0x3b8>
		return FR_NO_FILESYSTEM;
 8006632:	200d      	movs	r0, #13
 8006634:	e7e2      	b.n	80065fc <find_volume+0x3b8>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006636:	200d      	movs	r0, #13
 8006638:	e7e0      	b.n	80065fc <find_volume+0x3b8>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800663a:	200d      	movs	r0, #13
 800663c:	e7de      	b.n	80065fc <find_volume+0x3b8>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800663e:	200d      	movs	r0, #13
 8006640:	e7dc      	b.n	80065fc <find_volume+0x3b8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006642:	200d      	movs	r0, #13
 8006644:	e7da      	b.n	80065fc <find_volume+0x3b8>
		return FR_NO_FILESYSTEM;
 8006646:	200d      	movs	r0, #13
 8006648:	e7d8      	b.n	80065fc <find_volume+0x3b8>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800664a:	200d      	movs	r0, #13
 800664c:	e7d6      	b.n	80065fc <find_volume+0x3b8>
		return FR_NO_FILESYSTEM;
 800664e:	200d      	movs	r0, #13
 8006650:	e7d4      	b.n	80065fc <find_volume+0x3b8>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006652:	3302      	adds	r3, #2
 8006654:	f241 0014 	movw	r0, #4116	; 0x1014
 8006658:	5023      	str	r3, [r4, r0]
	fs->volbase = bsect;								/* Volume start sector */
 800665a:	f241 001c 	movw	r0, #4124	; 0x101c
 800665e:	5026      	str	r6, [r4, r0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006660:	f504 5c81 	add.w	ip, r4, #4128	; 0x1020
 8006664:	eb0e 0006 	add.w	r0, lr, r6
 8006668:	f8cc 0000 	str.w	r0, [ip]
	fs->database = bsect + sysect;						/* Data start sector */
 800666c:	4435      	add	r5, r6
 800666e:	f241 0028 	movw	r0, #4136	; 0x1028
 8006672:	5025      	str	r5, [r4, r0]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006674:	2f00      	cmp	r7, #0
 8006676:	d1e4      	bne.n	8006642 <find_volume+0x3fe>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006678:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
 800667c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8006680:	0400      	lsls	r0, r0, #16
 8006682:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8006686:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 800668a:	4328      	orrs	r0, r5
 800668c:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 8006690:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006694:	f241 0524 	movw	r5, #4132	; 0x1024
 8006698:	5160      	str	r0, [r4, r5]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800669a:	1e48      	subs	r0, r1, #1
 800669c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80066a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3ce      	bcc.n	8006646 <find_volume+0x402>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ac:	f241 0210 	movw	r2, #4112	; 0x1010
 80066b0:	50a3      	str	r3, [r4, r2]
 80066b2:	f241 020c 	movw	r2, #4108	; 0x100c
 80066b6:	50a3      	str	r3, [r4, r2]
	fs->fsi_flag = 0x80;
 80066b8:	f241 0305 	movw	r3, #4101	; 0x1005
 80066bc:	2280      	movs	r2, #128	; 0x80
 80066be:	54e2      	strb	r2, [r4, r3]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80066c0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80066c4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80066c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80066cc:	b21b      	sxth	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	f43f af30 	beq.w	8006534 <find_volume+0x2f0>
 80066d4:	f04f 0c03 	mov.w	ip, #3
 80066d8:	e6d3      	b.n	8006482 <find_volume+0x23e>
 80066da:	bf00      	nop
 80066dc:	ffffaa55 	.word	0xffffaa55
 80066e0:	41615252 	.word	0x41615252
 80066e4:	61417272 	.word	0x61417272

080066e8 <sync_fs>:
{
 80066e8:	b510      	push	{r4, lr}
 80066ea:	4604      	mov	r4, r0
	res = sync_window(fs);
 80066ec:	f7ff fcd2 	bl	8006094 <sync_window>
	if (res == FR_OK) {
 80066f0:	4603      	mov	r3, r0
 80066f2:	b970      	cbnz	r0, 8006712 <sync_fs+0x2a>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80066f4:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d00b      	beq.n	8006716 <sync_fs+0x2e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80066fe:	2200      	movs	r2, #0
 8006700:	4611      	mov	r1, r2
 8006702:	f241 0301 	movw	r3, #4097	; 0x1001
 8006706:	5ce0      	ldrb	r0, [r4, r3]
 8006708:	f7ff fb50 	bl	8005dac <disk_ioctl>
	res = sync_window(fs);
 800670c:	1c03      	adds	r3, r0, #0
 800670e:	bf18      	it	ne
 8006710:	2301      	movne	r3, #1
}
 8006712:	4618      	mov	r0, r3
 8006714:	bd10      	pop	{r4, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006716:	f241 0305 	movw	r3, #4101	; 0x1005
 800671a:	5ce3      	ldrb	r3, [r4, r3]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d1ee      	bne.n	80066fe <sync_fs+0x16>
			mem_set(fs->win.d8, 0, SS(fs));
 8006720:	f241 030a 	movw	r3, #4106	; 0x100a
 8006724:	5ae2      	ldrh	r2, [r4, r3]
 8006726:	2100      	movs	r1, #0
 8006728:	4620      	mov	r0, r4
 800672a:	f7ff fb55 	bl	8005dd8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800672e:	2355      	movs	r3, #85	; 0x55
 8006730:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
 8006734:	23aa      	movs	r3, #170	; 0xaa
 8006736:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800673a:	2352      	movs	r3, #82	; 0x52
 800673c:	7023      	strb	r3, [r4, #0]
 800673e:	7063      	strb	r3, [r4, #1]
 8006740:	2361      	movs	r3, #97	; 0x61
 8006742:	70a3      	strb	r3, [r4, #2]
 8006744:	2241      	movs	r2, #65	; 0x41
 8006746:	70e2      	strb	r2, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006748:	2172      	movs	r1, #114	; 0x72
 800674a:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
 800674e:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
 8006752:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
 8006756:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800675a:	f241 0310 	movw	r3, #4112	; 0x1010
 800675e:	58e3      	ldr	r3, [r4, r3]
 8006760:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 8006764:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006768:	f884 21e9 	strb.w	r2, [r4, #489]	; 0x1e9
 800676c:	0c1a      	lsrs	r2, r3, #16
 800676e:	f884 21ea 	strb.w	r2, [r4, #490]	; 0x1ea
 8006772:	0e1b      	lsrs	r3, r3, #24
 8006774:	f884 31eb 	strb.w	r3, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006778:	f241 030c 	movw	r3, #4108	; 0x100c
 800677c:	58e3      	ldr	r3, [r4, r3]
 800677e:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
 8006782:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006786:	f884 21ed 	strb.w	r2, [r4, #493]	; 0x1ed
 800678a:	0c1a      	lsrs	r2, r3, #16
 800678c:	f884 21ee 	strb.w	r2, [r4, #494]	; 0x1ee
 8006790:	0e1b      	lsrs	r3, r3, #24
 8006792:	f884 31ef 	strb.w	r3, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8006796:	f241 031c 	movw	r3, #4124	; 0x101c
 800679a:	58e2      	ldr	r2, [r4, r3]
 800679c:	3201      	adds	r2, #1
 800679e:	f241 032c 	movw	r3, #4140	; 0x102c
 80067a2:	50e2      	str	r2, [r4, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80067a4:	2301      	movs	r3, #1
 80067a6:	4621      	mov	r1, r4
 80067a8:	f241 0001 	movw	r0, #4097	; 0x1001
 80067ac:	5c20      	ldrb	r0, [r4, r0]
 80067ae:	f7ff faf1 	bl	8005d94 <disk_write>
			fs->fsi_flag = 0;
 80067b2:	f241 0305 	movw	r3, #4101	; 0x1005
 80067b6:	2200      	movs	r2, #0
 80067b8:	54e2      	strb	r2, [r4, r3]
 80067ba:	e7a0      	b.n	80066fe <sync_fs+0x16>

080067bc <clust2sect>:
	clst -= 2;
 80067bc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80067be:	f241 0314 	movw	r3, #4116	; 0x1014
 80067c2:	58c3      	ldr	r3, [r0, r3]
 80067c4:	3b02      	subs	r3, #2
 80067c6:	428b      	cmp	r3, r1
 80067c8:	d908      	bls.n	80067dc <clust2sect+0x20>
	return clst * fs->csize + fs->database;
 80067ca:	f241 0302 	movw	r3, #4098	; 0x1002
 80067ce:	5cc3      	ldrb	r3, [r0, r3]
 80067d0:	f241 0228 	movw	r2, #4136	; 0x1028
 80067d4:	5880      	ldr	r0, [r0, r2]
 80067d6:	fb01 0003 	mla	r0, r1, r3, r0
 80067da:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80067dc:	2000      	movs	r0, #0
}
 80067de:	4770      	bx	lr

080067e0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80067e0:	2901      	cmp	r1, #1
 80067e2:	f240 8087 	bls.w	80068f4 <get_fat+0x114>
{
 80067e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80067e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80067ec:	58c3      	ldr	r3, [r0, r3]
 80067ee:	428b      	cmp	r3, r1
 80067f0:	f240 8082 	bls.w	80068f8 <get_fat+0x118>
 80067f4:	460c      	mov	r4, r1
 80067f6:	4606      	mov	r6, r0
		switch (fs->fs_type) {
 80067f8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d039      	beq.n	8006876 <get_fat+0x96>
 8006802:	2b03      	cmp	r3, #3
 8006804:	d053      	beq.n	80068ae <get_fat+0xce>
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <get_fat+0x2e>
			val = 1;	/* Internal error */
 800680a:	2001      	movs	r0, #1
 800680c:	e075      	b.n	80068fa <get_fat+0x11a>
			bc = (UINT)clst; bc += bc / 2;
 800680e:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006812:	f241 030a 	movw	r3, #4106	; 0x100a
 8006816:	5ac3      	ldrh	r3, [r0, r3]
 8006818:	fbb5 f3f3 	udiv	r3, r5, r3
 800681c:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8006820:	6811      	ldr	r1, [r2, #0]
 8006822:	4419      	add	r1, r3
 8006824:	f7ff fc7c 	bl	8006120 <move_window>
 8006828:	2800      	cmp	r0, #0
 800682a:	d167      	bne.n	80068fc <get_fat+0x11c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800682c:	1c6f      	adds	r7, r5, #1
 800682e:	f241 030a 	movw	r3, #4106	; 0x100a
 8006832:	5af1      	ldrh	r1, [r6, r3]
 8006834:	fbb5 f3f1 	udiv	r3, r5, r1
 8006838:	fb01 5513 	mls	r5, r1, r3, r5
 800683c:	5d75      	ldrb	r5, [r6, r5]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800683e:	f506 5381 	add.w	r3, r6, #4128	; 0x1020
 8006842:	fbb7 f1f1 	udiv	r1, r7, r1
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4419      	add	r1, r3
 800684a:	4630      	mov	r0, r6
 800684c:	f7ff fc68 	bl	8006120 <move_window>
 8006850:	2800      	cmp	r0, #0
 8006852:	d156      	bne.n	8006902 <get_fat+0x122>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006854:	f241 030a 	movw	r3, #4106	; 0x100a
 8006858:	5af2      	ldrh	r2, [r6, r3]
 800685a:	fbb7 f3f2 	udiv	r3, r7, r2
 800685e:	fb02 7713 	mls	r7, r2, r3, r7
 8006862:	5df0      	ldrb	r0, [r6, r7]
 8006864:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006868:	f014 0f01 	tst.w	r4, #1
 800686c:	bf14      	ite	ne
 800686e:	0900      	lsrne	r0, r0, #4
 8006870:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 8006874:	e041      	b.n	80068fa <get_fat+0x11a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006876:	f241 030a 	movw	r3, #4106	; 0x100a
 800687a:	5ac3      	ldrh	r3, [r0, r3]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006882:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8006886:	6811      	ldr	r1, [r2, #0]
 8006888:	4419      	add	r1, r3
 800688a:	f7ff fc49 	bl	8006120 <move_window>
 800688e:	2800      	cmp	r0, #0
 8006890:	d13a      	bne.n	8006908 <get_fat+0x128>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006892:	0061      	lsls	r1, r4, #1
 8006894:	f241 030a 	movw	r3, #4106	; 0x100a
 8006898:	5af2      	ldrh	r2, [r6, r3]
 800689a:	fbb1 f3f2 	udiv	r3, r1, r2
 800689e:	fb02 1113 	mls	r1, r2, r3, r1
			val = LD_WORD(p);
 80068a2:	1873      	adds	r3, r6, r1
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	5c70      	ldrb	r0, [r6, r1]
 80068a8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 80068ac:	e025      	b.n	80068fa <get_fat+0x11a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80068ae:	f241 030a 	movw	r3, #4106	; 0x100a
 80068b2:	5ac3      	ldrh	r3, [r0, r3]
 80068b4:	089b      	lsrs	r3, r3, #2
 80068b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80068ba:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 80068be:	6811      	ldr	r1, [r2, #0]
 80068c0:	4419      	add	r1, r3
 80068c2:	f7ff fc2d 	bl	8006120 <move_window>
 80068c6:	bb10      	cbnz	r0, 800690e <get_fat+0x12e>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80068c8:	00a1      	lsls	r1, r4, #2
 80068ca:	f241 030a 	movw	r3, #4106	; 0x100a
 80068ce:	5af3      	ldrh	r3, [r6, r3]
 80068d0:	fbb1 f4f3 	udiv	r4, r1, r3
 80068d4:	fb03 1114 	mls	r1, r3, r4, r1
 80068d8:	1872      	adds	r2, r6, r1
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80068da:	78d0      	ldrb	r0, [r2, #3]
 80068dc:	7893      	ldrb	r3, [r2, #2]
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80068e4:	5c70      	ldrb	r0, [r6, r1]
 80068e6:	4318      	orrs	r0, r3
 80068e8:	7853      	ldrb	r3, [r2, #1]
 80068ea:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80068ee:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80068f2:	e002      	b.n	80068fa <get_fat+0x11a>
		val = 1;	/* Internal error */
 80068f4:	2001      	movs	r0, #1
}
 80068f6:	4770      	bx	lr
		val = 1;	/* Internal error */
 80068f8:	2001      	movs	r0, #1
}
 80068fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	e7fb      	b.n	80068fa <get_fat+0x11a>
 8006902:	f04f 30ff 	mov.w	r0, #4294967295
 8006906:	e7f8      	b.n	80068fa <get_fat+0x11a>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e7f5      	b.n	80068fa <get_fat+0x11a>
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8006912:	e7f2      	b.n	80068fa <get_fat+0x11a>

08006914 <dir_sdi>:
{
 8006914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006918:	4606      	mov	r6, r0
	dp->index = (WORD)idx;	/* Current index */
 800691a:	f241 0306 	movw	r3, #4102	; 0x1006
 800691e:	52c1      	strh	r1, [r0, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006920:	f241 0308 	movw	r3, #4104	; 0x1008
 8006924:	58c4      	ldr	r4, [r0, r3]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006926:	2c01      	cmp	r4, #1
 8006928:	d065      	beq.n	80069f6 <dir_sdi+0xe2>
 800692a:	460d      	mov	r5, r1
 800692c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f241 0214 	movw	r2, #4116	; 0x1014
 8006936:	589a      	ldr	r2, [r3, r2]
 8006938:	42a2      	cmp	r2, r4
 800693a:	d95e      	bls.n	80069fa <dir_sdi+0xe6>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800693c:	bb8c      	cbnz	r4, 80069a2 <dir_sdi+0x8e>
 800693e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006942:	7812      	ldrb	r2, [r2, #0]
 8006944:	2a03      	cmp	r2, #3
 8006946:	d026      	beq.n	8006996 <dir_sdi+0x82>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006948:	f241 0208 	movw	r2, #4104	; 0x1008
 800694c:	5a9a      	ldrh	r2, [r3, r2]
 800694e:	42aa      	cmp	r2, r5
 8006950:	d956      	bls.n	8006a00 <dir_sdi+0xec>
		sect = dp->fs->dirbase;
 8006952:	f241 0224 	movw	r2, #4132	; 0x1024
 8006956:	5898      	ldr	r0, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 8006958:	f241 030c 	movw	r3, #4108	; 0x100c
 800695c:	50f4      	str	r4, [r6, r3]
	if (!sect) return FR_INT_ERR;
 800695e:	2800      	cmp	r0, #0
 8006960:	d056      	beq.n	8006a10 <dir_sdi+0xfc>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006962:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	f241 010a 	movw	r1, #4106	; 0x100a
 800696c:	5a53      	ldrh	r3, [r2, r1]
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	fbb5 f3f3 	udiv	r3, r5, r3
 8006974:	4418      	add	r0, r3
 8006976:	f241 0310 	movw	r3, #4112	; 0x1010
 800697a:	50f0      	str	r0, [r6, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800697c:	5a53      	ldrh	r3, [r2, r1]
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	fbb5 f1f3 	udiv	r1, r5, r3
 8006984:	fb03 5511 	mls	r5, r3, r1, r5
 8006988:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 800698c:	f241 0314 	movw	r3, #4116	; 0x1014
 8006990:	50f2      	str	r2, [r6, r3]
	return FR_OK;
 8006992:	2000      	movs	r0, #0
 8006994:	e032      	b.n	80069fc <dir_sdi+0xe8>
		clst = dp->fs->dirbase;
 8006996:	f241 0224 	movw	r2, #4132	; 0x1024
 800699a:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800699c:	2a00      	cmp	r2, #0
 800699e:	d0d3      	beq.n	8006948 <dir_sdi+0x34>
		clst = dp->fs->dirbase;
 80069a0:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80069a2:	f241 020a 	movw	r2, #4106	; 0x100a
 80069a6:	5a9f      	ldrh	r7, [r3, r2]
 80069a8:	097a      	lsrs	r2, r7, #5
 80069aa:	f241 0102 	movw	r1, #4098	; 0x1002
 80069ae:	5c5f      	ldrb	r7, [r3, r1]
 80069b0:	fb07 f702 	mul.w	r7, r7, r2
		while (idx >= ic) {	/* Follow cluster chain */
 80069b4:	42bd      	cmp	r5, r7
 80069b6:	d317      	bcc.n	80069e8 <dir_sdi+0xd4>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80069b8:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80069bc:	f241 0914 	movw	r9, #4116	; 0x1014
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80069c0:	4621      	mov	r1, r4
 80069c2:	f8d8 0000 	ldr.w	r0, [r8]
 80069c6:	f7ff ff0b 	bl	80067e0 <get_fat>
 80069ca:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069d0:	d018      	beq.n	8006a04 <dir_sdi+0xf0>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80069d2:	2801      	cmp	r0, #1
 80069d4:	d918      	bls.n	8006a08 <dir_sdi+0xf4>
 80069d6:	f8d8 3000 	ldr.w	r3, [r8]
 80069da:	f853 3009 	ldr.w	r3, [r3, r9]
 80069de:	4283      	cmp	r3, r0
 80069e0:	d914      	bls.n	8006a0c <dir_sdi+0xf8>
			idx -= ic;
 80069e2:	1bed      	subs	r5, r5, r7
		while (idx >= ic) {	/* Follow cluster chain */
 80069e4:	42af      	cmp	r7, r5
 80069e6:	d9eb      	bls.n	80069c0 <dir_sdi+0xac>
		sect = clust2sect(dp->fs, clst);
 80069e8:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80069ec:	4621      	mov	r1, r4
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	f7ff fee4 	bl	80067bc <clust2sect>
 80069f4:	e7b0      	b.n	8006958 <dir_sdi+0x44>
		return FR_INT_ERR;
 80069f6:	2002      	movs	r0, #2
 80069f8:	e000      	b.n	80069fc <dir_sdi+0xe8>
 80069fa:	2002      	movs	r0, #2
}
 80069fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return FR_INT_ERR;
 8006a00:	2002      	movs	r0, #2
 8006a02:	e7fb      	b.n	80069fc <dir_sdi+0xe8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a04:	2001      	movs	r0, #1
 8006a06:	e7f9      	b.n	80069fc <dir_sdi+0xe8>
				return FR_INT_ERR;
 8006a08:	2002      	movs	r0, #2
 8006a0a:	e7f7      	b.n	80069fc <dir_sdi+0xe8>
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	e7f5      	b.n	80069fc <dir_sdi+0xe8>
	if (!sect) return FR_INT_ERR;
 8006a10:	2002      	movs	r0, #2
 8006a12:	e7f3      	b.n	80069fc <dir_sdi+0xe8>

08006a14 <put_fat>:
{
 8006a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a18:	2901      	cmp	r1, #1
 8006a1a:	f240 80c3 	bls.w	8006ba4 <put_fat+0x190>
 8006a1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8006a22:	58c3      	ldr	r3, [r0, r3]
 8006a24:	428b      	cmp	r3, r1
 8006a26:	f240 80bf 	bls.w	8006ba8 <put_fat+0x194>
 8006a2a:	4616      	mov	r6, r2
 8006a2c:	460d      	mov	r5, r1
 8006a2e:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8006a30:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d06a      	beq.n	8006b10 <put_fat+0xfc>
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	f000 8089 	beq.w	8006b52 <put_fat+0x13e>
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d001      	beq.n	8006a48 <put_fat+0x34>
			res = FR_INT_ERR;
 8006a44:	2702      	movs	r7, #2
 8006a46:	e0b0      	b.n	8006baa <put_fat+0x196>
			bc = (UINT)clst; bc += bc / 2;
 8006a48:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a4c:	f241 030a 	movw	r3, #4106	; 0x100a
 8006a50:	5ac3      	ldrh	r3, [r0, r3]
 8006a52:	fbb8 f3f3 	udiv	r3, r8, r3
 8006a56:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8006a5a:	6811      	ldr	r1, [r2, #0]
 8006a5c:	4419      	add	r1, r3
 8006a5e:	f7ff fb5f 	bl	8006120 <move_window>
			if (res != FR_OK) break;
 8006a62:	4607      	mov	r7, r0
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f040 80a0 	bne.w	8006baa <put_fat+0x196>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006a6a:	f108 0901 	add.w	r9, r8, #1
 8006a6e:	f241 030a 	movw	r3, #4106	; 0x100a
 8006a72:	5ae1      	ldrh	r1, [r4, r3]
 8006a74:	fbb8 f3f1 	udiv	r3, r8, r1
 8006a78:	fb01 8813 	mls	r8, r1, r3, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a7c:	f015 0f01 	tst.w	r5, #1
 8006a80:	d026      	beq.n	8006ad0 <put_fat+0xbc>
 8006a82:	f814 3008 	ldrb.w	r3, [r4, r8]
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8006a8e:	f804 3008 	strb.w	r3, [r4, r8]
			fs->wflag = 1;
 8006a92:	f241 0304 	movw	r3, #4100	; 0x1004
 8006a96:	2201      	movs	r2, #1
 8006a98:	54e2      	strb	r2, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a9a:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8006a9e:	fbb9 f1f1 	udiv	r1, r9, r1
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4419      	add	r1, r3
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7ff fb3a 	bl	8006120 <move_window>
			if (res != FR_OK) break;
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d17f      	bne.n	8006bb0 <put_fat+0x19c>
			p = &fs->win.d8[bc % SS(fs)];
 8006ab0:	f241 030a 	movw	r3, #4106	; 0x100a
 8006ab4:	5ae3      	ldrh	r3, [r4, r3]
 8006ab6:	fbb9 f2f3 	udiv	r2, r9, r3
 8006aba:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006abe:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8006ac2:	f804 2009 	strb.w	r2, [r4, r9]
			fs->wflag = 1;
 8006ac6:	f241 0304 	movw	r3, #4100	; 0x1004
 8006aca:	2201      	movs	r2, #1
 8006acc:	54e2      	strb	r2, [r4, r3]
			break;
 8006ace:	e06c      	b.n	8006baa <put_fat+0x196>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ad0:	f804 6008 	strb.w	r6, [r4, r8]
			fs->wflag = 1;
 8006ad4:	f241 0304 	movw	r3, #4100	; 0x1004
 8006ad8:	2201      	movs	r2, #1
 8006ada:	54e2      	strb	r2, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006adc:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8006ae0:	fbb9 f1f1 	udiv	r1, r9, r1
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4419      	add	r1, r3
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7ff fb19 	bl	8006120 <move_window>
			if (res != FR_OK) break;
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d160      	bne.n	8006bb4 <put_fat+0x1a0>
			p = &fs->win.d8[bc % SS(fs)];
 8006af2:	f241 030a 	movw	r3, #4106	; 0x100a
 8006af6:	5ae3      	ldrh	r3, [r4, r3]
 8006af8:	fbb9 f2f3 	udiv	r2, r9, r3
 8006afc:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b00:	f814 2009 	ldrb.w	r2, [r4, r9]
 8006b04:	f022 030f 	bic.w	r3, r2, #15
 8006b08:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	e7d8      	b.n	8006ac2 <put_fat+0xae>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b10:	f241 030a 	movw	r3, #4106	; 0x100a
 8006b14:	5ac3      	ldrh	r3, [r0, r3]
 8006b16:	085b      	lsrs	r3, r3, #1
 8006b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b1c:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8006b20:	6811      	ldr	r1, [r2, #0]
 8006b22:	4419      	add	r1, r3
 8006b24:	f7ff fafc 	bl	8006120 <move_window>
			if (res != FR_OK) break;
 8006b28:	4607      	mov	r7, r0
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d13d      	bne.n	8006baa <put_fat+0x196>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006b2e:	0069      	lsls	r1, r5, #1
 8006b30:	f241 030a 	movw	r3, #4106	; 0x100a
 8006b34:	5ae2      	ldrh	r2, [r4, r3]
 8006b36:	fbb1 f3f2 	udiv	r3, r1, r2
 8006b3a:	fb02 1113 	mls	r1, r2, r3, r1
			ST_WORD(p, (WORD)val);
 8006b3e:	5466      	strb	r6, [r4, r1]
 8006b40:	4421      	add	r1, r4
 8006b42:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8006b46:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 8006b48:	f241 0304 	movw	r3, #4100	; 0x1004
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	54e2      	strb	r2, [r4, r3]
			break;
 8006b50:	e02b      	b.n	8006baa <put_fat+0x196>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006b52:	f241 030a 	movw	r3, #4106	; 0x100a
 8006b56:	5ac3      	ldrh	r3, [r0, r3]
 8006b58:	089b      	lsrs	r3, r3, #2
 8006b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b5e:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8006b62:	6811      	ldr	r1, [r2, #0]
 8006b64:	4419      	add	r1, r3
 8006b66:	f7ff fadb 	bl	8006120 <move_window>
			if (res != FR_OK) break;
 8006b6a:	4607      	mov	r7, r0
 8006b6c:	b9e8      	cbnz	r0, 8006baa <put_fat+0x196>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006b6e:	00a9      	lsls	r1, r5, #2
 8006b70:	f241 030a 	movw	r3, #4106	; 0x100a
 8006b74:	5ae3      	ldrh	r3, [r4, r3]
 8006b76:	fbb1 f5f3 	udiv	r5, r1, r3
 8006b7a:	fb03 1115 	mls	r1, r3, r5, r1
 8006b7e:	1863      	adds	r3, r4, r1
			val |= LD_DWORD(p) & 0xF0000000;
 8006b80:	78da      	ldrb	r2, [r3, #3]
 8006b82:	0612      	lsls	r2, r2, #24
 8006b84:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006b88:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
 8006b8a:	5462      	strb	r2, [r4, r1]
 8006b8c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006b90:	7059      	strb	r1, [r3, #1]
 8006b92:	0c11      	lsrs	r1, r2, #16
 8006b94:	7099      	strb	r1, [r3, #2]
 8006b96:	0e12      	lsrs	r2, r2, #24
 8006b98:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
 8006b9a:	f241 0304 	movw	r3, #4100	; 0x1004
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	54e2      	strb	r2, [r4, r3]
			break;
 8006ba2:	e002      	b.n	8006baa <put_fat+0x196>
		res = FR_INT_ERR;
 8006ba4:	2702      	movs	r7, #2
 8006ba6:	e000      	b.n	8006baa <put_fat+0x196>
 8006ba8:	2702      	movs	r7, #2
}
 8006baa:	4638      	mov	r0, r7
 8006bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	e7fa      	b.n	8006baa <put_fat+0x196>
 8006bb4:	4607      	mov	r7, r0
	return res;
 8006bb6:	e7f8      	b.n	8006baa <put_fat+0x196>

08006bb8 <create_chain>:
{
 8006bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbc:	4606      	mov	r6, r0
	if (clst == 0) {		/* Create a new chain */
 8006bbe:	4688      	mov	r8, r1
 8006bc0:	b971      	cbnz	r1, 8006be0 <create_chain+0x28>
		scl = fs->last_clust;			/* Get suggested start point */
 8006bc2:	f241 030c 	movw	r3, #4108	; 0x100c
 8006bc6:	58c5      	ldr	r5, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006bc8:	b1cd      	cbz	r5, 8006bfe <create_chain+0x46>
 8006bca:	f241 0314 	movw	r3, #4116	; 0x1014
 8006bce:	58c3      	ldr	r3, [r0, r3]
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	bf98      	it	ls
 8006bd4:	2501      	movls	r5, #1
	ncl = scl;				/* Start cluster */
 8006bd6:	462c      	mov	r4, r5
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006bd8:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 8006bdc:	3714      	adds	r7, #20
 8006bde:	e01d      	b.n	8006c1c <create_chain+0x64>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006be0:	f7ff fdfe 	bl	80067e0 <get_fat>
 8006be4:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
 8006be6:	2801      	cmp	r0, #1
 8006be8:	d94e      	bls.n	8006c88 <create_chain+0xd0>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006bea:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bee:	d050      	beq.n	8006c92 <create_chain+0xda>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006bf0:	f241 0214 	movw	r2, #4116	; 0x1014
 8006bf4:	58b2      	ldr	r2, [r6, r2]
 8006bf6:	4282      	cmp	r2, r0
 8006bf8:	d84b      	bhi.n	8006c92 <create_chain+0xda>
		scl = clst;
 8006bfa:	4645      	mov	r5, r8
 8006bfc:	e7eb      	b.n	8006bd6 <create_chain+0x1e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006bfe:	2501      	movs	r5, #1
 8006c00:	e7e9      	b.n	8006bd6 <create_chain+0x1e>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006c02:	4621      	mov	r1, r4
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7ff fdeb 	bl	80067e0 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	b170      	cbz	r0, 8006c2c <create_chain+0x74>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006c0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c12:	d03e      	beq.n	8006c92 <create_chain+0xda>
 8006c14:	2801      	cmp	r0, #1
 8006c16:	d03c      	beq.n	8006c92 <create_chain+0xda>
		if (ncl == scl) return 0;		/* No free cluster */
 8006c18:	42ac      	cmp	r4, r5
 8006c1a:	d039      	beq.n	8006c90 <create_chain+0xd8>
		ncl++;							/* Next cluster */
 8006c1c:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d8ee      	bhi.n	8006c02 <create_chain+0x4a>
			if (ncl > scl) return 0;	/* No free cluster */
 8006c24:	2d01      	cmp	r5, #1
 8006c26:	d931      	bls.n	8006c8c <create_chain+0xd4>
			ncl = 2;
 8006c28:	2402      	movs	r4, #2
 8006c2a:	e7ea      	b.n	8006c02 <create_chain+0x4a>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006c2c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006c30:	4621      	mov	r1, r4
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff feee 	bl	8006a14 <put_fat>
	if (res == FR_OK && clst != 0) {
 8006c38:	4603      	mov	r3, r0
 8006c3a:	b9f8      	cbnz	r0, 8006c7c <create_chain+0xc4>
 8006c3c:	f1b8 0f00 	cmp.w	r8, #0
 8006c40:	d114      	bne.n	8006c6c <create_chain+0xb4>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006c42:	f241 030c 	movw	r3, #4108	; 0x100c
 8006c46:	50f4      	str	r4, [r6, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006c48:	f241 0310 	movw	r3, #4112	; 0x1010
 8006c4c:	58f3      	ldr	r3, [r6, r3]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d021      	beq.n	8006c98 <create_chain+0xe0>
			fs->free_clust--;
 8006c54:	3b01      	subs	r3, #1
 8006c56:	f241 0210 	movw	r2, #4112	; 0x1010
 8006c5a:	50b3      	str	r3, [r6, r2]
			fs->fsi_flag |= 1;
 8006c5c:	f241 0205 	movw	r2, #4101	; 0x1005
 8006c60:	5cb3      	ldrb	r3, [r6, r2]
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	54b3      	strb	r3, [r6, r2]
 8006c68:	4623      	mov	r3, r4
 8006c6a:	e012      	b.n	8006c92 <create_chain+0xda>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4641      	mov	r1, r8
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff fecf 	bl	8006a14 <put_fat>
	if (res == FR_OK) {
 8006c76:	4603      	mov	r3, r0
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d0e2      	beq.n	8006c42 <create_chain+0x8a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	bf0c      	ite	eq
 8006c80:	f04f 33ff 	moveq.w	r3, #4294967295
 8006c84:	2301      	movne	r3, #1
 8006c86:	e004      	b.n	8006c92 <create_chain+0xda>
		if (cs < 2) return 1;			/* Invalid value */
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e002      	b.n	8006c92 <create_chain+0xda>
			if (ncl > scl) return 0;	/* No free cluster */
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	e000      	b.n	8006c92 <create_chain+0xda>
		if (ncl == scl) return 0;		/* No free cluster */
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	4623      	mov	r3, r4
 8006c9a:	e7fa      	b.n	8006c92 <create_chain+0xda>

08006c9c <dir_next>:
{
 8006c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8006ca0:	f241 0306 	movw	r3, #4102	; 0x1006
 8006ca4:	5ac6      	ldrh	r6, [r0, r3]
 8006ca6:	1c75      	adds	r5, r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006ca8:	b2ab      	uxth	r3, r5
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80b3 	beq.w	8006e16 <dir_next+0x17a>
 8006cb0:	f241 0310 	movw	r3, #4112	; 0x1010
 8006cb4:	58c2      	ldr	r2, [r0, r3]
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	f000 80af 	beq.w	8006e1a <dir_next+0x17e>
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	4604      	mov	r4, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006cc0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	f241 030a 	movw	r3, #4106	; 0x100a
 8006cca:	5ac3      	ldrh	r3, [r0, r3]
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cd2:	fb03 5311 	mls	r3, r3, r1, r5
 8006cd6:	b96b      	cbnz	r3, 8006cf4 <dir_next+0x58>
		dp->sect++;					/* Next sector */
 8006cd8:	3201      	adds	r2, #1
 8006cda:	f241 0310 	movw	r3, #4112	; 0x1010
 8006cde:	50e2      	str	r2, [r4, r3]
		if (!dp->clust) {		/* Static table */
 8006ce0:	f241 030c 	movw	r3, #4108	; 0x100c
 8006ce4:	58e1      	ldr	r1, [r4, r3]
 8006ce6:	b9e1      	cbnz	r1, 8006d22 <dir_next+0x86>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006ce8:	f241 0308 	movw	r3, #4104	; 0x1008
 8006cec:	5ac3      	ldrh	r3, [r0, r3]
 8006cee:	42ab      	cmp	r3, r5
 8006cf0:	f240 8095 	bls.w	8006e1e <dir_next+0x182>
	dp->index = (WORD)i;	/* Current index */
 8006cf4:	1c73      	adds	r3, r6, #1
 8006cf6:	f241 0206 	movw	r2, #4102	; 0x1006
 8006cfa:	52a3      	strh	r3, [r4, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006cfc:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f241 020a 	movw	r2, #4106	; 0x100a
 8006d06:	5a9a      	ldrh	r2, [r3, r2]
 8006d08:	0952      	lsrs	r2, r2, #5
 8006d0a:	fbb5 f1f2 	udiv	r1, r5, r2
 8006d0e:	fb02 5511 	mls	r5, r2, r1, r5
 8006d12:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8006d16:	f241 0214 	movw	r2, #4116	; 0x1014
 8006d1a:	50a3      	str	r3, [r4, r2]
	return FR_OK;
 8006d1c:	2000      	movs	r0, #0
}
 8006d1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006d22:	f241 030a 	movw	r3, #4106	; 0x100a
 8006d26:	5ac3      	ldrh	r3, [r0, r3]
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	fbb5 f3f3 	udiv	r3, r5, r3
 8006d2e:	f241 0202 	movw	r2, #4098	; 0x1002
 8006d32:	f810 8002 	ldrb.w	r8, [r0, r2]
 8006d36:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d3a:	ea13 0808 	ands.w	r8, r3, r8
 8006d3e:	d1d9      	bne.n	8006cf4 <dir_next+0x58>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006d40:	f7ff fd4e 	bl	80067e0 <get_fat>
 8006d44:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
 8006d46:	2801      	cmp	r0, #1
 8006d48:	d96b      	bls.n	8006e22 <dir_next+0x186>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006d4a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d4e:	d06a      	beq.n	8006e26 <dir_next+0x18a>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006d50:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	f241 0314 	movw	r3, #4116	; 0x1014
 8006d5a:	58c3      	ldr	r3, [r0, r3]
 8006d5c:	454b      	cmp	r3, r9
 8006d5e:	d84c      	bhi.n	8006dfa <dir_next+0x15e>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	d062      	beq.n	8006e2a <dir_next+0x18e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006d64:	f241 030c 	movw	r3, #4108	; 0x100c
 8006d68:	58e1      	ldr	r1, [r4, r3]
 8006d6a:	f7ff ff25 	bl	8006bb8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d6e:	4681      	mov	r9, r0
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d05c      	beq.n	8006e2e <dir_next+0x192>
					if (clst == 1) return FR_INT_ERR;
 8006d74:	2801      	cmp	r0, #1
 8006d76:	d05c      	beq.n	8006e32 <dir_next+0x196>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006d78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d7c:	d05b      	beq.n	8006e36 <dir_next+0x19a>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006d7e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	f7ff f986 	bl	8006094 <sync_window>
 8006d88:	b108      	cbz	r0, 8006d8e <dir_next+0xf2>
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	e7c7      	b.n	8006d1e <dir_next+0x82>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006d8e:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 8006d92:	6838      	ldr	r0, [r7, #0]
 8006d94:	f241 030a 	movw	r3, #4106	; 0x100a
 8006d98:	5ac2      	ldrh	r2, [r0, r3]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f7ff f81c 	bl	8005dd8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006da0:	f8d7 a000 	ldr.w	sl, [r7]
 8006da4:	4649      	mov	r1, r9
 8006da6:	4650      	mov	r0, sl
 8006da8:	f7ff fd08 	bl	80067bc <clust2sect>
 8006dac:	f241 032c 	movw	r3, #4140	; 0x102c
 8006db0:	f84a 0003 	str.w	r0, [sl, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f241 0202 	movw	r2, #4098	; 0x1002
 8006dba:	5c9a      	ldrb	r2, [r3, r2]
 8006dbc:	b1ba      	cbz	r2, 8006dee <dir_next+0x152>
						dp->fs->wflag = 1;
 8006dbe:	f241 0b04 	movw	fp, #4100	; 0x1004
 8006dc2:	f04f 0a01 	mov.w	sl, #1
 8006dc6:	f803 a00b 	strb.w	sl, [r3, fp]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006dca:	6838      	ldr	r0, [r7, #0]
 8006dcc:	f7ff f962 	bl	8006094 <sync_window>
 8006dd0:	bb98      	cbnz	r0, 8006e3a <dir_next+0x19e>
						dp->fs->winsect++;
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	f241 022c 	movw	r2, #4140	; 0x102c
 8006dd8:	588b      	ldr	r3, [r1, r2]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	508b      	str	r3, [r1, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006dde:	f108 0801 	add.w	r8, r8, #1
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	f241 0202 	movw	r2, #4098	; 0x1002
 8006de8:	5c9a      	ldrb	r2, [r3, r2]
 8006dea:	4542      	cmp	r2, r8
 8006dec:	d8eb      	bhi.n	8006dc6 <dir_next+0x12a>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006dee:	f241 012c 	movw	r1, #4140	; 0x102c
 8006df2:	585a      	ldr	r2, [r3, r1]
 8006df4:	eba2 0208 	sub.w	r2, r2, r8
 8006df8:	505a      	str	r2, [r3, r1]
				dp->clust = clst;				/* Initialize data for new cluster */
 8006dfa:	f241 030c 	movw	r3, #4108	; 0x100c
 8006dfe:	f844 9003 	str.w	r9, [r4, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8006e02:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8006e06:	4649      	mov	r1, r9
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f7ff fcd7 	bl	80067bc <clust2sect>
 8006e0e:	f241 0310 	movw	r3, #4112	; 0x1010
 8006e12:	50e0      	str	r0, [r4, r3]
 8006e14:	e76e      	b.n	8006cf4 <dir_next+0x58>
		return FR_NO_FILE;
 8006e16:	2004      	movs	r0, #4
 8006e18:	e781      	b.n	8006d1e <dir_next+0x82>
 8006e1a:	2004      	movs	r0, #4
 8006e1c:	e77f      	b.n	8006d1e <dir_next+0x82>
				return FR_NO_FILE;
 8006e1e:	2004      	movs	r0, #4
 8006e20:	e77d      	b.n	8006d1e <dir_next+0x82>
				if (clst <= 1) return FR_INT_ERR;
 8006e22:	2002      	movs	r0, #2
 8006e24:	e77b      	b.n	8006d1e <dir_next+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006e26:	2001      	movs	r0, #1
 8006e28:	e779      	b.n	8006d1e <dir_next+0x82>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006e2a:	2004      	movs	r0, #4
 8006e2c:	e777      	b.n	8006d1e <dir_next+0x82>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e2e:	2007      	movs	r0, #7
 8006e30:	e775      	b.n	8006d1e <dir_next+0x82>
					if (clst == 1) return FR_INT_ERR;
 8006e32:	2002      	movs	r0, #2
 8006e34:	e773      	b.n	8006d1e <dir_next+0x82>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006e36:	2001      	movs	r0, #1
 8006e38:	e771      	b.n	8006d1e <dir_next+0x82>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e76f      	b.n	8006d1e <dir_next+0x82>
	...

08006e40 <dir_find>:
{
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	b085      	sub	sp, #20
 8006e46:	4606      	mov	r6, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e48:	2100      	movs	r1, #0
 8006e4a:	f7ff fd63 	bl	8006914 <dir_sdi>
	if (res != FR_OK) return res;
 8006e4e:	4682      	mov	sl, r0
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d16b      	bne.n	8006f2c <dir_find+0xec>
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006e54:	f241 0324 	movw	r3, #4132	; 0x1024
 8006e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e5c:	52f2      	strh	r2, [r6, r3]
 8006e5e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006e62:	46cb      	mov	fp, r9
		res = move_window(dp->fs, dp->sect);
 8006e64:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 8006e68:	3710      	adds	r7, #16
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006e6a:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
 8006e6e:	f108 0814 	add.w	r8, r8, #20
 8006e72:	e00d      	b.n	8006e90 <dir_find+0x50>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006e74:	f241 0324 	movw	r3, #4132	; 0x1024
 8006e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e7c:	52f2      	strh	r2, [r6, r3]
 8006e7e:	f04f 0bff 	mov.w	fp, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8006e82:	2100      	movs	r1, #0
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7ff ff09 	bl	8006c9c <dir_next>
	} while (res == FR_OK);
 8006e8a:	4682      	mov	sl, r0
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d14d      	bne.n	8006f2c <dir_find+0xec>
		res = move_window(dp->fs, dp->sect);
 8006e90:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	f7ff f942 	bl	8006120 <move_window>
		if (res != FR_OK) break;
 8006e9c:	4682      	mov	sl, r0
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d144      	bne.n	8006f2c <dir_find+0xec>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006ea2:	f8d8 4000 	ldr.w	r4, [r8]
		c = dir[DIR_Name];
 8006ea6:	7825      	ldrb	r5, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	f000 809a 	beq.w	8006fe2 <dir_find+0x1a2>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006eae:	2de5      	cmp	r5, #229	; 0xe5
 8006eb0:	d0e0      	beq.n	8006e74 <dir_find+0x34>
		a = dir[DIR_Attr] & AM_MASK;
 8006eb2:	7ae3      	ldrb	r3, [r4, #11]
 8006eb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006eb8:	f013 0f08 	tst.w	r3, #8
 8006ebc:	d01b      	beq.n	8006ef6 <dir_find+0xb6>
 8006ebe:	2a0f      	cmp	r2, #15
 8006ec0:	d1d8      	bne.n	8006e74 <dir_find+0x34>
				if (dp->lfn) {
 8006ec2:	f506 5381 	add.w	r3, r6, #4128	; 0x1020
 8006ec6:	f8d3 a000 	ldr.w	sl, [r3]
 8006eca:	f1ba 0f00 	cmp.w	sl, #0
 8006ece:	d0d8      	beq.n	8006e82 <dir_find+0x42>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006ed0:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ed4:	d02e      	beq.n	8006f34 <dir_find+0xf4>
						sum = dir[LDIR_Chksum];
 8006ed6:	f894 900d 	ldrb.w	r9, [r4, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006eda:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006ede:	f241 0306 	movw	r3, #4102	; 0x1006
 8006ee2:	5af2      	ldrh	r2, [r6, r3]
 8006ee4:	f241 0324 	movw	r3, #4132	; 0x1024
 8006ee8:	52f2      	strh	r2, [r6, r3]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006eea:	7b63      	ldrb	r3, [r4, #13]
 8006eec:	454b      	cmp	r3, r9
 8006eee:	d027      	beq.n	8006f40 <dir_find+0x100>
 8006ef0:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8006ef4:	e7c5      	b.n	8006e82 <dir_find+0x42>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006ef6:	2a0f      	cmp	r2, #15
 8006ef8:	d0e3      	beq.n	8006ec2 <dir_find+0x82>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006efa:	f1bb 0f00 	cmp.w	fp, #0
 8006efe:	d104      	bne.n	8006f0a <dir_find+0xca>
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7ff f88d 	bl	8006020 <sum_sfn>
 8006f06:	4548      	cmp	r0, r9
 8006f08:	d010      	beq.n	8006f2c <dir_find+0xec>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8006f0e:	58f3      	ldr	r3, [r6, r3]
 8006f10:	7ada      	ldrb	r2, [r3, #11]
 8006f12:	f012 0f01 	tst.w	r2, #1
 8006f16:	d15c      	bne.n	8006fd2 <dir_find+0x192>
 8006f18:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f24:	4291      	cmp	r1, r2
 8006f26:	d154      	bne.n	8006fd2 <dir_find+0x192>
 8006f28:	4284      	cmp	r4, r0
 8006f2a:	d1f7      	bne.n	8006f1c <dir_find+0xdc>
}
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	b005      	add	sp, #20
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006f34:	45ab      	cmp	fp, r5
 8006f36:	bf18      	it	ne
 8006f38:	f04f 0bff 	movne.w	fp, #255	; 0xff
 8006f3c:	d1a1      	bne.n	8006e82 <dir_find+0x42>
 8006f3e:	e7d4      	b.n	8006eea <dir_find+0xaa>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006f40:	f894 b000 	ldrb.w	fp, [r4]
 8006f44:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
 8006f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f4c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8006f50:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8006f54:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8006ffc <dir_find+0x1bc>
	s = 0; wc = 1;
 8006f58:	2101      	movs	r1, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006f5a:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f5e:	9503      	str	r5, [sp, #12]
 8006f60:	461d      	mov	r5, r3
 8006f62:	9602      	str	r6, [sp, #8]
 8006f64:	e010      	b.n	8006f88 <dir_find+0x148>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006f66:	f001 faef 	bl	8008548 <ff_wtoupper>
 8006f6a:	4681      	mov	r9, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006f6c:	2dfe      	cmp	r5, #254	; 0xfe
 8006f6e:	d83b      	bhi.n	8006fe8 <dir_find+0x1a8>
 8006f70:	1c6e      	adds	r6, r5, #1
 8006f72:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 8006f76:	f001 fae7 	bl	8008548 <ff_wtoupper>
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	4581      	cmp	r9, r0
 8006f7e:	d137      	bne.n	8006ff0 <dir_find+0x1b0>
 8006f80:	4635      	mov	r5, r6
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006f82:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <dir_find+0x1b8>)
 8006f84:	459b      	cmp	fp, r3
 8006f86:	d012      	beq.n	8006fae <dir_find+0x16e>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006f88:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8006f8c:	18e2      	adds	r2, r4, r3
 8006f8e:	7852      	ldrb	r2, [r2, #1]
 8006f90:	5ce3      	ldrb	r3, [r4, r3]
 8006f92:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
		if (wc) {	/* Last character has not been processed */
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d1e5      	bne.n	8006f66 <dir_find+0x126>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f9e:	4298      	cmp	r0, r3
 8006fa0:	d0ef      	beq.n	8006f82 <dir_find+0x142>
 8006fa2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006fa6:	9e02      	ldr	r6, [sp, #8]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006fa8:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8006fac:	e769      	b.n	8006e82 <dir_find+0x42>
 8006fae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	9d03      	ldr	r5, [sp, #12]
 8006fb6:	9e02      	ldr	r6, [sp, #8]
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006fb8:	7823      	ldrb	r3, [r4, #0]
 8006fba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006fbe:	d004      	beq.n	8006fca <dir_find+0x18a>
 8006fc0:	b119      	cbz	r1, 8006fca <dir_find+0x18a>
 8006fc2:	f83a 3012 	ldrh.w	r3, [sl, r2, lsl #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1ee      	bne.n	8006fa8 <dir_find+0x168>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006fca:	3d01      	subs	r5, #1
 8006fcc:	fa5f fb85 	uxtb.w	fp, r5
 8006fd0:	e757      	b.n	8006e82 <dir_find+0x42>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006fd2:	f241 0324 	movw	r3, #4132	; 0x1024
 8006fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fda:	52f2      	strh	r2, [r6, r3]
 8006fdc:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8006fe0:	e74f      	b.n	8006e82 <dir_find+0x42>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006fe2:	f04f 0a04 	mov.w	sl, #4
 8006fe6:	e7a1      	b.n	8006f2c <dir_find+0xec>
 8006fe8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006fec:	9e02      	ldr	r6, [sp, #8]
 8006fee:	e7db      	b.n	8006fa8 <dir_find+0x168>
 8006ff0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ff4:	9e02      	ldr	r6, [sp, #8]
 8006ff6:	e7d7      	b.n	8006fa8 <dir_find+0x168>
 8006ff8:	08009069 	.word	0x08009069
 8006ffc:	0800905c 	.word	0x0800905c

08007000 <follow_path>:
{
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	b085      	sub	sp, #20
 8007006:	4683      	mov	fp, r0
 8007008:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800700a:	780b      	ldrb	r3, [r1, #0]
 800700c:	2b2f      	cmp	r3, #47	; 0x2f
 800700e:	d001      	beq.n	8007014 <follow_path+0x14>
 8007010:	2b5c      	cmp	r3, #92	; 0x5c
 8007012:	d101      	bne.n	8007018 <follow_path+0x18>
		path++;
 8007014:	f108 0801 	add.w	r8, r8, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8007018:	f241 0308 	movw	r3, #4104	; 0x1008
 800701c:	2200      	movs	r2, #0
 800701e:	f84b 2003 	str.w	r2, [fp, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007022:	f898 3000 	ldrb.w	r3, [r8]
 8007026:	2b1f      	cmp	r3, #31
 8007028:	d909      	bls.n	800703e <follow_path+0x3e>
	lfn = dp->lfn;
 800702a:	f50b 5381 	add.w	r3, fp, #4128	; 0x1020
 800702e:	9303      	str	r3, [sp, #12]
	mem_set(dp->fn, ' ', 11);
 8007030:	f50b 5a80 	add.w	sl, fp, #4096	; 0x1000
 8007034:	f10a 0a18 	add.w	sl, sl, #24
 8007038:	f8cd 8004 	str.w	r8, [sp, #4]
 800703c:	e10b      	b.n	8007256 <follow_path+0x256>
		res = dir_sdi(dp, 0);
 800703e:	2100      	movs	r1, #0
 8007040:	4658      	mov	r0, fp
 8007042:	f7ff fc67 	bl	8006914 <dir_sdi>
 8007046:	4603      	mov	r3, r0
		dp->dir = 0;
 8007048:	f241 0214 	movw	r2, #4116	; 0x1014
 800704c:	2100      	movs	r1, #0
 800704e:	f84b 1002 	str.w	r1, [fp, r2]
 8007052:	e13b      	b.n	80072cc <follow_path+0x2cc>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007054:	461c      	mov	r4, r3
 8007056:	e000      	b.n	800705a <follow_path+0x5a>
 8007058:	461c      	mov	r4, r3
 800705a:	4627      	mov	r7, r4
 800705c:	4623      	mov	r3, r4
 800705e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007062:	282f      	cmp	r0, #47	; 0x2f
 8007064:	d0f6      	beq.n	8007054 <follow_path+0x54>
 8007066:	285c      	cmp	r0, #92	; 0x5c
 8007068:	d0f6      	beq.n	8007058 <follow_path+0x58>
	lfn = dp->lfn;
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	f8d3 9000 	ldr.w	r9, [r3]
		w = p[si++];					/* Get a character */
 8007070:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007072:	281f      	cmp	r0, #31
 8007074:	f240 8146 	bls.w	8007304 <follow_path+0x304>
 8007078:	282f      	cmp	r0, #47	; 0x2f
 800707a:	f000 8136 	beq.w	80072ea <follow_path+0x2ea>
 800707e:	285c      	cmp	r0, #92	; 0x5c
 8007080:	f000 813d 	beq.w	80072fe <follow_path+0x2fe>
 8007084:	f1a9 0602 	sub.w	r6, r9, #2
		w = p[si++];					/* Get a character */
 8007088:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800708a:	46a8      	mov	r8, r5
 800708c:	e015      	b.n	80070ba <follow_path+0xba>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800708e:	2b00      	cmp	r3, #0
 8007090:	f040 813e 	bne.w	8007310 <follow_path+0x310>
		lfn[di++] = w;					/* Store the Unicode character */
 8007094:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
 8007098:	1c6b      	adds	r3, r5, #1
 800709a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800709e:	281f      	cmp	r0, #31
 80070a0:	f240 8132 	bls.w	8007308 <follow_path+0x308>
 80070a4:	282f      	cmp	r0, #47	; 0x2f
 80070a6:	f000 8122 	beq.w	80072ee <follow_path+0x2ee>
 80070aa:	285c      	cmp	r0, #92	; 0x5c
 80070ac:	f000 811f 	beq.w	80072ee <follow_path+0x2ee>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80070b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b4:	f000 812c 	beq.w	8007310 <follow_path+0x310>
		w = p[si++];					/* Get a character */
 80070b8:	461d      	mov	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80070ba:	4641      	mov	r1, r8
 80070bc:	f001 fa24 	bl	8008508 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80070c0:	4602      	mov	r2, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f000 8124 	beq.w	8007310 <follow_path+0x310>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80070c8:	287f      	cmp	r0, #127	; 0x7f
 80070ca:	d8e3      	bhi.n	8007094 <follow_path+0x94>
	while (*str && *str != chr) str++;
 80070cc:	2822      	cmp	r0, #34	; 0x22
 80070ce:	f000 80fc 	beq.w	80072ca <follow_path+0x2ca>
 80070d2:	232a      	movs	r3, #42	; 0x2a
 80070d4:	4991      	ldr	r1, [pc, #580]	; (800731c <follow_path+0x31c>)
 80070d6:	b298      	uxth	r0, r3
 80070d8:	4290      	cmp	r0, r2
 80070da:	d0d8      	beq.n	800708e <follow_path+0x8e>
 80070dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f8      	bne.n	80070d6 <follow_path+0xd6>
 80070e4:	e7d6      	b.n	8007094 <follow_path+0x94>
	while (di) {						/* Strip trailing spaces and dots */
 80070e6:	3d01      	subs	r5, #1
 80070e8:	f000 80ef 	beq.w	80072ca <follow_path+0x2ca>
		w = lfn[di - 1];
 80070ec:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d0f8      	beq.n	80070e6 <follow_path+0xe6>
 80070f4:	2b2e      	cmp	r3, #46	; 0x2e
 80070f6:	d0f6      	beq.n	80070e6 <follow_path+0xe6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80070f8:	2d00      	cmp	r5, #0
 80070fa:	f000 8109 	beq.w	8007310 <follow_path+0x310>
	lfn[di] = 0;						/* LFN is created */
 80070fe:	006f      	lsls	r7, r5, #1
 8007100:	2600      	movs	r6, #0
 8007102:	f829 6015 	strh.w	r6, [r9, r5, lsl #1]
	mem_set(dp->fn, ' ', 11);
 8007106:	220b      	movs	r2, #11
 8007108:	2120      	movs	r1, #32
 800710a:	f8da 0000 	ldr.w	r0, [sl]
 800710e:	f7fe fe63 	bl	8005dd8 <mem_set>
 8007112:	f1a9 0102 	sub.w	r1, r9, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007116:	4633      	mov	r3, r6
 8007118:	e000      	b.n	800711c <follow_path+0x11c>
 800711a:	3301      	adds	r3, #1
 800711c:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8007120:	2a20      	cmp	r2, #32
 8007122:	d0fa      	beq.n	800711a <follow_path+0x11a>
 8007124:	2a2e      	cmp	r2, #46	; 0x2e
 8007126:	d0f8      	beq.n	800711a <follow_path+0x11a>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007128:	b10b      	cbz	r3, 800712e <follow_path+0x12e>
 800712a:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800712e:	3f02      	subs	r7, #2
 8007130:	eb09 0207 	add.w	r2, r9, r7
 8007134:	f839 1007 	ldrh.w	r1, [r9, r7]
 8007138:	292e      	cmp	r1, #46	; 0x2e
 800713a:	d005      	beq.n	8007148 <follow_path+0x148>
 800713c:	3d01      	subs	r5, #1
 800713e:	d003      	beq.n	8007148 <follow_path+0x148>
 8007140:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8007144:	292e      	cmp	r1, #46	; 0x2e
 8007146:	d1f9      	bne.n	800713c <follow_path+0x13c>
		w = lfn[si++];					/* Get an LFN character */
 8007148:	f04f 0808 	mov.w	r8, #8
 800714c:	2700      	movs	r7, #0
 800714e:	9702      	str	r7, [sp, #8]
 8007150:	1c5e      	adds	r6, r3, #1
 8007152:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8007156:	2800      	cmp	r0, #0
 8007158:	d03c      	beq.n	80071d4 <follow_path+0x1d4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800715a:	2820      	cmp	r0, #32
 800715c:	d02e      	beq.n	80071bc <follow_path+0x1bc>
 800715e:	282e      	cmp	r0, #46	; 0x2e
 8007160:	d01e      	beq.n	80071a0 <follow_path+0x1a0>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007162:	4547      	cmp	r7, r8
 8007164:	d22e      	bcs.n	80071c4 <follow_path+0x1c4>
 8007166:	42ae      	cmp	r6, r5
 8007168:	d01c      	beq.n	80071a4 <follow_path+0x1a4>
		if (w >= 0x80) {				/* Non ASCII character */
 800716a:	287f      	cmp	r0, #127	; 0x7f
 800716c:	f200 8081 	bhi.w	8007272 <follow_path+0x272>
	while (*str && *str != chr) str++;
 8007170:	282b      	cmp	r0, #43	; 0x2b
 8007172:	f000 808d 	beq.w	8007290 <follow_path+0x290>
 8007176:	232c      	movs	r3, #44	; 0x2c
 8007178:	4a69      	ldr	r2, [pc, #420]	; (8007320 <follow_path+0x320>)
 800717a:	b299      	uxth	r1, r3
 800717c:	4281      	cmp	r1, r0
 800717e:	f000 8090 	beq.w	80072a2 <follow_path+0x2a2>
 8007182:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f7      	bne.n	800717a <follow_path+0x17a>
				if (IsUpper(w)) {		/* ASCII large capital */
 800718a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b19      	cmp	r3, #25
 8007192:	f200 8089 	bhi.w	80072a8 <follow_path+0x2a8>
					b |= 2;
 8007196:	9b02      	ldr	r3, [sp, #8]
 8007198:	f043 0302 	orr.w	r3, r3, #2
 800719c:	9302      	str	r3, [sp, #8]
 800719e:	e07a      	b.n	8007296 <follow_path+0x296>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80071a0:	42ae      	cmp	r6, r5
 80071a2:	d10b      	bne.n	80071bc <follow_path+0x1bc>
			if (ni == 11) {				/* Long extension */
 80071a4:	f1b8 0f0b 	cmp.w	r8, #11
 80071a8:	d057      	beq.n	800725a <follow_path+0x25a>
			b <<= 2; continue;
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	462b      	mov	r3, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80071b4:	f04f 080b 	mov.w	r8, #11
 80071b8:	2708      	movs	r7, #8
 80071ba:	e7c9      	b.n	8007150 <follow_path+0x150>
			cf |= NS_LOSS | NS_LFN; continue;
 80071bc:	f044 0403 	orr.w	r4, r4, #3
		w = lfn[si++];					/* Get an LFN character */
 80071c0:	4633      	mov	r3, r6
 80071c2:	e7c5      	b.n	8007150 <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
 80071c4:	f1b8 0f0b 	cmp.w	r8, #11
 80071c8:	d047      	beq.n	800725a <follow_path+0x25a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80071ca:	42ae      	cmp	r6, r5
 80071cc:	d0ed      	beq.n	80071aa <follow_path+0x1aa>
 80071ce:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 80071d2:	d9ea      	bls.n	80071aa <follow_path+0x1aa>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80071d4:	f8da 3000 	ldr.w	r3, [sl]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	2ae5      	cmp	r2, #229	; 0xe5
 80071dc:	d046      	beq.n	800726c <follow_path+0x26c>
	if (ni == 8) b <<= 2;
 80071de:	f1b8 0f08 	cmp.w	r8, #8
 80071e2:	d06d      	beq.n	80072c0 <follow_path+0x2c0>
 80071e4:	9a02      	ldr	r2, [sp, #8]
 80071e6:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	d003      	beq.n	80071f6 <follow_path+0x1f6>
 80071ee:	f002 0203 	and.w	r2, r2, #3
 80071f2:	2a03      	cmp	r2, #3
 80071f4:	d101      	bne.n	80071fa <follow_path+0x1fa>
		cf |= NS_LFN;
 80071f6:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80071fa:	f014 0f02 	tst.w	r4, #2
 80071fe:	d10a      	bne.n	8007216 <follow_path+0x216>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007200:	9a02      	ldr	r2, [sp, #8]
 8007202:	f002 0203 	and.w	r2, r2, #3
 8007206:	2a01      	cmp	r2, #1
 8007208:	bf08      	it	eq
 800720a:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800720e:	2b04      	cmp	r3, #4
 8007210:	bf08      	it	eq
 8007212:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007216:	f8da 3000 	ldr.w	r3, [sl]
 800721a:	72dc      	strb	r4, [r3, #11]
			res = dir_find(dp);				/* Find an object with the sagment name */
 800721c:	4658      	mov	r0, fp
 800721e:	f7ff fe0f 	bl	8006e40 <dir_find>
			ns = dp->fn[NSFLAG];
 8007222:	f8da 3000 	ldr.w	r3, [sl]
 8007226:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007228:	4603      	mov	r3, r0
 800722a:	2800      	cmp	r0, #0
 800722c:	d152      	bne.n	80072d4 <follow_path+0x2d4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800722e:	f012 0f04 	tst.w	r2, #4
 8007232:	d14b      	bne.n	80072cc <follow_path+0x2cc>
			dir = dp->dir;						/* Follow the sub-directory */
 8007234:	f241 0314 	movw	r3, #4116	; 0x1014
 8007238:	f85b 1003 	ldr.w	r1, [fp, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800723c:	7acb      	ldrb	r3, [r1, #11]
 800723e:	f013 0f10 	tst.w	r3, #16
 8007242:	d050      	beq.n	80072e6 <follow_path+0x2e6>
			dp->sclust = ld_clust(dp->fs, dir);
 8007244:	f50b 5380 	add.w	r3, fp, #4096	; 0x1000
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	f7fe fed7 	bl	8005ffc <ld_clust>
 800724e:	f241 0308 	movw	r3, #4104	; 0x1008
 8007252:	f84b 0003 	str.w	r0, [fp, r3]
 8007256:	9c01      	ldr	r4, [sp, #4]
 8007258:	e6ff      	b.n	800705a <follow_path+0x5a>
				cf |= NS_LOSS | NS_LFN; break;
 800725a:	f044 0403 	orr.w	r4, r4, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800725e:	f8da 3000 	ldr.w	r3, [sl]
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	2ae5      	cmp	r2, #229	; 0xe5
 8007266:	d1bd      	bne.n	80071e4 <follow_path+0x1e4>
 8007268:	f04f 080b 	mov.w	r8, #11
 800726c:	2205      	movs	r2, #5
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	e7b5      	b.n	80071de <follow_path+0x1de>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007272:	2100      	movs	r1, #0
 8007274:	f001 f948 	bl	8008508 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007278:	4603      	mov	r3, r0
 800727a:	2800      	cmp	r0, #0
 800727c:	d04a      	beq.n	8007314 <follow_path+0x314>
 800727e:	4a29      	ldr	r2, [pc, #164]	; (8007324 <follow_path+0x324>)
 8007280:	4413      	add	r3, r2
 8007282:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
 8007286:	f044 0402 	orr.w	r4, r4, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800728a:	2800      	cmp	r0, #0
 800728c:	f47f af70 	bne.w	8007170 <follow_path+0x170>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007290:	f044 0403 	orr.w	r4, r4, #3
 8007294:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8007296:	f8da 3000 	ldr.w	r3, [sl]
 800729a:	55d8      	strb	r0, [r3, r7]
		w = lfn[si++];					/* Get an LFN character */
 800729c:	4633      	mov	r3, r6
		dp->fn[i++] = (BYTE)w;
 800729e:	3701      	adds	r7, #1
 80072a0:	e756      	b.n	8007150 <follow_path+0x150>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1f4      	bne.n	8007290 <follow_path+0x290>
 80072a6:	e770      	b.n	800718a <follow_path+0x18a>
					if (IsLower(w)) {	/* ASCII small capital */
 80072a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b19      	cmp	r3, #25
 80072b0:	d8f1      	bhi.n	8007296 <follow_path+0x296>
						b |= 1; w -= 0x20;
 80072b2:	9b02      	ldr	r3, [sp, #8]
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	9302      	str	r3, [sp, #8]
 80072ba:	3820      	subs	r0, #32
 80072bc:	b280      	uxth	r0, r0
 80072be:	e7ea      	b.n	8007296 <follow_path+0x296>
	if (ni == 8) b <<= 2;
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	9302      	str	r3, [sp, #8]
 80072c8:	e78c      	b.n	80071e4 <follow_path+0x1e4>
 80072ca:	2306      	movs	r3, #6
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	b005      	add	sp, #20
 80072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80072d4:	2804      	cmp	r0, #4
 80072d6:	d1f9      	bne.n	80072cc <follow_path+0x2cc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80072d8:	f002 0204 	and.w	r2, r2, #4
 80072dc:	2a00      	cmp	r2, #0
 80072de:	bf14      	ite	ne
 80072e0:	4603      	movne	r3, r0
 80072e2:	2305      	moveq	r3, #5
 80072e4:	e7f2      	b.n	80072cc <follow_path+0x2cc>
				res = FR_NO_PATH; break;
 80072e6:	2305      	movs	r3, #5
 80072e8:	e7f0      	b.n	80072cc <follow_path+0x2cc>
		w = p[si++];					/* Get a character */
 80072ea:	2301      	movs	r3, #1
	si = di = 0;
 80072ec:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
 80072ee:	18fb      	adds	r3, r7, r3
 80072f0:	9301      	str	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80072f2:	2400      	movs	r4, #0
	while (di) {						/* Strip trailing spaces and dots */
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	d0e8      	beq.n	80072ca <follow_path+0x2ca>
 80072f8:	eb09 0245 	add.w	r2, r9, r5, lsl #1
 80072fc:	e6f6      	b.n	80070ec <follow_path+0xec>
		w = p[si++];					/* Get a character */
 80072fe:	2301      	movs	r3, #1
	si = di = 0;
 8007300:	2500      	movs	r5, #0
 8007302:	e7f4      	b.n	80072ee <follow_path+0x2ee>
		w = p[si++];					/* Get a character */
 8007304:	2301      	movs	r3, #1
	si = di = 0;
 8007306:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	9301      	str	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800730c:	2404      	movs	r4, #4
 800730e:	e7f1      	b.n	80072f4 <follow_path+0x2f4>
				res = FR_NO_PATH; break;
 8007310:	2306      	movs	r3, #6
	return res;
 8007312:	e7db      	b.n	80072cc <follow_path+0x2cc>
			cf |= NS_LFN;				/* Force create LFN entry */
 8007314:	f044 0402 	orr.w	r4, r4, #2
 8007318:	e7ba      	b.n	8007290 <follow_path+0x290>
 800731a:	bf00      	nop
 800731c:	0800906d 	.word	0x0800906d
 8007320:	08009079 	.word	0x08009079
 8007324:	08008fdc 	.word	0x08008fdc

08007328 <dir_register>:
{
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b089      	sub	sp, #36	; 0x24
 800732e:	4604      	mov	r4, r0
	fn = dp->fn; lfn = dp->lfn;
 8007330:	f241 0318 	movw	r3, #4120	; 0x1018
 8007334:	58c6      	ldr	r6, [r0, r3]
 8007336:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
 800733a:	f8d3 9000 	ldr.w	r9, [r3]
	mem_cpy(sn, fn, 12);
 800733e:	220c      	movs	r2, #12
 8007340:	4631      	mov	r1, r6
 8007342:	a805      	add	r0, sp, #20
 8007344:	f7fe fd3e 	bl	8005dc4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007348:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800734c:	f013 0f01 	tst.w	r3, #1
 8007350:	d07b      	beq.n	800744a <dir_register+0x122>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8007352:	2300      	movs	r3, #0
 8007354:	72f3      	strb	r3, [r6, #11]
 8007356:	f504 5281 	add.w	r2, r4, #4128	; 0x1020
 800735a:	6013      	str	r3, [r2, #0]
	mem_cpy(dst, src, 11);
 800735c:	220b      	movs	r2, #11
 800735e:	a905      	add	r1, sp, #20
 8007360:	4630      	mov	r0, r6
 8007362:	f7fe fd2f 	bl	8005dc4 <mem_cpy>
		for (n = 1; n < 100; n++) {
 8007366:	2501      	movs	r5, #1
 8007368:	462b      	mov	r3, r5
	ns[i] = '~';
 800736a:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800736e:	2720      	movs	r7, #32
 8007370:	e000      	b.n	8007374 <dir_register+0x4c>
		for (n = 1; n < 100; n++) {
 8007372:	462b      	mov	r3, r5
 8007374:	f10d 0c13 	add.w	ip, sp, #19
 8007378:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 800737a:	f003 000f 	and.w	r0, r3, #15
 800737e:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007382:	2939      	cmp	r1, #57	; 0x39
 8007384:	bf88      	it	hi
 8007386:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 800738a:	3a01      	subs	r2, #1
 800738c:	f80c 1901 	strb.w	r1, [ip], #-1
	} while (seq);
 8007390:	091b      	lsrs	r3, r3, #4
 8007392:	d1f2      	bne.n	800737a <dir_register+0x52>
	ns[i] = '~';
 8007394:	a908      	add	r1, sp, #32
 8007396:	4411      	add	r1, r2
 8007398:	f801 ac14 	strb.w	sl, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800739c:	b15a      	cbz	r2, 80073b6 <dir_register+0x8e>
 800739e:	7831      	ldrb	r1, [r6, #0]
 80073a0:	2920      	cmp	r1, #32
 80073a2:	d00b      	beq.n	80073bc <dir_register+0x94>
 80073a4:	4631      	mov	r1, r6
 80073a6:	3301      	adds	r3, #1
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d006      	beq.n	80073ba <dir_register+0x92>
 80073ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073b0:	2820      	cmp	r0, #32
 80073b2:	d1f8      	bne.n	80073a6 <dir_register+0x7e>
 80073b4:	e002      	b.n	80073bc <dir_register+0x94>
 80073b6:	4613      	mov	r3, r2
 80073b8:	e000      	b.n	80073bc <dir_register+0x94>
 80073ba:	4613      	mov	r3, r2
 80073bc:	1e59      	subs	r1, r3, #1
 80073be:	4431      	add	r1, r6
 80073c0:	e005      	b.n	80073ce <dir_register+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80073c2:	4638      	mov	r0, r7
 80073c4:	3301      	adds	r3, #1
 80073c6:	f801 0f01 	strb.w	r0, [r1, #1]!
	} while (j < 8);
 80073ca:	2b07      	cmp	r3, #7
 80073cc:	d807      	bhi.n	80073de <dir_register+0xb6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80073ce:	2a07      	cmp	r2, #7
 80073d0:	d8f7      	bhi.n	80073c2 <dir_register+0x9a>
 80073d2:	a808      	add	r0, sp, #32
 80073d4:	4410      	add	r0, r2
 80073d6:	f810 0c14 	ldrb.w	r0, [r0, #-20]
 80073da:	3201      	adds	r2, #1
 80073dc:	e7f2      	b.n	80073c4 <dir_register+0x9c>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80073de:	4620      	mov	r0, r4
 80073e0:	f7ff fd2e 	bl	8006e40 <dir_find>
			if (res != FR_OK) break;
 80073e4:	4680      	mov	r8, r0
 80073e6:	bb18      	cbnz	r0, 8007430 <dir_register+0x108>
		for (n = 1; n < 100; n++) {
 80073e8:	3501      	adds	r5, #1
 80073ea:	2d64      	cmp	r5, #100	; 0x64
 80073ec:	d01d      	beq.n	800742a <dir_register+0x102>
	mem_cpy(dst, src, 11);
 80073ee:	220b      	movs	r2, #11
 80073f0:	a905      	add	r1, sp, #20
 80073f2:	4630      	mov	r0, r6
 80073f4:	f7fe fce6 	bl	8005dc4 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80073f8:	2d05      	cmp	r5, #5
 80073fa:	d9ba      	bls.n	8007372 <dir_register+0x4a>
 80073fc:	f1a9 0c02 	sub.w	ip, r9, #2
		for (n = 1; n < 100; n++) {
 8007400:	462b      	mov	r3, r5
		while (*lfn) {	/* Create a CRC */
 8007402:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 8007406:	2a00      	cmp	r2, #0
 8007408:	d0b4      	beq.n	8007374 <dir_register+0x4c>
 800740a:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 800740c:	f002 0001 	and.w	r0, r2, #1
 8007410:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				wc >>= 1;
 8007414:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007416:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800741a:	bf1c      	itt	ne
 800741c:	f483 3388 	eorne.w	r3, r3, #69632	; 0x11000
 8007420:	f083 0321 	eorne.w	r3, r3, #33	; 0x21
			for (i = 0; i < 16; i++) {
 8007424:	3901      	subs	r1, #1
 8007426:	d1f1      	bne.n	800740c <dir_register+0xe4>
 8007428:	e7eb      	b.n	8007402 <dir_register+0xda>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800742a:	f04f 0807 	mov.w	r8, #7
 800742e:	e0d4      	b.n	80075da <dir_register+0x2b2>
 8007430:	2d64      	cmp	r5, #100	; 0x64
 8007432:	f000 80ae 	beq.w	8007592 <dir_register+0x26a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007436:	2804      	cmp	r0, #4
 8007438:	f040 80cf 	bne.w	80075da <dir_register+0x2b2>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800743c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8007440:	72f3      	strb	r3, [r6, #11]
 8007442:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8007446:	f8c3 9000 	str.w	r9, [r3]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800744a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800744e:	f013 0f02 	tst.w	r3, #2
 8007452:	d021      	beq.n	8007498 <dir_register+0x170>
		for (n = 0; lfn[n]; n++) ;
 8007454:	f8b9 3000 	ldrh.w	r3, [r9]
 8007458:	b1e3      	cbz	r3, 8007494 <dir_register+0x16c>
 800745a:	2300      	movs	r3, #0
 800745c:	3301      	adds	r3, #1
 800745e:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8007462:	2a00      	cmp	r2, #0
 8007464:	d1fa      	bne.n	800745c <dir_register+0x134>
		nent = (n + 25) / 13;
 8007466:	f103 0519 	add.w	r5, r3, #25
 800746a:	4b73      	ldr	r3, [pc, #460]	; (8007638 <dir_register+0x310>)
 800746c:	fba3 3505 	umull	r3, r5, r3, r5
 8007470:	08ad      	lsrs	r5, r5, #2
	res = dir_sdi(dp, 0);
 8007472:	2100      	movs	r1, #0
 8007474:	4620      	mov	r0, r4
 8007476:	f7ff fa4d 	bl	8006914 <dir_sdi>
	if (res == FR_OK) {
 800747a:	4680      	mov	r8, r0
 800747c:	2800      	cmp	r0, #0
 800747e:	f040 80a7 	bne.w	80075d0 <dir_register+0x2a8>
		n = 0;
 8007482:	2600      	movs	r6, #0
			res = move_window(dp->fs, dp->sect);
 8007484:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 8007488:	3710      	adds	r7, #16
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800748a:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
 800748e:	f109 0914 	add.w	r9, r9, #20
 8007492:	e00f      	b.n	80074b4 <dir_register+0x18c>
		for (n = 0; lfn[n]; n++) ;
 8007494:	2300      	movs	r3, #0
 8007496:	e7e6      	b.n	8007466 <dir_register+0x13e>
		nent = 1;
 8007498:	2501      	movs	r5, #1
 800749a:	e7ea      	b.n	8007472 <dir_register+0x14a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800749c:	3601      	adds	r6, #1
 800749e:	42b5      	cmp	r5, r6
 80074a0:	f000 809f 	beq.w	80075e2 <dir_register+0x2ba>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80074a4:	2101      	movs	r1, #1
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7ff fbf8 	bl	8006c9c <dir_next>
		} while (res == FR_OK);
 80074ac:	4680      	mov	r8, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f040 808e 	bne.w	80075d0 <dir_register+0x2a8>
			res = move_window(dp->fs, dp->sect);
 80074b4:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	f7fe fe30 	bl	8006120 <move_window>
			if (res != FR_OK) break;
 80074c0:	4680      	mov	r8, r0
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f040 8084 	bne.w	80075d0 <dir_register+0x2a8>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80074c8:	f8d9 3000 	ldr.w	r3, [r9]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2be5      	cmp	r3, #229	; 0xe5
 80074d0:	d0e4      	beq.n	800749c <dir_register+0x174>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0e2      	beq.n	800749c <dir_register+0x174>
				n = 0;					/* Not a blank entry. Restart to search */
 80074d6:	2600      	movs	r6, #0
 80074d8:	e7e4      	b.n	80074a4 <dir_register+0x17c>
		res = dir_sdi(dp, dp->index - nent);
 80074da:	f241 0306 	movw	r3, #4102	; 0x1006
 80074de:	5ae1      	ldrh	r1, [r4, r3]
 80074e0:	1b49      	subs	r1, r1, r5
 80074e2:	4620      	mov	r0, r4
 80074e4:	f7ff fa16 	bl	8006914 <dir_sdi>
		if (res == FR_OK) {
 80074e8:	4680      	mov	r8, r0
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d175      	bne.n	80075da <dir_register+0x2b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80074ee:	f241 0318 	movw	r3, #4120	; 0x1018
 80074f2:	58e0      	ldr	r0, [r4, r3]
 80074f4:	f7fe fd94 	bl	8006020 <sum_sfn>
 80074f8:	9000      	str	r0, [sp, #0]
				res = move_window(dp->fs, dp->sect);
 80074fa:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 80074fe:	3710      	adds	r7, #16
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007500:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007504:	3314      	adds	r3, #20
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	e01c      	b.n	8007544 <dir_register+0x21c>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800750a:	4661      	mov	r1, ip
 800750c:	e04b      	b.n	80075a6 <dir_register+0x27e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800750e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007512:	4293      	cmp	r3, r2
 8007514:	d002      	beq.n	800751c <dir_register+0x1f4>
 8007516:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
 800751a:	b90b      	cbnz	r3, 8007520 <dir_register+0x1f8>
 800751c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007520:	f880 a000 	strb.w	sl, [r0]
				dp->fs->wflag = 1;
 8007524:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	f241 0304 	movw	r3, #4100	; 0x1004
 800752e:	2101      	movs	r1, #1
 8007530:	54d1      	strb	r1, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8007532:	2100      	movs	r1, #0
 8007534:	4620      	mov	r0, r4
 8007536:	f7ff fbb1 	bl	8006c9c <dir_next>
			} while (res == FR_OK && --nent);
 800753a:	4680      	mov	r8, r0
 800753c:	2800      	cmp	r0, #0
 800753e:	d14c      	bne.n	80075da <dir_register+0x2b2>
 8007540:	3d01      	subs	r5, #1
 8007542:	d051      	beq.n	80075e8 <dir_register+0x2c0>
				res = move_window(dp->fs, dp->sect);
 8007544:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	f7fe fde8 	bl	8006120 <move_window>
				if (res != FR_OK) break;
 8007550:	4680      	mov	r8, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d141      	bne.n	80075da <dir_register+0x2b2>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007556:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800755a:	f8d3 8000 	ldr.w	r8, [r3]
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	fa5f fa85 	uxtb.w	sl, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800756a:	230f      	movs	r3, #15
 800756c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8007572:	7683      	strb	r3, [r0, #26]
 8007574:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007576:	f10a 31ff 	add.w	r1, sl, #4294967295
 800757a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800757e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007582:	4a2e      	ldr	r2, [pc, #184]	; (800763c <dir_register+0x314>)
 8007584:	f102 0e0d 	add.w	lr, r2, #13
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007588:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800758c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007590:	e00c      	b.n	80075ac <dir_register+0x284>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007592:	f04f 0807 	mov.w	r8, #7
 8007596:	e020      	b.n	80075da <dir_register+0x2b2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007598:	f892 c000 	ldrb.w	ip, [r2]
 800759c:	f800 900c 	strb.w	r9, [r0, ip]
 80075a0:	4484      	add	ip, r0
 80075a2:	f88c 9001 	strb.w	r9, [ip, #1]
 80075a6:	3201      	adds	r2, #1
	} while (++s < 13);
 80075a8:	4572      	cmp	r2, lr
 80075aa:	d0b0      	beq.n	800750e <dir_register+0x1e6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80075ac:	42b3      	cmp	r3, r6
 80075ae:	d0f3      	beq.n	8007598 <dir_register+0x270>
 80075b0:	f101 0c01 	add.w	ip, r1, #1
 80075b4:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80075b8:	7811      	ldrb	r1, [r2, #0]
 80075ba:	5443      	strb	r3, [r0, r1]
 80075bc:	4401      	add	r1, r0
 80075be:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80075c2:	f881 b001 	strb.w	fp, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d19f      	bne.n	800750a <dir_register+0x1e2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80075ca:	4661      	mov	r1, ip
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80075cc:	4633      	mov	r3, r6
 80075ce:	e7ea      	b.n	80075a6 <dir_register+0x27e>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80075d0:	f1b8 0f04 	cmp.w	r8, #4
 80075d4:	bf08      	it	eq
 80075d6:	f04f 0807 	moveq.w	r8, #7
}
 80075da:	4640      	mov	r0, r8
 80075dc:	b009      	add	sp, #36	; 0x24
 80075de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80075e2:	3d01      	subs	r5, #1
 80075e4:	f47f af79 	bne.w	80074da <dir_register+0x1b2>
		res = move_window(dp->fs, dp->sect);
 80075e8:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80075ec:	f241 0210 	movw	r2, #4112	; 0x1010
 80075f0:	58a1      	ldr	r1, [r4, r2]
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	f7fe fd94 	bl	8006120 <move_window>
		if (res == FR_OK) {
 80075f8:	4680      	mov	r8, r0
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d1ed      	bne.n	80075da <dir_register+0x2b2>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80075fe:	f241 0514 	movw	r5, #4116	; 0x1014
 8007602:	2220      	movs	r2, #32
 8007604:	2100      	movs	r1, #0
 8007606:	5960      	ldr	r0, [r4, r5]
 8007608:	f7fe fbe6 	bl	8005dd8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800760c:	f241 0618 	movw	r6, #4120	; 0x1018
 8007610:	220b      	movs	r2, #11
 8007612:	59a1      	ldr	r1, [r4, r6]
 8007614:	5960      	ldr	r0, [r4, r5]
 8007616:	f7fe fbd5 	bl	8005dc4 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800761a:	5962      	ldr	r2, [r4, r5]
 800761c:	59a3      	ldr	r3, [r4, r6]
 800761e:	7adb      	ldrb	r3, [r3, #11]
 8007620:	f003 0318 	and.w	r3, r3, #24
 8007624:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8007626:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	f241 0304 	movw	r3, #4100	; 0x1004
 8007630:	2101      	movs	r1, #1
 8007632:	54d1      	strb	r1, [r2, r3]
 8007634:	e7d1      	b.n	80075da <dir_register+0x2b2>
 8007636:	bf00      	nop
 8007638:	4ec4ec4f 	.word	0x4ec4ec4f
 800763c:	0800905c 	.word	0x0800905c

08007640 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007640:	2901      	cmp	r1, #1
 8007642:	d933      	bls.n	80076ac <remove_chain+0x6c>
{
 8007644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	4605      	mov	r5, r0
 800764a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800764c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007650:	58c3      	ldr	r3, [r0, r3]
 8007652:	428b      	cmp	r3, r1
 8007654:	d92d      	bls.n	80076b2 <remove_chain+0x72>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007656:	f04f 0800 	mov.w	r8, #0
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800765a:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 800765e:	3710      	adds	r7, #16
 8007660:	e00d      	b.n	800767e <remove_chain+0x3e>
				fs->free_clust++;
 8007662:	3301      	adds	r3, #1
 8007664:	603b      	str	r3, [r7, #0]
				fs->fsi_flag |= 1;
 8007666:	f241 0205 	movw	r2, #4101	; 0x1005
 800766a:	5cab      	ldrb	r3, [r5, r2]
 800766c:	f043 0301 	orr.w	r3, r3, #1
 8007670:	54ab      	strb	r3, [r5, r2]
 8007672:	4626      	mov	r6, r4
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007674:	f241 0314 	movw	r3, #4116	; 0x1014
 8007678:	58eb      	ldr	r3, [r5, r3]
 800767a:	42a3      	cmp	r3, r4
 800767c:	d91a      	bls.n	80076b4 <remove_chain+0x74>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	f7ff f8ad 	bl	80067e0 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8007686:	4604      	mov	r4, r0
 8007688:	b1b8      	cbz	r0, 80076ba <remove_chain+0x7a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800768a:	2801      	cmp	r0, #1
 800768c:	d017      	beq.n	80076be <remove_chain+0x7e>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800768e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007692:	d016      	beq.n	80076c2 <remove_chain+0x82>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007694:	4642      	mov	r2, r8
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	f7ff f9bb 	bl	8006a14 <put_fat>
			if (res != FR_OK) break;
 800769e:	4601      	mov	r1, r0
 80076a0:	b940      	cbnz	r0, 80076b4 <remove_chain+0x74>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d1db      	bne.n	8007662 <remove_chain+0x22>
 80076aa:	e7e2      	b.n	8007672 <remove_chain+0x32>
		res = FR_INT_ERR;
 80076ac:	2102      	movs	r1, #2
}
 80076ae:	4608      	mov	r0, r1
 80076b0:	4770      	bx	lr
		res = FR_INT_ERR;
 80076b2:	2102      	movs	r1, #2
}
 80076b4:	4608      	mov	r0, r1
 80076b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ba:	2100      	movs	r1, #0
 80076bc:	e7fa      	b.n	80076b4 <remove_chain+0x74>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80076be:	2102      	movs	r1, #2
 80076c0:	e7f8      	b.n	80076b4 <remove_chain+0x74>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80076c2:	2101      	movs	r1, #1
 80076c4:	e7f6      	b.n	80076b4 <remove_chain+0x74>
	...

080076c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80076c8:	b510      	push	{r4, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	9001      	str	r0, [sp, #4]
 80076ce:	9100      	str	r1, [sp, #0]
 80076d0:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80076d2:	a804      	add	r0, sp, #16
 80076d4:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 80076d8:	f7fe fcb1 	bl	800603e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80076dc:	1e02      	subs	r2, r0, #0
 80076de:	db2b      	blt.n	8007738 <f_mount+0x70>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80076e0:	4b19      	ldr	r3, [pc, #100]	; (8007748 <f_mount+0x80>)
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

	if (cfs) {
 80076e6:	b15b      	cbz	r3, 8007700 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076e8:	4918      	ldr	r1, [pc, #96]	; (800774c <f_mount+0x84>)
 80076ea:	6809      	ldr	r1, [r1, #0]
 80076ec:	428b      	cmp	r3, r1
 80076ee:	d015      	beq.n	800771c <f_mount+0x54>
 80076f0:	4916      	ldr	r1, [pc, #88]	; (800774c <f_mount+0x84>)
 80076f2:	68c9      	ldr	r1, [r1, #12]
 80076f4:	428b      	cmp	r3, r1
 80076f6:	d015      	beq.n	8007724 <f_mount+0x5c>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80076f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fc:	2100      	movs	r1, #0
 80076fe:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	b1db      	cbz	r3, 800773c <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 8007704:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8007708:	2000      	movs	r0, #0
 800770a:	7008      	strb	r0, [r1, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800770c:	490e      	ldr	r1, [pc, #56]	; (8007748 <f_mount+0x80>)
 800770e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007712:	2c01      	cmp	r4, #1
 8007714:	d00a      	beq.n	800772c <f_mount+0x64>
 8007716:	2000      	movs	r0, #0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8007718:	b004      	add	sp, #16
 800771a:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800771c:	490b      	ldr	r1, [pc, #44]	; (800774c <f_mount+0x84>)
 800771e:	2000      	movs	r0, #0
 8007720:	6008      	str	r0, [r1, #0]
 8007722:	e7e5      	b.n	80076f0 <f_mount+0x28>
 8007724:	4909      	ldr	r1, [pc, #36]	; (800774c <f_mount+0x84>)
 8007726:	2000      	movs	r0, #0
 8007728:	60c8      	str	r0, [r1, #12]
 800772a:	e7e5      	b.n	80076f8 <f_mount+0x30>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800772c:	4602      	mov	r2, r0
 800772e:	4669      	mov	r1, sp
 8007730:	a801      	add	r0, sp, #4
 8007732:	f7fe fd87 	bl	8006244 <find_volume>
	LEAVE_FF(fs, res);
 8007736:	e7ef      	b.n	8007718 <f_mount+0x50>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007738:	200b      	movs	r0, #11
 800773a:	e7ed      	b.n	8007718 <f_mount+0x50>
	FatFs[vol] = fs;					/* Register new fs object */
 800773c:	2000      	movs	r0, #0
 800773e:	4b02      	ldr	r3, [pc, #8]	; (8007748 <f_mount+0x80>)
 8007740:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007744:	e7e8      	b.n	8007718 <f_mount+0x50>
 8007746:	bf00      	nop
 8007748:	20000470 	.word	0x20000470
 800774c:	20000474 	.word	0x20000474

08007750 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007754:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007758:	b081      	sub	sp, #4
 800775a:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800775c:	2800      	cmp	r0, #0
 800775e:	f000 80fe 	beq.w	800795e <f_open+0x20e>
 8007762:	4604      	mov	r4, r0
 8007764:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
 8007766:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800776e:	f005 021e 	and.w	r2, r5, #30
 8007772:	ab08      	add	r3, sp, #32
 8007774:	a901      	add	r1, sp, #4
 8007776:	f603 70f8 	addw	r0, r3, #4088	; 0xff8
 800777a:	f7fe fd63 	bl	8006244 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800777e:	4606      	mov	r6, r0
 8007780:	b128      	cbz	r0, 800778e <f_open+0x3e>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8007782:	4630      	mov	r0, r6
 8007784:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 8007788:	b001      	add	sp, #4
 800778a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800778e:	f005 081f 	and.w	r8, r5, #31
		INIT_BUF(dj);
 8007792:	ab08      	add	r3, sp, #32
 8007794:	af06      	add	r7, sp, #24
 8007796:	f1a3 0214 	sub.w	r2, r3, #20
 800779a:	f241 0318 	movw	r3, #4120	; 0x1018
 800779e:	50fa      	str	r2, [r7, r3]
 80077a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80077a4:	4a7e      	ldr	r2, [pc, #504]	; (80079a0 <f_open+0x250>)
 80077a6:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80077a8:	9901      	ldr	r1, [sp, #4]
 80077aa:	4638      	mov	r0, r7
 80077ac:	f7ff fc28 	bl	8007000 <follow_path>
		dir = dj.dir;
 80077b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80077b4:	58ff      	ldr	r7, [r7, r3]
		if (res == FR_OK) {
 80077b6:	4603      	mov	r3, r0
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f040 80d4 	bne.w	8007966 <f_open+0x216>
			if (!dir)	/* Default directory itself */
 80077be:	2f00      	cmp	r7, #0
 80077c0:	f000 80d9 	beq.w	8007976 <f_open+0x226>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077c4:	f038 0301 	bics.w	r3, r8, #1
 80077c8:	bf14      	ite	ne
 80077ca:	2101      	movne	r1, #1
 80077cc:	2100      	moveq	r1, #0
 80077ce:	a806      	add	r0, sp, #24
 80077d0:	f7fe fb0a 	bl	8005de8 <chk_lock>
 80077d4:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80077d6:	f015 0f1c 	tst.w	r5, #28
 80077da:	d063      	beq.n	80078a4 <f_open+0x154>
			if (res != FR_OK) {					/* No file, create new */
 80077dc:	b948      	cbnz	r0, 80077f2 <f_open+0xa2>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80077de:	7afb      	ldrb	r3, [r7, #11]
 80077e0:	f013 0f11 	tst.w	r3, #17
 80077e4:	f040 80d4 	bne.w	8007990 <f_open+0x240>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80077e8:	f015 0f04 	tst.w	r5, #4
 80077ec:	d00b      	beq.n	8007806 <f_open+0xb6>
						res = FR_EXIST;
 80077ee:	2608      	movs	r6, #8
 80077f0:	e7c7      	b.n	8007782 <f_open+0x32>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d039      	beq.n	800786a <f_open+0x11a>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80077f6:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 80077fa:	f50d 5281 	add.w	r2, sp, #4128	; 0x1020
 80077fe:	320c      	adds	r2, #12
 8007800:	6817      	ldr	r7, [r2, #0]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007802:	2b00      	cmp	r3, #0
 8007804:	d13e      	bne.n	8007884 <f_open+0x134>
 8007806:	f018 0f08 	tst.w	r8, #8
 800780a:	d05c      	beq.n	80078c6 <f_open+0x176>
				dw = GET_FATTIME();				/* Created time */
 800780c:	f7fe fa80 	bl	8005d10 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007810:	73b8      	strb	r0, [r7, #14]
 8007812:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007816:	73fb      	strb	r3, [r7, #15]
 8007818:	0c03      	lsrs	r3, r0, #16
 800781a:	743b      	strb	r3, [r7, #16]
 800781c:	0e00      	lsrs	r0, r0, #24
 800781e:	7478      	strb	r0, [r7, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007820:	2500      	movs	r5, #0
 8007822:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007824:	773d      	strb	r5, [r7, #28]
 8007826:	777d      	strb	r5, [r7, #29]
 8007828:	77bd      	strb	r5, [r7, #30]
 800782a:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800782c:	f10d 0920 	add.w	r9, sp, #32
 8007830:	4639      	mov	r1, r7
 8007832:	f8d9 0ff8 	ldr.w	r0, [r9, #4088]	; 0xff8
 8007836:	f7fe fbe1 	bl	8005ffc <ld_clust>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800783a:	76bd      	strb	r5, [r7, #26]
 800783c:	76fd      	strb	r5, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800783e:	753d      	strb	r5, [r7, #20]
 8007840:	757d      	strb	r5, [r7, #21]
				dj.fs->wflag = 1;
 8007842:	f8d9 3ff8 	ldr.w	r3, [r9, #4088]	; 0xff8
 8007846:	f241 0204 	movw	r2, #4100	; 0x1004
 800784a:	2101      	movs	r1, #1
 800784c:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 800784e:	4605      	mov	r5, r0
 8007850:	2800      	cmp	r0, #0
 8007852:	d036      	beq.n	80078c2 <f_open+0x172>
					dw = dj.fs->winsect;
 8007854:	f241 022c 	movw	r2, #4140	; 0x102c
 8007858:	f853 9002 	ldr.w	r9, [r3, r2]
					res = remove_chain(dj.fs, cl);
 800785c:	4601      	mov	r1, r0
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff feee 	bl	8007640 <remove_chain>
					if (res == FR_OK) {
 8007864:	b180      	cbz	r0, 8007888 <f_open+0x138>
					res = remove_chain(dj.fs, cl);
 8007866:	4606      	mov	r6, r0
 8007868:	e78b      	b.n	8007782 <f_open+0x32>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800786a:	4b4e      	ldr	r3, [pc, #312]	; (80079a4 <f_open+0x254>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	b123      	cbz	r3, 800787a <f_open+0x12a>
 8007870:	4b4c      	ldr	r3, [pc, #304]	; (80079a4 <f_open+0x254>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	b10b      	cbz	r3, 800787a <f_open+0x12a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007876:	2312      	movs	r3, #18
 8007878:	e7bd      	b.n	80077f6 <f_open+0xa6>
 800787a:	a806      	add	r0, sp, #24
 800787c:	f7ff fd54 	bl	8007328 <dir_register>
 8007880:	4603      	mov	r3, r0
 8007882:	e7b8      	b.n	80077f6 <f_open+0xa6>
 8007884:	461e      	mov	r6, r3
 8007886:	e77c      	b.n	8007782 <f_open+0x32>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007888:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800788c:	3318      	adds	r3, #24
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	3d01      	subs	r5, #1
 8007892:	f241 030c 	movw	r3, #4108	; 0x100c
 8007896:	50c5      	str	r5, [r0, r3]
						res = move_window(dj.fs, dw);
 8007898:	4649      	mov	r1, r9
 800789a:	f7fe fc41 	bl	8006120 <move_window>
		if (res == FR_OK) {
 800789e:	b180      	cbz	r0, 80078c2 <f_open+0x172>
						res = move_window(dj.fs, dw);
 80078a0:	4606      	mov	r6, r0
 80078a2:	e76e      	b.n	8007782 <f_open+0x32>
			if (res == FR_OK) {					/* Follow succeeded */
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d175      	bne.n	8007994 <f_open+0x244>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	f013 0f10 	tst.w	r3, #16
 80078ae:	d173      	bne.n	8007998 <f_open+0x248>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80078b0:	f015 0f02 	tst.w	r5, #2
 80078b4:	d002      	beq.n	80078bc <f_open+0x16c>
 80078b6:	f013 0f01 	tst.w	r3, #1
 80078ba:	d16f      	bne.n	800799c <f_open+0x24c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80078bc:	f015 0f08 	tst.w	r5, #8
 80078c0:	d001      	beq.n	80078c6 <f_open+0x176>
				mode |= FA__WRITTEN;
 80078c2:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80078c6:	a808      	add	r0, sp, #32
 80078c8:	f8d0 2ff8 	ldr.w	r2, [r0, #4088]	; 0xff8
 80078cc:	f241 032c 	movw	r3, #4140	; 0x102c
 80078d0:	58d2      	ldr	r2, [r2, r3]
 80078d2:	f241 031c 	movw	r3, #4124	; 0x101c
 80078d6:	50e2      	str	r2, [r4, r3]
			fp->dir_ptr = dir;
 80078d8:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80078dc:	601f      	str	r7, [r3, #0]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80078de:	f038 0301 	bics.w	r3, r8, #1
 80078e2:	bf14      	ite	ne
 80078e4:	2101      	movne	r1, #1
 80078e6:	2100      	moveq	r1, #0
 80078e8:	a806      	add	r0, sp, #24
 80078ea:	f7fe fad1 	bl	8005e90 <inc_lock>
 80078ee:	f241 0328 	movw	r3, #4136	; 0x1028
 80078f2:	50e0      	str	r0, [r4, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 80078f4:	b3a8      	cbz	r0, 8007962 <f_open+0x212>
			fp->flag = mode;					/* File access mode */
 80078f6:	f241 0906 	movw	r9, #4102	; 0x1006
 80078fa:	f804 8009 	strb.w	r8, [r4, r9]
			fp->err = 0;						/* Clear error flag */
 80078fe:	2500      	movs	r5, #0
 8007900:	f241 0307 	movw	r3, #4103	; 0x1007
 8007904:	54e5      	strb	r5, [r4, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007906:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800790a:	3318      	adds	r3, #24
 800790c:	f8d3 8000 	ldr.w	r8, [r3]
 8007910:	4639      	mov	r1, r7
 8007912:	4640      	mov	r0, r8
 8007914:	f7fe fb72 	bl	8005ffc <ld_clust>
 8007918:	f241 0310 	movw	r3, #4112	; 0x1010
 800791c:	50e0      	str	r0, [r4, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800791e:	7ffa      	ldrb	r2, [r7, #31]
 8007920:	7fbb      	ldrb	r3, [r7, #30]
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007928:	7f3a      	ldrb	r2, [r7, #28]
 800792a:	4313      	orrs	r3, r2
 800792c:	7f7a      	ldrb	r2, [r7, #29]
 800792e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007932:	f241 020c 	movw	r2, #4108	; 0x100c
 8007936:	50a3      	str	r3, [r4, r2]
			fp->fptr = 0;						/* File pointer */
 8007938:	f241 0308 	movw	r3, #4104	; 0x1008
 800793c:	50e5      	str	r5, [r4, r3]
			fp->dsect = 0;
 800793e:	f241 0318 	movw	r3, #4120	; 0x1018
 8007942:	50e5      	str	r5, [r4, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 8007944:	f241 0324 	movw	r3, #4132	; 0x1024
 8007948:	50e5      	str	r5, [r4, r3]
			fp->fs = dj.fs;	 					/* Validate file object */
 800794a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800794e:	f8c3 8000 	str.w	r8, [r3]
			fp->id = fp->fs->id;
 8007952:	f838 2009 	ldrh.w	r2, [r8, r9]
 8007956:	f241 0304 	movw	r3, #4100	; 0x1004
 800795a:	52e2      	strh	r2, [r4, r3]
 800795c:	e711      	b.n	8007782 <f_open+0x32>
	if (!fp) return FR_INVALID_OBJECT;
 800795e:	2609      	movs	r6, #9
 8007960:	e70f      	b.n	8007782 <f_open+0x32>
			if (!fp->lockid) res = FR_INT_ERR;
 8007962:	2602      	movs	r6, #2
 8007964:	e70d      	b.n	8007782 <f_open+0x32>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007966:	f015 0f1c 	tst.w	r5, #28
 800796a:	f47f af42 	bne.w	80077f2 <f_open+0xa2>
		if (res == FR_OK) {
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0c1      	beq.n	80078f6 <f_open+0x1a6>
 8007972:	461e      	mov	r6, r3
 8007974:	e705      	b.n	8007782 <f_open+0x32>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007976:	f015 0f1c 	tst.w	r5, #28
 800797a:	d101      	bne.n	8007980 <f_open+0x230>
				res = FR_INVALID_NAME;
 800797c:	2306      	movs	r3, #6
 800797e:	e7f6      	b.n	800796e <f_open+0x21e>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007980:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 8007984:	f50d 5381 	add.w	r3, sp, #4128	; 0x1020
 8007988:	330c      	adds	r3, #12
 800798a:	681f      	ldr	r7, [r3, #0]
				res = FR_INVALID_NAME;
 800798c:	2306      	movs	r3, #6
 800798e:	e7ee      	b.n	800796e <f_open+0x21e>
					res = FR_DENIED;
 8007990:	2607      	movs	r6, #7
 8007992:	e6f6      	b.n	8007782 <f_open+0x32>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007994:	4606      	mov	r6, r0
 8007996:	e6f4      	b.n	8007782 <f_open+0x32>
					res = FR_NO_FILE;
 8007998:	2604      	movs	r6, #4
 800799a:	e6f2      	b.n	8007782 <f_open+0x32>
						res = FR_DENIED;
 800799c:	2607      	movs	r6, #7
 800799e:	e6f0      	b.n	8007782 <f_open+0x32>
 80079a0:	20000490 	.word	0x20000490
 80079a4:	20000474 	.word	0x20000474

080079a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	b085      	sub	sp, #20
 80079ae:	4606      	mov	r6, r0
 80079b0:	468b      	mov	fp, r1
 80079b2:	4617      	mov	r7, r2
 80079b4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80079b6:	2300      	movs	r3, #0
 80079b8:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp);						/* Check validity */
 80079bc:	f7fe fc1a 	bl	80061f4 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80079c0:	9001      	str	r0, [sp, #4]
 80079c2:	2800      	cmp	r0, #0
 80079c4:	f040 8147 	bne.w	8007c56 <f_write+0x2ae>
	if (fp->err)							/* Check error */
 80079c8:	f241 0307 	movw	r3, #4103	; 0x1007
 80079cc:	5cf3      	ldrb	r3, [r6, r3]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f040 8140 	bne.w	8007c54 <f_write+0x2ac>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80079d4:	f241 0306 	movw	r3, #4102	; 0x1006
 80079d8:	5cf3      	ldrb	r3, [r6, r3]
 80079da:	f013 0f02 	tst.w	r3, #2
 80079de:	f000 813e 	beq.w	8007c5e <f_write+0x2b6>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80079e2:	f241 0308 	movw	r3, #4104	; 0x1008
 80079e6:	58f3      	ldr	r3, [r6, r3]
 80079e8:	42fb      	cmn	r3, r7
 80079ea:	f080 8121 	bcs.w	8007c30 <f_write+0x288>

	for ( ;  btw;							/* Repeat until all data written */
 80079ee:	2f00      	cmp	r7, #0
 80079f0:	f000 811e 	beq.w	8007c30 <f_write+0x288>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80079f4:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
 80079f8:	f108 0808 	add.w	r8, r8, #8
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
 80079fc:	f506 5a80 	add.w	sl, r6, #4096	; 0x1000
 8007a00:	f10a 0a06 	add.w	sl, sl, #6
 8007a04:	e0de      	b.n	8007bc4 <f_write+0x21c>
					if (fp->cltbl)
 8007a06:	f241 0324 	movw	r3, #4132	; 0x1024
 8007a0a:	58f3      	ldr	r3, [r6, r3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d046      	beq.n	8007a9e <f_write+0xf6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a10:	4630      	mov	r0, r6
 8007a12:	f7fe fad3 	bl	8005fbc <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f000 810a 	beq.w	8007c30 <f_write+0x288>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007a1c:	2801      	cmp	r0, #1
 8007a1e:	d045      	beq.n	8007aac <f_write+0x104>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007a20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a24:	d048      	beq.n	8007ab8 <f_write+0x110>
				fp->clust = clst;			/* Update current cluster */
 8007a26:	f241 0314 	movw	r3, #4116	; 0x1014
 8007a2a:	50f0      	str	r0, [r6, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007a2c:	f241 0310 	movw	r3, #4112	; 0x1010
 8007a30:	58f3      	ldr	r3, [r6, r3]
 8007a32:	b913      	cbnz	r3, 8007a3a <f_write+0x92>
 8007a34:	f241 0310 	movw	r3, #4112	; 0x1010
 8007a38:	50f0      	str	r0, [r6, r3]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a42:	d13f      	bne.n	8007ac4 <f_write+0x11c>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007a44:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8007a48:	681d      	ldr	r5, [r3, #0]
 8007a4a:	f241 0314 	movw	r3, #4116	; 0x1014
 8007a4e:	58f1      	ldr	r1, [r6, r3]
 8007a50:	4628      	mov	r0, r5
 8007a52:	f7fe feb3 	bl	80067bc <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d04f      	beq.n	8007afa <f_write+0x152>
			sect += csect;
 8007a5a:	1823      	adds	r3, r4, r0
 8007a5c:	9302      	str	r3, [sp, #8]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007a5e:	f241 030a 	movw	r3, #4106	; 0x100a
 8007a62:	5aeb      	ldrh	r3, [r5, r3]
 8007a64:	fbb7 f2f3 	udiv	r2, r7, r3
 8007a68:	9203      	str	r2, [sp, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d071      	beq.n	8007b52 <f_write+0x1aa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007a6e:	f241 0302 	movw	r3, #4098	; 0x1002
 8007a72:	5ceb      	ldrb	r3, [r5, r3]
 8007a74:	18a2      	adds	r2, r4, r2
 8007a76:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8007a78:	bf84      	itt	hi
 8007a7a:	1b1b      	subhi	r3, r3, r4
 8007a7c:	9303      	strhi	r3, [sp, #12]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	9a02      	ldr	r2, [sp, #8]
 8007a82:	4659      	mov	r1, fp
 8007a84:	f241 0001 	movw	r0, #4097	; 0x1001
 8007a88:	5c28      	ldrb	r0, [r5, r0]
 8007a8a:	f7fe f983 	bl	8005d94 <disk_write>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d039      	beq.n	8007b06 <f_write+0x15e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007a92:	2301      	movs	r3, #1
 8007a94:	f241 0207 	movw	r2, #4103	; 0x1007
 8007a98:	54b3      	strb	r3, [r6, r2]
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	e0db      	b.n	8007c56 <f_write+0x2ae>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007a9e:	f241 0314 	movw	r3, #4116	; 0x1014
 8007aa2:	58f1      	ldr	r1, [r6, r3]
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f7ff f887 	bl	8006bb8 <create_chain>
 8007aaa:	e7b4      	b.n	8007a16 <f_write+0x6e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007aac:	2302      	movs	r3, #2
 8007aae:	f241 0207 	movw	r2, #4103	; 0x1007
 8007ab2:	54b3      	strb	r3, [r6, r2]
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	e0ce      	b.n	8007c56 <f_write+0x2ae>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f241 0207 	movw	r2, #4103	; 0x1007
 8007abe:	54b3      	strb	r3, [r6, r2]
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	e0c8      	b.n	8007c56 <f_write+0x2ae>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ac4:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8007ac8:	681d      	ldr	r5, [r3, #0]
 8007aca:	2301      	movs	r3, #1
 8007acc:	f241 0218 	movw	r2, #4120	; 0x1018
 8007ad0:	58b2      	ldr	r2, [r6, r2]
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	f241 0001 	movw	r0, #4097	; 0x1001
 8007ad8:	5c28      	ldrb	r0, [r5, r0]
 8007ada:	f7fe f95b 	bl	8005d94 <disk_write>
 8007ade:	b930      	cbnz	r0, 8007aee <f_write+0x146>
				fp->flag &= ~FA__DIRTY;
 8007ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae8:	f88a 3000 	strb.w	r3, [sl]
 8007aec:	e7aa      	b.n	8007a44 <f_write+0x9c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007aee:	2301      	movs	r3, #1
 8007af0:	f241 0207 	movw	r2, #4103	; 0x1007
 8007af4:	54b3      	strb	r3, [r6, r2]
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	e0ad      	b.n	8007c56 <f_write+0x2ae>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007afa:	2302      	movs	r3, #2
 8007afc:	f241 0207 	movw	r2, #4103	; 0x1007
 8007b00:	54b3      	strb	r3, [r6, r2]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	e0a7      	b.n	8007c56 <f_write+0x2ae>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007b06:	f241 0318 	movw	r3, #4120	; 0x1018
 8007b0a:	58f1      	ldr	r1, [r6, r3]
 8007b0c:	9b02      	ldr	r3, [sp, #8]
 8007b0e:	1ac9      	subs	r1, r1, r3
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	4299      	cmp	r1, r3
 8007b14:	d30a      	bcc.n	8007b2c <f_write+0x184>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007b16:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f241 030a 	movw	r3, #4106	; 0x100a
 8007b20:	5ad4      	ldrh	r4, [r2, r3]
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	fb03 f304 	mul.w	r3, r3, r4
 8007b28:	461c      	mov	r4, r3
				continue;
 8007b2a:	e03e      	b.n	8007baa <f_write+0x202>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007b2c:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	f241 030a 	movw	r3, #4106	; 0x100a
 8007b36:	5ad3      	ldrh	r3, [r2, r3]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	fb03 b101 	mla	r1, r3, r1, fp
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7fe f940 	bl	8005dc4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007b44:	f89a 3000 	ldrb.w	r3, [sl]
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	f88a 3000 	strb.w	r3, [sl]
 8007b50:	e7e1      	b.n	8007b16 <f_write+0x16e>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007b52:	f241 0318 	movw	r3, #4120	; 0x1018
 8007b56:	58f3      	ldr	r3, [r6, r3]
 8007b58:	9a02      	ldr	r2, [sp, #8]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d006      	beq.n	8007b6c <f_write+0x1c4>
				if (fp->fptr < fp->fsize &&
 8007b5e:	f8d8 2000 	ldr.w	r2, [r8]
 8007b62:	f241 030c 	movw	r3, #4108	; 0x100c
 8007b66:	58f3      	ldr	r3, [r6, r3]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d351      	bcc.n	8007c10 <f_write+0x268>
			fp->dsect = sect;
 8007b6c:	f241 0318 	movw	r3, #4120	; 0x1018
 8007b70:	9a02      	ldr	r2, [sp, #8]
 8007b72:	50f2      	str	r2, [r6, r3]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007b74:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	f241 030a 	movw	r3, #4106	; 0x100a
 8007b7e:	5ad4      	ldrh	r4, [r2, r3]
 8007b80:	f8d8 3000 	ldr.w	r3, [r8]
 8007b84:	fbb3 f0f4 	udiv	r0, r3, r4
 8007b88:	fb04 3010 	mls	r0, r4, r0, r3
 8007b8c:	1a24      	subs	r4, r4, r0
 8007b8e:	42bc      	cmp	r4, r7
 8007b90:	bf28      	it	cs
 8007b92:	463c      	movcs	r4, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007b94:	4622      	mov	r2, r4
 8007b96:	4659      	mov	r1, fp
 8007b98:	4430      	add	r0, r6
 8007b9a:	f7fe f913 	bl	8005dc4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba6:	f88a 3000 	strb.w	r3, [sl]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007baa:	44a3      	add	fp, r4
 8007bac:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb0:	4423      	add	r3, r4
 8007bb2:	f8c8 3000 	str.w	r3, [r8]
 8007bb6:	f8d9 3000 	ldr.w	r3, [r9]
 8007bba:	4423      	add	r3, r4
 8007bbc:	f8c9 3000 	str.w	r3, [r9]
	for ( ;  btw;							/* Repeat until all data written */
 8007bc0:	1b3f      	subs	r7, r7, r4
 8007bc2:	d035      	beq.n	8007c30 <f_write+0x288>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007bc4:	f8d8 1000 	ldr.w	r1, [r8]
 8007bc8:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8007bcc:	681d      	ldr	r5, [r3, #0]
 8007bce:	f241 030a 	movw	r3, #4106	; 0x100a
 8007bd2:	5aeb      	ldrh	r3, [r5, r3]
 8007bd4:	fbb1 f2f3 	udiv	r2, r1, r3
 8007bd8:	fb03 1212 	mls	r2, r3, r2, r1
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	d1c9      	bne.n	8007b74 <f_write+0x1cc>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007be0:	f241 0202 	movw	r2, #4098	; 0x1002
 8007be4:	5cac      	ldrb	r4, [r5, r2]
 8007be6:	3c01      	subs	r4, #1
 8007be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bec:	4023      	ands	r3, r4
			if (!csect) {					/* On the cluster boundary? */
 8007bee:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007bf2:	f47f af22 	bne.w	8007a3a <f_write+0x92>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	f47f af05 	bne.w	8007a06 <f_write+0x5e>
					clst = fp->sclust;		/* Follow from the origin */
 8007bfc:	f241 0310 	movw	r3, #4112	; 0x1010
 8007c00:	58f0      	ldr	r0, [r6, r3]
					if (clst == 0)			/* When no cluster is allocated, */
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f47f af0a 	bne.w	8007a1c <f_write+0x74>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7fe ffd5 	bl	8006bb8 <create_chain>
 8007c0e:	e702      	b.n	8007a16 <f_write+0x6e>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007c10:	2301      	movs	r3, #1
 8007c12:	9a02      	ldr	r2, [sp, #8]
 8007c14:	4631      	mov	r1, r6
 8007c16:	f241 0001 	movw	r0, #4097	; 0x1001
 8007c1a:	5c28      	ldrb	r0, [r5, r0]
 8007c1c:	f7fe f8ae 	bl	8005d7c <disk_read>
				if (fp->fptr < fp->fsize &&
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d0a3      	beq.n	8007b6c <f_write+0x1c4>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c24:	2301      	movs	r3, #1
 8007c26:	f241 0207 	movw	r2, #4103	; 0x1007
 8007c2a:	54b3      	strb	r3, [r6, r2]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	e012      	b.n	8007c56 <f_write+0x2ae>
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007c30:	f241 0308 	movw	r3, #4104	; 0x1008
 8007c34:	58f3      	ldr	r3, [r6, r3]
 8007c36:	f241 020c 	movw	r2, #4108	; 0x100c
 8007c3a:	58b2      	ldr	r2, [r6, r2]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	bf84      	itt	hi
 8007c40:	f241 020c 	movwhi	r2, #4108	; 0x100c
 8007c44:	50b3      	strhi	r3, [r6, r2]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007c46:	f241 0206 	movw	r2, #4102	; 0x1006
 8007c4a:	5cb3      	ldrb	r3, [r6, r2]
 8007c4c:	f043 0320 	orr.w	r3, r3, #32
 8007c50:	54b3      	strb	r3, [r6, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8007c52:	e000      	b.n	8007c56 <f_write+0x2ae>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007c54:	9301      	str	r3, [sp, #4]
}
 8007c56:	9801      	ldr	r0, [sp, #4]
 8007c58:	b005      	add	sp, #20
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LEAVE_FF(fp->fs, FR_DENIED);
 8007c5e:	2307      	movs	r3, #7
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	e7f8      	b.n	8007c56 <f_write+0x2ae>

08007c64 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	4604      	mov	r4, r0
 8007c6a:	460d      	mov	r5, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007c6c:	290a      	cmp	r1, #10
 8007c6e:	d00d      	beq.n	8007c8c <putc_bfd+0x28>
		putc_bfd(pb, '\r');

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007c70:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	db08      	blt.n	8007c88 <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007c76:	1c5e      	adds	r6, r3, #1
 8007c78:	4423      	add	r3, r4
 8007c7a:	731d      	strb	r5, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007c7c:	2e3c      	cmp	r6, #60	; 0x3c
 8007c7e:	dc09      	bgt.n	8007c94 <putc_bfd+0x30>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 8007c80:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8007c82:	68a3      	ldr	r3, [r4, #8]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60a3      	str	r3, [r4, #8]
}
 8007c88:	b002      	add	sp, #8
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 8007c8c:	210d      	movs	r1, #13
 8007c8e:	f7ff ffe9 	bl	8007c64 <putc_bfd>
 8007c92:	e7ed      	b.n	8007c70 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007c94:	ab01      	add	r3, sp, #4
 8007c96:	4632      	mov	r2, r6
 8007c98:	f104 010c 	add.w	r1, r4, #12
 8007c9c:	6820      	ldr	r0, [r4, #0]
 8007c9e:	f7ff fe83 	bl	80079a8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007ca2:	9b01      	ldr	r3, [sp, #4]
 8007ca4:	1b9e      	subs	r6, r3, r6
 8007ca6:	bf18      	it	ne
 8007ca8:	f04f 36ff 	movne.w	r6, #4294967295
 8007cac:	e7e8      	b.n	8007c80 <putc_bfd+0x1c>

08007cae <f_sync>:
{
 8007cae:	b538      	push	{r3, r4, r5, lr}
 8007cb0:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 8007cb2:	f7fe fa9f 	bl	80061f4 <validate>
	if (res == FR_OK) {
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	bb38      	cbnz	r0, 8007d0a <f_sync+0x5c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007cba:	f241 0206 	movw	r2, #4102	; 0x1006
 8007cbe:	5ca2      	ldrb	r2, [r4, r2]
 8007cc0:	f012 0f20 	tst.w	r2, #32
 8007cc4:	d021      	beq.n	8007d0a <f_sync+0x5c>
			if (fp->flag & FA__DIRTY) {
 8007cc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007cca:	d014      	beq.n	8007cf6 <f_sync+0x48>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ccc:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007cd0:	681d      	ldr	r5, [r3, #0]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f241 0218 	movw	r2, #4120	; 0x1018
 8007cd8:	58a2      	ldr	r2, [r4, r2]
 8007cda:	4621      	mov	r1, r4
 8007cdc:	f241 0001 	movw	r0, #4097	; 0x1001
 8007ce0:	5c28      	ldrb	r0, [r5, r0]
 8007ce2:	f7fe f857 	bl	8005d94 <disk_write>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d14f      	bne.n	8007d8a <f_sync+0xdc>
				fp->flag &= ~FA__DIRTY;
 8007cea:	f241 0206 	movw	r2, #4102	; 0x1006
 8007cee:	5ca3      	ldrb	r3, [r4, r2]
 8007cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf4:	54a3      	strb	r3, [r4, r2]
			res = move_window(fp->fs, fp->dir_sect);
 8007cf6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007cfa:	f241 021c 	movw	r2, #4124	; 0x101c
 8007cfe:	58a1      	ldr	r1, [r4, r2]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f7fe fa0d 	bl	8006120 <move_window>
			if (res == FR_OK) {
 8007d06:	4603      	mov	r3, r0
 8007d08:	b108      	cbz	r0, 8007d0e <f_sync+0x60>
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
 8007d0e:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8007d12:	681d      	ldr	r5, [r3, #0]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007d14:	7aeb      	ldrb	r3, [r5, #11]
 8007d16:	f043 0320 	orr.w	r3, r3, #32
 8007d1a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007d1c:	f241 030c 	movw	r3, #4108	; 0x100c
 8007d20:	58e2      	ldr	r2, [r4, r3]
 8007d22:	772a      	strb	r2, [r5, #28]
 8007d24:	5ae2      	ldrh	r2, [r4, r3]
 8007d26:	0a12      	lsrs	r2, r2, #8
 8007d28:	776a      	strb	r2, [r5, #29]
 8007d2a:	58e2      	ldr	r2, [r4, r3]
 8007d2c:	0c12      	lsrs	r2, r2, #16
 8007d2e:	77aa      	strb	r2, [r5, #30]
 8007d30:	58e3      	ldr	r3, [r4, r3]
 8007d32:	0e1b      	lsrs	r3, r3, #24
 8007d34:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007d36:	f241 0310 	movw	r3, #4112	; 0x1010
 8007d3a:	58e3      	ldr	r3, [r4, r3]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007d3c:	76ab      	strb	r3, [r5, #26]
 8007d3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007d42:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	752b      	strb	r3, [r5, #20]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8007d4c:	f7fd ffe0 	bl	8005d10 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007d50:	75a8      	strb	r0, [r5, #22]
 8007d52:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007d56:	75eb      	strb	r3, [r5, #23]
 8007d58:	0c03      	lsrs	r3, r0, #16
 8007d5a:	762b      	strb	r3, [r5, #24]
 8007d5c:	0e00      	lsrs	r0, r0, #24
 8007d5e:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007d60:	2300      	movs	r3, #0
 8007d62:	74ab      	strb	r3, [r5, #18]
 8007d64:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8007d66:	f241 0206 	movw	r2, #4102	; 0x1006
 8007d6a:	5ca3      	ldrb	r3, [r4, r2]
 8007d6c:	f023 0320 	bic.w	r3, r3, #32
 8007d70:	54a3      	strb	r3, [r4, r2]
				fp->fs->wflag = 1;
 8007d72:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	f241 0304 	movw	r3, #4100	; 0x1004
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	f7fe fcb1 	bl	80066e8 <sync_fs>
 8007d86:	4603      	mov	r3, r0
 8007d88:	e7bf      	b.n	8007d0a <f_sync+0x5c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e7bd      	b.n	8007d0a <f_sync+0x5c>

08007d8e <f_close>:
{
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8007d92:	f7ff ff8c 	bl	8007cae <f_sync>
	if (res == FR_OK)
 8007d96:	4603      	mov	r3, r0
 8007d98:	b108      	cbz	r0, 8007d9e <f_close+0x10>
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f7fe fa28 	bl	80061f4 <validate>
		if (res == FR_OK) {
 8007da4:	4603      	mov	r3, r0
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d1f7      	bne.n	8007d9a <f_close+0xc>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007daa:	f241 0328 	movw	r3, #4136	; 0x1028
 8007dae:	58e0      	ldr	r0, [r4, r3]
 8007db0:	f7fe f8da 	bl	8005f68 <dec_lock>
			if (res == FR_OK)
 8007db4:	4603      	mov	r3, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d1ef      	bne.n	8007d9a <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
 8007dba:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6022      	str	r2, [r4, #0]
 8007dc2:	e7ea      	b.n	8007d9a <f_close+0xc>

08007dc4 <f_lseek>:
{
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	4604      	mov	r4, r0
 8007dcc:	460e      	mov	r6, r1
	res = validate(fp);					/* Check validity of the object */
 8007dce:	f7fe fa11 	bl	80061f4 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f040 81d3 	bne.w	8008180 <f_lseek+0x3bc>
	if (fp->err)						/* Check error */
 8007dda:	f241 0307 	movw	r3, #4103	; 0x1007
 8007dde:	5ce3      	ldrb	r3, [r4, r3]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 81cc 	bne.w	800817e <f_lseek+0x3ba>
	if (fp->cltbl) {	/* Fast seek */
 8007de6:	f241 0324 	movw	r3, #4132	; 0x1024
 8007dea:	58e3      	ldr	r3, [r4, r3]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80bd 	beq.w	8007f6c <f_lseek+0x1a8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007df2:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007df6:	d05f      	beq.n	8007eb8 <f_lseek+0xf4>
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007df8:	f241 030c 	movw	r3, #4108	; 0x100c
 8007dfc:	58e3      	ldr	r3, [r4, r3]
 8007dfe:	429e      	cmp	r6, r3
 8007e00:	bf28      	it	cs
 8007e02:	461e      	movcs	r6, r3
			fp->fptr = ofs;				/* Set file pointer */
 8007e04:	f241 0308 	movw	r3, #4104	; 0x1008
 8007e08:	50e6      	str	r6, [r4, r3]
			if (ofs) {
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	f000 81b8 	beq.w	8008180 <f_lseek+0x3bc>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007e10:	f106 38ff 	add.w	r8, r6, #4294967295
 8007e14:	4641      	mov	r1, r8
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7fe f8d0 	bl	8005fbc <clmt_clust>
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8007e22:	50e0      	str	r0, [r4, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8007e24:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007e28:	681f      	ldr	r7, [r3, #0]
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	f7fe fcc6 	bl	80067bc <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007e30:	2800      	cmp	r0, #0
 8007e32:	f000 808d 	beq.w	8007f50 <f_lseek+0x18c>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007e36:	f241 030a 	movw	r3, #4106	; 0x100a
 8007e3a:	5afa      	ldrh	r2, [r7, r3]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007e3c:	fbb6 f3f2 	udiv	r3, r6, r2
 8007e40:	fb02 6613 	mls	r6, r2, r3, r6
 8007e44:	2e00      	cmp	r6, #0
 8007e46:	f000 819b 	beq.w	8008180 <f_lseek+0x3bc>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007e4a:	f241 0302 	movw	r3, #4098	; 0x1002
 8007e4e:	5cfe      	ldrb	r6, [r7, r3]
 8007e50:	3e01      	subs	r6, #1
 8007e52:	fbb8 f8f2 	udiv	r8, r8, r2
 8007e56:	ea06 0808 	and.w	r8, r6, r8
 8007e5a:	eb08 0600 	add.w	r6, r8, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007e5e:	f241 0318 	movw	r3, #4120	; 0x1018
 8007e62:	58e2      	ldr	r2, [r4, r3]
 8007e64:	42b2      	cmp	r2, r6
 8007e66:	f000 818b 	beq.w	8008180 <f_lseek+0x3bc>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007e6a:	f241 0306 	movw	r3, #4102	; 0x1006
 8007e6e:	5ce3      	ldrb	r3, [r4, r3]
 8007e70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e74:	d00e      	beq.n	8007e94 <f_lseek+0xd0>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007e76:	2301      	movs	r3, #1
 8007e78:	4621      	mov	r1, r4
 8007e7a:	f241 0001 	movw	r0, #4097	; 0x1001
 8007e7e:	5c38      	ldrb	r0, [r7, r0]
 8007e80:	f7fd ff88 	bl	8005d94 <disk_write>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d168      	bne.n	8007f5a <f_lseek+0x196>
						fp->flag &= ~FA__DIRTY;
 8007e88:	f241 0206 	movw	r2, #4102	; 0x1006
 8007e8c:	5ca3      	ldrb	r3, [r4, r2]
 8007e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e92:	54a3      	strb	r3, [r4, r2]
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007e94:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007e98:	681f      	ldr	r7, [r3, #0]
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	f241 0001 	movw	r0, #4097	; 0x1001
 8007ea4:	5c38      	ldrb	r0, [r7, r0]
 8007ea6:	f7fd ff69 	bl	8005d7c <disk_read>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d05a      	beq.n	8007f64 <f_lseek+0x1a0>
						ABORT(fp->fs, FR_DISK_ERR);
 8007eae:	2501      	movs	r5, #1
 8007eb0:	f241 0307 	movw	r3, #4103	; 0x1007
 8007eb4:	54e5      	strb	r5, [r4, r3]
 8007eb6:	e163      	b.n	8008180 <f_lseek+0x3bc>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007eb8:	1d1a      	adds	r2, r3, #4
 8007eba:	9201      	str	r2, [sp, #4]
 8007ebc:	f8d3 b000 	ldr.w	fp, [r3]
			cl = fp->sclust;			/* Top of the chain */
 8007ec0:	f241 0310 	movw	r3, #4112	; 0x1010
 8007ec4:	f854 9003 	ldr.w	r9, [r4, r3]
			if (cl) {
 8007ec8:	f1b9 0f00 	cmp.w	r9, #0
 8007ecc:	d032      	beq.n	8007f34 <f_lseek+0x170>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007ece:	f04f 0a02 	mov.w	sl, #2
						cl = get_fat(fp->fs, cl);
 8007ed2:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
 8007ed6:	464e      	mov	r6, r9
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007ed8:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 8007eda:	3701      	adds	r7, #1
						cl = get_fat(fp->fs, cl);
 8007edc:	4631      	mov	r1, r6
 8007ede:	f8d8 0000 	ldr.w	r0, [r8]
 8007ee2:	f7fe fc7d 	bl	80067e0 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007ee6:	2801      	cmp	r0, #1
 8007ee8:	d91a      	bls.n	8007f20 <f_lseek+0x15c>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007eea:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007eee:	d01c      	beq.n	8007f2a <f_lseek+0x166>
					} while (cl == pcl + 1);
 8007ef0:	1c73      	adds	r3, r6, #1
						cl = get_fat(fp->fs, cl);
 8007ef2:	4606      	mov	r6, r0
					} while (cl == pcl + 1);
 8007ef4:	4283      	cmp	r3, r0
 8007ef6:	d0f0      	beq.n	8007eda <f_lseek+0x116>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007ef8:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007efc:	45d3      	cmp	fp, sl
 8007efe:	d306      	bcc.n	8007f0e <f_lseek+0x14a>
						*tbl++ = ncl; *tbl++ = tcl;
 8007f00:	9a01      	ldr	r2, [sp, #4]
 8007f02:	4613      	mov	r3, r2
 8007f04:	f843 7b08 	str.w	r7, [r3], #8
 8007f08:	f8c2 9004 	str.w	r9, [r2, #4]
 8007f0c:	9301      	str	r3, [sp, #4]
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f12:	f241 0214 	movw	r2, #4116	; 0x1014
 8007f16:	589b      	ldr	r3, [r3, r2]
 8007f18:	4283      	cmp	r3, r0
 8007f1a:	d90d      	bls.n	8007f38 <f_lseek+0x174>
						cl = get_fat(fp->fs, cl);
 8007f1c:	4681      	mov	r9, r0
 8007f1e:	e7da      	b.n	8007ed6 <f_lseek+0x112>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007f20:	2502      	movs	r5, #2
 8007f22:	f241 0307 	movw	r3, #4103	; 0x1007
 8007f26:	54e5      	strb	r5, [r4, r3]
 8007f28:	e12a      	b.n	8008180 <f_lseek+0x3bc>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007f2a:	2501      	movs	r5, #1
 8007f2c:	f241 0307 	movw	r3, #4103	; 0x1007
 8007f30:	54e5      	strb	r5, [r4, r3]
 8007f32:	e125      	b.n	8008180 <f_lseek+0x3bc>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007f34:	f04f 0a02 	mov.w	sl, #2
			*fp->cltbl = ulen;	/* Number of items used */
 8007f38:	f241 0324 	movw	r3, #4132	; 0x1024
 8007f3c:	58e3      	ldr	r3, [r4, r3]
 8007f3e:	f8c3 a000 	str.w	sl, [r3]
			if (ulen <= tlen)
 8007f42:	45da      	cmp	sl, fp
 8007f44:	f200 8120 	bhi.w	8008188 <f_lseek+0x3c4>
				*tbl = 0;		/* Terminate table */
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9a01      	ldr	r2, [sp, #4]
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e117      	b.n	8008180 <f_lseek+0x3bc>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007f50:	2502      	movs	r5, #2
 8007f52:	f241 0307 	movw	r3, #4103	; 0x1007
 8007f56:	54e5      	strb	r5, [r4, r3]
 8007f58:	e112      	b.n	8008180 <f_lseek+0x3bc>
							ABORT(fp->fs, FR_DISK_ERR);
 8007f5a:	2501      	movs	r5, #1
 8007f5c:	f241 0307 	movw	r3, #4103	; 0x1007
 8007f60:	54e5      	strb	r5, [r4, r3]
 8007f62:	e10d      	b.n	8008180 <f_lseek+0x3bc>
					fp->dsect = dsc;
 8007f64:	f241 0318 	movw	r3, #4120	; 0x1018
 8007f68:	50e6      	str	r6, [r4, r3]
 8007f6a:	e109      	b.n	8008180 <f_lseek+0x3bc>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007f6c:	f241 030c 	movw	r3, #4108	; 0x100c
 8007f70:	58e3      	ldr	r3, [r4, r3]
 8007f72:	42b3      	cmp	r3, r6
 8007f74:	d207      	bcs.n	8007f86 <f_lseek+0x1c2>
			 && !(fp->flag & FA_WRITE)
 8007f76:	f241 0206 	movw	r2, #4102	; 0x1006
 8007f7a:	5ca2      	ldrb	r2, [r4, r2]
 8007f7c:	f002 0202 	and.w	r2, r2, #2
			) ofs = fp->fsize;
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	bf08      	it	eq
 8007f84:	461e      	moveq	r6, r3
		ifptr = fp->fptr;
 8007f86:	f241 0308 	movw	r3, #4104	; 0x1008
 8007f8a:	58e2      	ldr	r2, [r4, r3]
		fp->fptr = nsect = 0;
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	50e1      	str	r1, [r4, r3]
		if (ofs) {
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	f000 80f5 	beq.w	8008180 <f_lseek+0x3bc>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007f96:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	f241 0302 	movw	r3, #4098	; 0x1002
 8007fa0:	5cc3      	ldrb	r3, [r0, r3]
 8007fa2:	f241 010a 	movw	r1, #4106	; 0x100a
 8007fa6:	f830 8001 	ldrh.w	r8, [r0, r1]
 8007faa:	fb08 f803 	mul.w	r8, r8, r3
			if (ifptr > 0 &&
 8007fae:	b192      	cbz	r2, 8007fd6 <f_lseek+0x212>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007fb0:	3a01      	subs	r2, #1
 8007fb2:	1e73      	subs	r3, r6, #1
 8007fb4:	fbb3 f3f8 	udiv	r3, r3, r8
 8007fb8:	fbb2 f1f8 	udiv	r1, r2, r8
			if (ifptr > 0 &&
 8007fbc:	428b      	cmp	r3, r1
 8007fbe:	d30a      	bcc.n	8007fd6 <f_lseek+0x212>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007fc0:	f1c8 0300 	rsb	r3, r8, #0
 8007fc4:	401a      	ands	r2, r3
 8007fc6:	f241 0308 	movw	r3, #4104	; 0x1008
 8007fca:	50e2      	str	r2, [r4, r3]
				ofs -= fp->fptr;
 8007fcc:	1ab6      	subs	r6, r6, r2
				clst = fp->clust;
 8007fce:	f241 0314 	movw	r3, #4116	; 0x1014
 8007fd2:	58e7      	ldr	r7, [r4, r3]
 8007fd4:	e006      	b.n	8007fe4 <f_lseek+0x220>
				clst = fp->sclust;						/* start from the first cluster */
 8007fd6:	f241 0310 	movw	r3, #4112	; 0x1010
 8007fda:	58e7      	ldr	r7, [r4, r3]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007fdc:	b17f      	cbz	r7, 8007ffe <f_lseek+0x23a>
				fp->clust = clst;
 8007fde:	f241 0314 	movw	r3, #4116	; 0x1014
 8007fe2:	50e7      	str	r7, [r4, r3]
			if (clst != 0) {
 8007fe4:	2f00      	cmp	r7, #0
 8007fe6:	d078      	beq.n	80080da <f_lseek+0x316>
				while (ofs > bcs) {						/* Cluster following loop */
 8007fe8:	4546      	cmp	r6, r8
 8007fea:	d94c      	bls.n	8008086 <f_lseek+0x2c2>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007fec:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
 8007ff0:	f109 0906 	add.w	r9, r9, #6
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007ff4:	f241 0a14 	movw	sl, #4116	; 0x1014
					fp->clust = clst;
 8007ff8:	eb04 0b0a 	add.w	fp, r4, sl
 8007ffc:	e034      	b.n	8008068 <f_lseek+0x2a4>
					clst = create_chain(fp->fs, 0);
 8007ffe:	2100      	movs	r1, #0
 8008000:	f7fe fdda 	bl	8006bb8 <create_chain>
 8008004:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008006:	2801      	cmp	r0, #1
 8008008:	d006      	beq.n	8008018 <f_lseek+0x254>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800800a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800800e:	d008      	beq.n	8008022 <f_lseek+0x25e>
					fp->sclust = clst;
 8008010:	f241 0310 	movw	r3, #4112	; 0x1010
 8008014:	50e0      	str	r0, [r4, r3]
 8008016:	e7e2      	b.n	8007fde <f_lseek+0x21a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008018:	2502      	movs	r5, #2
 800801a:	f241 0307 	movw	r3, #4103	; 0x1007
 800801e:	54e5      	strb	r5, [r4, r3]
 8008020:	e0ae      	b.n	8008180 <f_lseek+0x3bc>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008022:	2501      	movs	r5, #1
 8008024:	f241 0307 	movw	r3, #4103	; 0x1007
 8008028:	54e5      	strb	r5, [r4, r3]
 800802a:	e0a9      	b.n	8008180 <f_lseek+0x3bc>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800802c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8008030:	4639      	mov	r1, r7
 8008032:	6818      	ldr	r0, [r3, #0]
 8008034:	f7fe fbd4 	bl	80067e0 <get_fat>
 8008038:	4607      	mov	r7, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800803a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800803e:	d03c      	beq.n	80080ba <f_lseek+0x2f6>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008040:	2f01      	cmp	r7, #1
 8008042:	d93f      	bls.n	80080c4 <f_lseek+0x300>
 8008044:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f853 300a 	ldr.w	r3, [r3, sl]
 800804e:	42bb      	cmp	r3, r7
 8008050:	d938      	bls.n	80080c4 <f_lseek+0x300>
					fp->clust = clst;
 8008052:	f8cb 7000 	str.w	r7, [fp]
					fp->fptr += bcs;
 8008056:	f241 0208 	movw	r2, #4104	; 0x1008
 800805a:	58a3      	ldr	r3, [r4, r2]
 800805c:	4443      	add	r3, r8
 800805e:	50a3      	str	r3, [r4, r2]
					ofs -= bcs;
 8008060:	eba6 0608 	sub.w	r6, r6, r8
				while (ofs > bcs) {						/* Cluster following loop */
 8008064:	45b0      	cmp	r8, r6
 8008066:	d20e      	bcs.n	8008086 <f_lseek+0x2c2>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008068:	f899 3000 	ldrb.w	r3, [r9]
 800806c:	f013 0f02 	tst.w	r3, #2
 8008070:	d0dc      	beq.n	800802c <f_lseek+0x268>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008072:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8008076:	4639      	mov	r1, r7
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f7fe fd9d 	bl	8006bb8 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800807e:	4607      	mov	r7, r0
 8008080:	2800      	cmp	r0, #0
 8008082:	d1da      	bne.n	800803a <f_lseek+0x276>
							ofs = bcs; break;
 8008084:	4646      	mov	r6, r8
				fp->fptr += ofs;
 8008086:	f241 0208 	movw	r2, #4104	; 0x1008
 800808a:	58a3      	ldr	r3, [r4, r2]
 800808c:	4433      	add	r3, r6
 800808e:	50a3      	str	r3, [r4, r2]
				if (ofs % SS(fp->fs)) {
 8008090:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	f241 030a 	movw	r3, #4106	; 0x100a
 800809a:	f830 8003 	ldrh.w	r8, [r0, r3]
 800809e:	fbb6 f3f8 	udiv	r3, r6, r8
 80080a2:	fb08 6313 	mls	r3, r8, r3, r6
 80080a6:	b1bb      	cbz	r3, 80080d8 <f_lseek+0x314>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7fe fb87 	bl	80067bc <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80080ae:	4607      	mov	r7, r0
 80080b0:	b168      	cbz	r0, 80080ce <f_lseek+0x30a>
					nsect += ofs / SS(fp->fs);
 80080b2:	fbb6 f6f8 	udiv	r6, r6, r8
 80080b6:	4437      	add	r7, r6
 80080b8:	e00f      	b.n	80080da <f_lseek+0x316>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80080ba:	2501      	movs	r5, #1
 80080bc:	f241 0307 	movw	r3, #4103	; 0x1007
 80080c0:	54e5      	strb	r5, [r4, r3]
 80080c2:	e05d      	b.n	8008180 <f_lseek+0x3bc>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80080c4:	2502      	movs	r5, #2
 80080c6:	f241 0307 	movw	r3, #4103	; 0x1007
 80080ca:	54e5      	strb	r5, [r4, r3]
 80080cc:	e058      	b.n	8008180 <f_lseek+0x3bc>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80080ce:	2502      	movs	r5, #2
 80080d0:	f241 0307 	movw	r3, #4103	; 0x1007
 80080d4:	54e5      	strb	r5, [r4, r3]
 80080d6:	e053      	b.n	8008180 <f_lseek+0x3bc>
		fp->fptr = nsect = 0;
 80080d8:	2700      	movs	r7, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80080da:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	f241 030a 	movw	r3, #4106	; 0x100a
 80080e4:	5ac2      	ldrh	r2, [r0, r3]
 80080e6:	f241 0308 	movw	r3, #4104	; 0x1008
 80080ea:	58e1      	ldr	r1, [r4, r3]
 80080ec:	fbb1 f3f2 	udiv	r3, r1, r2
 80080f0:	fb02 1313 	mls	r3, r2, r3, r1
 80080f4:	b33b      	cbz	r3, 8008146 <f_lseek+0x382>
 80080f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80080fa:	58e2      	ldr	r2, [r4, r3]
 80080fc:	42ba      	cmp	r2, r7
 80080fe:	d022      	beq.n	8008146 <f_lseek+0x382>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008100:	f241 0306 	movw	r3, #4102	; 0x1006
 8008104:	5ce3      	ldrb	r3, [r4, r3]
 8008106:	f013 0f40 	tst.w	r3, #64	; 0x40
 800810a:	d00d      	beq.n	8008128 <f_lseek+0x364>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800810c:	2301      	movs	r3, #1
 800810e:	4621      	mov	r1, r4
 8008110:	f241 0601 	movw	r6, #4097	; 0x1001
 8008114:	5d80      	ldrb	r0, [r0, r6]
 8008116:	f7fd fe3d 	bl	8005d94 <disk_write>
 800811a:	bb30      	cbnz	r0, 800816a <f_lseek+0x3a6>
				fp->flag &= ~FA__DIRTY;
 800811c:	f241 0206 	movw	r2, #4102	; 0x1006
 8008120:	5ca3      	ldrb	r3, [r4, r2]
 8008122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008126:	54a3      	strb	r3, [r4, r2]
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008128:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800812c:	681e      	ldr	r6, [r3, #0]
 800812e:	2301      	movs	r3, #1
 8008130:	463a      	mov	r2, r7
 8008132:	4621      	mov	r1, r4
 8008134:	f241 0001 	movw	r0, #4097	; 0x1001
 8008138:	5c30      	ldrb	r0, [r6, r0]
 800813a:	f7fd fe1f 	bl	8005d7c <disk_read>
 800813e:	b9c8      	cbnz	r0, 8008174 <f_lseek+0x3b0>
			fp->dsect = nsect;
 8008140:	f241 0318 	movw	r3, #4120	; 0x1018
 8008144:	50e7      	str	r7, [r4, r3]
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008146:	f241 0308 	movw	r3, #4104	; 0x1008
 800814a:	58e2      	ldr	r2, [r4, r3]
 800814c:	f241 030c 	movw	r3, #4108	; 0x100c
 8008150:	58e3      	ldr	r3, [r4, r3]
 8008152:	429a      	cmp	r2, r3
 8008154:	d914      	bls.n	8008180 <f_lseek+0x3bc>
			fp->fsize = fp->fptr;
 8008156:	f241 030c 	movw	r3, #4108	; 0x100c
 800815a:	50e2      	str	r2, [r4, r3]
			fp->flag |= FA__WRITTEN;
 800815c:	f241 0206 	movw	r2, #4102	; 0x1006
 8008160:	5ca3      	ldrb	r3, [r4, r2]
 8008162:	f043 0320 	orr.w	r3, r3, #32
 8008166:	54a3      	strb	r3, [r4, r2]
 8008168:	e00a      	b.n	8008180 <f_lseek+0x3bc>
					ABORT(fp->fs, FR_DISK_ERR);
 800816a:	2501      	movs	r5, #1
 800816c:	f241 0307 	movw	r3, #4103	; 0x1007
 8008170:	54e5      	strb	r5, [r4, r3]
 8008172:	e005      	b.n	8008180 <f_lseek+0x3bc>
				ABORT(fp->fs, FR_DISK_ERR);
 8008174:	2501      	movs	r5, #1
 8008176:	f241 0307 	movw	r3, #4103	; 0x1007
 800817a:	54e5      	strb	r5, [r4, r3]
 800817c:	e000      	b.n	8008180 <f_lseek+0x3bc>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800817e:	461d      	mov	r5, r3
}
 8008180:	4628      	mov	r0, r5
 8008182:	b003      	add	sp, #12
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008188:	2511      	movs	r5, #17
 800818a:	e7f9      	b.n	8008180 <f_lseek+0x3bc>

0800818c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800818c:	b40e      	push	{r1, r2, r3}
 800818e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008192:	b09c      	sub	sp, #112	; 0x70
 8008194:	ab25      	add	r3, sp, #148	; 0x94
 8008196:	f853 5b04 	ldr.w	r5, [r3], #4
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 800819a:	9003      	str	r0, [sp, #12]
	pb.nchr = pb.idx = 0;
 800819c:	2200      	movs	r2, #0
 800819e:	9204      	str	r2, [sp, #16]
 80081a0:	9205      	str	r2, [sp, #20]

	va_start(arp, fmt);
 80081a2:	931b      	str	r3, [sp, #108]	; 0x6c
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
 80081a4:	f04f 0a08 	mov.w	sl, #8
 80081a8:	f10d 0657 	add.w	r6, sp, #87	; 0x57
 80081ac:	e003      	b.n	80081b6 <f_printf+0x2a>
		c = *fmt++;
 80081ae:	3501      	adds	r5, #1
			putc_bfd(&pb, c);
 80081b0:	a803      	add	r0, sp, #12
 80081b2:	f7ff fd57 	bl	8007c64 <putc_bfd>
		c = *fmt++;
 80081b6:	7829      	ldrb	r1, [r5, #0]
		if (c == 0) break;			/* End of string */
 80081b8:	2900      	cmp	r1, #0
 80081ba:	f000 8110 	beq.w	80083de <f_printf+0x252>
		if (c != '%') {				/* Non escape character */
 80081be:	2925      	cmp	r1, #37	; 0x25
 80081c0:	d1f5      	bne.n	80081ae <f_printf+0x22>
		c = *fmt++;
 80081c2:	7869      	ldrb	r1, [r5, #1]
		if (c == '0') {				/* Flag: '0' padding */
 80081c4:	2930      	cmp	r1, #48	; 0x30
 80081c6:	d043      	beq.n	8008250 <f_printf+0xc4>
			if (c == '-') {			/* Flag: left justified */
 80081c8:	292d      	cmp	r1, #45	; 0x2d
 80081ca:	d046      	beq.n	800825a <f_printf+0xce>
		c = *fmt++;
 80081cc:	3502      	adds	r5, #2
		w = f = 0;
 80081ce:	f04f 0c00 	mov.w	ip, #0
		while (IsDigit(c)) {		/* Precision */
 80081d2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b09      	cmp	r3, #9
 80081da:	d843      	bhi.n	8008264 <f_printf+0xd8>
 80081dc:	2400      	movs	r4, #0
			w = w * 10 + c - '0';
 80081de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80081e2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80081e6:	3c30      	subs	r4, #48	; 0x30
			c = *fmt++;
 80081e8:	f815 1b01 	ldrb.w	r1, [r5], #1
		while (IsDigit(c)) {		/* Precision */
 80081ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d9f3      	bls.n	80081de <f_printf+0x52>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80081f6:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 80081fa:	2b4c      	cmp	r3, #76	; 0x4c
 80081fc:	d034      	beq.n	8008268 <f_printf+0xdc>
		if (!c) break;
 80081fe:	2900      	cmp	r1, #0
 8008200:	f000 80ed 	beq.w	80083de <f_printf+0x252>
		if (IsLower(d)) d -= 0x20;
 8008204:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b19      	cmp	r3, #25
 800820c:	bf9a      	itte	ls
 800820e:	f1a1 0320 	subls.w	r3, r1, #32
 8008212:	b2db      	uxtbls	r3, r3
		d = c;
 8008214:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 8008216:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
 800821a:	2a16      	cmp	r2, #22
 800821c:	d862      	bhi.n	80082e4 <f_printf+0x158>
 800821e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008222:	0135      	.short	0x0135
 8008224:	00650059 	.word	0x00650059
 8008228:	00610061 	.word	0x00610061
 800822c:	00610061 	.word	0x00610061
 8008230:	00610061 	.word	0x00610061
 8008234:	00610061 	.word	0x00610061
 8008238:	00610061 	.word	0x00610061
 800823c:	00610141 	.word	0x00610141
 8008240:	00610061 	.word	0x00610061
 8008244:	00610028 	.word	0x00610028
 8008248:	00610065 	.word	0x00610065
 800824c:	01000061 	.word	0x01000061
			f = 1; c = *fmt++;
 8008250:	78a9      	ldrb	r1, [r5, #2]
 8008252:	3503      	adds	r5, #3
 8008254:	f04f 0c01 	mov.w	ip, #1
 8008258:	e7bb      	b.n	80081d2 <f_printf+0x46>
				f = 2; c = *fmt++;
 800825a:	78a9      	ldrb	r1, [r5, #2]
 800825c:	3503      	adds	r5, #3
 800825e:	f04f 0c02 	mov.w	ip, #2
 8008262:	e7b6      	b.n	80081d2 <f_printf+0x46>
		while (IsDigit(c)) {		/* Precision */
 8008264:	2400      	movs	r4, #0
 8008266:	e7c6      	b.n	80081f6 <f_printf+0x6a>
			f |= 4; c = *fmt++;
 8008268:	f04c 0c04 	orr.w	ip, ip, #4
 800826c:	7829      	ldrb	r1, [r5, #0]
 800826e:	3501      	adds	r5, #1
 8008270:	e7c5      	b.n	80081fe <f_printf+0x72>
			p = va_arg(arp, TCHAR*);
 8008272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	921b      	str	r2, [sp, #108]	; 0x6c
 8008278:	681f      	ldr	r7, [r3, #0]
			for (j = 0; p[j]; j++) ;
 800827a:	7839      	ldrb	r1, [r7, #0]
 800827c:	2900      	cmp	r1, #0
 800827e:	f000 80ca 	beq.w	8008416 <f_printf+0x28a>
 8008282:	463b      	mov	r3, r7
 8008284:	2200      	movs	r2, #0
 8008286:	e000      	b.n	800828a <f_printf+0xfe>
 8008288:	4642      	mov	r2, r8
 800828a:	f102 0801 	add.w	r8, r2, #1
 800828e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008292:	2800      	cmp	r0, #0
 8008294:	d1f8      	bne.n	8008288 <f_printf+0xfc>
			if (!(f & 2)) {
 8008296:	f01c 0f02 	tst.w	ip, #2
 800829a:	f000 80d1 	beq.w	8008440 <f_printf+0x2b4>
			while (*p) putc_bfd(&pb, *p++);
 800829e:	a803      	add	r0, sp, #12
 80082a0:	f7ff fce0 	bl	8007c64 <putc_bfd>
 80082a4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d1f8      	bne.n	800829e <f_printf+0x112>
			while (j++ < w) putc_bfd(&pb, ' ');
 80082ac:	f108 0701 	add.w	r7, r8, #1
 80082b0:	4544      	cmp	r4, r8
 80082b2:	d980      	bls.n	80081b6 <f_printf+0x2a>
 80082b4:	3401      	adds	r4, #1
 80082b6:	f04f 0820 	mov.w	r8, #32
 80082ba:	4641      	mov	r1, r8
 80082bc:	a803      	add	r0, sp, #12
 80082be:	f7ff fcd1 	bl	8007c64 <putc_bfd>
 80082c2:	3701      	adds	r7, #1
 80082c4:	42a7      	cmp	r7, r4
 80082c6:	d1f8      	bne.n	80082ba <f_printf+0x12e>
 80082c8:	e775      	b.n	80081b6 <f_printf+0x2a>
			for (j = 0; p[j]; j++) ;
 80082ca:	f04f 0800 	mov.w	r8, #0
				while (j++ < w) putc_bfd(&pb, ' ');
 80082ce:	2301      	movs	r3, #1
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	e0b9      	b.n	8008448 <f_printf+0x2bc>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80082d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082d6:	1d1a      	adds	r2, r3, #4
 80082d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80082da:	7819      	ldrb	r1, [r3, #0]
 80082dc:	a803      	add	r0, sp, #12
 80082de:	f7ff fcc1 	bl	8007c64 <putc_bfd>
 80082e2:	e768      	b.n	80081b6 <f_printf+0x2a>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80082e4:	a803      	add	r0, sp, #12
 80082e6:	f7ff fcbd 	bl	8007c64 <putc_bfd>
 80082ea:	e764      	b.n	80081b6 <f_printf+0x2a>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80082ec:	f01c 0f04 	tst.w	ip, #4
 80082f0:	d01a      	beq.n	8008328 <f_printf+0x19c>
			r = 10; break;
 80082f2:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80082f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082f6:	1d17      	adds	r7, r2, #4
 80082f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80082fa:	f8d2 9000 	ldr.w	r9, [r2]
		if (d == 'D' && (v & 0x80000000)) {
 80082fe:	2b44      	cmp	r3, #68	; 0x44
 8008300:	d106      	bne.n	8008310 <f_printf+0x184>
 8008302:	f1b9 0f00 	cmp.w	r9, #0
			v = 0 - v;
 8008306:	bfbc      	itt	lt
 8008308:	f1c9 0900 	rsblt	r9, r9, #0
			f |= 8;
 800830c:	f04c 0c08 	orrlt.w	ip, ip, #8
 8008310:	2978      	cmp	r1, #120	; 0x78
 8008312:	bf0c      	ite	eq
 8008314:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8008318:	f04f 0807 	movne.w	r8, #7
			r = 8; break;
 800831c:	a916      	add	r1, sp, #88	; 0x58
		}
		i = 0;
 800831e:	f04f 0e00 	mov.w	lr, #0
 8008322:	e00b      	b.n	800833c <f_printf+0x1b0>
			r = 16; break;
 8008324:	2010      	movs	r0, #16
 8008326:	e7e5      	b.n	80082f4 <f_printf+0x168>
			r = 10; break;
 8008328:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800832a:	2b44      	cmp	r3, #68	; 0x44
 800832c:	d17e      	bne.n	800842c <f_printf+0x2a0>
 800832e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008330:	1d1a      	adds	r2, r3, #4
 8008332:	921b      	str	r2, [sp, #108]	; 0x6c
 8008334:	f8d3 9000 	ldr.w	r9, [r3]
 8008338:	e7e3      	b.n	8008302 <f_printf+0x176>
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 800833a:	46be      	mov	lr, r7
			d = (TCHAR)(v % r); v /= r;
 800833c:	fbb9 f2f0 	udiv	r2, r9, r0
 8008340:	fb00 9312 	mls	r3, r0, r2, r9
 8008344:	b2db      	uxtb	r3, r3
 8008346:	4691      	mov	r9, r2
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008348:	2b09      	cmp	r3, #9
 800834a:	bf84      	itt	hi
 800834c:	4443      	addhi	r3, r8
 800834e:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8008350:	f10e 0701 	add.w	r7, lr, #1
 8008354:	3330      	adds	r3, #48	; 0x30
 8008356:	f801 3b01 	strb.w	r3, [r1], #1
		} while (v && i < sizeof s / sizeof s[0]);
 800835a:	b10a      	cbz	r2, 8008360 <f_printf+0x1d4>
 800835c:	2f10      	cmp	r7, #16
 800835e:	d1ec      	bne.n	800833a <f_printf+0x1ae>
		if (f & 8) s[i++] = '-';
 8008360:	f01c 0f08 	tst.w	ip, #8
 8008364:	d006      	beq.n	8008374 <f_printf+0x1e8>
 8008366:	ab1c      	add	r3, sp, #112	; 0x70
 8008368:	441f      	add	r7, r3
 800836a:	232d      	movs	r3, #45	; 0x2d
 800836c:	f807 3c18 	strb.w	r3, [r7, #-24]
 8008370:	f10e 0702 	add.w	r7, lr, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8008374:	f00c 0301 	and.w	r3, ip, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	bf14      	ite	ne
 800837c:	f04f 0830 	movne.w	r8, #48	; 0x30
 8008380:	f04f 0820 	moveq.w	r8, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008384:	f01c 0f02 	tst.w	ip, #2
 8008388:	d127      	bne.n	80083da <f_printf+0x24e>
 800838a:	f107 0901 	add.w	r9, r7, #1
 800838e:	42a7      	cmp	r7, r4
 8008390:	d20b      	bcs.n	80083aa <f_printf+0x21e>
 8008392:	f104 0b01 	add.w	fp, r4, #1
 8008396:	4641      	mov	r1, r8
 8008398:	a803      	add	r0, sp, #12
 800839a:	f7ff fc63 	bl	8007c64 <putc_bfd>
 800839e:	f109 0901 	add.w	r9, r9, #1
 80083a2:	45d9      	cmp	r9, fp
 80083a4:	d1f7      	bne.n	8008396 <f_printf+0x20a>
 80083a6:	f104 0901 	add.w	r9, r4, #1
 80083aa:	3f01      	subs	r7, #1
 80083ac:	ab16      	add	r3, sp, #88	; 0x58
 80083ae:	441f      	add	r7, r3
		do putc_bfd(&pb, s[--i]); while (i);
 80083b0:	f817 1901 	ldrb.w	r1, [r7], #-1
 80083b4:	a803      	add	r0, sp, #12
 80083b6:	f7ff fc55 	bl	8007c64 <putc_bfd>
 80083ba:	42b7      	cmp	r7, r6
 80083bc:	d1f8      	bne.n	80083b0 <f_printf+0x224>
		while (j++ < w) putc_bfd(&pb, d);
 80083be:	f109 0701 	add.w	r7, r9, #1
 80083c2:	45a1      	cmp	r9, r4
 80083c4:	f4bf aef7 	bcs.w	80081b6 <f_printf+0x2a>
 80083c8:	3401      	adds	r4, #1
 80083ca:	4641      	mov	r1, r8
 80083cc:	a803      	add	r0, sp, #12
 80083ce:	f7ff fc49 	bl	8007c64 <putc_bfd>
 80083d2:	3701      	adds	r7, #1
 80083d4:	42a7      	cmp	r7, r4
 80083d6:	d1f8      	bne.n	80083ca <f_printf+0x23e>
 80083d8:	e6ed      	b.n	80081b6 <f_printf+0x2a>
		j = i; d = (f & 1) ? '0' : ' ';
 80083da:	46b9      	mov	r9, r7
 80083dc:	e7e5      	b.n	80083aa <f_printf+0x21e>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80083de:	9a04      	ldr	r2, [sp, #16]
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	db0f      	blt.n	8008404 <f_printf+0x278>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80083e4:	ab1a      	add	r3, sp, #104	; 0x68
 80083e6:	a906      	add	r1, sp, #24
 80083e8:	9803      	ldr	r0, [sp, #12]
 80083ea:	f7ff fadd 	bl	80079a8 <f_write>
 80083ee:	b960      	cbnz	r0, 800840a <f_printf+0x27e>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80083f0:	9a04      	ldr	r2, [sp, #16]
 80083f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d10b      	bne.n	8008410 <f_printf+0x284>
 80083f8:	9805      	ldr	r0, [sp, #20]
	return EOF;
}
 80083fa:	b01c      	add	sp, #112	; 0x70
 80083fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	b003      	add	sp, #12
 8008402:	4770      	bx	lr
	return EOF;
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e7f7      	b.n	80083fa <f_printf+0x26e>
 800840a:	f04f 30ff 	mov.w	r0, #4294967295
 800840e:	e7f4      	b.n	80083fa <f_printf+0x26e>
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	e7f1      	b.n	80083fa <f_printf+0x26e>
			if (!(f & 2)) {
 8008416:	f01c 0f02 	tst.w	ip, #2
 800841a:	d02a      	beq.n	8008472 <f_printf+0x2e6>
			for (j = 0; p[j]; j++) ;
 800841c:	f04f 0800 	mov.w	r8, #0
 8008420:	e744      	b.n	80082ac <f_printf+0x120>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008422:	f01c 0f04 	tst.w	ip, #4
 8008426:	f47f af7d 	bne.w	8008324 <f_printf+0x198>
			r = 16; break;
 800842a:	2010      	movs	r0, #16
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800842c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800842e:	1d1a      	adds	r2, r3, #4
 8008430:	921b      	str	r2, [sp, #108]	; 0x6c
 8008432:	f8d3 9000 	ldr.w	r9, [r3]
 8008436:	e76b      	b.n	8008310 <f_printf+0x184>
			while (*p) putc_bfd(&pb, *p++);
 8008438:	7839      	ldrb	r1, [r7, #0]
				while (j++ < w) putc_bfd(&pb, ' ');
 800843a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800843e:	e72e      	b.n	800829e <f_printf+0x112>
 8008440:	1c93      	adds	r3, r2, #2
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	45a0      	cmp	r8, r4
 8008446:	d2f7      	bcs.n	8008438 <f_printf+0x2ac>
 8008448:	f104 0b01 	add.w	fp, r4, #1
 800844c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008450:	2120      	movs	r1, #32
 8008452:	a803      	add	r0, sp, #12
 8008454:	f7ff fc06 	bl	8007c64 <putc_bfd>
 8008458:	f109 0901 	add.w	r9, r9, #1
 800845c:	45d9      	cmp	r9, fp
 800845e:	d1f7      	bne.n	8008450 <f_printf+0x2c4>
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	eba3 0808 	sub.w	r8, r3, r8
 8008466:	44a0      	add	r8, r4
			while (*p) putc_bfd(&pb, *p++);
 8008468:	7839      	ldrb	r1, [r7, #0]
 800846a:	2900      	cmp	r1, #0
 800846c:	f47f af17 	bne.w	800829e <f_printf+0x112>
 8008470:	e71c      	b.n	80082ac <f_printf+0x120>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008472:	2c00      	cmp	r4, #0
 8008474:	f47f af29 	bne.w	80082ca <f_printf+0x13e>
 8008478:	f04f 0801 	mov.w	r8, #1
 800847c:	e716      	b.n	80082ac <f_printf+0x120>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800847e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008480:	1d1a      	adds	r2, r3, #4
 8008482:	921b      	str	r2, [sp, #108]	; 0x6c
 8008484:	f8d3 9000 	ldr.w	r9, [r3]
			r = 2; break;
 8008488:	2002      	movs	r0, #2
 800848a:	e741      	b.n	8008310 <f_printf+0x184>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800848c:	f01c 0f04 	tst.w	ip, #4
 8008490:	d1f5      	bne.n	800847e <f_printf+0x2f2>
			r = 2; break;
 8008492:	2002      	movs	r0, #2
 8008494:	e749      	b.n	800832a <f_printf+0x19e>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008496:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	921b      	str	r2, [sp, #108]	; 0x6c
 800849c:	f8d3 9000 	ldr.w	r9, [r3]
			r = 8; break;
 80084a0:	4650      	mov	r0, sl
 80084a2:	e735      	b.n	8008310 <f_printf+0x184>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80084a4:	f01c 0f04 	tst.w	ip, #4
 80084a8:	d1f5      	bne.n	8008496 <f_printf+0x30a>
			r = 8; break;
 80084aa:	4650      	mov	r0, sl
 80084ac:	e7be      	b.n	800842c <f_printf+0x2a0>
	...

080084b0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <FATFS_LinkDriverEx+0x48>)
 80084b2:	7a5b      	ldrb	r3, [r3, #9]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d901      	bls.n	80084be <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 80084ba:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 80084bc:	4770      	bx	lr
{
 80084be:	b430      	push	{r4, r5}
    disk.is_initialized[disk.nbr] = 0;
 80084c0:	4c0d      	ldr	r4, [pc, #52]	; (80084f8 <FATFS_LinkDriverEx+0x48>)
 80084c2:	7a65      	ldrb	r5, [r4, #9]
 80084c4:	b2ed      	uxtb	r5, r5
 80084c6:	2300      	movs	r3, #0
 80084c8:	5563      	strb	r3, [r4, r5]
    disk.drv[disk.nbr] = drv;  
 80084ca:	7a65      	ldrb	r5, [r4, #9]
 80084cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80084d0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 80084d2:	7a60      	ldrb	r0, [r4, #9]
 80084d4:	4420      	add	r0, r4
 80084d6:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80084d8:	7a62      	ldrb	r2, [r4, #9]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	1c50      	adds	r0, r2, #1
 80084de:	b2c0      	uxtb	r0, r0
 80084e0:	7260      	strb	r0, [r4, #9]
    path[0] = DiskNum + '0';
 80084e2:	3230      	adds	r2, #48	; 0x30
 80084e4:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80084e6:	223a      	movs	r2, #58	; 0x3a
 80084e8:	704a      	strb	r2, [r1, #1]
    path[2] = '/';
 80084ea:	222f      	movs	r2, #47	; 0x2f
 80084ec:	708a      	strb	r2, [r1, #2]
    path[3] = 0;
 80084ee:	70cb      	strb	r3, [r1, #3]
    ret = 0;
 80084f0:	4618      	mov	r0, r3
}
 80084f2:	bc30      	pop	{r4, r5}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000690 	.word	0x20000690

080084fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80084fc:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80084fe:	2200      	movs	r2, #0
 8008500:	f7ff ffd6 	bl	80084b0 <FATFS_LinkDriverEx>
}
 8008504:	bd08      	pop	{r3, pc}
	...

08008508 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008508:	287f      	cmp	r0, #127	; 0x7f
 800850a:	d919      	bls.n	8008540 <ff_convert+0x38>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800850c:	b971      	cbnz	r1, 800852c <ff_convert+0x24>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 800850e:	28c7      	cmp	r0, #199	; 0xc7
 8008510:	d013      	beq.n	800853a <ff_convert+0x32>
 8008512:	4a0c      	ldr	r2, [pc, #48]	; (8008544 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
 8008514:	2301      	movs	r3, #1
				if (chr == Tbl[c]) break;
 8008516:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800851a:	4281      	cmp	r1, r0
 800851c:	d003      	beq.n	8008526 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
 800851e:	3301      	adds	r3, #1
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d1f7      	bne.n	8008516 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
 8008526:	3380      	adds	r3, #128	; 0x80
 8008528:	b2d8      	uxtb	r0, r3
 800852a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800852c:	28ff      	cmp	r0, #255	; 0xff
 800852e:	d806      	bhi.n	800853e <ff_convert+0x36>
 8008530:	3880      	subs	r0, #128	; 0x80
 8008532:	4b04      	ldr	r3, [pc, #16]	; (8008544 <ff_convert+0x3c>)
 8008534:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8008538:	4770      	bx	lr
			for (c = 0; c < 0x80; c++) {
 800853a:	2300      	movs	r3, #0
 800853c:	e7f3      	b.n	8008526 <ff_convert+0x1e>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800853e:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	08009080 	.word	0x08009080

08008548 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008548:	2861      	cmp	r0, #97	; 0x61
 800854a:	d010      	beq.n	800856e <ff_wtoupper+0x26>
 800854c:	4909      	ldr	r1, [pc, #36]	; (8008574 <ff_wtoupper+0x2c>)
 800854e:	2201      	movs	r2, #1
 8008550:	2362      	movs	r3, #98	; 0x62
 8008552:	4298      	cmp	r0, r3
 8008554:	d005      	beq.n	8008562 <ff_wtoupper+0x1a>
 8008556:	3201      	adds	r2, #1
 8008558:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1f8      	bne.n	8008552 <ff_wtoupper+0xa>
 8008560:	e003      	b.n	800856a <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008562:	b118      	cbz	r0, 800856c <ff_wtoupper+0x24>
 8008564:	4b04      	ldr	r3, [pc, #16]	; (8008578 <ff_wtoupper+0x30>)
 8008566:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
 800856a:	4770      	bx	lr
 800856c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800856e:	2200      	movs	r2, #0
 8008570:	e7f8      	b.n	8008564 <ff_wtoupper+0x1c>
 8008572:	bf00      	nop
 8008574:	08009182 	.word	0x08009182
 8008578:	08009360 	.word	0x08009360

0800857c <__libc_init_array>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	2500      	movs	r5, #0
 8008580:	4e0c      	ldr	r6, [pc, #48]	; (80085b4 <__libc_init_array+0x38>)
 8008582:	4c0d      	ldr	r4, [pc, #52]	; (80085b8 <__libc_init_array+0x3c>)
 8008584:	1ba4      	subs	r4, r4, r6
 8008586:	10a4      	asrs	r4, r4, #2
 8008588:	42a5      	cmp	r5, r4
 800858a:	d109      	bne.n	80085a0 <__libc_init_array+0x24>
 800858c:	f000 f82e 	bl	80085ec <_init>
 8008590:	2500      	movs	r5, #0
 8008592:	4e0a      	ldr	r6, [pc, #40]	; (80085bc <__libc_init_array+0x40>)
 8008594:	4c0a      	ldr	r4, [pc, #40]	; (80085c0 <__libc_init_array+0x44>)
 8008596:	1ba4      	subs	r4, r4, r6
 8008598:	10a4      	asrs	r4, r4, #2
 800859a:	42a5      	cmp	r5, r4
 800859c:	d105      	bne.n	80085aa <__libc_init_array+0x2e>
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085a4:	4798      	blx	r3
 80085a6:	3501      	adds	r5, #1
 80085a8:	e7ee      	b.n	8008588 <__libc_init_array+0xc>
 80085aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085ae:	4798      	blx	r3
 80085b0:	3501      	adds	r5, #1
 80085b2:	e7f2      	b.n	800859a <__libc_init_array+0x1e>
 80085b4:	08009540 	.word	0x08009540
 80085b8:	08009540 	.word	0x08009540
 80085bc:	08009540 	.word	0x08009540
 80085c0:	08009544 	.word	0x08009544

080085c4 <memcpy>:
 80085c4:	b510      	push	{r4, lr}
 80085c6:	1e43      	subs	r3, r0, #1
 80085c8:	440a      	add	r2, r1
 80085ca:	4291      	cmp	r1, r2
 80085cc:	d100      	bne.n	80085d0 <memcpy+0xc>
 80085ce:	bd10      	pop	{r4, pc}
 80085d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d8:	e7f7      	b.n	80085ca <memcpy+0x6>

080085da <memset>:
 80085da:	4603      	mov	r3, r0
 80085dc:	4402      	add	r2, r0
 80085de:	4293      	cmp	r3, r2
 80085e0:	d100      	bne.n	80085e4 <memset+0xa>
 80085e2:	4770      	bx	lr
 80085e4:	f803 1b01 	strb.w	r1, [r3], #1
 80085e8:	e7f9      	b.n	80085de <memset+0x4>
	...

080085ec <_init>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr

080085f8 <_fini>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	bf00      	nop
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr
