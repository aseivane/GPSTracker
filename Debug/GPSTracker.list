
GPSTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d57c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  0800d688  0800d688  0001d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5d8  0800e5d8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5d8  0800e5d8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5d8  0800e5d8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5d8  0800e5d8  0001e5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5dc  0800e5dc  0001e5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800e5e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  20000024  0800e604  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  0800e604  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b27a  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cc7  00000000  00000000  0006b2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035c8  00000000  00000000  00070f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000032e8  00000000  00000000  00074558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8dc  00000000  00000000  00077840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ccc5  00000000  00000000  0009511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5059  00000000  00000000  000c1de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e828  00000000  00000000  00166e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d670 	.word	0x0800d670

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800d670 	.word	0x0800d670

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <initGPS>:
extern uint8_t time_updated;
extern uint8_t date_updated;


void initGPS(GPSdata * _gps)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	initGPSmodel(_gps);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f98d 	bl	8000a78 <initGPSmodel>



	configGPS();	// Sends directives for selected NMEA talkers
 800075e:	f000 f915 	bl	800098c <configGPS>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <updateGPS>:

/**
  * @brief
  */
void updateGPS()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000772:	af00      	add	r7, sp, #0
	uint8_t fields[FIELD_BUFF][FIELD_BUFF];
	uint8_t* ptrSentence;
	extern uint8_t usart_rx_dma_buffer[];
	uint8_t copy_buffer[MAX_NMEA_LEN];

	memcpy(copy_buffer, usart_rx_dma_buffer, MAX_NMEA_LEN);
 8000774:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000778:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <updateGPS+0x88>)
 800077e:	4618      	mov	r0, r3
 8000780:	4611      	mov	r1, r2
 8000782:	f240 238a 	movw	r3, #650	; 0x28a
 8000786:	461a      	mov	r2, r3
 8000788:	f00c ff5c 	bl	800d644 <memcpy>

	ptrSentence = get_sentence_ptr(copy_buffer, "GPGGA", NULL);
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	4919      	ldr	r1, [pc, #100]	; (80007f8 <updateGPS+0x8c>)
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fc36 	bl	8001004 <get_sentence_ptr>
 8000798:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

	if( ptrSentence != NULL )
 800079c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d016      	beq.n	80007d2 <updateGPS+0x66>
	{
	  if( is_sentence_complete(copy_buffer, ptrSentence) )
 80007a4:	463b      	mov	r3, r7
 80007a6:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fbfd 	bl	8000faa <is_sentence_complete>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d00d      	beq.n	80007d2 <updateGPS+0x66>
	  {
		  //field_count = coma_count(ptrSentence);
		  get_fields(ptrSentence , fields);
 80007b6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80007ba:	4619      	mov	r1, r3
 80007bc:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 80007c0:	f000 fb4a 	bl	8000e58 <get_fields>
		  GPS_update(&gps, fields, GNGGA);
 80007c4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <updateGPS+0x90>)
 80007ce:	f000 f971 	bl	8000ab4 <GPS_update>
	  }
	}

	if(!(time_updated && date_updated))
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <updateGPS+0x94>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <updateGPS+0x76>
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <updateGPS+0x98>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <updateGPS+0x7e>
	{
		updateTime(copy_buffer);
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f80f 	bl	8000808 <updateTime>
	}
}
 80007ea:	bf00      	nop
 80007ec:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200005f4 	.word	0x200005f4
 80007f8:	0800d688 	.word	0x0800d688
 80007fc:	2000090c 	.word	0x2000090c
 8000800:	2000087e 	.word	0x2000087e
 8000804:	2000087f 	.word	0x2000087f

08000808 <updateTime>:

void updateTime(uint8_t copy_buffer[])
{
 8000808:	b580      	push	{r7, lr}
 800080a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800080e:	af00      	add	r7, sp, #0
 8000810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000818:	6018      	str	r0, [r3, #0]
	uint8_t* ptrSentence;
	uint8_t fields[FIELD_BUFF][FIELD_BUFF];
	uint8_t f_to_char[100];


	ptrSentence = get_sentence_ptr(copy_buffer, "GPZDA", NULL);
 800081a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800081e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000822:	2200      	movs	r2, #0
 8000824:	4924      	ldr	r1, [pc, #144]	; (80008b8 <updateTime+0xb0>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	f000 fbec 	bl	8001004 <get_sentence_ptr>
 800082c:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
	if( ptrSentence != NULL )
 8000830:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000834:	2b00      	cmp	r3, #0
 8000836:	d03a      	beq.n	80008ae <updateTime+0xa6>
	{
		#ifdef DEBUG
		HAL_UART_Transmit(&huart3, (uint8_t *)"Sentence found\r\n", strlen("Sentence found\r\n"),1000);
		#endif
		if( is_sentence_complete(copy_buffer, ptrSentence) )
 8000838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800083c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000840:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f000 fbb0 	bl	8000faa <is_sentence_complete>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d02e      	beq.n	80008ae <updateTime+0xa6>
		{
			  get_fields(ptrSentence , fields);
 8000850:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000854:	4619      	mov	r1, r3
 8000856:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800085a:	f000 fafd 	bl	8000e58 <get_fields>
			  if( *(fields[0]) != '0' )
 800085e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000862:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b30      	cmp	r3, #48	; 0x30
 800086a:	d010      	beq.n	800088e <updateTime+0x86>
			  {
				  memcpy(f_to_char,fields[0],6);
 800086c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2206      	movs	r2, #6
 8000876:	4618      	mov	r0, r3
 8000878:	f00c fee4 	bl	800d644 <memcpy>
				  time_updated = setTime(f_to_char);
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f84d 	bl	8000920 <setTime>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <updateTime+0xb4>)
 800088c:	701a      	strb	r2, [r3, #0]
			  }

			  if(  *(fields[1]) != '0')
 800088e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000892:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000896:	7d1b      	ldrb	r3, [r3, #20]
 8000898:	2b30      	cmp	r3, #48	; 0x30
 800089a:	d008      	beq.n	80008ae <updateTime+0xa6>
			  {
				  date_updated = setDate(fields);
 800089c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f80f 	bl	80008c4 <setDate>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <updateTime+0xb8>)
 80008ac:	701a      	strb	r2, [r3, #0]
			  }
		}
	}
}
 80008ae:	bf00      	nop
 80008b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800d690 	.word	0x0800d690
 80008bc:	2000087e 	.word	0x2000087e
 80008c0:	2000087f 	.word	0x2000087f

080008c4 <setDate>:

uint8_t setDate(uint8_t** fields)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef Date;

  	Date.Date = (uint8_t) ascii_to_int(fields[1]);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3304      	adds	r3, #4
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fbf6 	bl	80010c4 <ascii_to_int>
 80008d8:	4603      	mov	r3, r0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
	Date.Month = (uint8_t) ascii_to_int(fields[2]);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3308      	adds	r3, #8
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fbed 	bl	80010c4 <ascii_to_int>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	737b      	strb	r3, [r7, #13]
	Date.Year = (uint8_t) ascii_to_int(fields[3]+2);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	330c      	adds	r3, #12
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3302      	adds	r3, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fbe3 	bl	80010c4 <ascii_to_int>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	73fb      	strb	r3, [r7, #15]

	HAL_RTC_SetDate(&hrtc, &Date,  RTC_FORMAT_BIN);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <setDate+0x58>)
 800090e:	f006 fc45 	bl	800719c <HAL_RTC_SetDate>
	return 1U;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200004bc 	.word	0x200004bc

08000920 <setTime>:

uint8_t setTime(uint8_t* f_to_char)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef Time;

	f_to_char[6] = '\0';
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3306      	adds	r3, #6
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
	Time.Seconds = (uint8_t) ascii_to_int(f_to_char+4);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3304      	adds	r3, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fbc5 	bl	80010c4 <ascii_to_int>
 800093a:	4603      	mov	r3, r0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	73bb      	strb	r3, [r7, #14]
	f_to_char[4] = '\0';
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3304      	adds	r3, #4
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
	Time.Minutes = (uint8_t) ascii_to_int(f_to_char+2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3302      	adds	r3, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fbb9 	bl	80010c4 <ascii_to_int>
 8000952:	4603      	mov	r3, r0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	737b      	strb	r3, [r7, #13]
	f_to_char[2] = '\0';
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3302      	adds	r3, #2
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
	Time.Hours = (uint8_t) ascii_to_int(f_to_char) - 3;
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 fbaf 	bl	80010c4 <ascii_to_int>
 8000966:	4603      	mov	r3, r0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3b03      	subs	r3, #3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	733b      	strb	r3, [r7, #12]

	HAL_RTC_SetTime(&hrtc, &Time,  RTC_FORMAT_BIN);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <setTime+0x68>)
 800097a:	f006 fa9f 	bl	8006ebc <HAL_RTC_SetTime>
	return 1U;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200004bc 	.word	0x200004bc

0800098c <configGPS>:
/**
  * @brief  Config NMEA talkers
  * @retval -
  */
void configGPS()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b092      	sub	sp, #72	; 0x48
 8000990:	af00      	add	r7, sp, #0
	uint8_t const enable_ZDA [ZDA_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x08, 0x01, 0x03, 0x20};
 8000992:	4a32      	ldr	r2, [pc, #200]	; (8000a5c <configGPS+0xd0>)
 8000994:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000998:	ca07      	ldmia	r2, {r0, r1, r2}
 800099a:	c303      	stmia	r3!, {r0, r1}
 800099c:	801a      	strh	r2, [r3, #0]
 800099e:	3302      	adds	r3, #2
 80009a0:	0c12      	lsrs	r2, r2, #16
 80009a2:	701a      	strb	r2, [r3, #0]
	const uint8_t enable_GGA [GGA_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x01, 0xFB, 0x10};
 80009a4:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <configGPS+0xd4>)
 80009a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ac:	c303      	stmia	r3!, {r0, r1}
 80009ae:	801a      	strh	r2, [r3, #0]
 80009b0:	3302      	adds	r3, #2
 80009b2:	0c12      	lsrs	r2, r2, #16
 80009b4:	701a      	strb	r2, [r3, #0]
	const uint8_t enable_GBS [GBS_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x01, 0x04, 0x22};
 80009b6:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <configGPS+0xd8>)
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80009be:	c303      	stmia	r3!, {r0, r1}
 80009c0:	801a      	strh	r2, [r3, #0]
 80009c2:	3302      	adds	r3, #2
 80009c4:	0c12      	lsrs	r2, r2, #16
 80009c6:	701a      	strb	r2, [r3, #0]
	const uint8_t disable_RMC[RMC_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17};
 80009c8:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <configGPS+0xdc>)
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d0:	c303      	stmia	r3!, {r0, r1}
 80009d2:	801a      	strh	r2, [r3, #0]
 80009d4:	3302      	adds	r3, #2
 80009d6:	0c12      	lsrs	r2, r2, #16
 80009d8:	701a      	strb	r2, [r3, #0]
	const uint8_t disable_GLL[GLL_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x01, 0x00, 0xFB, 0x11};
 80009da:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <configGPS+0xe0>)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e2:	c303      	stmia	r3!, {r0, r1}
 80009e4:	801a      	strh	r2, [r3, #0]
 80009e6:	3302      	adds	r3, #2
 80009e8:	0c12      	lsrs	r2, r2, #16
 80009ea:	701a      	strb	r2, [r3, #0]
	const uint8_t power_save [RXM_PAYLOAD] = {0xB5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x08, 0x01, 0x22, 0x92};
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <configGPS+0xe4>)
 80009ee:	463b      	mov	r3, r7
 80009f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f2:	c303      	stmia	r3!, {r0, r1}
 80009f4:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, enable_ZDA, ZDA_PAYLOAD,1000);
 80009f6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	220b      	movs	r2, #11
 8000a00:	481c      	ldr	r0, [pc, #112]	; (8000a74 <configGPS+0xe8>)
 8000a02:	f007 ffc6 	bl	8008992 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, enable_GGA, GGA_PAYLOAD,1000);
 8000a06:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	220b      	movs	r2, #11
 8000a10:	4818      	ldr	r0, [pc, #96]	; (8000a74 <configGPS+0xe8>)
 8000a12:	f007 ffbe 	bl	8008992 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, enable_GBS, GBS_PAYLOAD,1000);
 8000a16:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	220b      	movs	r2, #11
 8000a20:	4814      	ldr	r0, [pc, #80]	; (8000a74 <configGPS+0xe8>)
 8000a22:	f007 ffb6 	bl	8008992 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, disable_RMC, RMC_PAYLOAD,1000);
 8000a26:	f107 0118 	add.w	r1, r7, #24
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	220b      	movs	r2, #11
 8000a30:	4810      	ldr	r0, [pc, #64]	; (8000a74 <configGPS+0xe8>)
 8000a32:	f007 ffae 	bl	8008992 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, disable_GLL, GLL_PAYLOAD,1000);
 8000a36:	f107 010c 	add.w	r1, r7, #12
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	220b      	movs	r2, #11
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <configGPS+0xe8>)
 8000a42:	f007 ffa6 	bl	8008992 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, power_save, RXM_PAYLOAD,1000);
 8000a46:	4639      	mov	r1, r7
 8000a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <configGPS+0xe8>)
 8000a50:	f007 ff9f 	bl	8008992 <HAL_UART_Transmit>
}
 8000a54:	bf00      	nop
 8000a56:	3748      	adds	r7, #72	; 0x48
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	0800d698 	.word	0x0800d698
 8000a60:	0800d6a4 	.word	0x0800d6a4
 8000a64:	0800d6b0 	.word	0x0800d6b0
 8000a68:	0800d6bc 	.word	0x0800d6bc
 8000a6c:	0800d6c8 	.word	0x0800d6c8
 8000a70:	0800d6d4 	.word	0x0800d6d4
 8000a74:	20000570 	.word	0x20000570

08000a78 <initGPSmodel>:
/**
  * @brief  Init GPS attributes.
  * @retval -
  */
void initGPSmodel(GPSdata * self)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	  self->latitude = 0;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f04f 0200 	mov.w	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
	  self->longitude = 0;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
	  self->GPS_fix = 0;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	721a      	strb	r2, [r3, #8]
	  self->satellites_in_view = 0;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	725a      	strb	r2, [r3, #9]
	  self->HDOP = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	729a      	strb	r2, [r3, #10]
	  self->altitude = 0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	72da      	strb	r2, [r3, #11]
	  //self->sat_list = NULL;
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
	...

08000ab4 <GPS_update>:

// "Property" setter:
void GPS_update(GPSdata * self, uint8_t fields[][FIELD_BUFF], enum NMEAtalker talker)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	71fb      	strb	r3, [r7, #7]
    switch(talker)
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b09      	cmp	r3, #9
 8000ac6:	d824      	bhi.n	8000b12 <GPS_update+0x5e>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <GPS_update+0x1c>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	08000b0d 	.word	0x08000b0d
 8000ad8:	08000b0d 	.word	0x08000b0d
 8000adc:	08000b0d 	.word	0x08000b0d
 8000ae0:	08000b0d 	.word	0x08000b0d
 8000ae4:	08000b0d 	.word	0x08000b0d
 8000ae8:	08000b0d 	.word	0x08000b0d
 8000aec:	08000b0d 	.word	0x08000b0d
 8000af0:	08000b0d 	.word	0x08000b0d
 8000af4:	08000b0d 	.word	0x08000b0d
    {
    case GNGGA:
    	if(fields[1][0] != '\0')  GPS_update_GNGGA(self, fields);
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3314      	adds	r3, #20
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <GPS_update+0x5c>
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 f865 	bl	8000bd4 <GPS_update_GNGGA>
    	break;
 8000b0a:	e001      	b.n	8000b10 <GPS_update+0x5c>
    case GNGLL:

    	break;
 8000b0c:	bf00      	nop
 8000b0e:	e000      	b.n	8000b12 <GPS_update+0x5e>
    	break;
 8000b10:	bf00      	nop
    	break;
    case GPTXT:

    	break;
    }
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop

08000b1c <fields_to_GPS>:

void fields_to_GPS(GPSdata * self, uint8_t fields[][FIELD_BUFF])
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	enum GNGGAfields {
		TIME, LATITUDE, NoS, LONGITUDE, EoW,
		FIX, SIV, HDOP, ALTTUDE_GEOID, ALTTUDE_METER,
		GEO_SEP, GEO_SEP_METER, DIFF, DIFF_REF}; //SIV = SATELLITES IN VIEW
	//self->latitude = NMEA_deg2dec( fields[LATITUDE], 2 );
	ascii_to_float(fields[LATITUDE], &(self->latitude) );
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3314      	adds	r3, #20
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fb0c 	bl	800114c <ascii_to_float>
	NMEA_deg2dec(&(self->latitude));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f8ac 	bl	8000c94 <NMEA_deg2dec>
	if(*(fields[NoS]) == 'S')
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	3328      	adds	r3, #40	; 0x28
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b53      	cmp	r3, #83	; 0x53
 8000b44:	d105      	bne.n	8000b52 <fields_to_GPS+0x36>
			self->latitude = -self->latitude;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]

	//self->longitude = NMEA_deg2dec( fields[LONGITUDE], 3 );
	ascii_to_float(fields[LONGITUDE], &(self->longitude) );
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4610      	mov	r0, r2
 8000b60:	f000 faf4 	bl	800114c <ascii_to_float>
	NMEA_deg2dec(&(self->longitude));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3304      	adds	r3, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f893 	bl	8000c94 <NMEA_deg2dec>
	if(*(fields[EoW])== 'W')
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	3350      	adds	r3, #80	; 0x50
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b57      	cmp	r3, #87	; 0x57
 8000b76:	d105      	bne.n	8000b84 <fields_to_GPS+0x68>
			self->longitude = -self->longitude;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	605a      	str	r2, [r3, #4]

	self->GPS_fix = (uint8_t) ascii_to_int(fields[FIX]);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	3364      	adds	r3, #100	; 0x64
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fa9b 	bl	80010c4 <ascii_to_int>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	721a      	strb	r2, [r3, #8]

	self->satellites_in_view = (uint8_t) ascii_to_int(fields[SIV]);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3378      	adds	r3, #120	; 0x78
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fa92 	bl	80010c4 <ascii_to_int>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	725a      	strb	r2, [r3, #9]

	self->HDOP = (uint8_t) ascii_to_int(fields[HDOP]);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	338c      	adds	r3, #140	; 0x8c
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fa89 	bl	80010c4 <ascii_to_int>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	729a      	strb	r2, [r3, #10]

	self->altitude = (uint8_t) ascii_to_int(fields[ALTTUDE_METER]);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	33b4      	adds	r3, #180	; 0xb4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fa80 	bl	80010c4 <ascii_to_int>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	72da      	strb	r2, [r3, #11]
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <GPS_update_GNGGA>:



void GPS_update_GNGGA(GPSdata * self, uint8_t fields[][FIELD_BUFF])
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	static uint8_t count = 0;
	GPSdata aux_data;

	fields_to_GPS(&aux_data, fields);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff99 	bl	8000b1c <fields_to_GPS>

	if(!count)
 8000bea:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <GPS_update_GNGGA+0xbc>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d106      	bne.n	8000c00 <GPS_update_GNGGA+0x2c>
	{
		self->latitude = aux_data.latitude;
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
		self->longitude = aux_data.longitude;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	e02c      	b.n	8000c5a <GPS_update_GNGGA+0x86>
	}
	else
	{
		self->latitude = (self->latitude + aux_data.latitude)/2;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff faad 	bl	8000168 <__addsf3>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fc63 	bl	80004e0 <__aeabi_fdiv>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
		self->longitude = (self->longitude + aux_data.longitude)/2;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fa9c 	bl	8000168 <__addsf3>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc52 	bl	80004e0 <__aeabi_fdiv>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	605a      	str	r2, [r3, #4]
		self->altitude = (self->altitude + aux_data.altitude)/2;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7adb      	ldrb	r3, [r3, #11]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	0fda      	lsrs	r2, r3, #31
 8000c50:	4413      	add	r3, r2
 8000c52:	105b      	asrs	r3, r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	72da      	strb	r2, [r3, #11]
	}
	self->GPS_fix = aux_data.GPS_fix;
 8000c5a:	7d3a      	ldrb	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	721a      	strb	r2, [r3, #8]
	self->satellites_in_view = aux_data.satellites_in_view;
 8000c60:	7d7a      	ldrb	r2, [r7, #21]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	725a      	strb	r2, [r3, #9]
	self->HDOP = aux_data.HDOP;
 8000c66:	7dba      	ldrb	r2, [r7, #22]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	729a      	strb	r2, [r3, #10]

	count == 10 ? count = 0 : count++;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <GPS_update_GNGGA+0xbc>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b0a      	cmp	r3, #10
 8000c72:	d103      	bne.n	8000c7c <GPS_update_GNGGA+0xa8>
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <GPS_update_GNGGA+0xbc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
}
 8000c7a:	e005      	b.n	8000c88 <GPS_update_GNGGA+0xb4>
	count == 10 ? count = 0 : count++;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <GPS_update_GNGGA+0xbc>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <GPS_update_GNGGA+0xbc>)
 8000c86:	701a      	strb	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000040 	.word	0x20000040

08000c94 <NMEA_deg2dec>:

void NMEA_deg2dec(float* number)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	//if(!*number) return;
	*number/=100;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	491e      	ldr	r1, [pc, #120]	; (8000d1c <NMEA_deg2dec+0x88>)
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc1c 	bl	80004e0 <__aeabi_fdiv>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	601a      	str	r2, [r3, #0]
	int integer = (int) *number;//grados
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd25 	bl	8000704 <__aeabi_f2iz>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	60fb      	str	r3, [r7, #12]
	*number = (*number - (float)integer)*100;// quedan solo los minutos y sus decimales
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681c      	ldr	r4, [r3, #0]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fb04 	bl	80002d0 <__aeabi_i2f>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff fa49 	bl	8000164 <__aeabi_fsub>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4911      	ldr	r1, [pc, #68]	; (8000d1c <NMEA_deg2dec+0x88>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb4e 	bl	8000378 <__aeabi_fmul>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]
	*number /=60;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	490d      	ldr	r1, [pc, #52]	; (8000d20 <NMEA_deg2dec+0x8c>)
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fbf8 	bl	80004e0 <__aeabi_fdiv>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
	*number = (float) integer + (*number); //a los grados le agrega los minutos /60 para que sean grados
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff fae9 	bl	80002d0 <__aeabi_i2f>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4610      	mov	r0, r2
 8000d08:	f7ff fa2e 	bl	8000168 <__addsf3>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	42c80000 	.word	0x42c80000
 8000d20:	42700000 	.word	0x42700000

08000d24 <get_value>:
}
#endif


void get_value(uint8_t** fields, uint8_t field_count , uint8_t dest[FIELD_BUFF][FIELD_BUFF])
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	72fb      	strb	r3, [r7, #11]
	uint8_t index;
	for(index = 0; index<field_count;index++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]
 8000d36:	e083      	b.n	8000e40 <get_value+0x11c>
	{
		//limpia el buffer
		memset(dest[index], END_OF_STRING, FIELD_BUFF);
 8000d38:	7dfa      	ldrb	r2, [r7, #23]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	461a      	mov	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	2214      	movs	r2, #20
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00c fc87 	bl	800d660 <memset>

		if( fields[index] == NULL) return;
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d075      	beq.n	8000e4c <get_value+0x128>

		if (! fields[index+1] ) //si el siguiente es nulo busca hasta el asterisco
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	3301      	adds	r3, #1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d122      	bne.n	8000db6 <get_value+0x92>
		{
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	75bb      	strb	r3, [r7, #22]
 8000d74:	e014      	b.n	8000da0 <get_value+0x7c>
				dest[index][i] = fields[index][i];
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	7dbb      	ldrb	r3, [r7, #22]
 8000d82:	18d1      	adds	r1, r2, r3
 8000d84:	7dfa      	ldrb	r2, [r7, #23]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	461a      	mov	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	441a      	add	r2, r3
 8000d94:	7dbb      	ldrb	r3, [r7, #22]
 8000d96:	7809      	ldrb	r1, [r1, #0]
 8000d98:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i=0; fields[index][i] != END_STAR; i++)
 8000d9a:	7dbb      	ldrb	r3, [r7, #22]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	75bb      	strb	r3, [r7, #22]
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	7dbb      	ldrb	r3, [r7, #22]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b2a      	cmp	r3, #42	; 0x2a
 8000db2:	d1e0      	bne.n	8000d76 <get_value+0x52>
			return;
 8000db4:	e04d      	b.n	8000e52 <get_value+0x12e>
		}
		//si no hay valor sale
		if( ( fields[index+1] - fields[index] ) < 1 ) return;
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
 8000db8:	3301      	adds	r3, #1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	68f9      	ldr	r1, [r7, #12]
 8000dc8:	440b      	add	r3, r1
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	dd3e      	ble.n	8000e50 <get_value+0x12c>
		//copia lo que esta entre las dos comas al buffer
		memcpy(dest[index], fields[index], fields[index+1] - fields[index] -1 );
 8000dd2:	7dfa      	ldrb	r2, [r7, #23]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	1898      	adds	r0, r3, r2
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	3301      	adds	r3, #1
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4413      	add	r3, r2
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	68f9      	ldr	r1, [r7, #12]
 8000dfe:	440b      	add	r3, r1
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	3b01      	subs	r3, #1
 8000e06:	461a      	mov	r2, r3
 8000e08:	4621      	mov	r1, r4
 8000e0a:	f00c fc1b 	bl	800d644 <memcpy>
		dest[index][fields[index+1] - fields[index]] = '\0';//agrega el fin de cadena
 8000e0e:	7dfa      	ldrb	r2, [r7, #23]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	3301      	adds	r3, #1
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	440b      	add	r3, r1
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	4403      	add	r3, r0
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1acb      	subs	r3, r1, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	54d1      	strb	r1, [r2, r3]
	for(index = 0; index<field_count;index++)
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	75fb      	strb	r3, [r7, #23]
 8000e40:	7dfa      	ldrb	r2, [r7, #23]
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f4ff af77 	bcc.w	8000d38 <get_value+0x14>
 8000e4a:	e002      	b.n	8000e52 <get_value+0x12e>
		if( fields[index] == NULL) return;
 8000e4c:	bf00      	nop
 8000e4e:	e000      	b.n	8000e52 <get_value+0x12e>
		if( ( fields[index+1] - fields[index] ) < 1 ) return;
 8000e50:	bf00      	nop
	}
}
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}

08000e58 <get_fields>:


void  get_fields(uint8_t* line, uint8_t fields_array[FIELD_BUFF][FIELD_BUFF] )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b098      	sub	sp, #96	; 0x60
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint8_t* fields[FIELD_BUFF];

	for(i = 0; i<FIELD_BUFF; i++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000e68:	e00c      	b.n	8000e84 <get_fields+0x2c>
		fields[i] = NULL;
 8000e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	3360      	adds	r3, #96	; 0x60
 8000e72:	443b      	add	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	f843 2c54 	str.w	r2, [r3, #-84]
	for(i = 0; i<FIELD_BUFF; i++)
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e88:	2b13      	cmp	r3, #19
 8000e8a:	d9ee      	bls.n	8000e6a <get_fields+0x12>

	uint8_t field_count = coma_count(line);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f840 	bl	8000f12 <coma_count>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	line++; //avanza la primer coma
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]

	for(i = 0; i< field_count; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000ea4:	e01b      	b.n	8000ede <get_fields+0x86>
	{

		fields[i] = line;
 8000ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	3360      	adds	r3, #96	; 0x60
 8000eae:	443b      	add	r3, r7
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	f843 2c54 	str.w	r2, [r3, #-84]
		for(line; !( (*line) == COMA || (*line) == END_STAR); line++);
 8000eb6:	e002      	b.n	8000ebe <get_fields+0x66>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ec4:	d003      	beq.n	8000ece <get_fields+0x76>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b2a      	cmp	r3, #42	; 0x2a
 8000ecc:	d1f4      	bne.n	8000eb8 <get_fields+0x60>
		line++;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
	for(i = 0; i< field_count; i++)
 8000ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000ede:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000ee2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3dd      	bcc.n	8000ea6 <get_fields+0x4e>
	}
	fields[i] = NULL;
 8000eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	3360      	adds	r3, #96	; 0x60
 8000ef2:	443b      	add	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f843 2c54 	str.w	r2, [r3, #-84]
	{
		memcpy(fields_array[i], "hola", strlen("hola")+1);
		printf("fields_array[%d] %s", i, fields_array[i]);
	}*/

	get_value(fields, field_count , fields_array);
 8000efa:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff0d 	bl	8000d24 <get_value>
}
 8000f0a:	bf00      	nop
 8000f0c:	3760      	adds	r7, #96	; 0x60
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <coma_count>:

uint8_t coma_count(uint8_t* string)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b085      	sub	sp, #20
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	uint8_t count;
	//aumenta el puntero hasta que encuentra una coma. Cuando la encuettra avanza
	//count y se va separando del inicio del puntero. Cuando no encuentra la coma
	//sigue aumentando el puntero hasta lelgar al final.
	for (count=0; string[count] != END_STAR; string[count]==COMA ? count++ : *string++);
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e00c      	b.n	8000f3a <coma_count+0x28>
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b2c      	cmp	r3, #44	; 0x2c
 8000f2a:	d103      	bne.n	8000f34 <coma_count+0x22>
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e002      	b.n	8000f3a <coma_count+0x28>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b2a      	cmp	r3, #42	; 0x2a
 8000f44:	d1ec      	bne.n	8000f20 <coma_count+0xe>
	return count;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <start_sentence_ptr>:

uint8_t* start_sentence_ptr(uint8_t *ptrStartBuff, uint8_t *message)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	uint8_t* tok;
	for( tok = message;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e002      	b.n	8000f68 <start_sentence_ptr+0x16>
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
					(tok - ptrStartBuff) < DMA_BUFF_SIZE;
			tok++);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
	for( tok = message;
 8000f6c:	2b24      	cmp	r3, #36	; 0x24
 8000f6e:	d103      	bne.n	8000f78 <start_sentence_ptr+0x26>
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <start_sentence_ptr+0x34>
					(tok - ptrStartBuff) < DMA_BUFF_SIZE;
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1ad3      	subs	r3, r2, r3
			((*tok) != START_PESOS || (*tok) == END_OF_STRING) &&
 8000f7e:	f240 2289 	movw	r2, #649	; 0x289
 8000f82:	4293      	cmp	r3, r2
 8000f84:	dded      	ble.n	8000f62 <start_sentence_ptr+0x10>
	if((tok-ptrStartBuff) == DMA_BUFF_SIZE )
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f240 228a 	movw	r2, #650	; 0x28a
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d101      	bne.n	8000f98 <start_sentence_ptr+0x46>
		return NULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e003      	b.n	8000fa0 <start_sentence_ptr+0x4e>
	else return ++tok;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <is_sentence_complete>:

uint8_t is_sentence_complete(uint8_t *message, uint8_t *tok)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
	uint8_t* aux;
	//checkea que la frase este completa
	for(aux = tok;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e002      	b.n	8000fc0 <is_sentence_complete+0x16>
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
			aux++);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
	for(aux = tok;
 8000fc4:	2b0d      	cmp	r3, #13
 8000fc6:	d00a      	beq.n	8000fde <is_sentence_complete+0x34>
			*aux != '\r' && *aux != END_OF_STRING && (aux-message) < DMA_BUFF_SIZE;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <is_sentence_complete+0x34>
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f240 2289 	movw	r2, #649	; 0x289
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	dded      	ble.n	8000fba <is_sentence_complete+0x10>
	//si llego al final, devuelve NULL
	if((aux-message) == DMA_BUFF_SIZE || *aux == END_OF_STRING)
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f240 228a 	movw	r2, #650	; 0x28a
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d003      	beq.n	8000ff4 <is_sentence_complete+0x4a>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <is_sentence_complete+0x4e>
		return FALSE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e000      	b.n	8000ffa <is_sentence_complete+0x50>
	else return TRUE;
 8000ff8:	2301      	movs	r3, #1

}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <get_sentence_ptr>:

uint8_t* get_sentence_ptr(uint8_t *message, const char *type,  uint8_t *init_ptr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	uint8_t* tok;
	uint8_t* aux;
	const char * aux_type;

	if(init_ptr == NULL) tok = message;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <get_sentence_ptr+0x18>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e001      	b.n	8001020 <get_sentence_ptr+0x1c>
	else tok = init_ptr;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	617b      	str	r3, [r7, #20]
	aux_type= type;
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	613b      	str	r3, [r7, #16]

	do
	{
	  type = aux_type;
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	60bb      	str	r3, [r7, #8]
	  if( !(tok = start_sentence_ptr(message,tok) ) ) return NULL;
 8001028:	6979      	ldr	r1, [r7, #20]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff ff91 	bl	8000f52 <start_sentence_ptr>
 8001030:	6178      	str	r0, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d107      	bne.n	8001048 <get_sentence_ptr+0x44>
 8001038:	2300      	movs	r3, #0
 800103a:	e01d      	b.n	8001078 <get_sentence_ptr+0x74>

	  while((*tok) == (*type))
	  {
		  tok++;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
		  type++;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3301      	adds	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
	  while((*tok) == (*type))
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d0f3      	beq.n	800103c <get_sentence_ptr+0x38>
	  }
	}while ((*type) != END_OF_STRING &&
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
			(tok-message) < DMA_BUFF_SIZE);
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <get_sentence_ptr+0x66>
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
	}while ((*type) != END_OF_STRING &&
 8001062:	f240 2289 	movw	r2, #649	; 0x289
 8001066:	4293      	cmp	r3, r2
 8001068:	dddc      	ble.n	8001024 <get_sentence_ptr+0x20>

	//checkea que haya cortado por coincidencia y no por fin del buffer
	if((*type) != END_OF_STRING) return NULL;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <get_sentence_ptr+0x72>
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <get_sentence_ptr+0x74>

	return tok;
 8001076:	697b      	ldr	r3, [r7, #20]
        //printf("get_sentence CRC incorrecto\r\n");
        return NULL;
    }*/


}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <pow_10>:
 */
#include "GPS/tools.h"
#include <string.h>

int pow_10(uint8_t n)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
    if(!n) return 1;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <pow_10+0x14>
 8001090:	2301      	movs	r3, #1
 8001092:	e012      	b.n	80010ba <pow_10+0x3a>
    n--;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3b01      	subs	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
    int power = 10;
 800109a:	230a      	movs	r3, #10
 800109c:	60fb      	str	r3, [r7, #12]
    while(n)
 800109e:	e008      	b.n	80010b2 <pow_10+0x32>
    {
        power*=10;
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
        n--;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	71fb      	strb	r3, [r7, #7]
    while(n)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f3      	bne.n	80010a0 <pow_10+0x20>
    }
    return power;
 80010b8:	68fb      	ldr	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <ascii_to_int>:

int ascii_to_int(uint8_t *str)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    uint8_t negative = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	75fb      	strb	r3, [r7, #23]
    if(!str) return 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <ascii_to_int+0x16>
 80010d6:	2300      	movs	r3, #0
 80010d8:	e034      	b.n	8001144 <ascii_to_int+0x80>
    if(*str == '-')
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b2d      	cmp	r3, #45	; 0x2d
 80010e0:	d104      	bne.n	80010ec <ascii_to_int+0x28>
    {
        str++;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3301      	adds	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
        negative = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	75fb      	strb	r3, [r7, #23]
    }

    int size = strlen(str);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f82d 	bl	800014c <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	60bb      	str	r3, [r7, #8]
    int result = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
    for ( int i = 0 ; i < size; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e016      	b.n	800112e <ascii_to_int+0x6a>
        result += (str[size-i-1] - 48)*pow_10(i);
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	3b01      	subs	r3, #1
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffb2 	bl	8001080 <pow_10>
 800111c:	4603      	mov	r3, r0
 800111e:	fb04 f303 	mul.w	r3, r4, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4413      	add	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
    for ( int i = 0 ; i < size; i++)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	429a      	cmp	r2, r3
 8001134:	dbe4      	blt.n	8001100 <ascii_to_int+0x3c>
    if(negative) return -result;
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <ascii_to_int+0x7e>
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	425b      	negs	r3, r3
 8001140:	e000      	b.n	8001144 <ascii_to_int+0x80>
    return result;
 8001142:	693b      	ldr	r3, [r7, #16]
}
 8001144:	4618      	mov	r0, r3
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <ascii_to_float>:

void ascii_to_float(uint8_t* ptrstr, float* num)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
    uint8_t coma;
    uint8_t size;
    uint8_t entero;
    uint8_t* str=ptrstr;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60bb      	str	r3, [r7, #8]

    *num = 0;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

    if(str[0] == '-') str++;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b2d      	cmp	r3, #45	; 0x2d
 8001168:	d102      	bne.n	8001170 <ascii_to_float+0x24>
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3301      	adds	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]

    for (size = 0; str[size] != '\0'; size++);
 8001170:	2300      	movs	r3, #0
 8001172:	73bb      	strb	r3, [r7, #14]
 8001174:	e002      	b.n	800117c <ascii_to_float+0x30>
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	3301      	adds	r3, #1
 800117a:	73bb      	strb	r3, [r7, #14]
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f6      	bne.n	8001176 <ascii_to_float+0x2a>
    size--;
 8001188:	7bbb      	ldrb	r3, [r7, #14]
 800118a:	3b01      	subs	r3, #1
 800118c:	73bb      	strb	r3, [r7, #14]

    for ( coma = 0; str[size-coma] != '.'; coma++)
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	e020      	b.n	80011d6 <ascii_to_float+0x8a>
        *num += (str[size-coma] - 48)*pow_10(coma);
 8001194:	7bba      	ldrb	r2, [r7, #14]
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff69 	bl	8001080 <pow_10>
 80011ae:	4603      	mov	r3, r0
 80011b0:	fb03 f204 	mul.w	r2, r3, r4
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681c      	ldr	r4, [r3, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	f7ff f889 	bl	80002d0 <__aeabi_i2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7fe ffd0 	bl	8000168 <__addsf3>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
    for ( coma = 0; str[size-coma] != '.'; coma++)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	7bba      	ldrb	r2, [r7, #14]
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b2e      	cmp	r3, #46	; 0x2e
 80011e6:	d1d5      	bne.n	8001194 <ascii_to_float+0x48>
    coma++;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3301      	adds	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]

    *num = (*num)/pow_10(coma-1);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681c      	ldr	r4, [r3, #0]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff41 	bl	8001080 <pow_10>
 80011fe:	4603      	mov	r3, r0
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f865 	bl	80002d0 <__aeabi_i2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4619      	mov	r1, r3
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff f968 	bl	80004e0 <__aeabi_fdiv>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	601a      	str	r2, [r3, #0]

    for ( entero = coma ; (size+1) != entero; entero++)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	737b      	strb	r3, [r7, #13]
 800121c:	e023      	b.n	8001266 <ascii_to_float+0x11a>
        *num += (str[size-entero] - 48)*pow_10(entero-coma);
 800121e:	7bba      	ldrb	r2, [r7, #14]
 8001220:	7b7b      	ldrb	r3, [r7, #13]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001230:	7b7a      	ldrb	r2, [r7, #13]
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff21 	bl	8001080 <pow_10>
 800123e:	4603      	mov	r3, r0
 8001240:	fb03 f204 	mul.w	r2, r3, r4
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	4610      	mov	r0, r2
 800124a:	f7ff f841 	bl	80002d0 <__aeabi_i2f>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4620      	mov	r0, r4
 8001254:	f7fe ff88 	bl	8000168 <__addsf3>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	601a      	str	r2, [r3, #0]
    for ( entero = coma ; (size+1) != entero; entero++)
 8001260:	7b7b      	ldrb	r3, [r7, #13]
 8001262:	3301      	adds	r3, #1
 8001264:	737b      	strb	r3, [r7, #13]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	429a      	cmp	r2, r3
 800126e:	d1d6      	bne.n	800121e <ascii_to_float+0xd2>

    if(ptrstr[0]=='-') *num = -*num;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b2d      	cmp	r3, #45	; 0x2d
 8001276:	d105      	bne.n	8001284 <ascii_to_float+0x138>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}

0800128c <int_to_ascii>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
__uint8_t int_to_ascii(int x, char dest[], __uint8_t d)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
    __uint8_t digit;
    __uint8_t negative = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	77bb      	strb	r3, [r7, #30]
    char * str;

    if(x == 0)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11f      	bne.n	80012e4 <int_to_ascii+0x58>
    {
        if(d)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d013      	beq.n	80012d2 <int_to_ascii+0x46>
        {
          __uint8_t d_aux = d;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	75bb      	strb	r3, [r7, #22]
          dest[d] = '\0';
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	4413      	add	r3, r2
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
          do
          {
            d--;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
            dest[d] = '0';
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	2230      	movs	r2, #48	; 0x30
 80012c6:	701a      	strb	r2, [r3, #0]
          }while(d);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f4      	bne.n	80012b8 <int_to_ascii+0x2c>

          return d_aux;
 80012ce:	7dbb      	ldrb	r3, [r7, #22]
 80012d0:	e069      	b.n	80013a6 <int_to_ascii+0x11a>
        }
        else
        {
            dest[0] = '0';
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2230      	movs	r2, #48	; 0x30
 80012d6:	701a      	strb	r2, [r3, #0]
          dest[1] = '\0';
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3301      	adds	r3, #1
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
          return 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e060      	b.n	80013a6 <int_to_ascii+0x11a>
        }
    }

    if(x<0)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da08      	bge.n	80012fc <int_to_ascii+0x70>
    {
        negative = 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	77bb      	strb	r3, [r7, #30]
        x = -x;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	425b      	negs	r3, r3
 80012f2:	60fb      	str	r3, [r7, #12]
        str = dest +1;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3301      	adds	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	e001      	b.n	8001300 <int_to_ascii+0x74>
    }
    else str = dest;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	61bb      	str	r3, [r7, #24]

    for(digit = 0 ; x/pow_10(digit); digit++);
 8001300:	2300      	movs	r3, #0
 8001302:	77fb      	strb	r3, [r7, #31]
 8001304:	e002      	b.n	800130c <int_to_ascii+0x80>
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	3301      	adds	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff feb6 	bl	8001080 <pow_10>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	fb93 f3f2 	sdiv	r3, r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f2      	bne.n	8001306 <int_to_ascii+0x7a>

    if(d>digit)
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	7ffb      	ldrb	r3, [r7, #31]
 8001324:	429a      	cmp	r2, r3
 8001326:	d90d      	bls.n	8001344 <int_to_ascii+0xb8>
    {
       while(d>digit )
 8001328:	e008      	b.n	800133c <int_to_ascii+0xb0>
       {
        *str = '0';
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2230      	movs	r2, #48	; 0x30
 800132e:	701a      	strb	r2, [r3, #0]
        str++;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	3301      	adds	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
        d--;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3b01      	subs	r3, #1
 800133a:	71fb      	strb	r3, [r7, #7]
       while(d>digit )
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f2      	bhi.n	800132a <int_to_ascii+0x9e>
       }

    }
    str[digit] = '\0';
 8001344:	7ffb      	ldrb	r3, [r7, #31]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4413      	add	r3, r2
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	e01d      	b.n	8001390 <int_to_ascii+0x104>
        str[digit - decimal -1 ] = (x/pow_10(decimal))%pow_10(1) +'0';
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe92 	bl	8001080 <pow_10>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	fb93 f4f2 	sdiv	r4, r3, r2
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fe8b 	bl	8001080 <pow_10>
 800136a:	4603      	mov	r3, r0
 800136c:	fb94 f2f3 	sdiv	r2, r4, r3
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	1ae3      	subs	r3, r4, r3
 8001376:	b2da      	uxtb	r2, r3
 8001378:	7ff9      	ldrb	r1, [r7, #31]
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	1acb      	subs	r3, r1, r3
 800137e:	3b01      	subs	r3, #1
 8001380:	69b9      	ldr	r1, [r7, #24]
 8001382:	440b      	add	r3, r1
 8001384:	3230      	adds	r2, #48	; 0x30
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	3301      	adds	r3, #1
 800138e:	75fb      	strb	r3, [r7, #23]
 8001390:	7dfa      	ldrb	r2, [r7, #23]
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	429a      	cmp	r2, r3
 8001396:	d3dd      	bcc.n	8001354 <int_to_ascii+0xc8>

    if(negative)
 8001398:	7fbb      	ldrb	r3, [r7, #30]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <int_to_ascii+0x118>
        dest[0] = '-';
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	222d      	movs	r2, #45	; 0x2d
 80013a2:	701a      	strb	r2, [r3, #0]

    return digit;
 80013a4:	7ffb      	ldrb	r3, [r7, #31]

}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}

080013ae <float_to_ascii>:

// Converts a floating-point/double number to a string.
void float_to_ascii(float n, uint8_t* res, uint8_t afterpoint)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b088      	sub	sp, #32
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71fb      	strb	r3, [r7, #7]
    if(n<0)
 80013bc:	f04f 0100 	mov.w	r1, #0
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff f977 	bl	80006b4 <__aeabi_fcmplt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d009      	beq.n	80013e0 <float_to_ascii+0x32>
    {
        *res = '-';
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	222d      	movs	r2, #45	; 0x2d
 80013d0:	701a      	strb	r2, [r3, #0]
        res++;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
        n = -n;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013de:	60fb      	str	r3, [r7, #12]
    }
    // Extract integer part
    int ipart = (int)n;
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff f98f 	bl	8000704 <__aeabi_f2iz>
 80013e6:	4603      	mov	r3, r0
 80013e8:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80013ea:	69f8      	ldr	r0, [r7, #28]
 80013ec:	f7fe ff70 	bl	80002d0 <__aeabi_i2f>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4619      	mov	r1, r3
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7fe feb5 	bl	8000164 <__aeabi_fsub>
 80013fa:	4603      	mov	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]

    //if(fpart<0) fpart = -fpart;

    // convert integer part to string
    int i = int_to_ascii(ipart, res, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	69f8      	ldr	r0, [r7, #28]
 8001404:	f7ff ff42 	bl	800128c <int_to_ascii>
 8001408:	4603      	mov	r3, r0
 800140a:	617b      	str	r3, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d020      	beq.n	8001454 <float_to_ascii+0xa6>
        res[i++] = '.'; // add dot
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	617a      	str	r2, [r7, #20]
 8001418:	461a      	mov	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4413      	add	r3, r2
 800141e:	222e      	movs	r2, #46	; 0x2e
 8001420:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow_10(afterpoint);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe2b 	bl	8001080 <pow_10>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ff4f 	bl	80002d0 <__aeabi_i2f>
 8001432:	4603      	mov	r3, r0
 8001434:	4619      	mov	r1, r3
 8001436:	69b8      	ldr	r0, [r7, #24]
 8001438:	f7fe ff9e 	bl	8000378 <__aeabi_fmul>
 800143c:	4603      	mov	r3, r0
 800143e:	61bb      	str	r3, [r7, #24]

        int_to_ascii((int)fpart, res + i, afterpoint);
 8001440:	69b8      	ldr	r0, [r7, #24]
 8001442:	f7ff f95f 	bl	8000704 <__aeabi_f2iz>
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff ff1c 	bl	800128c <int_to_ascii>
    }

}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <insert_chars>:

void insert_chars(uint8_t *dest, uint8_t *src, uint8_t d)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	71fb      	strb	r3, [r7, #7]
	if(!dest || !src || *src == '\0' || !d) return;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01c      	beq.n	80014aa <insert_chars+0x4e>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d019      	beq.n	80014aa <insert_chars+0x4e>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d015      	beq.n	80014aa <insert_chars+0x4e>
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d012      	beq.n	80014aa <insert_chars+0x4e>
    for(uint8_t i = 0; i<d; i++)
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
 8001488:	e00a      	b.n	80014a0 <insert_chars+0x44>
        dest[i] = src[i];
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	441a      	add	r2, r3
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	68f9      	ldr	r1, [r7, #12]
 8001494:	440b      	add	r3, r1
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i<d; i++)
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	3301      	adds	r3, #1
 800149e:	75fb      	strb	r3, [r7, #23]
 80014a0:	7dfa      	ldrb	r2, [r7, #23]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3f0      	bcc.n	800148a <insert_chars+0x2e>
 80014a8:	e000      	b.n	80014ac <insert_chars+0x50>
	if(!dest || !src || *src == '\0' || !d) return;
 80014aa:	bf00      	nop
}
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <get_time_string>:

void get_time_string(RTC_TimeTypeDef *Time, uint8_t *time_string)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
	uint8_t few_chars[3] = "";
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <get_time_string+0x84>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	733b      	strb	r3, [r7, #12]
 80014c4:	f107 030d 	add.w	r3, r7, #13
 80014c8:	2200      	movs	r2, #0
 80014ca:	801a      	strh	r2, [r3, #0]
	int_to_ascii( (int) Time->Hours , few_chars, 2);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	2202      	movs	r2, #2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fed7 	bl	800128c <int_to_ascii>
	insert_chars(time_string, few_chars, 2);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2202      	movs	r2, #2
 80014e4:	4619      	mov	r1, r3
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f7ff ffb8 	bl	800145c <insert_chars>
	int_to_ascii( (int) Time->Minutes , few_chars, 2);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2202      	movs	r2, #2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fec7 	bl	800128c <int_to_ascii>
	insert_chars(time_string+3, few_chars, 2);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3303      	adds	r3, #3
 8001502:	f107 010c 	add.w	r1, r7, #12
 8001506:	2202      	movs	r2, #2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ffa7 	bl	800145c <insert_chars>
	int_to_ascii( (int) Time->Seconds , few_chars, 2);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	4618      	mov	r0, r3
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2202      	movs	r2, #2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff feb6 	bl	800128c <int_to_ascii>
	insert_chars(time_string+6, few_chars, 2);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	3306      	adds	r3, #6
 8001524:	f107 010c 	add.w	r1, r7, #12
 8001528:	2202      	movs	r2, #2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff96 	bl	800145c <insert_chars>
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	0800d6f0 	.word	0x0800d6f0

0800153c <get_date_string>:

void get_date_string(RTC_DateTypeDef *Date, uint8_t *date_string)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	uint8_t few_chars[3] = "";
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <get_date_string+0x84>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	733b      	strb	r3, [r7, #12]
 800154c:	f107 030d 	add.w	r3, r7, #13
 8001550:	2200      	movs	r2, #0
 8001552:	801a      	strh	r2, [r3, #0]
	int_to_ascii( (int) Date->Date , few_chars, 2);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	4618      	mov	r0, r3
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2202      	movs	r2, #2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fe93 	bl	800128c <int_to_ascii>
	insert_chars(date_string, few_chars, 2);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2202      	movs	r2, #2
 800156c:	4619      	mov	r1, r3
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f7ff ff74 	bl	800145c <insert_chars>
	int_to_ascii( (int) Date->Month , few_chars, 2);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	4618      	mov	r0, r3
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	2202      	movs	r2, #2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fe83 	bl	800128c <int_to_ascii>
	insert_chars(date_string+3, few_chars, 2);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3303      	adds	r3, #3
 800158a:	f107 010c 	add.w	r1, r7, #12
 800158e:	2202      	movs	r2, #2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff63 	bl	800145c <insert_chars>
	int_to_ascii( (int) Date->Year, few_chars, 2);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	78db      	ldrb	r3, [r3, #3]
 800159a:	4618      	mov	r0, r3
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2202      	movs	r2, #2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fe72 	bl	800128c <int_to_ascii>
	insert_chars(date_string+6, few_chars, 2);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3306      	adds	r3, #6
 80015ac:	f107 010c 	add.w	r1, r7, #12
 80015b0:	2202      	movs	r2, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff52 	bl	800145c <insert_chars>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	0800d6f0 	.word	0x0800d6f0

080015c4 <u8x8_byte_stm32hal_hw_i2c>:
extern u8g2_t u8g2;
extern RTC_HandleTypeDef hrtc;
extern uint8_t screen_number;

uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	72fb      	strb	r3, [r7, #11]
 80015d2:	4613      	mov	r3, r2
 80015d4:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;


  switch(msg)
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	3b14      	subs	r3, #20
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d852      	bhi.n	8001684 <u8x8_byte_stm32hal_hw_i2c+0xc0>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <u8x8_byte_stm32hal_hw_i2c+0x20>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	08001689 	.word	0x08001689
 80015e8:	08001685 	.word	0x08001685
 80015ec:	08001685 	.word	0x08001685
 80015f0:	08001619 	.word	0x08001619
 80015f4:	08001649 	.word	0x08001649
 80015f8:	08001651 	.word	0x08001651
 80015fc:	08001685 	.word	0x08001685
 8001600:	08001685 	.word	0x08001685
 8001604:	08001685 	.word	0x08001685
 8001608:	08001685 	.word	0x08001685
 800160c:	08001685 	.word	0x08001685
 8001610:	08001685 	.word	0x08001685
 8001614:	08001689 	.word	0x08001689
  {
    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	61fb      	str	r3, [r7, #28]
        while( arg_int > 0 )
 800161c:	e010      	b.n	8001640 <u8x8_byte_stm32hal_hw_i2c+0x7c>
        {
			buffer[buf_idx++] = *data;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	b2d1      	uxtb	r1, r2
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8001628:	7011      	strb	r1, [r2, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	7819      	ldrb	r1, [r3, #0]
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 8001632:	5499      	strb	r1, [r3, r2]
			data++;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
			arg_int--;
 800163a:	7abb      	ldrb	r3, [r7, #10]
 800163c:	3b01      	subs	r3, #1
 800163e:	72bb      	strb	r3, [r7, #10]
        while( arg_int > 0 )
 8001640:	7abb      	ldrb	r3, [r7, #10]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1eb      	bne.n	800161e <u8x8_byte_stm32hal_hw_i2c+0x5a>
        }
    }
    	break;
 8001646:	e020      	b.n	800168a <u8x8_byte_stm32hal_hw_i2c+0xc6>
    	break;
    case U8X8_MSG_BYTE_SET_DC:
    	break;
    case U8X8_MSG_BYTE_START_TRANSFER:
		{
			buf_idx = 0;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800164e:	e01c      	b.n	800168a <u8x8_byte_stm32hal_hw_i2c+0xc6>
    case U8X8_MSG_BYTE_END_TRANSFER:
	{
		uint8_t iaddress = I2C_ADDRESS;
 8001650:	233c      	movs	r3, #60	; 0x3c
 8001652:	76fb      	strb	r3, [r7, #27]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iaddress<<1, &buffer[0], buf_idx, 20u);
 8001654:	7efb      	ldrb	r3, [r7, #27]
 8001656:	b29b      	uxth	r3, r3
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	b299      	uxth	r1, r3
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	2214      	movs	r2, #20
 8001664:	9200      	str	r2, [sp, #0]
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <u8x8_byte_stm32hal_hw_i2c+0xd8>)
 800166a:	f004 faef 	bl	8005c4c <HAL_I2C_Master_Transmit>
		volatile uint32_t i;
		for (i = 1; i <= 500; i++);
 800166e:	2301      	movs	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e002      	b.n	800167a <u8x8_byte_stm32hal_hw_i2c+0xb6>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001680:	d9f8      	bls.n	8001674 <u8x8_byte_stm32hal_hw_i2c+0xb0>
	}
    	break;
 8001682:	e002      	b.n	800168a <u8x8_byte_stm32hal_hw_i2c+0xc6>
    default:
      return 0;
 8001684:	2300      	movs	r3, #0
 8001686:	e001      	b.n	800168c <u8x8_byte_stm32hal_hw_i2c+0xc8>
    	break;
 8001688:	bf00      	nop
  }
  return 1;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000041 	.word	0x20000041
 8001698:	20000044 	.word	0x20000044
 800169c:	20000468 	.word	0x20000468

080016a0 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	72fb      	strb	r3, [r7, #11]
 80016ae:	4613      	mov	r3, r2
 80016b0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	3b28      	subs	r3, #40	; 0x28
 80016b6:	2b24      	cmp	r3, #36	; 0x24
 80016b8:	d861      	bhi.n	800177e <psoc_gpio_and_delay_cb+0xde>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <psoc_gpio_and_delay_cb+0x20>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	08001789 	.word	0x08001789
 80016c4:	08001775 	.word	0x08001775
 80016c8:	08001789 	.word	0x08001789
 80016cc:	08001789 	.word	0x08001789
 80016d0:	08001755 	.word	0x08001755
 80016d4:	08001789 	.word	0x08001789
 80016d8:	0800177f 	.word	0x0800177f
 80016dc:	0800177f 	.word	0x0800177f
 80016e0:	0800177f 	.word	0x0800177f
 80016e4:	0800177f 	.word	0x0800177f
 80016e8:	0800177f 	.word	0x0800177f
 80016ec:	0800177f 	.word	0x0800177f
 80016f0:	0800177f 	.word	0x0800177f
 80016f4:	0800177f 	.word	0x0800177f
 80016f8:	0800177f 	.word	0x0800177f
 80016fc:	0800177f 	.word	0x0800177f
 8001700:	0800177f 	.word	0x0800177f
 8001704:	0800177f 	.word	0x0800177f
 8001708:	0800177f 	.word	0x0800177f
 800170c:	0800177f 	.word	0x0800177f
 8001710:	0800177f 	.word	0x0800177f
 8001714:	0800177f 	.word	0x0800177f
 8001718:	0800177f 	.word	0x0800177f
 800171c:	0800177f 	.word	0x0800177f
 8001720:	0800177f 	.word	0x0800177f
 8001724:	0800177f 	.word	0x0800177f
 8001728:	0800177f 	.word	0x0800177f
 800172c:	0800177f 	.word	0x0800177f
 8001730:	0800177f 	.word	0x0800177f
 8001734:	0800177f 	.word	0x0800177f
 8001738:	0800177f 	.word	0x0800177f
 800173c:	0800177f 	.word	0x0800177f
 8001740:	0800177f 	.word	0x0800177f
 8001744:	0800177f 	.word	0x0800177f
 8001748:	0800177f 	.word	0x0800177f
 800174c:	0800177f 	.word	0x0800177f
 8001750:	08001789 	.word	0x08001789
      break;
    case U8X8_MSG_DELAY_NANO:
      /* not required for SW I2C */
    {
		volatile uint32_t i;
		for (i = 1; i <= arg_int*10; i++);
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e002      	b.n	8001760 <psoc_gpio_and_delay_cb+0xc0>
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	7aba      	ldrb	r2, [r7, #10]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	461a      	mov	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d2f3      	bcs.n	800175a <psoc_gpio_and_delay_cb+0xba>
    }
      break;
 8001772:	e00a      	b.n	800178a <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;

    case U8X8_MSG_DELAY_MILLI:
      HAL_Delay(arg_int);
 8001774:	7abb      	ldrb	r3, [r7, #10]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fbc2 	bl	8004f00 <HAL_Delay>
      break;
 800177c:	e005      	b.n	800178a <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_GPIO_MENU_HOME:
      u8x8_SetGPIOResult(u8x8, Chip_GPIO_GetPinState(LPC_GPIO, KEY_HOME_PORT, KEY_HOME_PIN));
      break;
*/
    default:
      u8x8_SetGPIOResult(u8x8, 1);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      break;
 8001786:	e000      	b.n	800178a <psoc_gpio_and_delay_cb+0xea>
      break;
 8001788:	bf00      	nop
  }
  return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <draw_button_line>:


uint8_t draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	70fb      	strb	r3, [r7, #3]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70bb      	strb	r3, [r7, #2]
 80017aa:	4613      	mov	r3, r2
 80017ac:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;

  u8g2_uint_t d;
  u8g2_uint_t x;

  cnt = u8x8_GetStringLineCnt(s);
 80017ae:	69b8      	ldr	r0, [r7, #24]
 80017b0:	f001 ffa1 	bl	80036f6 <u8x8_GetStringLineCnt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	72bb      	strb	r3, [r7, #10]


  /* calculate the width of the button line */
  button_line_width = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 80017bc:	2300      	movs	r3, #0
 80017be:	73bb      	strb	r3, [r7, #14]
 80017c0:	e011      	b.n	80017e6 <draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	69b9      	ldr	r1, [r7, #24]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 ffb7 	bl	800373a <u8x8_GetStringLineStart>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f001 f81b 	bl	800280c <u8g2_GetUTF8Width>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	4413      	add	r3, r2
 80017de:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 80017e0:	7bbb      	ldrb	r3, [r7, #14]
 80017e2:	3301      	adds	r3, #1
 80017e4:	73bb      	strb	r3, [r7, #14]
 80017e6:	7bba      	ldrb	r2, [r7, #14]
 80017e8:	7abb      	ldrb	r3, [r7, #10]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d3e9      	bcc.n	80017c2 <draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 80017ee:	7abb      	ldrb	r3, [r7, #10]
 80017f0:	461a      	mov	r2, r3
 80017f2:	0052      	lsls	r2, r2, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	4413      	add	r3, r2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3b06      	subs	r3, #6
 8001802:	73fb      	strb	r3, [r7, #15]

  /* calculate the left offset */
  d = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	78bb      	ldrb	r3, [r7, #2]
 800180c:	429a      	cmp	r2, r3
 800180e:	d208      	bcs.n	8001822 <draw_button_line+0x8e>
  {
    d = w;
 8001810:	78bb      	ldrb	r3, [r7, #2]
 8001812:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 8001814:	7b3a      	ldrb	r2, [r7, #12]
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	733b      	strb	r3, [r7, #12]
    d /= 2;
 800181c:	7b3b      	ldrb	r3, [r7, #12]
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	733b      	strb	r3, [r7, #12]
  }

  /* draw the buttons */
  x = d;
 8001822:	7b3b      	ldrb	r3, [r7, #12]
 8001824:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8001826:	2300      	movs	r3, #0
 8001828:	73bb      	strb	r3, [r7, #14]
 800182a:	e02c      	b.n	8001886 <draw_button_line+0xf2>
  {
    is_invert = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 8001830:	7bba      	ldrb	r2, [r7, #14]
 8001832:	787b      	ldrb	r3, [r7, #1]
 8001834:	429a      	cmp	r2, r3
 8001836:	d101      	bne.n	800183c <draw_button_line+0xa8>
      is_invert = 1;
 8001838:	2301      	movs	r3, #1
 800183a:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 800183c:	7bbb      	ldrb	r3, [r7, #14]
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	4618      	mov	r0, r3
 8001842:	f001 ff7a 	bl	800373a <u8x8_GetStringLineStart>
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	7af9      	ldrb	r1, [r7, #11]
 800184a:	7b7b      	ldrb	r3, [r7, #13]
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	2301      	movs	r3, #1
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	9000      	str	r0, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 f999 	bl	8002b8e <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 800185c:	7bbb      	ldrb	r3, [r7, #14]
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	4618      	mov	r0, r3
 8001862:	f001 ff6a 	bl	800373a <u8x8_GetStringLineStart>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 ffce 	bl	800280c <u8g2_GetUTF8Width>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	4413      	add	r3, r2
 8001878:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	3306      	adds	r3, #6
 800187e:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8001880:	7bbb      	ldrb	r3, [r7, #14]
 8001882:	3301      	adds	r3, #1
 8001884:	73bb      	strb	r3, [r7, #14]
 8001886:	7bba      	ldrb	r2, [r7, #14]
 8001888:	7abb      	ldrb	r3, [r7, #10]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3ce      	bcc.n	800182c <draw_button_line+0x98>
  }

  /* return the number of buttons */
  return cnt;
 800188e:	7abb      	ldrb	r3, [r7, #10]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <initScreen>:
/**
  * @brief  Init and setup Sreen
  * @retval -
  */
void initScreen(u8g2_t* u8g2)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	  u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2,
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <initScreen+0x40>)
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <initScreen+0x44>)
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <initScreen+0x48>)
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fa8e 	bl	8001dc8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			  U8G2_R0,
			  u8x8_byte_stm32hal_hw_i2c,
			  psoc_gpio_and_delay_cb);	// Configure u8g2 type
	  u8g2_SetI2CAddress(u8g2, I2C_ADDRESS*2);	// Configure i2c address
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2278      	movs	r2, #120	; 0x78
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  u8g2_InitDisplay(u8g2);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f001 fe7e 	bl	80035b6 <u8x8_InitDisplay>
	  u8g2_ClearDisplay(u8g2);	// Clean screen for fist use
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fa5e 	bl	8001d7c <u8g2_ClearDisplay>
	  u8g2_SetPowerSave(u8g2, 0U);	// Disables Energy save
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f001 fe86 	bl	80035d4 <u8x8_SetPowerSave>

	  screen_number = 0;	// set home screen
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <initScreen+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	080016a1 	.word	0x080016a1
 80018dc:	080015c5 	.word	0x080015c5
 80018e0:	0800dff4 	.word	0x0800dff4
 80018e4:	20000880 	.word	0x20000880

080018e8 <updateScreen>:
/**
  * @brief  Updates the screen according the actual screen
  * @retval -
  */
void updateScreen()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af02      	add	r7, sp, #8
	switch(screen_number)
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <updateScreen+0x58>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d810      	bhi.n	8001918 <updateScreen+0x30>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <updateScreen+0x14>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001913 	.word	0x08001913
 8001904:	08001919 	.word	0x08001919
 8001908:	08001919 	.word	0x08001919
	{
	  case SCREEN_TIME:
		  draw_screen_time();
 800190c:	f000 f81e 	bl	800194c <draw_screen_time>
		  break;
 8001910:	e002      	b.n	8001918 <updateScreen+0x30>
	  case SCREEN_UBIC:
		  draw_screen_ubic();
 8001912:	f000 f885 	bl	8001a20 <draw_screen_ubic>
		  break;
 8001916:	bf00      	nop
		  break;
	  case SCREEN_ODOMETER:
		  //draw_screen_odometer();
		  break;
	}
	draw_button_line(&u8g2, u8g2_GetDisplayHeight(&u8g2)-BUTTON_OFFSET, u8g2_GetDisplayWidth(&u8g2), 3, BUTTONS);
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <updateScreen+0x5c>)
 800191a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800191e:	3b02      	subs	r3, #2
 8001920:	b2d9      	uxtb	r1, r3
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <updateScreen+0x5c>)
 8001924:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <updateScreen+0x60>)
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2303      	movs	r3, #3
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <updateScreen+0x5c>)
 8001930:	f7ff ff30 	bl	8001794 <draw_button_line>

	u8g2_SendBuffer(&u8g2);
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <updateScreen+0x5c>)
 8001936:	f000 f9b9 	bl	8001cac <u8g2_SendBuffer>
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000880 	.word	0x20000880
 8001944:	20000888 	.word	0x20000888
 8001948:	0800d6f4 	.word	0x0800d6f4

0800194c <draw_screen_time>:
void draw_screen_time()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef Time;
	RTC_DateTypeDef Date;
	uint8_t time_string[9] = "  :  :  ";
 8001952:	4a2e      	ldr	r2, [pc, #184]	; (8001a0c <draw_screen_time+0xc0>)
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	ca07      	ldmia	r2, {r0, r1, r2}
 800195a:	c303      	stmia	r3!, {r0, r1}
 800195c:	701a      	strb	r2, [r3, #0]
	uint8_t date_string[9] = "  /  /  ";
 800195e:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <draw_screen_time+0xc4>)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	ca07      	ldmia	r2, {r0, r1, r2}
 8001964:	c303      	stmia	r3!, {r0, r1}
 8001966:	701a      	strb	r2, [r3, #0]
	uint8_t y=11;
 8001968:	230b      	movs	r3, #11
 800196a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t x=0;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8g2_ClearBuffer(&u8g2);
 8001974:	4827      	ldr	r0, [pc, #156]	; (8001a14 <draw_screen_time+0xc8>)
 8001976:	f000 f926 	bl	8001bc6 <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 800197a:	2101      	movs	r1, #1
 800197c:	4825      	ldr	r0, [pc, #148]	; (8001a14 <draw_screen_time+0xc8>)
 800197e:	f000 fda4 	bl	80024ca <u8g2_SetFontMode>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8001982:	4925      	ldr	r1, [pc, #148]	; (8001a18 <draw_screen_time+0xcc>)
 8001984:	4823      	ldr	r0, [pc, #140]	; (8001a14 <draw_screen_time+0xc8>)
 8001986:	f000 fec3 	bl	8002710 <u8g2_SetFont>

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4822      	ldr	r0, [pc, #136]	; (8001a1c <draw_screen_time+0xd0>)
 8001994:	f005 fb2a 	bl	8006fec <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	481e      	ldr	r0, [pc, #120]	; (8001a1c <draw_screen_time+0xd0>)
 80019a2:	f005 fcb1 	bl	8007308 <HAL_RTC_GetDate>

	get_time_string(&Time, time_string);
 80019a6:	f107 0210 	add.w	r2, r7, #16
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fd7f 	bl	80014b4 <get_time_string>

	u8g2_DrawStr(&u8g2, x, y, time_string);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019be:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <draw_screen_time+0xc8>)
 80019c4:	f000 fdec 	bl	80025a0 <u8g2_DrawStr>

	get_date_string(&Date, date_string);
 80019c8:	1d3a      	adds	r2, r7, #4
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fdb3 	bl	800153c <get_date_string>
	x+=u8g2_GetStrWidth(&u8g2,time_string) + 5 ;
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	4619      	mov	r1, r3
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <draw_screen_time+0xc8>)
 80019de:	f000 ff01 	bl	80027e4 <u8g2_GetStrWidth>
 80019e2:	4603      	mov	r3, r0
 80019e4:	3305      	adds	r3, #5
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ec:	4413      	add	r3, r2
 80019ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8g2_DrawStr(&u8g2, x, y, date_string);
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019f8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <draw_screen_time+0xc8>)
 80019fe:	f000 fdcf 	bl	80025a0 <u8g2_DrawStr>
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	0800d704 	.word	0x0800d704
 8001a10:	0800d710 	.word	0x0800d710
 8001a14:	20000888 	.word	0x20000888
 8001a18:	0800d7d8 	.word	0x0800d7d8
 8001a1c:	200004bc 	.word	0x200004bc

08001a20 <draw_screen_ubic>:

void draw_screen_ubic()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
	extern GPSdata gps;
	uint8_t f_to_char[10];
	uint8_t y=11;
 8001a26:	230b      	movs	r3, #11
 8001a28:	73fb      	strb	r3, [r7, #15]
	uint8_t x=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]

	memset(f_to_char, '\0',10);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	220a      	movs	r2, #10
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00b fe13 	bl	800d660 <memset>

	u8g2_ClearBuffer(&u8g2);
 8001a3a:	482b      	ldr	r0, [pc, #172]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001a3c:	f000 f8c3 	bl	8001bc6 <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8001a40:	2101      	movs	r1, #1
 8001a42:	4829      	ldr	r0, [pc, #164]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001a44:	f000 fd41 	bl	80024ca <u8g2_SetFontMode>
	u8g2_SetFontDirection(&u8g2, 0);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001a4c:	f000 fef2 	bl	8002834 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8001a50:	4926      	ldr	r1, [pc, #152]	; (8001aec <draw_screen_ubic+0xcc>)
 8001a52:	4825      	ldr	r0, [pc, #148]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001a54:	f000 fe5c 	bl	8002710 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, x, y, "Lat: ");
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	7bb9      	ldrb	r1, [r7, #14]
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <draw_screen_ubic+0xd0>)
 8001a5e:	4822      	ldr	r0, [pc, #136]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001a60:	f000 fd9e 	bl	80025a0 <u8g2_DrawStr>
    x+=u8g2_GetStrWidth(&u8g2,"Lat: ");
 8001a64:	4922      	ldr	r1, [pc, #136]	; (8001af0 <draw_screen_ubic+0xd0>)
 8001a66:	4820      	ldr	r0, [pc, #128]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001a68:	f000 febc 	bl	80027e4 <u8g2_GetStrWidth>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	4413      	add	r3, r2
 8001a74:	73bb      	strb	r3, [r7, #14]
    float_to_ascii(gps.latitude , f_to_char, 6) ;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <draw_screen_ubic+0xd4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	1d39      	adds	r1, r7, #4
 8001a7c:	2206      	movs	r2, #6
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc95 	bl	80013ae <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	7bb9      	ldrb	r1, [r7, #14]
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001a8c:	f000 fd88 	bl	80025a0 <u8g2_DrawStr>

    memset(f_to_char, '\0',10);
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	220a      	movs	r2, #10
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00b fde2 	bl	800d660 <memset>
    x=0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73bb      	strb	r3, [r7, #14]
    y=2*y;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
    u8g2_DrawStr(&u8g2, x, y, "Lon: ");
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	7bb9      	ldrb	r1, [r7, #14]
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <draw_screen_ubic+0xd8>)
 8001aac:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001aae:	f000 fd77 	bl	80025a0 <u8g2_DrawStr>
	x+=u8g2_GetStrWidth(&u8g2,"Lon: ");
 8001ab2:	4911      	ldr	r1, [pc, #68]	; (8001af8 <draw_screen_ubic+0xd8>)
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001ab6:	f000 fe95 	bl	80027e4 <u8g2_GetStrWidth>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	73bb      	strb	r3, [r7, #14]
	float_to_ascii(gps.longitude , f_to_char, 6) ;
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <draw_screen_ubic+0xd4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	1d39      	adds	r1, r7, #4
 8001aca:	2206      	movs	r2, #6
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fc6e 	bl	80013ae <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	7bb9      	ldrb	r1, [r7, #14]
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <draw_screen_ubic+0xc8>)
 8001ada:	f000 fd61 	bl	80025a0 <u8g2_DrawStr>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000888 	.word	0x20000888
 8001aec:	0800d7d8 	.word	0x0800d7d8
 8001af0:	0800d71c 	.word	0x0800d71c
 8001af4:	2000090c 	.word	0x2000090c
 8001af8:	0800d724 	.word	0x0800d724

08001afc <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	70fb      	strb	r3, [r7, #3]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70bb      	strb	r3, [r7, #2]
 8001b12:	4613      	mov	r3, r2
 8001b14:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001b16:	e00d      	b.n	8001b34 <u8g2_DrawBox+0x38>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	78ba      	ldrb	r2, [r7, #2]
 8001b1c:	78f9      	ldrb	r1, [r7, #3]
 8001b1e:	2000      	movs	r0, #0
 8001b20:	9000      	str	r0, [sp, #0]
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 feff 	bl	8002926 <u8g2_DrawHVLine>
    y++;    
 8001b28:	78bb      	ldrb	r3, [r7, #2]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	70bb      	strb	r3, [r7, #2]
    h--;
 8001b2e:	7c3b      	ldrb	r3, [r7, #16]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8001b34:	7c3b      	ldrb	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ee      	bne.n	8001b18 <u8g2_DrawBox+0x1c>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	70fb      	strb	r3, [r7, #3]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70bb      	strb	r3, [r7, #2]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	78ba      	ldrb	r2, [r7, #2]
 8001b66:	78f9      	ldrb	r1, [r7, #3]
 8001b68:	2000      	movs	r0, #0
 8001b6a:	9000      	str	r0, [sp, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 feda 	bl	8002926 <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001b72:	7e3b      	ldrb	r3, [r7, #24]
 8001b74:	78ba      	ldrb	r2, [r7, #2]
 8001b76:	78f9      	ldrb	r1, [r7, #3]
 8001b78:	2001      	movs	r0, #1
 8001b7a:	9000      	str	r0, [sp, #0]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fed2 	bl	8002926 <u8g2_DrawHVLine>
  x+=w;
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	4413      	add	r3, r2
 8001b88:	70fb      	strb	r3, [r7, #3]
  x--;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001b90:	7e3b      	ldrb	r3, [r7, #24]
 8001b92:	78ba      	ldrb	r2, [r7, #2]
 8001b94:	78f9      	ldrb	r1, [r7, #3]
 8001b96:	2001      	movs	r0, #1
 8001b98:	9000      	str	r0, [sp, #0]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fec3 	bl	8002926 <u8g2_DrawHVLine>
  y+=h;
 8001ba0:	78ba      	ldrb	r2, [r7, #2]
 8001ba2:	7e3b      	ldrb	r3, [r7, #24]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	70bb      	strb	r3, [r7, #2]
  y--;
 8001ba8:	78bb      	ldrb	r3, [r7, #2]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001bae:	787b      	ldrb	r3, [r7, #1]
 8001bb0:	78ba      	ldrb	r2, [r7, #2]
 8001bb2:	7bf9      	ldrb	r1, [r7, #15]
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	9000      	str	r0, [sp, #0]
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 feb4 	bl	8002926 <u8g2_DrawHVLine>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <u8g2_ClearBuffer>:
#include <string.h>
#include "u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	7c1b      	ldrb	r3, [r3, #16]
 8001bd4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00b fd33 	bl	800d660 <memset>
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af02      	add	r7, sp, #8
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	7c1b      	ldrb	r3, [r3, #16]
 8001c18:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	89ba      	ldrh	r2, [r7, #12]
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001c30:	89bb      	ldrh	r3, [r7, #12]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001c36:	89bb      	ldrh	r3, [r7, #12]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001c3e:	7bf9      	ldrb	r1, [r7, #15]
 8001c40:	78ba      	ldrb	r2, [r7, #2]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	460b      	mov	r3, r1
 8001c48:	2100      	movs	r1, #0
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f001 fc82 	bl	8003554 <u8x8_DrawTile>
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c72:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	7c5b      	ldrb	r3, [r3, #17]
 8001c7a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001c7c:	7bba      	ldrb	r2, [r7, #14]
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	4619      	mov	r1, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffbd 	bl	8001c02 <u8g2_send_tile_row>
    src_row++;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	3301      	adds	r3, #1
 8001c92:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	7b7b      	ldrb	r3, [r7, #13]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d203      	bcs.n	8001ca4 <u8g2_send_buffer+0x4c>
 8001c9c:	7bba      	ldrb	r2, [r7, #14]
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d3eb      	bcc.n	8001c7c <u8g2_send_buffer+0x24>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ffcf 	bl	8001c58 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f001 fc9b 	bl	80035f6 <u8x8_RefreshDisplay>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff5b 	bl	8001bc6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001d10:	2100      	movs	r1, #0
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffd8 	bl	8001cc8 <u8g2_SetBufferCurrTileRow>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff95 	bl	8001c58 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	4413      	add	r3, r2
 8001d40:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	7c5b      	ldrb	r3, [r3, #17]
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d304      	bcc.n	8001d58 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f001 fc51 	bl	80035f6 <u8x8_RefreshDisplay>
    return 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e00d      	b.n	8001d74 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ff2f 	bl	8001bc6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ffab 	bl	8001cc8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffb7 	bl	8001cf8 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffc8 	bl	8001d20 <u8g2_NextPage>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001d96:	2100      	movs	r1, #0
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff95 	bl	8001cc8 <u8g2_SetBufferCurrTileRow>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2208      	movs	r2, #8
 8001db4:	701a      	strb	r2, [r3, #0]
  return buf;
 8001db6:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000064 	.word	0x20000064

08001dc8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8001dde:	490c      	ldr	r1, [pc, #48]	; (8001e10 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f001 fc6b 	bl	80036bc <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001de6:	f107 0313 	add.w	r3, r7, #19
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffdc 	bl	8001da8 <u8g2_m_16_8_f>
 8001df0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001df2:	7cfa      	ldrb	r2, [r7, #19]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 ff58 	bl	8002cb2 <u8g2_SetupBuffer>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	080031f5 	.word	0x080031f5
 8001e10:	08003451 	.word	0x08003451
 8001e14:	08002a4f 	.word	0x08002a4f

08001e18 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	81fb      	strh	r3, [r7, #14]
    font++;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3301      	adds	r3, #1
 8001e58:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	89fb      	ldrh	r3, [r7, #14]
 8001e68:	4413      	add	r3, r2
 8001e6a:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001e82:	2100      	movs	r1, #0
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f7ff ffc7 	bl	8001e18 <u8g2_font_get_byte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001e92:	2101      	movs	r1, #1
 8001e94:	6838      	ldr	r0, [r7, #0]
 8001e96:	f7ff ffbf 	bl	8001e18 <u8g2_font_get_byte>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	6838      	ldr	r0, [r7, #0]
 8001ea6:	f7ff ffb7 	bl	8001e18 <u8g2_font_get_byte>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	f7ff ffaf 	bl	8001e18 <u8g2_font_get_byte>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7ff ffa7 	bl	8001e18 <u8g2_font_get_byte>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001ed2:	2105      	movs	r1, #5
 8001ed4:	6838      	ldr	r0, [r7, #0]
 8001ed6:	f7ff ff9f 	bl	8001e18 <u8g2_font_get_byte>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001ee2:	2106      	movs	r1, #6
 8001ee4:	6838      	ldr	r0, [r7, #0]
 8001ee6:	f7ff ff97 	bl	8001e18 <u8g2_font_get_byte>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001ef2:	2107      	movs	r1, #7
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7ff ff8f 	bl	8001e18 <u8g2_font_get_byte>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001f02:	2108      	movs	r1, #8
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f7ff ff87 	bl	8001e18 <u8g2_font_get_byte>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001f12:	2109      	movs	r1, #9
 8001f14:	6838      	ldr	r0, [r7, #0]
 8001f16:	f7ff ff7f 	bl	8001e18 <u8g2_font_get_byte>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b25a      	sxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001f22:	210a      	movs	r1, #10
 8001f24:	6838      	ldr	r0, [r7, #0]
 8001f26:	f7ff ff77 	bl	8001e18 <u8g2_font_get_byte>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001f32:	210b      	movs	r1, #11
 8001f34:	6838      	ldr	r0, [r7, #0]
 8001f36:	f7ff ff6f 	bl	8001e18 <u8g2_font_get_byte>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001f42:	210c      	movs	r1, #12
 8001f44:	6838      	ldr	r0, [r7, #0]
 8001f46:	f7ff ff67 	bl	8001e18 <u8g2_font_get_byte>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	b25a      	sxtb	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001f52:	210d      	movs	r1, #13
 8001f54:	6838      	ldr	r0, [r7, #0]
 8001f56:	f7ff ff5f 	bl	8001e18 <u8g2_font_get_byte>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b25a      	sxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001f62:	210e      	movs	r1, #14
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f7ff ff57 	bl	8001e18 <u8g2_font_get_byte>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	b25a      	sxtb	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001f72:	210f      	movs	r1, #15
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	f7ff ff4f 	bl	8001e18 <u8g2_font_get_byte>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b25a      	sxtb	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001f82:	2110      	movs	r1, #16
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	f7ff ff47 	bl	8001e18 <u8g2_font_get_byte>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001f92:	2111      	movs	r1, #17
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f7ff ff50 	bl	8001e3a <u8g2_font_get_word>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001fa2:	2113      	movs	r1, #19
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f7ff ff48 	bl	8001e3a <u8g2_font_get_word>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001fb2:	2115      	movs	r1, #21
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f7ff ff40 	bl	8001e3a <u8g2_font_get_word>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	82da      	strh	r2, [r3, #22]
#endif
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7a9b      	ldrb	r3, [r3, #10]
 8001fda:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	7b7b      	ldrb	r3, [r7, #13]
 8001fe8:	fa42 f303 	asr.w	r3, r2, r3
 8001fec:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001fee:	7b7b      	ldrb	r3, [r7, #13]
 8001ff0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001ff2:	7bba      	ldrb	r2, [r7, #14]
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	2b07      	cmp	r3, #7
 8001ffe:	d91a      	bls.n	8002036 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002000:	2308      	movs	r3, #8
 8002002:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002004:	7b3a      	ldrb	r2, [r7, #12]
 8002006:	7b7b      	ldrb	r3, [r7, #13]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	b25a      	sxtb	r2, r3
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4313      	orrs	r3, r2
 800202c:	b25b      	sxtb	r3, r3
 800202e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	3b08      	subs	r3, #8
 8002034:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	b2da      	uxtb	r2, r3
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	4013      	ands	r3, r2
 800204a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7bba      	ldrb	r2, [r7, #14]
 8002050:	729a      	strb	r2, [r3, #10]
  return val;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffab 	bl	8001fca <u8g2_font_decode_get_unsigned_bits>
 8002074:	4603      	mov	r3, r0
 8002076:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	3b01      	subs	r3, #1
 8002080:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8002082:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	73fb      	strb	r3, [r7, #15]
  return v;
 8002098:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
 80020b0:	4613      	mov	r3, r2
 80020b2:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3354      	adds	r3, #84	; 0x54
 80020b8:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80020c4:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80020cc:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80020d4:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	7d7b      	ldrb	r3, [r7, #21]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80020e2:	7dfa      	ldrb	r2, [r7, #23]
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d201      	bcs.n	80020ee <u8g2_font_decode_len+0x4a>
      current = cnt;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	791b      	ldrb	r3, [r3, #4]
 80020f2:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	795b      	ldrb	r3, [r3, #5]
 80020f8:	737b      	strb	r3, [r7, #13]
    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
#else
    x += lx;
 80020fa:	7bba      	ldrb	r2, [r7, #14]
 80020fc:	7d7b      	ldrb	r3, [r7, #21]
 80020fe:	4413      	add	r3, r2
 8002100:	73bb      	strb	r3, [r7, #14]
    y += ly;
 8002102:	7b7a      	ldrb	r2, [r7, #13]
 8002104:	7d3b      	ldrb	r3, [r7, #20]
 8002106:	4413      	add	r3, r2
 8002108:	737b      	strb	r3, [r7, #13]
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800210a:	78bb      	ldrb	r3, [r7, #2]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <u8g2_font_decode_len+0x88>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	7b1a      	ldrb	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 800211a:	7dbb      	ldrb	r3, [r7, #22]
 800211c:	7b7a      	ldrb	r2, [r7, #13]
 800211e:	7bb9      	ldrb	r1, [r7, #14]
 8002120:	2000      	movs	r0, #0
 8002122:	9000      	str	r0, [sp, #0]
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fbfe 	bl	8002926 <u8g2_DrawHVLine>
 800212a:	e010      	b.n	800214e <u8g2_font_decode_len+0xaa>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	7adb      	ldrb	r3, [r3, #11]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10c      	bne.n	800214e <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	7b5a      	ldrb	r2, [r3, #13]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 800213e:	7dbb      	ldrb	r3, [r7, #22]
 8002140:	7b7a      	ldrb	r2, [r7, #13]
 8002142:	7bb9      	ldrb	r1, [r7, #14]
 8002144:	2000      	movs	r0, #0
 8002146:	9000      	str	r0, [sp, #0]
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fbec 	bl	8002926 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800214e:	7dfa      	ldrb	r2, [r7, #23]
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	429a      	cmp	r2, r3
 8002154:	d309      	bcc.n	800216a <u8g2_font_decode_len+0xc6>
      break;
    cnt -= rem;
 8002156:	7dfa      	ldrb	r2, [r7, #23]
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	757b      	strb	r3, [r7, #21]
    ly++;
 8002162:	7d3b      	ldrb	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8002168:	e7b1      	b.n	80020ce <u8g2_font_decode_len+0x2a>
      break;
 800216a:	bf00      	nop
  }
  lx += cnt;
 800216c:	7d7a      	ldrb	r2, [r7, #21]
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	4413      	add	r3, r2
 8002172:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8002174:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800217c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	71da      	strb	r2, [r3, #7]
  
}
 8002184:	bf00      	nop
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3354      	adds	r3, #84	; 0x54
 800219a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80021ae:	4619      	mov	r1, r3
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7ff ff0a 	bl	8001fca <u8g2_font_decode_get_unsigned_bits>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b25a      	sxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80021c4:	4619      	mov	r1, r3
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff feff 	bl	8001fca <u8g2_font_decode_get_unsigned_bits>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b25a      	sxtb	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	7b1b      	ldrb	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	735a      	strb	r2, [r3, #13]
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3354      	adds	r3, #84	; 0x54
 8002208:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffbd 	bl	800218c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002218:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002220:	4619      	mov	r1, r3
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff1b 	bl	800205e <u8g2_font_decode_get_signed_bits>
 8002228:	4603      	mov	r3, r0
 800222a:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002232:	4619      	mov	r1, r3
 8002234:	6978      	ldr	r0, [r7, #20]
 8002236:	f7ff ff12 	bl	800205e <u8g2_font_decode_get_signed_bits>
 800223a:	4603      	mov	r3, r0
 800223c:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002244:	4619      	mov	r1, r3
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7ff ff09 	bl	800205e <u8g2_font_decode_get_signed_bits>
 800224c:	4603      	mov	r3, r0
 800224e:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	dd49      	ble.n	80022ee <u8g2_font_decode_glyph+0xf4>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
#else
    decode->target_x += x;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	791a      	ldrb	r2, [r3, #4]
 800225e:	7cbb      	ldrb	r3, [r7, #18]
 8002260:	4413      	add	r3, r2
 8002262:	b2da      	uxtb	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	711a      	strb	r2, [r3, #4]
    decode->target_y -= h+y;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	795a      	ldrb	r2, [r3, #5]
 800226c:	7cf9      	ldrb	r1, [r7, #19]
 800226e:	7c7b      	ldrb	r3, [r7, #17]
 8002270:	440b      	add	r3, r1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	b2da      	uxtb	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	715a      	strb	r2, [r3, #5]
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2200      	movs	r2, #0
 8002280:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2200      	movs	r2, #0
 8002286:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800228e:	4619      	mov	r1, r3
 8002290:	6978      	ldr	r0, [r7, #20]
 8002292:	f7ff fe9a 	bl	8001fca <u8g2_font_decode_get_unsigned_bits>
 8002296:	4603      	mov	r3, r0
 8002298:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80022a0:	4619      	mov	r1, r3
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff fe91 	bl	8001fca <u8g2_font_decode_get_unsigned_bits>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2200      	movs	r2, #0
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fef6 	bl	80020a4 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80022b8:	7bbb      	ldrb	r3, [r7, #14]
 80022ba:	2201      	movs	r2, #1
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fef0 	bl	80020a4 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80022c4:	2101      	movs	r1, #1
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff fe7f 	bl	8001fca <u8g2_font_decode_get_unsigned_bits>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ec      	bne.n	80022ac <u8g2_font_decode_glyph+0xb2>

      if ( decode->y >= h )
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80022d8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dd00      	ble.n	80022e2 <u8g2_font_decode_glyph+0xe8>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80022e0:	e7d2      	b.n	8002288 <u8g2_font_decode_glyph+0x8e>
	break;
 80022e2:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	7b1a      	ldrb	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
  return d;
 80022ee:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3317      	adds	r3, #23
 8002310:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	2bff      	cmp	r3, #255	; 0xff
 8002316:	d82a      	bhi.n	800236e <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	2b60      	cmp	r3, #96	; 0x60
 800231c:	d907      	bls.n	800232e <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8002324:	461a      	mov	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	4413      	add	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e009      	b.n	8002342 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	2b40      	cmp	r3, #64	; 0x40
 8002332:	d906      	bls.n	8002342 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800233a:	461a      	mov	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4413      	add	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d04e      	beq.n	80023ea <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	429a      	cmp	r2, r3
 8002356:	d102      	bne.n	800235e <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3302      	adds	r3, #2
 800235c:	e049      	b.n	80023f2 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	4413      	add	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800236c:	e7e9      	b.n	8002342 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4413      	add	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002380:	2100      	movs	r1, #0
 8002382:	6938      	ldr	r0, [r7, #16]
 8002384:	f7ff fd59 	bl	8001e3a <u8g2_font_get_word>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002392:	2102      	movs	r1, #2
 8002394:	6938      	ldr	r0, [r7, #16]
 8002396:	f7ff fd50 	bl	8001e3a <u8g2_font_get_word>
 800239a:	4603      	mov	r3, r0
 800239c:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	3304      	adds	r3, #4
 80023a2:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80023a4:	89fa      	ldrh	r2, [r7, #14]
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d3e9      	bcc.n	8002380 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	89fb      	ldrh	r3, [r7, #14]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d010      	beq.n	80023ee <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80023cc:	89fa      	ldrh	r2, [r7, #14]
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d102      	bne.n	80023da <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3303      	adds	r3, #3
 80023d8:	e00b      	b.n	80023f2 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3302      	adds	r3, #2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4413      	add	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80023e8:	e7e0      	b.n	80023ac <u8g2_font_get_glyph_data+0xb2>
	break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <u8g2_font_get_glyph_data+0xf6>
	break;
 80023ee:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	4608      	mov	r0, r1
 8002404:	4611      	mov	r1, r2
 8002406:	461a      	mov	r2, r3
 8002408:	4603      	mov	r3, r0
 800240a:	70fb      	strb	r3, [r7, #3]
 800240c:	460b      	mov	r3, r1
 800240e:	70bb      	strb	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	78ba      	ldrb	r2, [r7, #2]
 8002424:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002428:	883b      	ldrh	r3, [r7, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff64 	bl	80022fa <u8g2_font_get_glyph_data>
 8002432:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fedc 	bl	80021fa <u8g2_font_decode_glyph>
 8002442:	4603      	mov	r3, r0
 8002444:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff4a 	bl	80022fa <u8g2_font_get_glyph_data>
 8002466:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 800246e:	2300      	movs	r3, #0
 8002470:	e027      	b.n	80024c2 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fe89 	bl	800218c <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7ff fde8 	bl	800205e <u8g2_font_decode_get_signed_bits>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f7ff fdd9 	bl	800205e <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f7ff fdcf 	bl	800205e <u8g2_font_decode_get_signed_bits>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	70fb      	strb	r3, [r7, #3]
 80024fa:	460b      	mov	r3, r1
 80024fc:	70bb      	strb	r3, [r7, #2]
 80024fe:	4613      	mov	r3, r2
 8002500:	803b      	strh	r3, [r7, #0]
    case 3:
      x += u8g2->font_calc_vref(u8g2);
      break;
  }
#else
  y += u8g2->font_calc_vref(u8g2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	78bb      	ldrb	r3, [r7, #2]
 8002510:	4413      	add	r3, r2
 8002512:	70bb      	strb	r3, [r7, #2]
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002514:	883b      	ldrh	r3, [r7, #0]
 8002516:	78ba      	ldrb	r2, [r7, #2]
 8002518:	78f9      	ldrb	r1, [r7, #3]
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff6d 	bl	80023fa <u8g2_font_draw_glyph>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	72fb      	strb	r3, [r7, #11]
 8002538:	4613      	mov	r3, r2
 800253a:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fcaa 	bl	8002e96 <u8x8_utf8_init>
  sum = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	4611      	mov	r1, r2
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	4798      	blx	r3
 8002554:	4603      	mov	r3, r0
 8002556:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002558:	8abb      	ldrh	r3, [r7, #20]
 800255a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255e:	4293      	cmp	r3, r2
 8002560:	d018      	beq.n	8002594 <u8g2_draw_string+0x6a>
      break;
    str++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3301      	adds	r3, #1
 8002566:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002568:	8abb      	ldrh	r3, [r7, #20]
 800256a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800256e:	4293      	cmp	r3, r2
 8002570:	d0e9      	beq.n	8002546 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002572:	8abb      	ldrh	r3, [r7, #20]
 8002574:	7aba      	ldrb	r2, [r7, #10]
 8002576:	7af9      	ldrb	r1, [r7, #11]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff ffb5 	bl	80024e8 <u8g2_DrawGlyph>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]
	case 3:
	  y -= delta;
	  break;
      }
#else
      x += delta;
 8002582:	7afa      	ldrb	r2, [r7, #11]
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	4413      	add	r3, r2
 8002588:	72fb      	strb	r3, [r7, #11]
#endif

      sum += delta;    
 800258a:	7dfa      	ldrb	r2, [r7, #23]
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	4413      	add	r3, r2
 8002590:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002592:	e7d8      	b.n	8002546 <u8g2_draw_string+0x1c>
      break;
 8002594:	bf00      	nop
    }
  }
  return sum;
 8002596:	7dfb      	ldrb	r3, [r7, #23]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	72fb      	strb	r3, [r7, #11]
 80025ae:	4613      	mov	r3, r2
 80025b0:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <u8g2_DrawStr+0x30>)
 80025b6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80025b8:	7aba      	ldrb	r2, [r7, #10]
 80025ba:	7af9      	ldrb	r1, [r7, #11]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ffb3 	bl	800252a <u8g2_draw_string>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	08002eb1 	.word	0x08002eb1

080025d4 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	72fb      	strb	r3, [r7, #11]
 80025e2:	4613      	mov	r3, r2
 80025e4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <u8g2_DrawUTF8+0x30>)
 80025ea:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80025ec:	7aba      	ldrb	r2, [r7, #10]
 80025ee:	7af9      	ldrb	r1, [r7, #11]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff ff99 	bl	800252a <u8g2_draw_string>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	08002edd 	.word	0x08002edd

08002608 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05d      	beq.n	80026d4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04d      	beq.n	80026d6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d11c      	bne.n	800267e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f993 207d 	ldrsb.w	r2, [r3, #125]	; 0x7d
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8002650:	429a      	cmp	r2, r3
 8002652:	da05      	bge.n	8002660 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800266c:	429a      	cmp	r2, r3
 800266e:	dd32      	ble.n	80026d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800267c:	e02b      	b.n	80026d6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 800268c:	4619      	mov	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002694:	440b      	add	r3, r1
 8002696:	429a      	cmp	r2, r3
 8002698:	da0d      	bge.n	80026b6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	b25a      	sxtb	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80026c2:	429a      	cmp	r2, r3
 80026c4:	dd07      	ble.n	80026d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80026d2:	e000      	b.n	80026d6 <u8g2_UpdateRefHeight+0xce>
    return;
 80026d4:	bf00      	nop
  }  
}
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
	...

080026f4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a03      	ldr	r2, [pc, #12]	; (800270c <u8g2_SetFontPosBaseline+0x18>)
 8002700:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	080026df 	.word	0x080026df

08002710 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d00b      	beq.n	800273c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3364      	adds	r3, #100	; 0x64
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fba1 	bl	8001e78 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ff66 	bl	8002608 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fb9d 	bl	8002e96 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	4611      	mov	r1, r2
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
 8002772:	4603      	mov	r3, r0
 8002774:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8002776:	89bb      	ldrh	r3, [r7, #12]
 8002778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <u8g2_string_width+0x64>
      break;
    str++;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002786:	89bb      	ldrh	r3, [r7, #12]
 8002788:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800278c:	4293      	cmp	r3, r2
 800278e:	d0e9      	beq.n	8002764 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002790:	89bb      	ldrh	r3, [r7, #12]
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fe5b 	bl	8002450 <u8g2_GetGlyphWidth>
 800279a:	4603      	mov	r3, r0
 800279c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	4413      	add	r3, r2
 80027a4:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80027a6:	e7dd      	b.n	8002764 <u8g2_string_width+0x20>
      break;
 80027a8:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d011      	beq.n	80027d8 <u8g2_string_width+0x94>
  {
    w -= dx;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	4413      	add	r3, r2
 80027c8:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	4413      	add	r3, r2
 80027d6:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a05      	ldr	r2, [pc, #20]	; (8002808 <u8g2_GetStrWidth+0x24>)
 80027f2:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa4 	bl	8002744 <u8g2_string_width>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	08002eb1 	.word	0x08002eb1

0800280c <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <u8g2_GetUTF8Width+0x24>)
 800281a:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ff90 	bl	8002744 <u8g2_string_width>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	08002edd 	.word	0x08002edd

08002834 <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
#endif
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	4611      	mov	r1, r2
 8002856:	461a      	mov	r2, r3
 8002858:	460b      	mov	r3, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	7dbb      	ldrb	r3, [r7, #22]
 8002870:	4413      	add	r3, r2
 8002872:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002874:	7dfa      	ldrb	r2, [r7, #23]
 8002876:	7dbb      	ldrb	r3, [r7, #22]
 8002878:	429a      	cmp	r2, r3
 800287a:	d90b      	bls.n	8002894 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800287c:	7dfa      	ldrb	r2, [r7, #23]
 800287e:	79bb      	ldrb	r3, [r7, #6]
 8002880:	429a      	cmp	r2, r3
 8002882:	d205      	bcs.n	8002890 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	75bb      	strb	r3, [r7, #22]
      b--;
 8002888:	7dbb      	ldrb	r3, [r7, #22]
 800288a:	3b01      	subs	r3, #1
 800288c:	75bb      	strb	r3, [r7, #22]
 800288e:	e001      	b.n	8002894 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002894:	7dfa      	ldrb	r2, [r7, #23]
 8002896:	79bb      	ldrb	r3, [r7, #6]
 8002898:	429a      	cmp	r2, r3
 800289a:	d301      	bcc.n	80028a0 <u8g2_clip_intersection2+0x56>
    return 0;
 800289c:	2300      	movs	r3, #0
 800289e:	e01c      	b.n	80028da <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80028a0:	7dba      	ldrb	r2, [r7, #22]
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d801      	bhi.n	80028ac <u8g2_clip_intersection2+0x62>
    return 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e016      	b.n	80028da <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80028ac:	7dfa      	ldrb	r2, [r7, #23]
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d201      	bcs.n	80028b8 <u8g2_clip_intersection2+0x6e>
    a = c;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80028b8:	7dba      	ldrb	r2, [r7, #22]
 80028ba:	79bb      	ldrb	r3, [r7, #6]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d901      	bls.n	80028c4 <u8g2_clip_intersection2+0x7a>
    b = d;
 80028c0:	79bb      	ldrb	r3, [r7, #6]
 80028c2:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	7dfa      	ldrb	r2, [r7, #23]
 80028c8:	701a      	strb	r2, [r3, #0]
  b -= a;
 80028ca:	7dba      	ldrb	r2, [r7, #22]
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	7dba      	ldrb	r2, [r7, #22]
 80028d6:	701a      	strb	r2, [r3, #0]
  return 1;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	70fb      	strb	r3, [r7, #3]
 80028f6:	460b      	mov	r3, r1
 80028f8:	70bb      	strb	r3, [r7, #2]
 80028fa:	4613      	mov	r3, r2
 80028fc:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002904:	78ba      	ldrb	r2, [r7, #2]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800290e:	7878      	ldrb	r0, [r7, #1]
 8002910:	78ba      	ldrb	r2, [r7, #2]
 8002912:	78f9      	ldrb	r1, [r7, #3]
 8002914:	7e3b      	ldrb	r3, [r7, #24]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4603      	mov	r3, r0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	47a0      	blx	r4
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bd90      	pop	{r4, r7, pc}

08002926 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002926:	b590      	push	{r4, r7, lr}
 8002928:	b085      	sub	sp, #20
 800292a:	af02      	add	r7, sp, #8
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	4608      	mov	r0, r1
 8002930:	4611      	mov	r1, r2
 8002932:	461a      	mov	r2, r3
 8002934:	4603      	mov	r3, r0
 8002936:	70fb      	strb	r3, [r7, #3]
 8002938:	460b      	mov	r3, r1
 800293a:	70bb      	strb	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d06a      	beq.n	8002a1c <u8g2_DrawHVLine+0xf6>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002946:	787b      	ldrb	r3, [r7, #1]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d918      	bls.n	800297e <u8g2_DrawHVLine+0x58>
      {
	if ( dir == 2 )
 800294c:	7e3b      	ldrb	r3, [r7, #24]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d109      	bne.n	8002966 <u8g2_DrawHVLine+0x40>
	{
	  x -= len;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	70fb      	strb	r3, [r7, #3]
	  x++;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	3301      	adds	r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	70fb      	strb	r3, [r7, #3]
 8002964:	e00b      	b.n	800297e <u8g2_DrawHVLine+0x58>
	}
	else if ( dir == 3 )
 8002966:	7e3b      	ldrb	r3, [r7, #24]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d108      	bne.n	800297e <u8g2_DrawHVLine+0x58>
	{
	  y -= len;
 800296c:	78ba      	ldrb	r2, [r7, #2]
 800296e:	787b      	ldrb	r3, [r7, #1]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002976:	78bb      	ldrb	r3, [r7, #2]
 8002978:	3301      	adds	r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800297e:	7e3b      	ldrb	r3, [r7, #24]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002986:	7e3b      	ldrb	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d119      	bne.n	80029c0 <u8g2_DrawHVLine+0x9a>
      {
	if ( y < u8g2->user_y0 )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002992:	78bb      	ldrb	r3, [r7, #2]
 8002994:	429a      	cmp	r2, r3
 8002996:	d838      	bhi.n	8002a0a <u8g2_DrawHVLine+0xe4>
	  return;
	if ( y >= u8g2->user_y1 )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800299e:	78bb      	ldrb	r3, [r7, #2]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d934      	bls.n	8002a0e <u8g2_DrawHVLine+0xe8>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029b0:	1c79      	adds	r1, r7, #1
 80029b2:	1cf8      	adds	r0, r7, #3
 80029b4:	f7ff ff49 	bl	800284a <u8g2_clip_intersection2>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d119      	bne.n	80029f2 <u8g2_DrawHVLine+0xcc>
	  return;
 80029be:	e02d      	b.n	8002a1c <u8g2_DrawHVLine+0xf6>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d822      	bhi.n	8002a12 <u8g2_DrawHVLine+0xec>
	  return;
	if ( x >= u8g2->user_x1 )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d91e      	bls.n	8002a16 <u8g2_DrawHVLine+0xf0>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80029e4:	1c79      	adds	r1, r7, #1
 80029e6:	1cb8      	adds	r0, r7, #2
 80029e8:	f7ff ff2f 	bl	800284a <u8g2_clip_intersection2>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d013      	beq.n	8002a1a <u8g2_DrawHVLine+0xf4>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	689c      	ldr	r4, [r3, #8]
 80029f8:	78f9      	ldrb	r1, [r7, #3]
 80029fa:	78ba      	ldrb	r2, [r7, #2]
 80029fc:	7878      	ldrb	r0, [r7, #1]
 80029fe:	7e3b      	ldrb	r3, [r7, #24]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4603      	mov	r3, r0
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	47a0      	blx	r4
 8002a08:	e008      	b.n	8002a1c <u8g2_DrawHVLine+0xf6>
	  return;
 8002a0a:	bf00      	nop
 8002a0c:	e006      	b.n	8002a1c <u8g2_DrawHVLine+0xf6>
	  return;
 8002a0e:	bf00      	nop
 8002a10:	e004      	b.n	8002a1c <u8g2_DrawHVLine+0xf6>
	  return;
 8002a12:	bf00      	nop
 8002a14:	e002      	b.n	8002a1c <u8g2_DrawHVLine+0xf6>
	  return;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <u8g2_DrawHVLine+0xf6>
	  return;
 8002a1a:	bf00      	nop
    }
}
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  if ( color >= 3 )
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d903      	bls.n	8002a44 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	4608      	mov	r0, r1
 8002a58:	4611      	mov	r1, r2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	70fb      	strb	r3, [r7, #3]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70bb      	strb	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002a68:	78bb      	ldrb	r3, [r7, #2]
 8002a6a:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002a78:	7c3a      	ldrb	r2, [r7, #16]
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d801      	bhi.n	8002a98 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002a94:	7c3b      	ldrb	r3, [r7, #16]
 8002a96:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002aa2:	7c3b      	ldrb	r3, [r7, #16]
 8002aa4:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002aa6:	78bb      	ldrb	r3, [r7, #2]
 8002aa8:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	f023 0307 	bic.w	r3, r3, #7
 8002ab0:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	7c1b      	ldrb	r3, [r3, #16]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	89fa      	ldrh	r2, [r7, #14]
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002ac8:	89fb      	ldrh	r3, [r7, #14]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  ptr += x;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d117      	bne.n	8002b10 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	7cbb      	ldrb	r3, [r7, #18]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	7c7b      	ldrb	r3, [r7, #17]
 8002af4:	4053      	eors	r3, r2
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
	len--;
 8002b02:	787b      	ldrb	r3, [r7, #1]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e8      	bne.n	8002ae0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002b0e:	e039      	b.n	8002b84 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	7cbb      	ldrb	r3, [r7, #18]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	7c7b      	ldrb	r3, [r7, #17]
 8002b24:	4053      	eors	r3, r2
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	74fb      	strb	r3, [r7, #19]
      len--;
 8002b3a:	787b      	ldrb	r3, [r7, #1]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d115      	bne.n	8002b72 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4413      	add	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d801      	bhi.n	8002b62 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d008      	beq.n	8002b7e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	747b      	strb	r3, [r7, #17]
 8002b70:	e005      	b.n	8002b7e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8002b72:	7cbb      	ldrb	r3, [r7, #18]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002b78:	7c7b      	ldrb	r3, [r7, #17]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002b7e:	787b      	ldrb	r3, [r7, #1]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1c5      	bne.n	8002b10 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af02      	add	r7, sp, #8
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	4608      	mov	r0, r1
 8002b98:	4611      	mov	r1, r2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	70fb      	strb	r3, [r7, #3]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70bb      	strb	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8002ba8:	2100      	movs	r1, #0
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff fe42 	bl	8002834 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	78bb      	ldrb	r3, [r7, #2]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fe21 	bl	800280c <u8g2_GetUTF8Width>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 8002bd2:	7aba      	ldrb	r2, [r7, #10]
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d209      	bcs.n	8002bee <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 8002bda:	787b      	ldrb	r3, [r7, #1]
 8002bdc:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	7abb      	ldrb	r3, [r7, #10]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	e001      	b.n	8002bf2 <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 8002bee:	7abb      	ldrb	r3, [r7, #10]
 8002bf0:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	78ba      	ldrb	r2, [r7, #2]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	737b      	strb	r3, [r7, #13]
  fw = w;
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff feff 	bl	8002a22 <u8g2_SetDrawColor>
  if ( is_invert )
 8002c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d021      	beq.n	8002c70 <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8002c2c:	7b38      	ldrb	r0, [r7, #12]
 8002c2e:	7b7a      	ldrb	r2, [r7, #13]
 8002c30:	7bb9      	ldrb	r1, [r7, #14]
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	4603      	mov	r3, r0
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe ff5f 	bl	8001afc <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8002c3e:	e017      	b.n	8002c70 <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	73bb      	strb	r3, [r7, #14]
    fy--;
 8002c46:	7b7b      	ldrb	r3, [r7, #13]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	737b      	strb	r3, [r7, #13]
    fw +=2;
 8002c4c:	7b3b      	ldrb	r3, [r7, #12]
 8002c4e:	3302      	adds	r3, #2
 8002c50:	733b      	strb	r3, [r7, #12]
    fh +=2;
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	3302      	adds	r3, #2
 8002c56:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 8002c58:	7b38      	ldrb	r0, [r7, #12]
 8002c5a:	7b7a      	ldrb	r2, [r7, #13]
 8002c5c:	7bb9      	ldrb	r1, [r7, #14]
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4603      	mov	r3, r0
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe ff6d 	bl	8001b44 <u8g2_DrawFrame>
    border_size--;
 8002c6a:	7f3b      	ldrb	r3, [r7, #28]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 8002c70:	7f3b      	ldrb	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e4      	bne.n	8002c40 <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 8002c76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fece 	bl	8002a22 <u8g2_SetDrawColor>
 8002c86:	e003      	b.n	8002c90 <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fec9 	bl	8002a22 <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	4413      	add	r3, r2
 8002c96:	b2d9      	uxtb	r1, r3
 8002c98:	78ba      	ldrb	r2, [r7, #2]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fc99 	bl	80025d4 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff febc 	bl	8002a22 <u8g2_SetDrawColor>

}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  
  u8g2->draw_color = 1;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  u8g2->is_auto_page_clear = 1;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  
  u8g2->cb = u8g2_cb;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
#else
  u8g2->cb->update_page_win(u8g2);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	4798      	blx	r3
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fce8 	bl	80026f4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
#endif
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	7c1b      	ldrb	r3, [r3, #16]
 8002d54:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b1f      	cmp	r3, #31
 8002d5a:	d901      	bls.n	8002d60 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002d5c:	231f      	movs	r3, #31
 8002d5e:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8a:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002d94:	4413      	add	r3, r2
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	7c52      	ldrb	r2, [r2, #17]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	dd06      	ble.n	8002dac <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	7c5a      	ldrb	r2, [r3, #17]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	22f0      	movs	r2, #240	; 0xf0
 8002de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	8a9b      	ldrh	r3, [r3, #20]
 8002de8:	2bf0      	cmp	r3, #240	; 0xf0
 8002dea:	d805      	bhi.n	8002df8 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	8a9b      	ldrh	r3, [r3, #20]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	8adb      	ldrh	r3, [r3, #22]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ff88 	bl	8002d2c <u8g2_update_dimension_common>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af02      	add	r7, sp, #8
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	4608      	mov	r0, r1
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4603      	mov	r3, r0
 8002e72:	70fb      	strb	r3, [r7, #3]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70bb      	strb	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002e7c:	7878      	ldrb	r0, [r7, #1]
 8002e7e:	78ba      	ldrb	r2, [r7, #2]
 8002e80:	78f9      	ldrb	r1, [r7, #3]
 8002e82:	7c3b      	ldrb	r3, [r7, #16]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	4603      	mov	r3, r0
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff fd2b 	bl	80028e4 <u8g2_draw_hv_line_2dir>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <u8x8_ascii_next+0x18>
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	2b0a      	cmp	r3, #10
 8002ec6:	d102      	bne.n	8002ece <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ecc:	e001      	b.n	8002ed2 <u8x8_ascii_next+0x22>
  return b;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	b29b      	uxth	r3, r3
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <u8x8_utf8_next+0x18>
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	2b0a      	cmp	r3, #10
 8002ef2:	d102      	bne.n	8002efa <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef8:	e06e      	b.n	8002fd8 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d145      	bne.n	8002f90 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	2bfb      	cmp	r3, #251	; 0xfb
 8002f08:	d908      	bls.n	8002f1c <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	70fb      	strb	r3, [r7, #3]
 8002f1a:	e032      	b.n	8002f82 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	2bf7      	cmp	r3, #247	; 0xf7
 8002f20:	d908      	bls.n	8002f34 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	70fb      	strb	r3, [r7, #3]
 8002f32:	e026      	b.n	8002f82 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	2bef      	cmp	r3, #239	; 0xef
 8002f38:	d908      	bls.n	8002f4c <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	70fb      	strb	r3, [r7, #3]
 8002f4a:	e01a      	b.n	8002f82 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	2bdf      	cmp	r3, #223	; 0xdf
 8002f50:	d908      	bls.n	8002f64 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	70fb      	strb	r3, [r7, #3]
 8002f62:	e00e      	b.n	8002f82 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	2bbf      	cmp	r3, #191	; 0xbf
 8002f68:	d908      	bls.n	8002f7c <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	70fb      	strb	r3, [r7, #3]
 8002f7a:	e002      	b.n	8002f82 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	e02a      	b.n	8002fd8 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002f8a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002f8e:	e023      	b.n	8002fd8 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8c1b      	ldrh	r3, [r3, #32]
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb2:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8c1a      	ldrh	r2, [r3, #32]
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002fce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002fd2:	e001      	b.n	8002fd8 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8c1b      	ldrh	r3, [r3, #32]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002fe2:	b590      	push	{r4, r7, lr}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	460b      	mov	r3, r1
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691c      	ldr	r4, [r3, #16]
 8002ff4:	7afa      	ldrb	r2, [r7, #11]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2117      	movs	r1, #23
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	47a0      	blx	r4
 8002ffe:	4603      	mov	r3, r0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}

08003008 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003014:	1cfb      	adds	r3, r7, #3
 8003016:	461a      	mov	r2, r3
 8003018:	2101      	movs	r1, #1
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffe1 	bl	8002fe2 <u8x8_byte_SendBytes>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800302a:	b590      	push	{r4, r7, lr}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691c      	ldr	r4, [r3, #16]
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	2118      	movs	r1, #24
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	47a0      	blx	r4
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}

0800304a <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691c      	ldr	r4, [r3, #16]
 8003056:	2300      	movs	r3, #0
 8003058:	2200      	movs	r2, #0
 800305a:	2119      	movs	r1, #25
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	47a0      	blx	r4
 8003060:	4603      	mov	r3, r0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}

0800306a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68dc      	ldr	r4, [r3, #12]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	2300      	movs	r3, #0
 800307e:	2115      	movs	r1, #21
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	47a0      	blx	r4
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bd90      	pop	{r4, r7, pc}

0800308e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800308e:	b590      	push	{r4, r7, lr}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68dc      	ldr	r4, [r3, #12]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	2300      	movs	r3, #0
 80030a2:	2116      	movs	r1, #22
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	47a0      	blx	r4
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd90      	pop	{r4, r7, pc}

080030b2 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80030b2:	b590      	push	{r4, r7, lr}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	460b      	mov	r3, r1
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68dc      	ldr	r4, [r3, #12]
 80030c4:	7afa      	ldrb	r2, [r7, #11]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2117      	movs	r1, #23
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	47a0      	blx	r4
 80030ce:	4603      	mov	r3, r0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68dc      	ldr	r4, [r3, #12]
 80030e4:	2300      	movs	r3, #0
 80030e6:	2200      	movs	r2, #0
 80030e8:	2118      	movs	r1, #24
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	47a0      	blx	r4
 80030ee:	4603      	mov	r3, r0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68dc      	ldr	r4, [r3, #12]
 8003104:	2300      	movs	r3, #0
 8003106:	2200      	movs	r2, #0
 8003108:	2119      	movs	r1, #25
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	47a0      	blx	r4
 800310e:	4603      	mov	r3, r0
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	73fb      	strb	r3, [r7, #15]
    data++;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2bfe      	cmp	r3, #254	; 0xfe
 8003132:	d031      	beq.n	8003198 <u8x8_cad_SendSequence+0x80>
 8003134:	2bfe      	cmp	r3, #254	; 0xfe
 8003136:	dc3d      	bgt.n	80031b4 <u8x8_cad_SendSequence+0x9c>
 8003138:	2b19      	cmp	r3, #25
 800313a:	dc3b      	bgt.n	80031b4 <u8x8_cad_SendSequence+0x9c>
 800313c:	2b18      	cmp	r3, #24
 800313e:	da23      	bge.n	8003188 <u8x8_cad_SendSequence+0x70>
 8003140:	2b16      	cmp	r3, #22
 8003142:	dc02      	bgt.n	800314a <u8x8_cad_SendSequence+0x32>
 8003144:	2b15      	cmp	r3, #21
 8003146:	da03      	bge.n	8003150 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003148:	e034      	b.n	80031b4 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800314a:	2b17      	cmp	r3, #23
 800314c:	d00e      	beq.n	800316c <u8x8_cad_SendSequence+0x54>
	return;
 800314e:	e031      	b.n	80031b4 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68dc      	ldr	r4, [r3, #12]
 800315a:	7bba      	ldrb	r2, [r7, #14]
 800315c:	7bf9      	ldrb	r1, [r7, #15]
 800315e:	2300      	movs	r3, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	47a0      	blx	r4
	  data++;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	603b      	str	r3, [r7, #0]
	  break;
 800316a:	e022      	b.n	80031b2 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003172:	f107 030e 	add.w	r3, r7, #14
 8003176:	461a      	mov	r2, r3
 8003178:	2101      	movs	r1, #1
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff99 	bl	80030b2 <u8x8_cad_SendData>
	  data++;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	603b      	str	r3, [r7, #0]
	  break;
 8003186:	e014      	b.n	80031b2 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68dc      	ldr	r4, [r3, #12]
 800318c:	7bf9      	ldrb	r1, [r7, #15]
 800318e:	2300      	movs	r3, #0
 8003190:	2200      	movs	r2, #0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	47a0      	blx	r4
	  break;
 8003196:	e00c      	b.n	80031b2 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800319e:	7bbb      	ldrb	r3, [r7, #14]
 80031a0:	461a      	mov	r2, r3
 80031a2:	2129      	movs	r1, #41	; 0x29
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fa35 	bl	8003614 <u8x8_gpio_call>
	  data++;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	603b      	str	r3, [r7, #0]
	  break;
 80031b0:	bf00      	nop
    cmd = *data;
 80031b2:	e7b6      	b.n	8003122 <u8x8_cad_SendSequence+0xa>
	return;
 80031b4:	bf00      	nop
    }
  }
}
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}

080031bc <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	460b      	mov	r3, r1
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff ff2d 	bl	800302a <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80031d0:	2140      	movs	r1, #64	; 0x40
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff ff18 	bl	8003008 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	691c      	ldr	r4, [r3, #16]
 80031dc:	7afa      	ldrb	r2, [r7, #11]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2117      	movs	r1, #23
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff ff2f 	bl	800304a <u8x8_byte_EndTransfer>
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd90      	pop	{r4, r7, pc}

080031f4 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	72fb      	strb	r3, [r7, #11]
 8003202:	4613      	mov	r3, r2
 8003204:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	3b14      	subs	r3, #20
 800320a:	2b05      	cmp	r3, #5
 800320c:	d86e      	bhi.n	80032ec <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	080032ab 	.word	0x080032ab
 8003218:	0800322d 	.word	0x0800322d
 800321c:	0800325b 	.word	0x0800325b
 8003220:	08003267 	.word	0x08003267
 8003224:	080032cf 	.word	0x080032cf
 8003228:	080032d7 	.word	0x080032d7
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800322c:	4b33      	ldr	r3, [pc, #204]	; (80032fc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff ff08 	bl	800304a <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff fef5 	bl	800302a <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8003240:	2100      	movs	r1, #0
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff fee0 	bl	8003008 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003248:	7abb      	ldrb	r3, [r7, #10]
 800324a:	4619      	mov	r1, r3
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f7ff fedb 	bl	8003008 <u8x8_byte_SendByte>
      in_transfer = 1;
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8003258:	e04a      	b.n	80032f0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800325a:	7abb      	ldrb	r3, [r7, #10]
 800325c:	4619      	mov	r1, r3
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff fed2 	bl	8003008 <u8x8_byte_SendByte>
      break;      
 8003264:	e044      	b.n	80032f0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff feeb 	bl	800304a <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003278:	e00a      	b.n	8003290 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	2118      	movs	r1, #24
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff ff9c 	bl	80031bc <u8x8_i2c_data_transfer>
	arg_int-=24;
 8003284:	7abb      	ldrb	r3, [r7, #10]
 8003286:	3b18      	subs	r3, #24
 8003288:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3318      	adds	r3, #24
 800328e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003290:	7abb      	ldrb	r3, [r7, #10]
 8003292:	2b18      	cmp	r3, #24
 8003294:	d8f1      	bhi.n	800327a <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8003296:	7abb      	ldrb	r3, [r7, #10]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4619      	mov	r1, r3
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff ff8d 	bl	80031bc <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
      break;
 80032a8:	e022      	b.n	80032f0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b0:	2bff      	cmp	r3, #255	; 0xff
 80032b2:	d103      	bne.n	80032bc <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2278      	movs	r2, #120	; 0x78
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	691c      	ldr	r4, [r3, #16]
 80032c0:	7aba      	ldrb	r2, [r7, #10]
 80032c2:	7af9      	ldrb	r1, [r7, #11]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	47a0      	blx	r4
 80032ca:	4603      	mov	r3, r0
 80032cc:	e011      	b.n	80032f2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
      break;
 80032d4:	e00c      	b.n	80032f0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff feb3 	bl	800304a <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
      break;
 80032ea:	e001      	b.n	80032f0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80032f0:	2301      	movs	r3, #1
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000464 	.word	0x20000464

08003300 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	72fb      	strb	r3, [r7, #11]
 800330e:	4613      	mov	r3, r2
 8003310:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	3b0b      	subs	r3, #11
 8003316:	2b04      	cmp	r3, #4
 8003318:	f200 808a 	bhi.w	8003430 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003339 	.word	0x08003339
 8003328:	08003431 	.word	0x08003431
 800332c:	08003353 	.word	0x08003353
 8003330:	08003385 	.word	0x08003385
 8003334:	080033a5 	.word	0x080033a5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003338:	7abb      	ldrb	r3, [r7, #10]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d104      	bne.n	8003348 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800333e:	4940      	ldr	r1, [pc, #256]	; (8003440 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff fee9 	bl	8003118 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8003346:	e075      	b.n	8003434 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8003348:	493e      	ldr	r1, [pc, #248]	; (8003444 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fee4 	bl	8003118 <u8x8_cad_SendSequence>
      break;
 8003350:	e070      	b.n	8003434 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003352:	7abb      	ldrb	r3, [r7, #10]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8003358:	493b      	ldr	r1, [pc, #236]	; (8003448 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff fedc 	bl	8003118 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	7c9a      	ldrb	r2, [r3, #18]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800336c:	e062      	b.n	8003434 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800336e:	4937      	ldr	r1, [pc, #220]	; (800344c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fed1 	bl	8003118 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	7cda      	ldrb	r2, [r3, #19]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003382:	e057      	b.n	8003434 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fea7 	bl	80030d8 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800338a:	2181      	movs	r1, #129	; 0x81
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fe6c 	bl	800306a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003392:	7abb      	ldrb	r3, [r7, #10]
 8003394:	4619      	mov	r1, r3
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff fe79 	bl	800308e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f7ff feab 	bl	80030f8 <u8x8_cad_EndTransfer>
      break;
 80033a2:	e047      	b.n	8003434 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fe97 	bl	80030d8 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	795b      	ldrb	r3, [r3, #5]
 80033ae:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	4413      	add	r3, r2
 80033c0:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80033c2:	2140      	movs	r1, #64	; 0x40
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff fe50 	bl	800306a <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f043 0310 	orr.w	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4619      	mov	r1, r3
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fe46 	bl	800306a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fe50 	bl	800308e <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	799b      	ldrb	r3, [r3, #6]
 80033f2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff fe47 	bl	800308e <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	791b      	ldrb	r3, [r3, #4]
 8003404:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800340c:	7dbb      	ldrb	r3, [r7, #22]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4619      	mov	r1, r3
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff fe4b 	bl	80030b2 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800341c:	7abb      	ldrb	r3, [r7, #10]
 800341e:	3b01      	subs	r3, #1
 8003420:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003422:	7abb      	ldrb	r3, [r7, #10]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1eb      	bne.n	8003400 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff fe65 	bl	80030f8 <u8x8_cad_EndTransfer>
      break;
 800342e:	e001      	b.n	8003434 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8003434:	2301      	movs	r3, #1
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	0800e038 	.word	0x0800e038
 8003444:	0800e040 	.word	0x0800e040
 8003448:	0800e048 	.word	0x0800e048
 800344c:	0800e050 	.word	0x0800e050

08003450 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	72fb      	strb	r3, [r7, #11]
 800345e:	4613      	mov	r3, r2
 8003460:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8003462:	7aba      	ldrb	r2, [r7, #10]
 8003464:	7af9      	ldrb	r1, [r7, #11]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7ff ff49 	bl	8003300 <u8x8_d_ssd1306_sh1106_generic>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8003474:	2301      	movs	r3, #1
 8003476:	e014      	b.n	80034a2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8003478:	7afb      	ldrb	r3, [r7, #11]
 800347a:	2b09      	cmp	r3, #9
 800347c:	d009      	beq.n	8003492 <u8x8_d_ssd1306_128x64_noname+0x42>
 800347e:	2b0a      	cmp	r3, #10
 8003480:	d10c      	bne.n	800349c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f829 	bl	80034da <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8003488:	4908      	ldr	r1, [pc, #32]	; (80034ac <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff fe44 	bl	8003118 <u8x8_cad_SendSequence>
      break;
 8003490:	e006      	b.n	80034a0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8003492:	4907      	ldr	r1, [pc, #28]	; (80034b0 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f80d 	bl	80034b4 <u8x8_d_helper_display_setup_memory>
      break;
 800349a:	e001      	b.n	80034a0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80034a0:	2301      	movs	r3, #1
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	0800e000 	.word	0x0800e000
 80034b0:	0800e058 	.word	0x0800e058

080034b4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	7c9a      	ldrb	r2, [r3, #18]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80034da:	b590      	push	{r4, r7, lr}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695c      	ldr	r4, [r3, #20]
 80034e6:	2300      	movs	r3, #0
 80034e8:	2200      	movs	r2, #0
 80034ea:	2128      	movs	r1, #40	; 0x28
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68dc      	ldr	r4, [r3, #12]
 80034f4:	2300      	movs	r3, #0
 80034f6:	2200      	movs	r2, #0
 80034f8:	2114      	movs	r1, #20
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80034fe:	2201      	movs	r2, #1
 8003500:	214b      	movs	r1, #75	; 0x4b
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f886 	bl	8003614 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	791b      	ldrb	r3, [r3, #4]
 800350e:	461a      	mov	r2, r3
 8003510:	2129      	movs	r1, #41	; 0x29
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f87e 	bl	8003614 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	214b      	movs	r1, #75	; 0x4b
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f879 	bl	8003614 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	461a      	mov	r2, r3
 800352a:	2129      	movs	r1, #41	; 0x29
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f871 	bl	8003614 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003532:	2201      	movs	r2, #1
 8003534:	214b      	movs	r1, #75	; 0x4b
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f86c 	bl	8003614 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	795b      	ldrb	r3, [r3, #5]
 8003542:	461a      	mov	r2, r3
 8003544:	2129      	movs	r1, #41	; 0x29
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f864 	bl	8003614 <u8x8_gpio_call>
}    
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bd90      	pop	{r4, r7, pc}

08003554 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	4608      	mov	r0, r1
 800355e:	4611      	mov	r1, r2
 8003560:	461a      	mov	r2, r3
 8003562:	4603      	mov	r3, r0
 8003564:	70fb      	strb	r3, [r7, #3]
 8003566:	460b      	mov	r3, r1
 8003568:	70bb      	strb	r3, [r7, #2]
 800356a:	4613      	mov	r3, r2
 800356c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003572:	78bb      	ldrb	r3, [r7, #2]
 8003574:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003576:	787b      	ldrb	r3, [r7, #1]
 8003578:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689c      	ldr	r4, [r3, #8]
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	2201      	movs	r2, #1
 8003588:	210f      	movs	r1, #15
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	47a0      	blx	r4
 800358e:	4603      	mov	r3, r0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}

08003598 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689c      	ldr	r4, [r3, #8]
 80035a4:	2300      	movs	r3, #0
 80035a6:	2200      	movs	r2, #0
 80035a8:	2109      	movs	r1, #9
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	47a0      	blx	r4
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}

080035b6 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80035b6:	b590      	push	{r4, r7, lr}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689c      	ldr	r4, [r3, #8]
 80035c2:	2300      	movs	r3, #0
 80035c4:	2200      	movs	r2, #0
 80035c6:	210a      	movs	r1, #10
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	47a0      	blx	r4
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689c      	ldr	r4, [r3, #8]
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	2300      	movs	r3, #0
 80035e8:	210b      	movs	r1, #11
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	47a0      	blx	r4
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd90      	pop	{r4, r7, pc}

080035f6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80035f6:	b590      	push	{r4, r7, lr}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689c      	ldr	r4, [r3, #8]
 8003602:	2300      	movs	r3, #0
 8003604:	2200      	movs	r2, #0
 8003606:	2110      	movs	r1, #16
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	47a0      	blx	r4
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bd90      	pop	{r4, r7, pc}

08003614 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
 8003620:	4613      	mov	r3, r2
 8003622:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695c      	ldr	r4, [r3, #20]
 8003628:	78ba      	ldrb	r2, [r7, #2]
 800362a:	78f9      	ldrb	r1, [r7, #3]
 800362c:	2300      	movs	r3, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	47a0      	blx	r4
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}

0800363a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	72fb      	strb	r3, [r7, #11]
 8003648:	4613      	mov	r3, r2
 800364a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <u8x8_SetupDefaults+0x60>)
 800366a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <u8x8_SetupDefaults+0x60>)
 8003670:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <u8x8_SetupDefaults+0x60>)
 8003676:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <u8x8_SetupDefaults+0x60>)
 800367c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	0800363b 	.word	0x0800363b

080036bc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff ffc4 	bl	8003658 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff ff55 	bl	8003598 <u8x8_SetupMemory>
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <u8x8_GetStringLineCnt+0x16>
    return 0;
 8003708:	2300      	movs	r3, #0
 800370a:	e011      	b.n	8003730 <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 8003712:	7bbb      	ldrb	r3, [r7, #14]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3301      	adds	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	2b0a      	cmp	r3, #10
 8003722:	d1f3      	bne.n	800370c <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	3301      	adds	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
    e = *str;
 800372a:	e7ef      	b.n	800370c <u8x8_GetStringLineCnt+0x16>
      break;
 800372c:	bf00      	nop
  }
  return line_cnt;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	6039      	str	r1, [r7, #0]
 8003744:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <u8x8_GetStringLineStart+0x1a>
    return str;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	e017      	b.n	8003784 <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 800375a:	7bbb      	ldrb	r3, [r7, #14]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00f      	beq.n	8003780 <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 8003766:	7bbb      	ldrb	r3, [r7, #14]
 8003768:	2b0a      	cmp	r3, #10
 800376a:	d1f3      	bne.n	8003754 <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	429a      	cmp	r2, r3
 8003772:	d101      	bne.n	8003778 <u8x8_GetStringLineStart+0x3e>
	return str;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	e005      	b.n	8003784 <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	3301      	adds	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
    e = *str;
 800377e:	e7e9      	b.n	8003754 <u8x8_GetStringLineStart+0x1a>
      break;
 8003780:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <open_append>:

FRESULT open_append (
    FIL* fp,            /* [OUT] File object to create */
    const char* path    /* [IN]  File name to be opened */
)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 8003798:	2212      	movs	r2, #18
 800379a:	6839      	ldr	r1, [r7, #0]
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f008 fadb 	bl	800bd58 <f_open>
 80037a2:	4603      	mov	r3, r0
 80037a4:	73fb      	strb	r3, [r7, #15]
    if (fr == FR_OK) {
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10f      	bne.n	80037cc <open_append+0x3e>
        /* Seek to end of the file to append data */
        fr = f_lseek(fp, f_size(fp));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f009 f918 	bl	800c9ec <f_lseek>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
        if (fr != FR_OK)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <open_append+0x3e>
            f_close(fp);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f009 f8e5 	bl	800c996 <f_close>
    }
    return fr;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <log_data>:
	uint8_t len = strlen (string);
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
}

FRESULT log_data()
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
  FRESULT fr;
  FATFS fs;
  FIL fil;
  uint8_t time_string[11] = "  :  :   ,";
 80037e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037e6:	4a65      	ldr	r2, [pc, #404]	; (800397c <log_data+0x1a4>)
 80037e8:	3b6c      	subs	r3, #108	; 0x6c
 80037ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80037ec:	c303      	stmia	r3!, {r0, r1}
 80037ee:	801a      	strh	r2, [r3, #0]
 80037f0:	3302      	adds	r3, #2
 80037f2:	0c12      	lsrs	r2, r2, #16
 80037f4:	701a      	strb	r2, [r3, #0]
  uint8_t date_string[10] = "  /  /  ";
 80037f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037fa:	461c      	mov	r4, r3
 80037fc:	4a60      	ldr	r2, [pc, #384]	; (8003980 <log_data+0x1a8>)
 80037fe:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8003802:	ca07      	ldmia	r2, {r0, r1, r2}
 8003804:	c303      	stmia	r3!, {r0, r1}
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	f804 3c6f 	strb.w	r3, [r4, #-111]
  uint8_t aux[10] = ",        ";
 800380e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003812:	4a5c      	ldr	r2, [pc, #368]	; (8003984 <log_data+0x1ac>)
 8003814:	3b84      	subs	r3, #132	; 0x84
 8003816:	ca07      	ldmia	r2, {r0, r1, r2}
 8003818:	c303      	stmia	r3!, {r0, r1}
 800381a:	801a      	strh	r2, [r3, #0]
  uint8_t aux1[13] = ",          \n";
 800381c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003820:	4a59      	ldr	r2, [pc, #356]	; (8003988 <log_data+0x1b0>)
 8003822:	f1a3 0494 	sub.w	r4, r3, #148	; 0x94
 8003826:	4613      	mov	r3, r2
 8003828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800382a:	c407      	stmia	r4!, {r0, r1, r2}
 800382c:	7023      	strb	r3, [r4, #0]
  RTC_DateTypeDef Date;
  extern RTC_HandleTypeDef hrtc;
  extern GPSdata gps;

	/* Open or create a log file and ready to append */
  fr = f_mount(&fs, "", 0);
 800382e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003832:	3b14      	subs	r3, #20
 8003834:	2200      	movs	r2, #0
 8003836:	4955      	ldr	r1, [pc, #340]	; (800398c <log_data+0x1b4>)
 8003838:	4618      	mov	r0, r3
 800383a:	f008 fa43 	bl	800bcc4 <f_mount>
 800383e:	4603      	mov	r3, r0
 8003840:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8003844:	f102 021f 	add.w	r2, r2, #31
 8003848:	7013      	strb	r3, [r2, #0]
  if ( fr != FR_OK )
 800384a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800384e:	f103 031f 	add.w	r3, r3, #31
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <log_data+0x8c>
  {
		//send_uart ("ERROR!!! in mounting SD CARD...\r\n");
		return fr;
 8003858:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800385c:	f103 031f 	add.w	r3, r3, #31
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	e085      	b.n	8003970 <log_data+0x198>
  }
  //else send_uart("SD CARD mounted successfully...\r\n");

  fr = open_append(&fil, "logfile.txt");
 8003864:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003868:	3b20      	subs	r3, #32
 800386a:	4949      	ldr	r1, [pc, #292]	; (8003990 <log_data+0x1b8>)
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff8e 	bl	800378e <open_append>
 8003872:	4603      	mov	r3, r0
 8003874:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8003878:	f102 021f 	add.w	r2, r2, #31
 800387c:	7013      	strb	r3, [r2, #0]
  if (fr != FR_OK)
 800387e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8003882:	f103 031f 	add.w	r3, r3, #31
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <log_data+0xc0>
  {
		 // send_uart ("ERROR!!! openning file...\r\n");
		  return fr;
 800388c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8003890:	f103 031f 	add.w	r3, r3, #31
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	e06b      	b.n	8003970 <log_data+0x198>
  }

	//send_uart ("logfile.txt opened\r\n");

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8003898:	f107 0320 	add.w	r3, r7, #32
 800389c:	3b18      	subs	r3, #24
 800389e:	2200      	movs	r2, #0
 80038a0:	4619      	mov	r1, r3
 80038a2:	483c      	ldr	r0, [pc, #240]	; (8003994 <log_data+0x1bc>)
 80038a4:	f003 fba2 	bl	8006fec <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80038a8:	f107 0320 	add.w	r3, r7, #32
 80038ac:	3b1c      	subs	r3, #28
 80038ae:	2200      	movs	r2, #0
 80038b0:	4619      	mov	r1, r3
 80038b2:	4838      	ldr	r0, [pc, #224]	; (8003994 <log_data+0x1bc>)
 80038b4:	f003 fd28 	bl	8007308 <HAL_RTC_GetDate>

	get_time_string(&Time, time_string);
 80038b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038bc:	3a2c      	subs	r2, #44	; 0x2c
 80038be:	f107 0320 	add.w	r3, r7, #32
 80038c2:	3b18      	subs	r3, #24
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fdf4 	bl	80014b4 <get_time_string>
	get_date_string(&Date, date_string);
 80038cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038d0:	3a38      	subs	r2, #56	; 0x38
 80038d2:	f107 0320 	add.w	r3, r7, #32
 80038d6:	3b1c      	subs	r3, #28
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fe2e 	bl	800153c <get_date_string>
	/* Append a line */
	f_printf(&fil, time_string);
 80038e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038e4:	3a2c      	subs	r2, #44	; 0x2c
 80038e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038ea:	3b20      	subs	r3, #32
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f009 fbaa 	bl	800d048 <f_printf>
	f_printf(&fil, date_string);
 80038f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038f8:	3a38      	subs	r2, #56	; 0x38
 80038fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038fe:	3b20      	subs	r3, #32
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f009 fba0 	bl	800d048 <f_printf>
	float_to_ascii(gps.latitude , aux+1, 6) ;
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <log_data+0x1c0>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	f107 0320 	add.w	r3, r7, #32
 8003910:	3b04      	subs	r3, #4
 8003912:	3301      	adds	r3, #1
 8003914:	2206      	movs	r2, #6
 8003916:	4619      	mov	r1, r3
 8003918:	f7fd fd49 	bl	80013ae <float_to_ascii>
	f_printf(&fil, aux);
 800391c:	f107 0220 	add.w	r2, r7, #32
 8003920:	3a04      	subs	r2, #4
 8003922:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003926:	3b20      	subs	r3, #32
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f009 fb8c 	bl	800d048 <f_printf>
	float_to_ascii(gps.longitude , aux1+1, 6) ;
 8003930:	4b19      	ldr	r3, [pc, #100]	; (8003998 <log_data+0x1c0>)
 8003932:	6858      	ldr	r0, [r3, #4]
 8003934:	f107 0320 	add.w	r3, r7, #32
 8003938:	3b14      	subs	r3, #20
 800393a:	3301      	adds	r3, #1
 800393c:	2206      	movs	r2, #6
 800393e:	4619      	mov	r1, r3
 8003940:	f7fd fd35 	bl	80013ae <float_to_ascii>
	aux1[11] = '\n';
 8003944:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003948:	220a      	movs	r2, #10
 800394a:	f803 2c89 	strb.w	r2, [r3, #-137]
	f_printf(&fil, aux1);
 800394e:	f107 0220 	add.w	r2, r7, #32
 8003952:	3a14      	subs	r2, #20
 8003954:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003958:	3b20      	subs	r3, #32
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f009 fb73 	bl	800d048 <f_printf>
	/* Close the file */
	f_close(&fil);
 8003962:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003966:	3b20      	subs	r3, #32
 8003968:	4618      	mov	r0, r3
 800396a:	f009 f814 	bl	800c996 <f_close>
	return FR_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8003976:	3724      	adds	r7, #36	; 0x24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}
 800397c:	0800d73c 	.word	0x0800d73c
 8003980:	0800d748 	.word	0x0800d748
 8003984:	0800d754 	.word	0x0800d754
 8003988:	0800d760 	.word	0x0800d760
 800398c:	0800d72c 	.word	0x0800d72c
 8003990:	0800d730 	.word	0x0800d730
 8003994:	200004bc 	.word	0x200004bc
 8003998:	2000090c 	.word	0x2000090c

0800399c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2110      	movs	r1, #16
 80039a4:	4803      	ldr	r0, [pc, #12]	; (80039b4 <SELECT+0x18>)
 80039a6:	f001 ffdc 	bl	8005962 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80039aa:	2001      	movs	r0, #1
 80039ac:	f001 faa8 	bl	8004f00 <HAL_Delay>
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40010800 	.word	0x40010800

080039b8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80039bc:	2201      	movs	r2, #1
 80039be:	2110      	movs	r1, #16
 80039c0:	4803      	ldr	r0, [pc, #12]	; (80039d0 <DESELECT+0x18>)
 80039c2:	f001 ffce 	bl	8005962 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80039c6:	2001      	movs	r0, #1
 80039c8:	f001 fa9a 	bl	8004f00 <HAL_Delay>
}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40010800 	.word	0x40010800

080039d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80039de:	bf00      	nop
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <SPI_TxByte+0x30>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d1f8      	bne.n	80039e0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80039ee:	1df9      	adds	r1, r7, #7
 80039f0:	2364      	movs	r3, #100	; 0x64
 80039f2:	2201      	movs	r2, #1
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <SPI_TxByte+0x30>)
 80039f6:	f004 f801 	bl	80079fc <HAL_SPI_Transmit>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200004d0 	.word	0x200004d0

08003a08 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003a14:	bf00      	nop
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <SPI_TxBuffer+0x30>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d1f8      	bne.n	8003a16 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	2364      	movs	r3, #100	; 0x64
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4803      	ldr	r0, [pc, #12]	; (8003a38 <SPI_TxBuffer+0x30>)
 8003a2c:	f003 ffe6 	bl	80079fc <HAL_SPI_Transmit>
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	200004d0 	.word	0x200004d0

08003a3c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003a42:	23ff      	movs	r3, #255	; 0xff
 8003a44:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003a46:	bf00      	nop
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <SPI_RxByte+0x34>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d1f8      	bne.n	8003a48 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003a56:	1dba      	adds	r2, r7, #6
 8003a58:	1df9      	adds	r1, r7, #7
 8003a5a:	2364      	movs	r3, #100	; 0x64
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <SPI_RxByte+0x34>)
 8003a62:	f004 f907 	bl	8007c74 <HAL_SPI_TransmitReceive>

	return data;
 8003a66:	79bb      	ldrb	r3, [r7, #6]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200004d0 	.word	0x200004d0

08003a74 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003a7c:	f7ff ffde 	bl	8003a3c <SPI_RxByte>
 8003a80:	4603      	mov	r3, r0
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	701a      	strb	r2, [r3, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <SD_ReadyWait+0x30>)
 8003a98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a9c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003a9e:	f7ff ffcd 	bl	8003a3c <SPI_RxByte>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2bff      	cmp	r3, #255	; 0xff
 8003aaa:	d004      	beq.n	8003ab6 <SD_ReadyWait+0x26>
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <SD_ReadyWait+0x30>)
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f3      	bne.n	8003a9e <SD_ReadyWait+0xe>

	return res;
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	2000091c 	.word	0x2000091c

08003ac4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003aca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003ace:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003ad0:	f7ff ff72 	bl	80039b8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	e005      	b.n	8003ae6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003ada:	20ff      	movs	r0, #255	; 0xff
 8003adc:	f7ff ff7a 	bl	80039d4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	ddf6      	ble.n	8003ada <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003aec:	f7ff ff56 	bl	800399c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003af0:	2340      	movs	r3, #64	; 0x40
 8003af2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003b04:	2395      	movs	r3, #149	; 0x95
 8003b06:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003b08:	463b      	mov	r3, r7
 8003b0a:	2106      	movs	r1, #6
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff7b 	bl	8003a08 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003b12:	e002      	b.n	8003b1a <SD_PowerOn+0x56>
	{
		cnt--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003b1a:	f7ff ff8f 	bl	8003a3c <SPI_RxByte>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d002      	beq.n	8003b2a <SD_PowerOn+0x66>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f4      	bne.n	8003b14 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003b2a:	f7ff ff45 	bl	80039b8 <DESELECT>
	SPI_TxByte(0XFF);
 8003b2e:	20ff      	movs	r0, #255	; 0xff
 8003b30:	f7ff ff50 	bl	80039d4 <SPI_TxByte>

	PowerFlag = 1;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <SD_PowerOn+0x80>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000466 	.word	0x20000466

08003b48 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <SD_PowerOff+0x14>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000466 	.word	0x20000466

08003b60 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <SD_CheckPower+0x10>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	20000466 	.word	0x20000466

08003b74 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <SD_RxDataBlock+0x5c>)
 8003b80:	22c8      	movs	r2, #200	; 0xc8
 8003b82:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003b84:	f7ff ff5a 	bl	8003a3c <SPI_RxByte>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2bff      	cmp	r3, #255	; 0xff
 8003b90:	d104      	bne.n	8003b9c <SD_RxDataBlock+0x28>
 8003b92:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <SD_RxDataBlock+0x5c>)
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f3      	bne.n	8003b84 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2bfe      	cmp	r3, #254	; 0xfe
 8003ba0:	d001      	beq.n	8003ba6 <SD_RxDataBlock+0x32>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e00f      	b.n	8003bc6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff61 	bl	8003a74 <SPI_RxBytePtr>
	} while(len--);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	1e5a      	subs	r2, r3, #1
 8003bb6:	603a      	str	r2, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f4      	bne.n	8003ba6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8003bbc:	f7ff ff3e 	bl	8003a3c <SPI_RxByte>
	SPI_RxByte();
 8003bc0:	f7ff ff3c 	bl	8003a3c <SPI_RxByte>

	return TRUE;
 8003bc4:	2301      	movs	r3, #1
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000091a 	.word	0x2000091a

08003bd4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003be4:	f7ff ff54 	bl	8003a90 <SD_ReadyWait>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2bff      	cmp	r3, #255	; 0xff
 8003bec:	d001      	beq.n	8003bf2 <SD_TxDataBlock+0x1e>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e02f      	b.n	8003c52 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff feed 	bl	80039d4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	2bfd      	cmp	r3, #253	; 0xfd
 8003bfe:	d020      	beq.n	8003c42 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff feff 	bl	8003a08 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003c0a:	f7ff ff17 	bl	8003a3c <SPI_RxByte>
		SPI_RxByte();
 8003c0e:	f7ff ff15 	bl	8003a3c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003c12:	e00b      	b.n	8003c2c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003c14:	f7ff ff12 	bl	8003a3c <SPI_RxByte>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d006      	beq.n	8003c34 <SD_TxDataBlock+0x60>
			i++;
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003c2c:	7bbb      	ldrb	r3, [r7, #14]
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d9f0      	bls.n	8003c14 <SD_TxDataBlock+0x40>
 8003c32:	e000      	b.n	8003c36 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003c34:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003c36:	bf00      	nop
 8003c38:	f7ff ff00 	bl	8003a3c <SPI_RxByte>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0fa      	beq.n	8003c38 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d101      	bne.n	8003c50 <SD_TxDataBlock+0x7c>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	6039      	str	r1, [r7, #0]
 8003c64:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003c66:	f7ff ff13 	bl	8003a90 <SD_ReadyWait>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2bff      	cmp	r3, #255	; 0xff
 8003c6e:	d001      	beq.n	8003c74 <SD_SendCmd+0x1a>
 8003c70:	23ff      	movs	r3, #255	; 0xff
 8003c72:	e042      	b.n	8003cfa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff feac 	bl	80039d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	0e1b      	lsrs	r3, r3, #24
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fea6 	bl	80039d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fea0 	bl	80039d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fe9a 	bl	80039d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fe95 	bl	80039d4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d102      	bne.n	8003cb6 <SD_SendCmd+0x5c>
 8003cb0:	2395      	movs	r3, #149	; 0x95
 8003cb2:	73fb      	strb	r3, [r7, #15]
 8003cb4:	e007      	b.n	8003cc6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b48      	cmp	r3, #72	; 0x48
 8003cba:	d102      	bne.n	8003cc2 <SD_SendCmd+0x68>
 8003cbc:	2387      	movs	r3, #135	; 0x87
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e001      	b.n	8003cc6 <SD_SendCmd+0x6c>
	else crc = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fe83 	bl	80039d4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	2b4c      	cmp	r3, #76	; 0x4c
 8003cd2:	d101      	bne.n	8003cd8 <SD_SendCmd+0x7e>
 8003cd4:	f7ff feb2 	bl	8003a3c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003cd8:	230a      	movs	r3, #10
 8003cda:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003cdc:	f7ff feae 	bl	8003a3c <SPI_RxByte>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003ce4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da05      	bge.n	8003cf8 <SD_SendCmd+0x9e>
 8003cec:	7bbb      	ldrb	r3, [r7, #14]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	73bb      	strb	r3, [r7, #14]
 8003cf2:	7bbb      	ldrb	r3, [r7, #14]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f1      	bne.n	8003cdc <SD_SendCmd+0x82>

	return res;
 8003cf8:	7b7b      	ldrb	r3, [r7, #13]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <SD_disk_initialize+0x14>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0d6      	b.n	8003ec6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003d18:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <SD_disk_initialize+0x1cc>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <SD_disk_initialize+0x2a>
 8003d26:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <SD_disk_initialize+0x1cc>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e0cb      	b.n	8003ec6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8003d2e:	f7ff fec9 	bl	8003ac4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003d32:	f7ff fe33 	bl	800399c <SELECT>

	/* check disk type */
	type = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	2040      	movs	r0, #64	; 0x40
 8003d3e:	f7ff ff8c 	bl	8003c5a <SD_SendCmd>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 80a6 	bne.w	8003e96 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003d4a:	4b62      	ldr	r3, [pc, #392]	; (8003ed4 <SD_disk_initialize+0x1d0>)
 8003d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d50:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003d52:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d56:	2048      	movs	r0, #72	; 0x48
 8003d58:	f7ff ff7f 	bl	8003c5a <SD_SendCmd>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d158      	bne.n	8003e14 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e00c      	b.n	8003d82 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003d68:	7bfc      	ldrb	r4, [r7, #15]
 8003d6a:	f7ff fe67 	bl	8003a3c <SPI_RxByte>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	f104 0310 	add.w	r3, r4, #16
 8003d76:	443b      	add	r3, r7
 8003d78:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d9ef      	bls.n	8003d68 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003d88:	7abb      	ldrb	r3, [r7, #10]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 8083 	bne.w	8003e96 <SD_disk_initialize+0x192>
 8003d90:	7afb      	ldrb	r3, [r7, #11]
 8003d92:	2baa      	cmp	r3, #170	; 0xaa
 8003d94:	d17f      	bne.n	8003e96 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003d96:	2100      	movs	r1, #0
 8003d98:	2077      	movs	r0, #119	; 0x77
 8003d9a:	f7ff ff5e 	bl	8003c5a <SD_SendCmd>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d807      	bhi.n	8003db4 <SD_disk_initialize+0xb0>
 8003da4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003da8:	2069      	movs	r0, #105	; 0x69
 8003daa:	f7ff ff56 	bl	8003c5a <SD_SendCmd>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8003db4:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <SD_disk_initialize+0x1d0>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1eb      	bne.n	8003d96 <SD_disk_initialize+0x92>
 8003dbe:	e000      	b.n	8003dc2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003dc0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003dc2:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <SD_disk_initialize+0x1d0>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d064      	beq.n	8003e96 <SD_disk_initialize+0x192>
 8003dcc:	2100      	movs	r1, #0
 8003dce:	207a      	movs	r0, #122	; 0x7a
 8003dd0:	f7ff ff43 	bl	8003c5a <SD_SendCmd>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d15d      	bne.n	8003e96 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
 8003dde:	e00c      	b.n	8003dfa <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8003de0:	7bfc      	ldrb	r4, [r7, #15]
 8003de2:	f7ff fe2b 	bl	8003a3c <SPI_RxByte>
 8003de6:	4603      	mov	r3, r0
 8003de8:	461a      	mov	r2, r3
 8003dea:	f104 0310 	add.w	r3, r4, #16
 8003dee:	443b      	add	r3, r7
 8003df0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	3301      	adds	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d9ef      	bls.n	8003de0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003e00:	7a3b      	ldrb	r3, [r7, #8]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <SD_disk_initialize+0x10a>
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	e000      	b.n	8003e10 <SD_disk_initialize+0x10c>
 8003e0e:	2304      	movs	r3, #4
 8003e10:	73bb      	strb	r3, [r7, #14]
 8003e12:	e040      	b.n	8003e96 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003e14:	2100      	movs	r1, #0
 8003e16:	2077      	movs	r0, #119	; 0x77
 8003e18:	f7ff ff1f 	bl	8003c5a <SD_SendCmd>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d808      	bhi.n	8003e34 <SD_disk_initialize+0x130>
 8003e22:	2100      	movs	r1, #0
 8003e24:	2069      	movs	r0, #105	; 0x69
 8003e26:	f7ff ff18 	bl	8003c5a <SD_SendCmd>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d801      	bhi.n	8003e34 <SD_disk_initialize+0x130>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e000      	b.n	8003e36 <SD_disk_initialize+0x132>
 8003e34:	2301      	movs	r3, #1
 8003e36:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003e38:	7bbb      	ldrb	r3, [r7, #14]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d10e      	bne.n	8003e5c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2077      	movs	r0, #119	; 0x77
 8003e42:	f7ff ff0a 	bl	8003c5a <SD_SendCmd>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d80e      	bhi.n	8003e6a <SD_disk_initialize+0x166>
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2069      	movs	r0, #105	; 0x69
 8003e50:	f7ff ff03 	bl	8003c5a <SD_SendCmd>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <SD_disk_initialize+0x166>
 8003e5a:	e00d      	b.n	8003e78 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	2041      	movs	r0, #65	; 0x41
 8003e60:	f7ff fefb 	bl	8003c5a <SD_SendCmd>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <SD_disk_initialize+0x1d0>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e1      	bne.n	8003e38 <SD_disk_initialize+0x134>
 8003e74:	e000      	b.n	8003e78 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003e76:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <SD_disk_initialize+0x1d0>)
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <SD_disk_initialize+0x18e>
 8003e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e86:	2050      	movs	r0, #80	; 0x50
 8003e88:	f7ff fee7 	bl	8003c5a <SD_SendCmd>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <SD_disk_initialize+0x192>
 8003e92:	2300      	movs	r3, #0
 8003e94:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <SD_disk_initialize+0x1d4>)
 8003e98:	7bbb      	ldrb	r3, [r7, #14]
 8003e9a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003e9c:	f7ff fd8c 	bl	80039b8 <DESELECT>
	SPI_RxByte();
 8003ea0:	f7ff fdcc 	bl	8003a3c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003ea4:	7bbb      	ldrb	r3, [r7, #14]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <SD_disk_initialize+0x1cc>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <SD_disk_initialize+0x1cc>)
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e001      	b.n	8003ec0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003ebc:	f7ff fe44 	bl	8003b48 <SD_PowerOff>
	}

	return Stat;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <SD_disk_initialize+0x1cc>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b2db      	uxtb	r3, r3
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	2000091a 	.word	0x2000091a
 8003ed8:	20000465 	.word	0x20000465

08003edc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <SD_disk_status+0x14>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e002      	b.n	8003ef6 <SD_disk_status+0x1a>
	return Stat;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <SD_disk_status+0x24>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b2db      	uxtb	r3, r3
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	20000000 	.word	0x20000000

08003f04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4603      	mov	r3, r0
 8003f12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <SD_disk_read+0x1c>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <SD_disk_read+0x20>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e051      	b.n	8003fc8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <SD_disk_read+0xcc>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <SD_disk_read+0x32>
 8003f32:	2303      	movs	r3, #3
 8003f34:	e048      	b.n	8003fc8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <SD_disk_read+0xd0>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <SD_disk_read+0x44>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	025b      	lsls	r3, r3, #9
 8003f46:	607b      	str	r3, [r7, #4]

	SELECT();
 8003f48:	f7ff fd28 	bl	800399c <SELECT>

	if (count == 1)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d111      	bne.n	8003f76 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	2051      	movs	r0, #81	; 0x51
 8003f56:	f7ff fe80 	bl	8003c5a <SD_SendCmd>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d129      	bne.n	8003fb4 <SD_disk_read+0xb0>
 8003f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f64:	68b8      	ldr	r0, [r7, #8]
 8003f66:	f7ff fe05 	bl	8003b74 <SD_RxDataBlock>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d021      	beq.n	8003fb4 <SD_disk_read+0xb0>
 8003f70:	2300      	movs	r3, #0
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	e01e      	b.n	8003fb4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	2052      	movs	r0, #82	; 0x52
 8003f7a:	f7ff fe6e 	bl	8003c5a <SD_SendCmd>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d117      	bne.n	8003fb4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f88:	68b8      	ldr	r0, [r7, #8]
 8003f8a:	f7ff fdf3 	bl	8003b74 <SD_RxDataBlock>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <SD_disk_read+0xa6>
				buff += 512;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ed      	bne.n	8003f84 <SD_disk_read+0x80>
 8003fa8:	e000      	b.n	8003fac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003faa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003fac:	2100      	movs	r1, #0
 8003fae:	204c      	movs	r0, #76	; 0x4c
 8003fb0:	f7ff fe53 	bl	8003c5a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003fb4:	f7ff fd00 	bl	80039b8 <DESELECT>
	SPI_RxByte();
 8003fb8:	f7ff fd40 	bl	8003a3c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000465 	.word	0x20000465

08003fd8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <SD_disk_write+0x1c>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <SD_disk_write+0x20>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	e06b      	b.n	80040d0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <SD_disk_write+0x100>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <SD_disk_write+0x32>
 8004006:	2303      	movs	r3, #3
 8004008:	e062      	b.n	80040d0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <SD_disk_write+0x100>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <SD_disk_write+0x44>
 8004018:	2302      	movs	r3, #2
 800401a:	e059      	b.n	80040d0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800401c:	4b2f      	ldr	r3, [pc, #188]	; (80040dc <SD_disk_write+0x104>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <SD_disk_write+0x56>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	025b      	lsls	r3, r3, #9
 800402c:	607b      	str	r3, [r7, #4]

	SELECT();
 800402e:	f7ff fcb5 	bl	800399c <SELECT>

	if (count == 1)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d110      	bne.n	800405a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	2058      	movs	r0, #88	; 0x58
 800403c:	f7ff fe0d 	bl	8003c5a <SD_SendCmd>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d13a      	bne.n	80040bc <SD_disk_write+0xe4>
 8004046:	21fe      	movs	r1, #254	; 0xfe
 8004048:	68b8      	ldr	r0, [r7, #8]
 800404a:	f7ff fdc3 	bl	8003bd4 <SD_TxDataBlock>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d033      	beq.n	80040bc <SD_disk_write+0xe4>
			count = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	e030      	b.n	80040bc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <SD_disk_write+0x104>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004066:	2100      	movs	r1, #0
 8004068:	2077      	movs	r0, #119	; 0x77
 800406a:	f7ff fdf6 	bl	8003c5a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800406e:	6839      	ldr	r1, [r7, #0]
 8004070:	2057      	movs	r0, #87	; 0x57
 8004072:	f7ff fdf2 	bl	8003c5a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	2059      	movs	r0, #89	; 0x59
 800407a:	f7ff fdee 	bl	8003c5a <SD_SendCmd>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d11b      	bne.n	80040bc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004084:	21fc      	movs	r1, #252	; 0xfc
 8004086:	68b8      	ldr	r0, [r7, #8]
 8004088:	f7ff fda4 	bl	8003bd4 <SD_TxDataBlock>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <SD_disk_write+0xd0>
				buff += 512;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004098:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	3b01      	subs	r3, #1
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1ee      	bne.n	8004084 <SD_disk_write+0xac>
 80040a6:	e000      	b.n	80040aa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80040a8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80040aa:	21fd      	movs	r1, #253	; 0xfd
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7ff fd91 	bl	8003bd4 <SD_TxDataBlock>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <SD_disk_write+0xe4>
			{
				count = 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80040bc:	f7ff fc7c 	bl	80039b8 <DESELECT>
	SPI_RxByte();
 80040c0:	f7ff fcbc 	bl	8003a3c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf14      	ite	ne
 80040ca:	2301      	movne	r3, #1
 80040cc:	2300      	moveq	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000000 	.word	0x20000000
 80040dc:	20000465 	.word	0x20000465

080040e0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b08b      	sub	sp, #44	; 0x2c
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	603a      	str	r2, [r7, #0]
 80040ea:	71fb      	strb	r3, [r7, #7]
 80040ec:	460b      	mov	r3, r1
 80040ee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <SD_disk_ioctl+0x1e>
 80040fa:	2304      	movs	r3, #4
 80040fc:	e115      	b.n	800432a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004104:	79bb      	ldrb	r3, [r7, #6]
 8004106:	2b05      	cmp	r3, #5
 8004108:	d124      	bne.n	8004154 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d012      	beq.n	8004138 <SD_disk_ioctl+0x58>
 8004112:	2b02      	cmp	r3, #2
 8004114:	dc1a      	bgt.n	800414c <SD_disk_ioctl+0x6c>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <SD_disk_ioctl+0x40>
 800411a:	2b01      	cmp	r3, #1
 800411c:	d006      	beq.n	800412c <SD_disk_ioctl+0x4c>
 800411e:	e015      	b.n	800414c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004120:	f7ff fd12 	bl	8003b48 <SD_PowerOff>
			res = RES_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800412a:	e0fc      	b.n	8004326 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800412c:	f7ff fcca 	bl	8003ac4 <SD_PowerOn>
			res = RES_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004136:	e0f6      	b.n	8004326 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	1c5c      	adds	r4, r3, #1
 800413c:	f7ff fd10 	bl	8003b60 <SD_CheckPower>
 8004140:	4603      	mov	r3, r0
 8004142:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800414a:	e0ec      	b.n	8004326 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800414c:	2304      	movs	r3, #4
 800414e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004152:	e0e8      	b.n	8004326 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004154:	4b77      	ldr	r3, [pc, #476]	; (8004334 <SD_disk_ioctl+0x254>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <SD_disk_ioctl+0x86>
 8004162:	2303      	movs	r3, #3
 8004164:	e0e1      	b.n	800432a <SD_disk_ioctl+0x24a>

		SELECT();
 8004166:	f7ff fc19 	bl	800399c <SELECT>

		switch (ctrl)
 800416a:	79bb      	ldrb	r3, [r7, #6]
 800416c:	2b0d      	cmp	r3, #13
 800416e:	f200 80cb 	bhi.w	8004308 <SD_disk_ioctl+0x228>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <SD_disk_ioctl+0x98>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	08004273 	.word	0x08004273
 800417c:	080041b1 	.word	0x080041b1
 8004180:	08004263 	.word	0x08004263
 8004184:	08004309 	.word	0x08004309
 8004188:	08004309 	.word	0x08004309
 800418c:	08004309 	.word	0x08004309
 8004190:	08004309 	.word	0x08004309
 8004194:	08004309 	.word	0x08004309
 8004198:	08004309 	.word	0x08004309
 800419c:	08004309 	.word	0x08004309
 80041a0:	08004309 	.word	0x08004309
 80041a4:	08004285 	.word	0x08004285
 80041a8:	080042a9 	.word	0x080042a9
 80041ac:	080042cd 	.word	0x080042cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80041b0:	2100      	movs	r1, #0
 80041b2:	2049      	movs	r0, #73	; 0x49
 80041b4:	f7ff fd51 	bl	8003c5a <SD_SendCmd>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 80a8 	bne.w	8004310 <SD_disk_ioctl+0x230>
 80041c0:	f107 030c 	add.w	r3, r7, #12
 80041c4:	2110      	movs	r1, #16
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fcd4 	bl	8003b74 <SD_RxDataBlock>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 809e 	beq.w	8004310 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80041d4:	7b3b      	ldrb	r3, [r7, #12]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10e      	bne.n	80041fc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80041de:	7d7b      	ldrb	r3, [r7, #21]
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	7d3b      	ldrb	r3, [r7, #20]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80041f2:	8bfb      	ldrh	r3, [r7, #30]
 80041f4:	029a      	lsls	r2, r3, #10
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e02e      	b.n	800425a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80041fc:	7c7b      	ldrb	r3, [r7, #17]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	b2da      	uxtb	r2, r3
 8004204:	7dbb      	ldrb	r3, [r7, #22]
 8004206:	09db      	lsrs	r3, r3, #7
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4413      	add	r3, r2
 800420c:	b2da      	uxtb	r2, r3
 800420e:	7d7b      	ldrb	r3, [r7, #21]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 0306 	and.w	r3, r3, #6
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4413      	add	r3, r2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	3302      	adds	r3, #2
 8004220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004224:	7d3b      	ldrb	r3, [r7, #20]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	b2db      	uxtb	r3, r3
 800422a:	b29a      	uxth	r2, r3
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	b29b      	uxth	r3, r3
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	b29b      	uxth	r3, r3
 8004234:	4413      	add	r3, r2
 8004236:	b29a      	uxth	r2, r3
 8004238:	7cbb      	ldrb	r3, [r7, #18]
 800423a:	029b      	lsls	r3, r3, #10
 800423c:	b29b      	uxth	r3, r3
 800423e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004242:	b29b      	uxth	r3, r3
 8004244:	4413      	add	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	3301      	adds	r3, #1
 800424a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800424c:	8bfa      	ldrh	r2, [r7, #30]
 800424e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004252:	3b09      	subs	r3, #9
 8004254:	409a      	lsls	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004260:	e056      	b.n	8004310 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004268:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004270:	e055      	b.n	800431e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004272:	f7ff fc0d 	bl	8003a90 <SD_ReadyWait>
 8004276:	4603      	mov	r3, r0
 8004278:	2bff      	cmp	r3, #255	; 0xff
 800427a:	d14b      	bne.n	8004314 <SD_disk_ioctl+0x234>
 800427c:	2300      	movs	r3, #0
 800427e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004282:	e047      	b.n	8004314 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004284:	2100      	movs	r1, #0
 8004286:	2049      	movs	r0, #73	; 0x49
 8004288:	f7ff fce7 	bl	8003c5a <SD_SendCmd>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d142      	bne.n	8004318 <SD_disk_ioctl+0x238>
 8004292:	2110      	movs	r1, #16
 8004294:	6a38      	ldr	r0, [r7, #32]
 8004296:	f7ff fc6d 	bl	8003b74 <SD_RxDataBlock>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d03b      	beq.n	8004318 <SD_disk_ioctl+0x238>
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80042a6:	e037      	b.n	8004318 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80042a8:	2100      	movs	r1, #0
 80042aa:	204a      	movs	r0, #74	; 0x4a
 80042ac:	f7ff fcd5 	bl	8003c5a <SD_SendCmd>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d132      	bne.n	800431c <SD_disk_ioctl+0x23c>
 80042b6:	2110      	movs	r1, #16
 80042b8:	6a38      	ldr	r0, [r7, #32]
 80042ba:	f7ff fc5b 	bl	8003b74 <SD_RxDataBlock>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02b      	beq.n	800431c <SD_disk_ioctl+0x23c>
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80042ca:	e027      	b.n	800431c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80042cc:	2100      	movs	r1, #0
 80042ce:	207a      	movs	r0, #122	; 0x7a
 80042d0:	f7ff fcc3 	bl	8003c5a <SD_SendCmd>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80042e0:	e00b      	b.n	80042fa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80042e2:	6a3c      	ldr	r4, [r7, #32]
 80042e4:	1c63      	adds	r3, r4, #1
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	f7ff fba8 	bl	8003a3c <SPI_RxByte>
 80042ec:	4603      	mov	r3, r0
 80042ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80042f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042f4:	3301      	adds	r3, #1
 80042f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80042fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d9ef      	bls.n	80042e2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8004308:	2304      	movs	r3, #4
 800430a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800430e:	e006      	b.n	800431e <SD_disk_ioctl+0x23e>
			break;
 8004310:	bf00      	nop
 8004312:	e004      	b.n	800431e <SD_disk_ioctl+0x23e>
			break;
 8004314:	bf00      	nop
 8004316:	e002      	b.n	800431e <SD_disk_ioctl+0x23e>
			break;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <SD_disk_ioctl+0x23e>
			break;
 800431c:	bf00      	nop
		}

		DESELECT();
 800431e:	f7ff fb4b 	bl	80039b8 <DESELECT>
		SPI_RxByte();
 8004322:	f7ff fb8b 	bl	8003a3c <SPI_RxByte>
	}

	return res;
 8004326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800432a:	4618      	mov	r0, r3
 800432c:	372c      	adds	r7, #44	; 0x2c
 800432e:	46bd      	mov	sp, r7
 8004330:	bd90      	pop	{r4, r7, pc}
 8004332:	bf00      	nop
 8004334:	20000000 	.word	0x20000000

08004338 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* TIM IT handler*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER TIM\r\n", strlen("ENTER TIM\r\n"),1000);
#endif

	updateScreen();	// Screen update
 8004340:	f7fd fad2 	bl	80018e8 <updateScreen>

#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"EXIT TIM\r\n", strlen("EXIT TIM\r\n"),1000);
#endif
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UART_RxIdleCallback>:

void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER IT_RXIDLE\r\n", strlen("ENTER IT_RXIDLE\r\n"),1000);
	HAL_UART_Transmit(&huart3, usart_rx_dma_buffer, strlen(usart_rx_dma_buffer),1000);
#endif

	updateGPS();
 8004354:	f7fc fa0a 	bl	800076c <updateGPS>
	GPSupdated = 1;
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_UART_RxIdleCallback+0x1c>)
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
#endif

	/*
	sprintf(tiempo, "%lu",HAL_GetTick()-mili);
	HAL_UART_Transmit(huart, (uint8_t *)tiempo, strlen(tiempo),1000);*/
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000881 	.word	0x20000881

0800436c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER EXTI\r\n", strlen("ENTER EXTI\r\n"),1000);
#endif
	longPress = HAL_GetTick();
 8004376:	f000 fdb9 	bl	8004eec <HAL_GetTick>
 800437a:	4603      	mov	r3, r0
 800437c:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_GPIO_EXTI_Callback+0x38>)
 800437e:	6013      	str	r3, [r2, #0]
	switch(GPIO_Pin)
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d002      	beq.n	800438c <HAL_GPIO_EXTI_Callback+0x20>
 8004386:	2b04      	cmp	r3, #4
 8004388:	d004      	beq.n	8004394 <HAL_GPIO_EXTI_Callback+0x28>
			break;
	}
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"EXIT EXTI\r\n", strlen("EXIT EXTI\r\n"),1000);
#endif
}
 800438a:	e007      	b.n	800439c <HAL_GPIO_EXTI_Callback+0x30>
			button_pressed = SIG_BUTTON;
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_GPIO_EXTI_Callback+0x3c>)
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
			break;
 8004392:	e003      	b.n	800439c <HAL_GPIO_EXTI_Callback+0x30>
			button_pressed = SEL_BUTTON;
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004396:	2202      	movs	r2, #2
 8004398:	701a      	strb	r2, [r3, #0]
			break;
 800439a:	bf00      	nop
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000884 	.word	0x20000884
 80043a8:	20000883 	.word	0x20000883

080043ac <check_buttons>:

void check_buttons()
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
	switch(button_pressed)
 80043b0:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <check_buttons+0x84>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d002      	beq.n	80043be <check_buttons+0x12>
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d02f      	beq.n	800441c <check_buttons+0x70>
 80043bc:	e032      	b.n	8004424 <check_buttons+0x78>
	{
		case SIG_BUTTON:
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET );
 80043be:	bf00      	nop
 80043c0:	2102      	movs	r1, #2
 80043c2:	481c      	ldr	r0, [pc, #112]	; (8004434 <check_buttons+0x88>)
 80043c4:	f001 fab6 	bl	8005934 <HAL_GPIO_ReadPin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f8      	beq.n	80043c0 <check_buttons+0x14>
			if( ( HAL_GetTick() - longPress < LONG_TIME_PRESS) )
 80043ce:	f000 fd8d 	bl	8004eec <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <check_buttons+0x8c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80043de:	4293      	cmp	r3, r2
 80043e0:	d80e      	bhi.n	8004400 <check_buttons+0x54>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 80043e2:	4b16      	ldr	r3, [pc, #88]	; (800443c <check_buttons+0x90>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d103      	bne.n	80043f2 <check_buttons+0x46>
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <check_buttons+0x90>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
			else
				{
					screen_power ^= 1 << 1;
					u8g2_SetPowerSave(&u8g2, screen_power);
				}
			break;
 80043f0:	e018      	b.n	8004424 <check_buttons+0x78>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <check_buttons+0x90>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <check_buttons+0x90>)
 80043fc:	701a      	strb	r2, [r3, #0]
			break;
 80043fe:	e011      	b.n	8004424 <check_buttons+0x78>
					screen_power ^= 1 << 1;
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <check_buttons+0x94>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0302 	eor.w	r3, r3, #2
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <check_buttons+0x94>)
 800440c:	701a      	strb	r2, [r3, #0]
					u8g2_SetPowerSave(&u8g2, screen_power);
 800440e:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <check_buttons+0x94>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	480b      	ldr	r0, [pc, #44]	; (8004444 <check_buttons+0x98>)
 8004416:	f7ff f8dd 	bl	80035d4 <u8x8_SetPowerSave>
			break;
 800441a:	e003      	b.n	8004424 <check_buttons+0x78>

		case SEL_BUTTON:
			button_pressed = SEL_BUTTON;
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <check_buttons+0x84>)
 800441e:	2202      	movs	r2, #2
 8004420:	701a      	strb	r2, [r3, #0]
			break;
 8004422:	bf00      	nop
	}
	button_pressed = 0;
 8004424:	4b02      	ldr	r3, [pc, #8]	; (8004430 <check_buttons+0x84>)
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000883 	.word	0x20000883
 8004434:	40010800 	.word	0x40010800
 8004438:	20000884 	.word	0x20000884
 800443c:	20000880 	.word	0x20000880
 8004440:	20000882 	.word	0x20000882
 8004444:	20000888 	.word	0x20000888

08004448 <Setup>:
/**
  * @brief  Init and setup Sreen, GPS, SD.
  * @retval int
  */
void Setup()
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
	initScreen(&u8g2); // Screen init, clear, home screen set
 800444c:	4805      	ldr	r0, [pc, #20]	; (8004464 <Setup+0x1c>)
 800444e:	f7fd fa23 	bl	8001898 <initScreen>

	HAL_Delay(1000);
 8004452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004456:	f000 fd53 	bl	8004f00 <HAL_Delay>

	initGPS(&gps);	// Initialize default values for gps object
 800445a:	4803      	ldr	r0, [pc, #12]	; (8004468 <Setup+0x20>)
 800445c:	f7fc f978 	bl	8000750 <initGPS>
}
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000888 	.word	0x20000888
 8004468:	2000090c 	.word	0x2000090c

0800446c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004470:	f000 fce4 	bl	8004e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004474:	f000 f848 	bl	8004508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004478:	f000 f9e6 	bl	8004848 <MX_GPIO_Init>
  MX_DMA_Init();
 800447c:	f000 f9c6 	bl	800480c <MX_DMA_Init>
  MX_I2C1_Init();
 8004480:	f000 f89e 	bl	80045c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004484:	f000 f998 	bl	80047b8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8004488:	f000 f8c8 	bl	800461c <MX_RTC_Init>
  MX_FATFS_Init();
 800448c:	f004 ff4a 	bl	8009324 <MX_FATFS_Init>
  MX_SPI1_Init();
 8004490:	f000 f90e 	bl	80046b0 <MX_SPI1_Init>
#ifdef DEBUG
  MX_USART3_UART_Init();
#endif DEBUG
  MX_TIM3_Init();
 8004494:	f000 f942 	bl	800471c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /*Setup GPS model, OLED and SD*/
  Setup();
 8004498:	f7ff ffd6 	bl	8004448 <Setup>

  /*Manual peripherial config*/
  HAL_UART_Receive_DMA(&huart1, usart_rx_dma_buffer, MAX_NMEA_LEN);	//Configure DMA
 800449c:	f240 228a 	movw	r2, #650	; 0x28a
 80044a0:	4915      	ldr	r1, [pc, #84]	; (80044f8 <main+0x8c>)
 80044a2:	4816      	ldr	r0, [pc, #88]	; (80044fc <main+0x90>)
 80044a4:	f004 fb08 	bl	8008ab8 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim3);	//Configure TIM3 for OLED update
 80044a8:	4815      	ldr	r0, [pc, #84]	; (8004500 <main+0x94>)
 80044aa:	f003 fe7b 	bl	80081a4 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);	// enable idle line interrupt
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <main+0x90>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <main+0x90>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0210 	orr.w	r2, r2, #16
 80044bc:	60da      	str	r2, [r3, #12]

  while (1)
  {

	  /* Is there new position info?*/
	  if(GPSupdated)
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <main+0x98>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d014      	beq.n	80044f0 <main+0x84>
	  {
		  __HAL_UART_DISABLE_IT(UART1, UART_IT_IDLE);	//disables IT util data is updated
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <main+0x90>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <main+0x90>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0210 	bic.w	r2, r2, #16
 80044d4:	60da      	str	r2, [r3, #12]
		  log_data();	// Saves data in SD
 80044d6:	f7ff f97f 	bl	80037d8 <log_data>
		  GPSupdated = 0;
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <main+0x98>)
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);	// Enables IT again
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <main+0x90>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <main+0x90>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0210 	orr.w	r2, r2, #16
 80044ee:	60da      	str	r2, [r3, #12]
	  }
	  check_buttons();
 80044f0:	f7ff ff5c 	bl	80043ac <check_buttons>
	  if(GPSupdated)
 80044f4:	e7e3      	b.n	80044be <main+0x52>
 80044f6:	bf00      	nop
 80044f8:	200005f4 	.word	0x200005f4
 80044fc:	20000570 	.word	0x20000570
 8004500:	20000528 	.word	0x20000528
 8004504:	20000881 	.word	0x20000881

08004508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b094      	sub	sp, #80	; 0x50
 800450c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800450e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004512:	2228      	movs	r2, #40	; 0x28
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f009 f8a2 	bl	800d660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004538:	2301      	movs	r3, #1
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800453c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004542:	2300      	movs	r3, #0
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004546:	2301      	movs	r3, #1
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800454a:	2302      	movs	r3, #2
 800454c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800454e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004554:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004558:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800455a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800455e:	4618      	mov	r0, r3
 8004560:	f001 fe86 	bl	8006270 <HAL_RCC_OscConfig>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800456a:	f000 f9cd 	bl	8004908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800456e:	230f      	movs	r3, #15
 8004570:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004572:	2302      	movs	r3, #2
 8004574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800457a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800457e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004580:	2300      	movs	r3, #0
 8004582:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f002 f8f2 	bl	8006774 <HAL_RCC_ClockConfig>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004596:	f000 f9b7 	bl	8004908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800459a:	2301      	movs	r3, #1
 800459c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800459e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045a2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	4618      	mov	r0, r3
 80045a8:	f002 fa7c 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80045b2:	f000 f9a9 	bl	8004908 <Error_Handler>
  }
}
 80045b6:	bf00      	nop
 80045b8:	3750      	adds	r7, #80	; 0x50
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <MX_I2C1_Init+0x50>)
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <MX_I2C1_Init+0x54>)
 80045c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <MX_I2C1_Init+0x50>)
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <MX_I2C1_Init+0x58>)
 80045ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <MX_I2C1_Init+0x50>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <MX_I2C1_Init+0x50>)
 80045d8:	2200      	movs	r2, #0
 80045da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <MX_I2C1_Init+0x50>)
 80045de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <MX_I2C1_Init+0x50>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <MX_I2C1_Init+0x50>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <MX_I2C1_Init+0x50>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <MX_I2C1_Init+0x50>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045fc:	4804      	ldr	r0, [pc, #16]	; (8004610 <MX_I2C1_Init+0x50>)
 80045fe:	f001 f9e1 	bl	80059c4 <HAL_I2C_Init>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004608:	f000 f97e 	bl	8004908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800460c:	bf00      	nop
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000468 	.word	0x20000468
 8004614:	40005400 	.word	0x40005400
 8004618:	00061a80 	.word	0x00061a80

0800461c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	2100      	movs	r1, #0
 8004626:	460a      	mov	r2, r1
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	460a      	mov	r2, r1
 800462c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800462e:	2300      	movs	r3, #0
 8004630:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <MX_RTC_Init+0x8c>)
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <MX_RTC_Init+0x90>)
 8004636:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <MX_RTC_Init+0x8c>)
 800463a:	f04f 32ff 	mov.w	r2, #4294967295
 800463e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <MX_RTC_Init+0x8c>)
 8004642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004646:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004648:	4817      	ldr	r0, [pc, #92]	; (80046a8 <MX_RTC_Init+0x8c>)
 800464a:	f002 fba1 	bl	8006d90 <HAL_RTC_Init>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8004654:	f000 f958 	bl	8004908 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	2200      	movs	r2, #0
 8004668:	4619      	mov	r1, r3
 800466a:	480f      	ldr	r0, [pc, #60]	; (80046a8 <MX_RTC_Init+0x8c>)
 800466c:	f002 fc26 	bl	8006ebc <HAL_RTC_SetTime>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8004676:	f000 f947 	bl	8004908 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800467a:	2305      	movs	r3, #5
 800467c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800467e:	2301      	movs	r3, #1
 8004680:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 21;
 8004686:	2315      	movs	r3, #21
 8004688:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800468a:	463b      	mov	r3, r7
 800468c:	2200      	movs	r2, #0
 800468e:	4619      	mov	r1, r3
 8004690:	4805      	ldr	r0, [pc, #20]	; (80046a8 <MX_RTC_Init+0x8c>)
 8004692:	f002 fd83 	bl	800719c <HAL_RTC_SetDate>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800469c:	f000 f934 	bl	8004908 <Error_Handler>
	HAL_RTC_SetAlarm_IT (&hrtc, &Alarm, RTC_FORMAT_BIN);
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_ALRA);*/
  /* USER CODE END RTC_Init 2 */

}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	200004bc 	.word	0x200004bc
 80046ac:	40002800 	.word	0x40002800

080046b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80046b4:	4b17      	ldr	r3, [pc, #92]	; (8004714 <MX_SPI1_Init+0x64>)
 80046b6:	4a18      	ldr	r2, [pc, #96]	; (8004718 <MX_SPI1_Init+0x68>)
 80046b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046ba:	4b16      	ldr	r3, [pc, #88]	; (8004714 <MX_SPI1_Init+0x64>)
 80046bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <MX_SPI1_Init+0x64>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046c8:	4b12      	ldr	r3, [pc, #72]	; (8004714 <MX_SPI1_Init+0x64>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <MX_SPI1_Init+0x64>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <MX_SPI1_Init+0x64>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <MX_SPI1_Init+0x64>)
 80046dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80046e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <MX_SPI1_Init+0x64>)
 80046e4:	2220      	movs	r2, #32
 80046e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <MX_SPI1_Init+0x64>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <MX_SPI1_Init+0x64>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <MX_SPI1_Init+0x64>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <MX_SPI1_Init+0x64>)
 80046fc:	220a      	movs	r2, #10
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004700:	4804      	ldr	r0, [pc, #16]	; (8004714 <MX_SPI1_Init+0x64>)
 8004702:	f003 f8f7 	bl	80078f4 <HAL_SPI_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800470c:	f000 f8fc 	bl	8004908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004710:	bf00      	nop
 8004712:	bd80      	pop	{r7, pc}
 8004714:	200004d0 	.word	0x200004d0
 8004718:	40013000 	.word	0x40013000

0800471c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	609a      	str	r2, [r3, #8]
 800472e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004730:	463b      	mov	r3, r7
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <MX_TIM3_Init+0x94>)
 800473a:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <MX_TIM3_Init+0x98>)
 800473c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <MX_TIM3_Init+0x94>)
 8004740:	f242 7210 	movw	r2, #10000	; 0x2710
 8004744:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <MX_TIM3_Init+0x94>)
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <MX_TIM3_Init+0x94>)
 800474e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8004752:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004754:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <MX_TIM3_Init+0x94>)
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <MX_TIM3_Init+0x94>)
 800475c:	2280      	movs	r2, #128	; 0x80
 800475e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004760:	4813      	ldr	r0, [pc, #76]	; (80047b0 <MX_TIM3_Init+0x94>)
 8004762:	f003 fccf 	bl	8008104 <HAL_TIM_Base_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800476c:	f000 f8cc 	bl	8004908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	4619      	mov	r1, r3
 800477c:	480c      	ldr	r0, [pc, #48]	; (80047b0 <MX_TIM3_Init+0x94>)
 800477e:	f003 fe6b 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004788:	f000 f8be 	bl	8004908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004790:	2300      	movs	r3, #0
 8004792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004794:	463b      	mov	r3, r7
 8004796:	4619      	mov	r1, r3
 8004798:	4805      	ldr	r0, [pc, #20]	; (80047b0 <MX_TIM3_Init+0x94>)
 800479a:	f004 f83d 	bl	8008818 <HAL_TIMEx_MasterConfigSynchronization>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80047a4:	f000 f8b0 	bl	8004908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80047a8:	bf00      	nop
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000528 	.word	0x20000528
 80047b4:	40000400 	.word	0x40000400

080047b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <MX_USART1_UART_Init+0x50>)
 80047c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80047c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047de:	220c      	movs	r2, #12
 80047e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047ee:	4805      	ldr	r0, [pc, #20]	; (8004804 <MX_USART1_UART_Init+0x4c>)
 80047f0:	f004 f882 	bl	80088f8 <HAL_UART_Init>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047fa:	f000 f885 	bl	8004908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000570 	.word	0x20000570
 8004808:	40013800 	.word	0x40013800

0800480c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <MX_DMA_Init+0x38>)
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4a0b      	ldr	r2, [pc, #44]	; (8004844 <MX_DMA_Init+0x38>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6153      	str	r3, [r2, #20]
 800481e:	4b09      	ldr	r3, [pc, #36]	; (8004844 <MX_DMA_Init+0x38>)
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	200f      	movs	r0, #15
 8004830:	f000 fc61 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004834:	200f      	movs	r0, #15
 8004836:	f000 fc7a 	bl	800512e <HAL_NVIC_EnableIRQ>

}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000

08004848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484e:	f107 0310 	add.w	r3, r7, #16
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <MX_GPIO_Init+0xb4>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <MX_GPIO_Init+0xb4>)
 8004862:	f043 0310 	orr.w	r3, r3, #16
 8004866:	6193      	str	r3, [r2, #24]
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <MX_GPIO_Init+0xb4>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <MX_GPIO_Init+0xb4>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	4a20      	ldr	r2, [pc, #128]	; (80048fc <MX_GPIO_Init+0xb4>)
 800487a:	f043 0320 	orr.w	r3, r3, #32
 800487e:	6193      	str	r3, [r2, #24]
 8004880:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <MX_GPIO_Init+0xb4>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <MX_GPIO_Init+0xb4>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <MX_GPIO_Init+0xb4>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6193      	str	r3, [r2, #24]
 8004898:	4b18      	ldr	r3, [pc, #96]	; (80048fc <MX_GPIO_Init+0xb4>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <MX_GPIO_Init+0xb4>)
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <MX_GPIO_Init+0xb4>)
 80048aa:	f043 0308 	orr.w	r3, r3, #8
 80048ae:	6193      	str	r3, [r2, #24]
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <MX_GPIO_Init+0xb4>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80048bc:	2306      	movs	r3, #6
 80048be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <MX_GPIO_Init+0xb8>)
 80048c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048c4:	2301      	movs	r3, #1
 80048c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c8:	f107 0310 	add.w	r3, r7, #16
 80048cc:	4619      	mov	r1, r3
 80048ce:	480d      	ldr	r0, [pc, #52]	; (8004904 <MX_GPIO_Init+0xbc>)
 80048d0:	f000 feac 	bl	800562c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2102      	movs	r1, #2
 80048d8:	2007      	movs	r0, #7
 80048da:	f000 fc0c 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80048de:	2007      	movs	r0, #7
 80048e0:	f000 fc25 	bl	800512e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 80048e4:	2200      	movs	r2, #0
 80048e6:	2102      	movs	r1, #2
 80048e8:	2008      	movs	r0, #8
 80048ea:	f000 fc04 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80048ee:	2008      	movs	r0, #8
 80048f0:	f000 fc1d 	bl	800512e <HAL_NVIC_EnableIRQ>

}
 80048f4:	bf00      	nop
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000
 8004900:	10210000 	.word	0x10210000
 8004904:	40010800 	.word	0x40010800

08004908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800490c:	b672      	cpsid	i
}
 800490e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004910:	e7fe      	b.n	8004910 <Error_Handler+0x8>
	...

08004914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <HAL_MspInit+0x5c>)
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	4a14      	ldr	r2, [pc, #80]	; (8004970 <HAL_MspInit+0x5c>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6193      	str	r3, [r2, #24]
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_MspInit+0x5c>)
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <HAL_MspInit+0x5c>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4a0e      	ldr	r2, [pc, #56]	; (8004970 <HAL_MspInit+0x5c>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	61d3      	str	r3, [r2, #28]
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_MspInit+0x5c>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_MspInit+0x60>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	4a04      	ldr	r2, [pc, #16]	; (8004974 <HAL_MspInit+0x60>)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40021000 	.word	0x40021000
 8004974:	40010000 	.word	0x40010000

08004978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_I2C_MspInit+0x70>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d123      	bne.n	80049e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_I2C_MspInit+0x74>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_I2C_MspInit+0x74>)
 800499e:	f043 0308 	orr.w	r3, r3, #8
 80049a2:	6193      	str	r3, [r2, #24]
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_I2C_MspInit+0x74>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049b0:	23c0      	movs	r3, #192	; 0xc0
 80049b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049b4:	2312      	movs	r3, #18
 80049b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b8:	2303      	movs	r3, #3
 80049ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049bc:	f107 0310 	add.w	r3, r7, #16
 80049c0:	4619      	mov	r1, r3
 80049c2:	480b      	ldr	r0, [pc, #44]	; (80049f0 <HAL_I2C_MspInit+0x78>)
 80049c4:	f000 fe32 	bl	800562c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_I2C_MspInit+0x74>)
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	4a07      	ldr	r2, [pc, #28]	; (80049ec <HAL_I2C_MspInit+0x74>)
 80049ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d2:	61d3      	str	r3, [r2, #28]
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_I2C_MspInit+0x74>)
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049e0:	bf00      	nop
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40005400 	.word	0x40005400
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40010c00 	.word	0x40010c00

080049f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <HAL_RTC_MspInit+0x3c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d110      	bne.n	8004a28 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004a06:	f001 fc27 	bl	8006258 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_RTC_MspInit+0x40>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <HAL_RTC_MspInit+0x40>)
 8004a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a14:	61d3      	str	r3, [r2, #28]
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <HAL_RTC_MspInit+0x40>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RTC_MspInit+0x44>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40002800 	.word	0x40002800
 8004a34:	40021000 	.word	0x40021000
 8004a38:	4242043c 	.word	0x4242043c

08004a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 0310 	add.w	r3, r7, #16
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1b      	ldr	r2, [pc, #108]	; (8004ac4 <HAL_SPI_MspInit+0x88>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d12f      	bne.n	8004abc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <HAL_SPI_MspInit+0x8c>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_SPI_MspInit+0x8c>)
 8004a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a66:	6193      	str	r3, [r2, #24]
 8004a68:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <HAL_SPI_MspInit+0x8c>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a74:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <HAL_SPI_MspInit+0x8c>)
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <HAL_SPI_MspInit+0x8c>)
 8004a7a:	f043 0304 	orr.w	r3, r3, #4
 8004a7e:	6193      	str	r3, [r2, #24]
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <HAL_SPI_MspInit+0x8c>)
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8004a8c:	23b0      	movs	r3, #176	; 0xb0
 8004a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a94:	2303      	movs	r3, #3
 8004a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	480b      	ldr	r0, [pc, #44]	; (8004acc <HAL_SPI_MspInit+0x90>)
 8004aa0:	f000 fdc4 	bl	800562c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab0:	f107 0310 	add.w	r3, r7, #16
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4805      	ldr	r0, [pc, #20]	; (8004acc <HAL_SPI_MspInit+0x90>)
 8004ab8:	f000 fdb8 	bl	800562c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004abc:	bf00      	nop
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40013000 	.word	0x40013000
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40010800 	.word	0x40010800

08004ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <HAL_TIM_Base_MspInit+0x44>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d113      	bne.n	8004b0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_TIM_Base_MspInit+0x48>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <HAL_TIM_Base_MspInit+0x48>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	61d3      	str	r3, [r2, #28]
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_TIM_Base_MspInit+0x48>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2100      	movs	r1, #0
 8004afe:	201d      	movs	r0, #29
 8004b00:	f000 faf9 	bl	80050f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b04:	201d      	movs	r0, #29
 8004b06:	f000 fb12 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b24:	f107 0318 	add.w	r3, r7, #24
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a50      	ldr	r2, [pc, #320]	; (8004c78 <HAL_UART_MspInit+0x15c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d161      	bne.n	8004c00 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b3c:	4b4f      	ldr	r3, [pc, #316]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	4a4e      	ldr	r2, [pc, #312]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b46:	6193      	str	r3, [r2, #24]
 8004b48:	4b4c      	ldr	r3, [pc, #304]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b54:	4b49      	ldr	r3, [pc, #292]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	4a48      	ldr	r2, [pc, #288]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	6193      	str	r3, [r2, #24]
 8004b60:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b72:	2302      	movs	r3, #2
 8004b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b76:	2303      	movs	r3, #3
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7a:	f107 0318 	add.w	r3, r7, #24
 8004b7e:	4619      	mov	r1, r3
 8004b80:	483f      	ldr	r0, [pc, #252]	; (8004c80 <HAL_UART_MspInit+0x164>)
 8004b82:	f000 fd53 	bl	800562c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b94:	f107 0318 	add.w	r3, r7, #24
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4839      	ldr	r0, [pc, #228]	; (8004c80 <HAL_UART_MspInit+0x164>)
 8004b9c:	f000 fd46 	bl	800562c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004ba0:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004ba2:	4a39      	ldr	r2, [pc, #228]	; (8004c88 <HAL_UART_MspInit+0x16c>)
 8004ba4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ba6:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bac:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb2:	4b34      	ldr	r3, [pc, #208]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004bd2:	482c      	ldr	r0, [pc, #176]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bd4:	f000 fac6 	bl	8005164 <HAL_DMA_Init>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004bde:	f7ff fe93 	bl	8004908 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004be6:	635a      	str	r2, [r3, #52]	; 0x34
 8004be8:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <HAL_UART_MspInit+0x168>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	2025      	movs	r0, #37	; 0x25
 8004bf4:	f000 fa7f 	bl	80050f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bf8:	2025      	movs	r0, #37	; 0x25
 8004bfa:	f000 fa98 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004bfe:	e036      	b.n	8004c6e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <HAL_UART_MspInit+0x170>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d131      	bne.n	8004c6e <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c14:	61d3      	str	r3, [r2, #28]
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	6193      	str	r3, [r2, #24]
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <HAL_UART_MspInit+0x160>)
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c40:	2302      	movs	r3, #2
 8004c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c44:	2303      	movs	r3, #3
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c48:	f107 0318 	add.w	r3, r7, #24
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4810      	ldr	r0, [pc, #64]	; (8004c90 <HAL_UART_MspInit+0x174>)
 8004c50:	f000 fcec 	bl	800562c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c62:	f107 0318 	add.w	r3, r7, #24
 8004c66:	4619      	mov	r1, r3
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <HAL_UART_MspInit+0x174>)
 8004c6a:	f000 fcdf 	bl	800562c <HAL_GPIO_Init>
}
 8004c6e:	bf00      	nop
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40010800 	.word	0x40010800
 8004c84:	200005b0 	.word	0x200005b0
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40004800 	.word	0x40004800
 8004c90:	40010c00 	.word	0x40010c00

08004c94 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <SDTimer_Handler+0x3c>)
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <SDTimer_Handler+0x1c>
    Timer1--;
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <SDTimer_Handler+0x3c>)
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <SDTimer_Handler+0x3c>)
 8004cae:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <SDTimer_Handler+0x40>)
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <SDTimer_Handler+0x34>
    Timer2--;
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <SDTimer_Handler+0x40>)
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <SDTimer_Handler+0x40>)
 8004cc6:	801a      	strh	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	2000091a 	.word	0x2000091a
 8004cd4:	2000091c 	.word	0x2000091c

08004cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cdc:	e7fe      	b.n	8004cdc <NMI_Handler+0x4>

08004cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ce2:	e7fe      	b.n	8004ce2 <HardFault_Handler+0x4>

08004ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ce8:	e7fe      	b.n	8004ce8 <MemManage_Handler+0x4>

08004cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cea:	b480      	push	{r7}
 8004cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cee:	e7fe      	b.n	8004cee <BusFault_Handler+0x4>

08004cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cf4:	e7fe      	b.n	8004cf4 <UsageFault_Handler+0x4>

08004cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr
	...

08004d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <SysTick_Handler+0x30>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	3301      	adds	r3, #1
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <SysTick_Handler+0x30>)
 8004d2c:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <SysTick_Handler+0x30>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	d904      	bls.n	8004d42 <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <SysTick_Handler+0x30>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 8004d3e:	f7ff ffa9 	bl	8004c94 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d42:	f000 f8c1 	bl	8004ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000918 	.word	0x20000918

08004d50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004d54:	2002      	movs	r0, #2
 8004d56:	f000 fe1d 	bl	8005994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004d62:	2004      	movs	r0, #4
 8004d64:	f000 fe16 	bl	8005994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004d68:	bf00      	nop
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004d70:	4802      	ldr	r0, [pc, #8]	; (8004d7c <DMA1_Channel5_IRQHandler+0x10>)
 8004d72:	f000 fb27 	bl	80053c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200005b0 	.word	0x200005b0

08004d80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d84:	4802      	ldr	r0, [pc, #8]	; (8004d90 <TIM3_IRQHandler+0x10>)
 8004d86:	f003 fa5f 	bl	8008248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000528 	.word	0x20000528

08004d94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d9a:	4811      	ldr	r0, [pc, #68]	; (8004de0 <USART1_IRQHandler+0x4c>)
 8004d9c:	f003 ff0c 	bl	8008bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) != RESET))
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <USART1_IRQHandler+0x4c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d114      	bne.n	8004dd8 <USART1_IRQHandler+0x44>
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <USART1_IRQHandler+0x4c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00d      	beq.n	8004dd8 <USART1_IRQHandler+0x44>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <USART1_IRQHandler+0x4c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <USART1_IRQHandler+0x4c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
	  HAL_UART_RxIdleCallback(&huart1);
 8004dd2:	4803      	ldr	r0, [pc, #12]	; (8004de0 <USART1_IRQHandler+0x4c>)
 8004dd4:	f7ff faba 	bl	800434c <HAL_UART_RxIdleCallback>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000570 	.word	0x20000570

08004de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004df0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004df2:	e003      	b.n	8004dfc <LoopCopyDataInit>

08004df4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004df6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004df8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004dfa:	3104      	adds	r1, #4

08004dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004dfc:	480a      	ldr	r0, [pc, #40]	; (8004e28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004e00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004e02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004e04:	d3f6      	bcc.n	8004df4 <CopyDataInit>
  ldr r2, =_sbss
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004e08:	e002      	b.n	8004e10 <LoopFillZerobss>

08004e0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004e0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004e0c:	f842 3b04 	str.w	r3, [r2], #4

08004e10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004e12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004e14:	d3f9      	bcc.n	8004e0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e16:	f7ff ffe5 	bl	8004de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e1a:	f008 fbef 	bl	800d5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e1e:	f7ff fb25 	bl	800446c <main>
  bx lr
 8004e22:	4770      	bx	lr
  ldr r3, =_sidata
 8004e24:	0800e5e0 	.word	0x0800e5e0
  ldr r0, =_sdata
 8004e28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004e2c:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8004e30:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8004e34:	20000b58 	.word	0x20000b58

08004e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e38:	e7fe      	b.n	8004e38 <ADC1_2_IRQHandler>
	...

08004e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_Init+0x28>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_Init+0x28>)
 8004e46:	f043 0310 	orr.w	r3, r3, #16
 8004e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	f000 f947 	bl	80050e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f000 f808 	bl	8004e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e58:	f7ff fd5c 	bl	8004914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40022000 	.word	0x40022000

08004e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_InitTick+0x54>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <HAL_InitTick+0x58>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f95f 	bl	800514a <HAL_SYSTICK_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e00e      	b.n	8004eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b0f      	cmp	r3, #15
 8004e9a:	d80a      	bhi.n	8004eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	f000 f927 	bl	80050f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ea8:	4a06      	ldr	r2, [pc, #24]	; (8004ec4 <HAL_InitTick+0x5c>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000004 	.word	0x20000004
 8004ec0:	2000000c 	.word	0x2000000c
 8004ec4:	20000008 	.word	0x20000008

08004ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_IncTick+0x1c>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_IncTick+0x20>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	4a03      	ldr	r2, [pc, #12]	; (8004ee8 <HAL_IncTick+0x20>)
 8004eda:	6013      	str	r3, [r2, #0]
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	2000000c 	.word	0x2000000c
 8004ee8:	20000920 	.word	0x20000920

08004eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return uwTick;
 8004ef0:	4b02      	ldr	r3, [pc, #8]	; (8004efc <HAL_GetTick+0x10>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	20000920 	.word	0x20000920

08004f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7ff fff0 	bl	8004eec <HAL_GetTick>
 8004f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d005      	beq.n	8004f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_Delay+0x44>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f26:	bf00      	nop
 8004f28:	f7ff ffe0 	bl	8004eec <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d8f7      	bhi.n	8004f28 <HAL_Delay+0x28>
  {
  }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c

08004f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f64:	4013      	ands	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f7a:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	60d3      	str	r3, [r2, #12]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 0307 	and.w	r3, r3, #7
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db0b      	blt.n	8004fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	f003 021f 	and.w	r2, r3, #31
 8004fc4:	4906      	ldr	r1, [pc, #24]	; (8004fe0 <__NVIC_EnableIRQ+0x34>)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2001      	movs	r0, #1
 8004fce:	fa00 f202 	lsl.w	r2, r0, r2
 8004fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	e000e100 	.word	0xe000e100

08004fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db0a      	blt.n	800500e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	490c      	ldr	r1, [pc, #48]	; (8005030 <__NVIC_SetPriority+0x4c>)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	0112      	lsls	r2, r2, #4
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	440b      	add	r3, r1
 8005008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800500c:	e00a      	b.n	8005024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4908      	ldr	r1, [pc, #32]	; (8005034 <__NVIC_SetPriority+0x50>)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3b04      	subs	r3, #4
 800501c:	0112      	lsls	r2, r2, #4
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	440b      	add	r3, r1
 8005022:	761a      	strb	r2, [r3, #24]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	e000e100 	.word	0xe000e100
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f1c3 0307 	rsb	r3, r3, #7
 8005052:	2b04      	cmp	r3, #4
 8005054:	bf28      	it	cs
 8005056:	2304      	movcs	r3, #4
 8005058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3304      	adds	r3, #4
 800505e:	2b06      	cmp	r3, #6
 8005060:	d902      	bls.n	8005068 <NVIC_EncodePriority+0x30>
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3b03      	subs	r3, #3
 8005066:	e000      	b.n	800506a <NVIC_EncodePriority+0x32>
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	401a      	ands	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005080:	f04f 31ff 	mov.w	r1, #4294967295
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	43d9      	mvns	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	4313      	orrs	r3, r2
         );
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050ac:	d301      	bcc.n	80050b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ae:	2301      	movs	r3, #1
 80050b0:	e00f      	b.n	80050d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050b2:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <SysTick_Config+0x40>)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ba:	210f      	movs	r1, #15
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
 80050c0:	f7ff ff90 	bl	8004fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <SysTick_Config+0x40>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ca:	4b04      	ldr	r3, [pc, #16]	; (80050dc <SysTick_Config+0x40>)
 80050cc:	2207      	movs	r2, #7
 80050ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	e000e010 	.word	0xe000e010

080050e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ff2d 	bl	8004f48 <__NVIC_SetPriorityGrouping>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b086      	sub	sp, #24
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	4603      	mov	r3, r0
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005108:	f7ff ff42 	bl	8004f90 <__NVIC_GetPriorityGrouping>
 800510c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f7ff ff90 	bl	8005038 <NVIC_EncodePriority>
 8005118:	4602      	mov	r2, r0
 800511a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff5f 	bl	8004fe4 <__NVIC_SetPriority>
}
 8005126:	bf00      	nop
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff35 	bl	8004fac <__NVIC_EnableIRQ>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff ffa2 	bl	800509c <SysTick_Config>
 8005158:	4603      	mov	r3, r0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e043      	b.n	8005202 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	4b22      	ldr	r3, [pc, #136]	; (800520c <HAL_DMA_Init+0xa8>)
 8005182:	4413      	add	r3, r2
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <HAL_DMA_Init+0xac>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	009a      	lsls	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <HAL_DMA_Init+0xb0>)
 8005196:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80051ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80051b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80051bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	bffdfff8 	.word	0xbffdfff8
 8005210:	cccccccd 	.word	0xcccccccd
 8005214:	40020000 	.word	0x40020000

08005218 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_DMA_Start_IT+0x20>
 8005234:	2302      	movs	r3, #2
 8005236:	e04a      	b.n	80052ce <HAL_DMA_Start_IT+0xb6>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005246:	2b01      	cmp	r3, #1
 8005248:	d13a      	bne.n	80052c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2202      	movs	r2, #2
 800524e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f9ae 	bl	80055d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 020e 	orr.w	r2, r2, #14
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e00f      	b.n	80052ae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0204 	bic.w	r2, r2, #4
 800529c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 020a 	orr.w	r2, r2, #10
 80052ac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e005      	b.n	80052cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
 80052ca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d005      	beq.n	80052fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e051      	b.n	800539e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 020e 	bic.w	r2, r2, #14
 8005308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <HAL_DMA_Abort_IT+0xd0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d029      	beq.n	8005378 <HAL_DMA_Abort_IT+0xa0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <HAL_DMA_Abort_IT+0xd4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d022      	beq.n	8005374 <HAL_DMA_Abort_IT+0x9c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <HAL_DMA_Abort_IT+0xd8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d01a      	beq.n	800536e <HAL_DMA_Abort_IT+0x96>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_DMA_Abort_IT+0xdc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d012      	beq.n	8005368 <HAL_DMA_Abort_IT+0x90>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a1c      	ldr	r2, [pc, #112]	; (80053b8 <HAL_DMA_Abort_IT+0xe0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00a      	beq.n	8005362 <HAL_DMA_Abort_IT+0x8a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <HAL_DMA_Abort_IT+0xe4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d102      	bne.n	800535c <HAL_DMA_Abort_IT+0x84>
 8005356:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800535a:	e00e      	b.n	800537a <HAL_DMA_Abort_IT+0xa2>
 800535c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005360:	e00b      	b.n	800537a <HAL_DMA_Abort_IT+0xa2>
 8005362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005366:	e008      	b.n	800537a <HAL_DMA_Abort_IT+0xa2>
 8005368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800536c:	e005      	b.n	800537a <HAL_DMA_Abort_IT+0xa2>
 800536e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005372:	e002      	b.n	800537a <HAL_DMA_Abort_IT+0xa2>
 8005374:	2310      	movs	r3, #16
 8005376:	e000      	b.n	800537a <HAL_DMA_Abort_IT+0xa2>
 8005378:	2301      	movs	r3, #1
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <HAL_DMA_Abort_IT+0xe8>)
 800537c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
    } 
  }
  return status;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40020008 	.word	0x40020008
 80053ac:	4002001c 	.word	0x4002001c
 80053b0:	40020030 	.word	0x40020030
 80053b4:	40020044 	.word	0x40020044
 80053b8:	40020058 	.word	0x40020058
 80053bc:	4002006c 	.word	0x4002006c
 80053c0:	40020000 	.word	0x40020000

080053c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	2204      	movs	r2, #4
 80053e2:	409a      	lsls	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d04f      	beq.n	800548c <HAL_DMA_IRQHandler+0xc8>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d04a      	beq.n	800548c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0204 	bic.w	r2, r2, #4
 8005412:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a66      	ldr	r2, [pc, #408]	; (80055b4 <HAL_DMA_IRQHandler+0x1f0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d029      	beq.n	8005472 <HAL_DMA_IRQHandler+0xae>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a65      	ldr	r2, [pc, #404]	; (80055b8 <HAL_DMA_IRQHandler+0x1f4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d022      	beq.n	800546e <HAL_DMA_IRQHandler+0xaa>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a63      	ldr	r2, [pc, #396]	; (80055bc <HAL_DMA_IRQHandler+0x1f8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01a      	beq.n	8005468 <HAL_DMA_IRQHandler+0xa4>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a62      	ldr	r2, [pc, #392]	; (80055c0 <HAL_DMA_IRQHandler+0x1fc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d012      	beq.n	8005462 <HAL_DMA_IRQHandler+0x9e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a60      	ldr	r2, [pc, #384]	; (80055c4 <HAL_DMA_IRQHandler+0x200>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00a      	beq.n	800545c <HAL_DMA_IRQHandler+0x98>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a5f      	ldr	r2, [pc, #380]	; (80055c8 <HAL_DMA_IRQHandler+0x204>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d102      	bne.n	8005456 <HAL_DMA_IRQHandler+0x92>
 8005450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005454:	e00e      	b.n	8005474 <HAL_DMA_IRQHandler+0xb0>
 8005456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800545a:	e00b      	b.n	8005474 <HAL_DMA_IRQHandler+0xb0>
 800545c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005460:	e008      	b.n	8005474 <HAL_DMA_IRQHandler+0xb0>
 8005462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005466:	e005      	b.n	8005474 <HAL_DMA_IRQHandler+0xb0>
 8005468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546c:	e002      	b.n	8005474 <HAL_DMA_IRQHandler+0xb0>
 800546e:	2340      	movs	r3, #64	; 0x40
 8005470:	e000      	b.n	8005474 <HAL_DMA_IRQHandler+0xb0>
 8005472:	2304      	movs	r3, #4
 8005474:	4a55      	ldr	r2, [pc, #340]	; (80055cc <HAL_DMA_IRQHandler+0x208>)
 8005476:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8094 	beq.w	80055aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800548a:	e08e      	b.n	80055aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	2202      	movs	r2, #2
 8005492:	409a      	lsls	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d056      	beq.n	800554a <HAL_DMA_IRQHandler+0x186>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d051      	beq.n	800554a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 020a 	bic.w	r2, r2, #10
 80054c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a38      	ldr	r2, [pc, #224]	; (80055b4 <HAL_DMA_IRQHandler+0x1f0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d029      	beq.n	800552a <HAL_DMA_IRQHandler+0x166>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a37      	ldr	r2, [pc, #220]	; (80055b8 <HAL_DMA_IRQHandler+0x1f4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <HAL_DMA_IRQHandler+0x162>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a35      	ldr	r2, [pc, #212]	; (80055bc <HAL_DMA_IRQHandler+0x1f8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01a      	beq.n	8005520 <HAL_DMA_IRQHandler+0x15c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_DMA_IRQHandler+0x1fc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d012      	beq.n	800551a <HAL_DMA_IRQHandler+0x156>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a32      	ldr	r2, [pc, #200]	; (80055c4 <HAL_DMA_IRQHandler+0x200>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00a      	beq.n	8005514 <HAL_DMA_IRQHandler+0x150>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a31      	ldr	r2, [pc, #196]	; (80055c8 <HAL_DMA_IRQHandler+0x204>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d102      	bne.n	800550e <HAL_DMA_IRQHandler+0x14a>
 8005508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800550c:	e00e      	b.n	800552c <HAL_DMA_IRQHandler+0x168>
 800550e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005512:	e00b      	b.n	800552c <HAL_DMA_IRQHandler+0x168>
 8005514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005518:	e008      	b.n	800552c <HAL_DMA_IRQHandler+0x168>
 800551a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800551e:	e005      	b.n	800552c <HAL_DMA_IRQHandler+0x168>
 8005520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005524:	e002      	b.n	800552c <HAL_DMA_IRQHandler+0x168>
 8005526:	2320      	movs	r3, #32
 8005528:	e000      	b.n	800552c <HAL_DMA_IRQHandler+0x168>
 800552a:	2302      	movs	r3, #2
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <HAL_DMA_IRQHandler+0x208>)
 800552e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	2b00      	cmp	r3, #0
 800553e:	d034      	beq.n	80055aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005548:	e02f      	b.n	80055aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2208      	movs	r2, #8
 8005550:	409a      	lsls	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d028      	beq.n	80055ac <HAL_DMA_IRQHandler+0x1e8>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 020e 	bic.w	r2, r2, #14
 8005572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
    }
  }
  return;
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
}
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40020008 	.word	0x40020008
 80055b8:	4002001c 	.word	0x4002001c
 80055bc:	40020030 	.word	0x40020030
 80055c0:	40020044 	.word	0x40020044
 80055c4:	40020058 	.word	0x40020058
 80055c8:	4002006c 	.word	0x4002006c
 80055cc:	40020000 	.word	0x40020000

080055d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	2101      	movs	r1, #1
 80055e8:	fa01 f202 	lsl.w	r2, r1, r2
 80055ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d108      	bne.n	8005610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800560e:	e007      	b.n	8005620 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	60da      	str	r2, [r3, #12]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
	...

0800562c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800562c:	b480      	push	{r7}
 800562e:	b08b      	sub	sp, #44	; 0x2c
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800563a:	2300      	movs	r3, #0
 800563c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800563e:	e169      	b.n	8005914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005640:	2201      	movs	r2, #1
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	429a      	cmp	r2, r3
 800565a:	f040 8158 	bne.w	800590e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	4a9a      	ldr	r2, [pc, #616]	; (80058cc <HAL_GPIO_Init+0x2a0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d05e      	beq.n	8005726 <HAL_GPIO_Init+0xfa>
 8005668:	4a98      	ldr	r2, [pc, #608]	; (80058cc <HAL_GPIO_Init+0x2a0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d875      	bhi.n	800575a <HAL_GPIO_Init+0x12e>
 800566e:	4a98      	ldr	r2, [pc, #608]	; (80058d0 <HAL_GPIO_Init+0x2a4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d058      	beq.n	8005726 <HAL_GPIO_Init+0xfa>
 8005674:	4a96      	ldr	r2, [pc, #600]	; (80058d0 <HAL_GPIO_Init+0x2a4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d86f      	bhi.n	800575a <HAL_GPIO_Init+0x12e>
 800567a:	4a96      	ldr	r2, [pc, #600]	; (80058d4 <HAL_GPIO_Init+0x2a8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d052      	beq.n	8005726 <HAL_GPIO_Init+0xfa>
 8005680:	4a94      	ldr	r2, [pc, #592]	; (80058d4 <HAL_GPIO_Init+0x2a8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d869      	bhi.n	800575a <HAL_GPIO_Init+0x12e>
 8005686:	4a94      	ldr	r2, [pc, #592]	; (80058d8 <HAL_GPIO_Init+0x2ac>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d04c      	beq.n	8005726 <HAL_GPIO_Init+0xfa>
 800568c:	4a92      	ldr	r2, [pc, #584]	; (80058d8 <HAL_GPIO_Init+0x2ac>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d863      	bhi.n	800575a <HAL_GPIO_Init+0x12e>
 8005692:	4a92      	ldr	r2, [pc, #584]	; (80058dc <HAL_GPIO_Init+0x2b0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d046      	beq.n	8005726 <HAL_GPIO_Init+0xfa>
 8005698:	4a90      	ldr	r2, [pc, #576]	; (80058dc <HAL_GPIO_Init+0x2b0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d85d      	bhi.n	800575a <HAL_GPIO_Init+0x12e>
 800569e:	2b12      	cmp	r3, #18
 80056a0:	d82a      	bhi.n	80056f8 <HAL_GPIO_Init+0xcc>
 80056a2:	2b12      	cmp	r3, #18
 80056a4:	d859      	bhi.n	800575a <HAL_GPIO_Init+0x12e>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <HAL_GPIO_Init+0x80>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	08005727 	.word	0x08005727
 80056b0:	08005701 	.word	0x08005701
 80056b4:	08005713 	.word	0x08005713
 80056b8:	08005755 	.word	0x08005755
 80056bc:	0800575b 	.word	0x0800575b
 80056c0:	0800575b 	.word	0x0800575b
 80056c4:	0800575b 	.word	0x0800575b
 80056c8:	0800575b 	.word	0x0800575b
 80056cc:	0800575b 	.word	0x0800575b
 80056d0:	0800575b 	.word	0x0800575b
 80056d4:	0800575b 	.word	0x0800575b
 80056d8:	0800575b 	.word	0x0800575b
 80056dc:	0800575b 	.word	0x0800575b
 80056e0:	0800575b 	.word	0x0800575b
 80056e4:	0800575b 	.word	0x0800575b
 80056e8:	0800575b 	.word	0x0800575b
 80056ec:	0800575b 	.word	0x0800575b
 80056f0:	08005709 	.word	0x08005709
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	4a79      	ldr	r2, [pc, #484]	; (80058e0 <HAL_GPIO_Init+0x2b4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80056fe:	e02c      	b.n	800575a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	623b      	str	r3, [r7, #32]
          break;
 8005706:	e029      	b.n	800575c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	3304      	adds	r3, #4
 800570e:	623b      	str	r3, [r7, #32]
          break;
 8005710:	e024      	b.n	800575c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	3308      	adds	r3, #8
 8005718:	623b      	str	r3, [r7, #32]
          break;
 800571a:	e01f      	b.n	800575c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	330c      	adds	r3, #12
 8005722:	623b      	str	r3, [r7, #32]
          break;
 8005724:	e01a      	b.n	800575c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800572e:	2304      	movs	r3, #4
 8005730:	623b      	str	r3, [r7, #32]
          break;
 8005732:	e013      	b.n	800575c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d105      	bne.n	8005748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800573c:	2308      	movs	r3, #8
 800573e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	611a      	str	r2, [r3, #16]
          break;
 8005746:	e009      	b.n	800575c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005748:	2308      	movs	r3, #8
 800574a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	615a      	str	r2, [r3, #20]
          break;
 8005752:	e003      	b.n	800575c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005754:	2300      	movs	r3, #0
 8005756:	623b      	str	r3, [r7, #32]
          break;
 8005758:	e000      	b.n	800575c <HAL_GPIO_Init+0x130>
          break;
 800575a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2bff      	cmp	r3, #255	; 0xff
 8005760:	d801      	bhi.n	8005766 <HAL_GPIO_Init+0x13a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	e001      	b.n	800576a <HAL_GPIO_Init+0x13e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2bff      	cmp	r3, #255	; 0xff
 8005770:	d802      	bhi.n	8005778 <HAL_GPIO_Init+0x14c>
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	e002      	b.n	800577e <HAL_GPIO_Init+0x152>
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	3b08      	subs	r3, #8
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	210f      	movs	r1, #15
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	fa01 f303 	lsl.w	r3, r1, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	401a      	ands	r2, r3
 8005790:	6a39      	ldr	r1, [r7, #32]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	fa01 f303 	lsl.w	r3, r1, r3
 8005798:	431a      	orrs	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80b1 	beq.w	800590e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80057ac:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <HAL_GPIO_Init+0x2b8>)
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	4a4c      	ldr	r2, [pc, #304]	; (80058e4 <HAL_GPIO_Init+0x2b8>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6193      	str	r3, [r2, #24]
 80057b8:	4b4a      	ldr	r3, [pc, #296]	; (80058e4 <HAL_GPIO_Init+0x2b8>)
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80057c4:	4a48      	ldr	r2, [pc, #288]	; (80058e8 <HAL_GPIO_Init+0x2bc>)
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	220f      	movs	r2, #15
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a40      	ldr	r2, [pc, #256]	; (80058ec <HAL_GPIO_Init+0x2c0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <HAL_GPIO_Init+0x1ec>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a3f      	ldr	r2, [pc, #252]	; (80058f0 <HAL_GPIO_Init+0x2c4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00d      	beq.n	8005814 <HAL_GPIO_Init+0x1e8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a3e      	ldr	r2, [pc, #248]	; (80058f4 <HAL_GPIO_Init+0x2c8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <HAL_GPIO_Init+0x1e4>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3d      	ldr	r2, [pc, #244]	; (80058f8 <HAL_GPIO_Init+0x2cc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d101      	bne.n	800580c <HAL_GPIO_Init+0x1e0>
 8005808:	2303      	movs	r3, #3
 800580a:	e006      	b.n	800581a <HAL_GPIO_Init+0x1ee>
 800580c:	2304      	movs	r3, #4
 800580e:	e004      	b.n	800581a <HAL_GPIO_Init+0x1ee>
 8005810:	2302      	movs	r3, #2
 8005812:	e002      	b.n	800581a <HAL_GPIO_Init+0x1ee>
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <HAL_GPIO_Init+0x1ee>
 8005818:	2300      	movs	r3, #0
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	f002 0203 	and.w	r2, r2, #3
 8005820:	0092      	lsls	r2, r2, #2
 8005822:	4093      	lsls	r3, r2
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800582a:	492f      	ldr	r1, [pc, #188]	; (80058e8 <HAL_GPIO_Init+0x2bc>)
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	089b      	lsrs	r3, r3, #2
 8005830:	3302      	adds	r3, #2
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d006      	beq.n	8005852 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005844:	4b2d      	ldr	r3, [pc, #180]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	492c      	ldr	r1, [pc, #176]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]
 8005850:	e006      	b.n	8005860 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005852:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	43db      	mvns	r3, r3
 800585a:	4928      	ldr	r1, [pc, #160]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 800585c:	4013      	ands	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d006      	beq.n	800587a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800586c:	4b23      	ldr	r3, [pc, #140]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	4922      	ldr	r1, [pc, #136]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	4313      	orrs	r3, r2
 8005876:	604b      	str	r3, [r1, #4]
 8005878:	e006      	b.n	8005888 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800587a:	4b20      	ldr	r3, [pc, #128]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	43db      	mvns	r3, r3
 8005882:	491e      	ldr	r1, [pc, #120]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 8005884:	4013      	ands	r3, r2
 8005886:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005894:	4b19      	ldr	r3, [pc, #100]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	4918      	ldr	r1, [pc, #96]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]
 80058a0:	e006      	b.n	80058b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80058a2:	4b16      	ldr	r3, [pc, #88]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	4914      	ldr	r1, [pc, #80]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d021      	beq.n	8005900 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	490e      	ldr	r1, [pc, #56]	; (80058fc <HAL_GPIO_Init+0x2d0>)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60cb      	str	r3, [r1, #12]
 80058c8:	e021      	b.n	800590e <HAL_GPIO_Init+0x2e2>
 80058ca:	bf00      	nop
 80058cc:	10320000 	.word	0x10320000
 80058d0:	10310000 	.word	0x10310000
 80058d4:	10220000 	.word	0x10220000
 80058d8:	10210000 	.word	0x10210000
 80058dc:	10120000 	.word	0x10120000
 80058e0:	10110000 	.word	0x10110000
 80058e4:	40021000 	.word	0x40021000
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40010800 	.word	0x40010800
 80058f0:	40010c00 	.word	0x40010c00
 80058f4:	40011000 	.word	0x40011000
 80058f8:	40011400 	.word	0x40011400
 80058fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_GPIO_Init+0x304>)
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	43db      	mvns	r3, r3
 8005908:	4909      	ldr	r1, [pc, #36]	; (8005930 <HAL_GPIO_Init+0x304>)
 800590a:	4013      	ands	r3, r2
 800590c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	3301      	adds	r3, #1
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	fa22 f303 	lsr.w	r3, r2, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	f47f ae8e 	bne.w	8005640 <HAL_GPIO_Init+0x14>
  }
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	372c      	adds	r7, #44	; 0x2c
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr
 8005930:	40010400 	.word	0x40010400

08005934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e001      	b.n	8005956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	460b      	mov	r3, r1
 800596c:	807b      	strh	r3, [r7, #2]
 800596e:	4613      	mov	r3, r2
 8005970:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005972:	787b      	ldrb	r3, [r7, #1]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005978:	887a      	ldrh	r2, [r7, #2]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800597e:	e003      	b.n	8005988 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	041a      	lsls	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	611a      	str	r2, [r3, #16]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
	...

08005994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800599e:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d006      	beq.n	80059b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059aa:	4a05      	ldr	r2, [pc, #20]	; (80059c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fcda 	bl	800436c <HAL_GPIO_EXTI_Callback>
  }
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40010400 	.word	0x40010400

080059c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e12b      	b.n	8005c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fe ffc4 	bl	8004978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a28:	f000 fff6 	bl	8006a18 <HAL_RCC_GetPCLK1Freq>
 8005a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4a81      	ldr	r2, [pc, #516]	; (8005c38 <HAL_I2C_Init+0x274>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d807      	bhi.n	8005a48 <HAL_I2C_Init+0x84>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a80      	ldr	r2, [pc, #512]	; (8005c3c <HAL_I2C_Init+0x278>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	bf94      	ite	ls
 8005a40:	2301      	movls	r3, #1
 8005a42:	2300      	movhi	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e006      	b.n	8005a56 <HAL_I2C_Init+0x92>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a7d      	ldr	r2, [pc, #500]	; (8005c40 <HAL_I2C_Init+0x27c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	bf94      	ite	ls
 8005a50:	2301      	movls	r3, #1
 8005a52:	2300      	movhi	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e0e7      	b.n	8005c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a78      	ldr	r2, [pc, #480]	; (8005c44 <HAL_I2C_Init+0x280>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	0c9b      	lsrs	r3, r3, #18
 8005a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4a6a      	ldr	r2, [pc, #424]	; (8005c38 <HAL_I2C_Init+0x274>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d802      	bhi.n	8005a98 <HAL_I2C_Init+0xd4>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3301      	adds	r3, #1
 8005a96:	e009      	b.n	8005aac <HAL_I2C_Init+0xe8>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
 8005aa2:	4a69      	ldr	r2, [pc, #420]	; (8005c48 <HAL_I2C_Init+0x284>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	3301      	adds	r3, #1
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	495c      	ldr	r1, [pc, #368]	; (8005c38 <HAL_I2C_Init+0x274>)
 8005ac8:	428b      	cmp	r3, r1
 8005aca:	d819      	bhi.n	8005b00 <HAL_I2C_Init+0x13c>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	1e59      	subs	r1, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ae0:	400b      	ands	r3, r1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_I2C_Init+0x138>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1e59      	subs	r1, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af4:	3301      	adds	r3, #1
 8005af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afa:	e051      	b.n	8005ba0 <HAL_I2C_Init+0x1dc>
 8005afc:	2304      	movs	r3, #4
 8005afe:	e04f      	b.n	8005ba0 <HAL_I2C_Init+0x1dc>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d111      	bne.n	8005b2c <HAL_I2C_Init+0x168>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1e58      	subs	r0, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	440b      	add	r3, r1
 8005b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	e012      	b.n	8005b52 <HAL_I2C_Init+0x18e>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1e58      	subs	r0, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	0099      	lsls	r1, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b42:	3301      	adds	r3, #1
 8005b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Init+0x196>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e022      	b.n	8005ba0 <HAL_I2C_Init+0x1dc>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10e      	bne.n	8005b80 <HAL_I2C_Init+0x1bc>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1e58      	subs	r0, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	440b      	add	r3, r1
 8005b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b74:	3301      	adds	r3, #1
 8005b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	e00f      	b.n	8005ba0 <HAL_I2C_Init+0x1dc>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1e58      	subs	r0, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6859      	ldr	r1, [r3, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	0099      	lsls	r1, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b96:	3301      	adds	r3, #1
 8005b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	6809      	ldr	r1, [r1, #0]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6911      	ldr	r1, [r2, #16]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68d2      	ldr	r2, [r2, #12]
 8005bda:	4311      	orrs	r1, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	000186a0 	.word	0x000186a0
 8005c3c:	001e847f 	.word	0x001e847f
 8005c40:	003d08ff 	.word	0x003d08ff
 8005c44:	431bde83 	.word	0x431bde83
 8005c48:	10624dd3 	.word	0x10624dd3

08005c4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	461a      	mov	r2, r3
 8005c58:	460b      	mov	r3, r1
 8005c5a:	817b      	strh	r3, [r7, #10]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c60:	f7ff f944 	bl	8004eec <HAL_GetTick>
 8005c64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	f040 80e0 	bne.w	8005e34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2319      	movs	r3, #25
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	4970      	ldr	r1, [pc, #448]	; (8005e40 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f964 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0d3      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_I2C_Master_Transmit+0x50>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e0cc      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ea>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d007      	beq.n	8005cc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2221      	movs	r2, #33	; 0x21
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2210      	movs	r2, #16
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	893a      	ldrh	r2, [r7, #8]
 8005cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a50      	ldr	r2, [pc, #320]	; (8005e44 <HAL_I2C_Master_Transmit+0x1f8>)
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d04:	8979      	ldrh	r1, [r7, #10]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f89c 	bl	8005e48 <I2C_MasterRequestWrite>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e08d      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d30:	e066      	b.n	8005e00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	6a39      	ldr	r1, [r7, #32]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f9de 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00d      	beq.n	8005d5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d107      	bne.n	8005d5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e06b      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d11b      	bne.n	8005dd4 <HAL_I2C_Master_Transmit+0x188>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d017      	beq.n	8005dd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	6a39      	ldr	r1, [r7, #32]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f9ce 	bl	800617a <I2C_WaitOnBTFFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d107      	bne.n	8005dfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e01a      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d194      	bne.n	8005d32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e000      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e34:	2302      	movs	r3, #2
  }
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	00100002 	.word	0x00100002
 8005e44:	ffff0000 	.word	0xffff0000

08005e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	460b      	mov	r3, r1
 8005e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d006      	beq.n	8005e72 <I2C_MasterRequestWrite+0x2a>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d003      	beq.n	8005e72 <I2C_MasterRequestWrite+0x2a>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e70:	d108      	bne.n	8005e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e00b      	b.n	8005e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	2b12      	cmp	r3, #18
 8005e8a:	d107      	bne.n	8005e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f84f 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00d      	beq.n	8005ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec2:	d103      	bne.n	8005ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e035      	b.n	8005f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed8:	d108      	bne.n	8005eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eda:	897b      	ldrh	r3, [r7, #10]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ee8:	611a      	str	r2, [r3, #16]
 8005eea:	e01b      	b.n	8005f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005eec:	897b      	ldrh	r3, [r7, #10]
 8005eee:	11db      	asrs	r3, r3, #7
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 0306 	and.w	r3, r3, #6
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	f063 030f 	orn	r3, r3, #15
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	490e      	ldr	r1, [pc, #56]	; (8005f44 <I2C_MasterRequestWrite+0xfc>)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f875 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e010      	b.n	8005f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f1a:	897b      	ldrh	r3, [r7, #10]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4907      	ldr	r1, [pc, #28]	; (8005f48 <I2C_MasterRequestWrite+0x100>)
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f865 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	00010008 	.word	0x00010008
 8005f48:	00010002 	.word	0x00010002

08005f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f5c:	e025      	b.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d021      	beq.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f66:	f7fe ffc1 	bl	8004eec <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d116      	bne.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e023      	b.n	8005ff2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d10d      	bne.n	8005fd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bf0c      	ite	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	2300      	movne	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	e00c      	b.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf0c      	ite	eq
 8005fe2:	2301      	moveq	r3, #1
 8005fe4:	2300      	movne	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d0b6      	beq.n	8005f5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006008:	e051      	b.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006018:	d123      	bne.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006028:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006032:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f043 0204 	orr.w	r2, r3, #4
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e046      	b.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d021      	beq.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606a:	f7fe ff3f 	bl	8004eec <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d116      	bne.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f043 0220 	orr.w	r2, r3, #32
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e020      	b.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d10c      	bne.n	80060d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	43da      	mvns	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4013      	ands	r3, r2
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	e00b      	b.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	43da      	mvns	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4013      	ands	r3, r2
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d18d      	bne.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006104:	e02d      	b.n	8006162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f878 	bl	80061fc <I2C_IsAcknowledgeFailed>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e02d      	b.n	8006172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d021      	beq.n	8006162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fe fee5 	bl	8004eec <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d116      	bne.n	8006162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e007      	b.n	8006172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d1ca      	bne.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006186:	e02d      	b.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f837 	bl	80061fc <I2C_IsAcknowledgeFailed>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e02d      	b.n	80061f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d021      	beq.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a0:	f7fe fea4 	bl	8004eec <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d116      	bne.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	f043 0220 	orr.w	r2, r3, #32
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e007      	b.n	80061f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d1ca      	bne.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006212:	d11b      	bne.n	800624c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800621c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	f043 0204 	orr.w	r2, r3, #4
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr

08006258 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <HAL_PWR_EnableBkUpAccess+0x14>)
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]
}
 8006262:	bf00      	nop
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	420e0020 	.word	0x420e0020

08006270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e272      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8087 	beq.w	800639e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006290:	4b92      	ldr	r3, [pc, #584]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	2b04      	cmp	r3, #4
 800629a:	d00c      	beq.n	80062b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800629c:	4b8f      	ldr	r3, [pc, #572]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d112      	bne.n	80062ce <HAL_RCC_OscConfig+0x5e>
 80062a8:	4b8c      	ldr	r3, [pc, #560]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b4:	d10b      	bne.n	80062ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b6:	4b89      	ldr	r3, [pc, #548]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d06c      	beq.n	800639c <HAL_RCC_OscConfig+0x12c>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d168      	bne.n	800639c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e24c      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d6:	d106      	bne.n	80062e6 <HAL_RCC_OscConfig+0x76>
 80062d8:	4b80      	ldr	r3, [pc, #512]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a7f      	ldr	r2, [pc, #508]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80062de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	e02e      	b.n	8006344 <HAL_RCC_OscConfig+0xd4>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10c      	bne.n	8006308 <HAL_RCC_OscConfig+0x98>
 80062ee:	4b7b      	ldr	r3, [pc, #492]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a7a      	ldr	r2, [pc, #488]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80062f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	4b78      	ldr	r3, [pc, #480]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a77      	ldr	r2, [pc, #476]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e01d      	b.n	8006344 <HAL_RCC_OscConfig+0xd4>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006310:	d10c      	bne.n	800632c <HAL_RCC_OscConfig+0xbc>
 8006312:	4b72      	ldr	r3, [pc, #456]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a71      	ldr	r2, [pc, #452]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	4b6f      	ldr	r3, [pc, #444]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a6e      	ldr	r2, [pc, #440]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e00b      	b.n	8006344 <HAL_RCC_OscConfig+0xd4>
 800632c:	4b6b      	ldr	r3, [pc, #428]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a6a      	ldr	r2, [pc, #424]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	4b68      	ldr	r3, [pc, #416]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a67      	ldr	r2, [pc, #412]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 800633e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d013      	beq.n	8006374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634c:	f7fe fdce 	bl	8004eec <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006354:	f7fe fdca 	bl	8004eec <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b64      	cmp	r3, #100	; 0x64
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e200      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	4b5d      	ldr	r3, [pc, #372]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0f0      	beq.n	8006354 <HAL_RCC_OscConfig+0xe4>
 8006372:	e014      	b.n	800639e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006374:	f7fe fdba 	bl	8004eec <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800637c:	f7fe fdb6 	bl	8004eec <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b64      	cmp	r3, #100	; 0x64
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e1ec      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638e:	4b53      	ldr	r3, [pc, #332]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x10c>
 800639a:	e000      	b.n	800639e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800639c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d063      	beq.n	8006472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063aa:	4b4c      	ldr	r3, [pc, #304]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80063b6:	4b49      	ldr	r3, [pc, #292]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d11c      	bne.n	80063fc <HAL_RCC_OscConfig+0x18c>
 80063c2:	4b46      	ldr	r3, [pc, #280]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d116      	bne.n	80063fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ce:	4b43      	ldr	r3, [pc, #268]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_RCC_OscConfig+0x176>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d001      	beq.n	80063e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e1c0      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e6:	4b3d      	ldr	r3, [pc, #244]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4939      	ldr	r1, [pc, #228]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fa:	e03a      	b.n	8006472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d020      	beq.n	8006446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006404:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640a:	f7fe fd6f 	bl	8004eec <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006412:	f7fe fd6b 	bl	8004eec <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e1a1      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006424:	4b2d      	ldr	r3, [pc, #180]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0f0      	beq.n	8006412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006430:	4b2a      	ldr	r3, [pc, #168]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4927      	ldr	r1, [pc, #156]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006440:	4313      	orrs	r3, r2
 8006442:	600b      	str	r3, [r1, #0]
 8006444:	e015      	b.n	8006472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006446:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644c:	f7fe fd4e 	bl	8004eec <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006454:	f7fe fd4a 	bl	8004eec <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e180      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f0      	bne.n	8006454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d03a      	beq.n	80064f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d019      	beq.n	80064ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006486:	4b17      	ldr	r3, [pc, #92]	; (80064e4 <HAL_RCC_OscConfig+0x274>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648c:	f7fe fd2e 	bl	8004eec <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006494:	f7fe fd2a 	bl	8004eec <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e160      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <HAL_RCC_OscConfig+0x26c>)
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80064b2:	2001      	movs	r0, #1
 80064b4:	f000 fad8 	bl	8006a68 <RCC_Delay>
 80064b8:	e01c      	b.n	80064f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ba:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <HAL_RCC_OscConfig+0x274>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c0:	f7fe fd14 	bl	8004eec <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c6:	e00f      	b.n	80064e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064c8:	f7fe fd10 	bl	8004eec <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d908      	bls.n	80064e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e146      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
 80064da:	bf00      	nop
 80064dc:	40021000 	.word	0x40021000
 80064e0:	42420000 	.word	0x42420000
 80064e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e8:	4b92      	ldr	r3, [pc, #584]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e9      	bne.n	80064c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80a6 	beq.w	800664e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006506:	4b8b      	ldr	r3, [pc, #556]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006512:	4b88      	ldr	r3, [pc, #544]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	4a87      	ldr	r2, [pc, #540]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651c:	61d3      	str	r3, [r2, #28]
 800651e:	4b85      	ldr	r3, [pc, #532]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652e:	4b82      	ldr	r3, [pc, #520]	; (8006738 <HAL_RCC_OscConfig+0x4c8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d118      	bne.n	800656c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800653a:	4b7f      	ldr	r3, [pc, #508]	; (8006738 <HAL_RCC_OscConfig+0x4c8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7e      	ldr	r2, [pc, #504]	; (8006738 <HAL_RCC_OscConfig+0x4c8>)
 8006540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006546:	f7fe fcd1 	bl	8004eec <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800654e:	f7fe fccd 	bl	8004eec <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b64      	cmp	r3, #100	; 0x64
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e103      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	4b75      	ldr	r3, [pc, #468]	; (8006738 <HAL_RCC_OscConfig+0x4c8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d106      	bne.n	8006582 <HAL_RCC_OscConfig+0x312>
 8006574:	4b6f      	ldr	r3, [pc, #444]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	4a6e      	ldr	r2, [pc, #440]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	6213      	str	r3, [r2, #32]
 8006580:	e02d      	b.n	80065de <HAL_RCC_OscConfig+0x36e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x334>
 800658a:	4b6a      	ldr	r3, [pc, #424]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	4a69      	ldr	r2, [pc, #420]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006590:	f023 0301 	bic.w	r3, r3, #1
 8006594:	6213      	str	r3, [r2, #32]
 8006596:	4b67      	ldr	r3, [pc, #412]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	4a66      	ldr	r2, [pc, #408]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	6213      	str	r3, [r2, #32]
 80065a2:	e01c      	b.n	80065de <HAL_RCC_OscConfig+0x36e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d10c      	bne.n	80065c6 <HAL_RCC_OscConfig+0x356>
 80065ac:	4b61      	ldr	r3, [pc, #388]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	4a60      	ldr	r2, [pc, #384]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065b2:	f043 0304 	orr.w	r3, r3, #4
 80065b6:	6213      	str	r3, [r2, #32]
 80065b8:	4b5e      	ldr	r3, [pc, #376]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	4a5d      	ldr	r2, [pc, #372]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6213      	str	r3, [r2, #32]
 80065c4:	e00b      	b.n	80065de <HAL_RCC_OscConfig+0x36e>
 80065c6:	4b5b      	ldr	r3, [pc, #364]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	4a5a      	ldr	r2, [pc, #360]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	6213      	str	r3, [r2, #32]
 80065d2:	4b58      	ldr	r3, [pc, #352]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	4a57      	ldr	r2, [pc, #348]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d015      	beq.n	8006612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e6:	f7fe fc81 	bl	8004eec <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ec:	e00a      	b.n	8006604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ee:	f7fe fc7d 	bl	8004eec <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e0b1      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006604:	4b4b      	ldr	r3, [pc, #300]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0ee      	beq.n	80065ee <HAL_RCC_OscConfig+0x37e>
 8006610:	e014      	b.n	800663c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006612:	f7fe fc6b 	bl	8004eec <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006618:	e00a      	b.n	8006630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661a:	f7fe fc67 	bl	8004eec <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	f241 3288 	movw	r2, #5000	; 0x1388
 8006628:	4293      	cmp	r3, r2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e09b      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006630:	4b40      	ldr	r3, [pc, #256]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1ee      	bne.n	800661a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d105      	bne.n	800664e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006642:	4b3c      	ldr	r3, [pc, #240]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	4a3b      	ldr	r2, [pc, #236]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 8006648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800664c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 8087 	beq.w	8006766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006658:	4b36      	ldr	r3, [pc, #216]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b08      	cmp	r3, #8
 8006662:	d061      	beq.n	8006728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d146      	bne.n	80066fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666c:	4b33      	ldr	r3, [pc, #204]	; (800673c <HAL_RCC_OscConfig+0x4cc>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006672:	f7fe fc3b 	bl	8004eec <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667a:	f7fe fc37 	bl	8004eec <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e06d      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800668c:	4b29      	ldr	r3, [pc, #164]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f0      	bne.n	800667a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a0:	d108      	bne.n	80066b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	4921      	ldr	r1, [pc, #132]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066b4:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a19      	ldr	r1, [r3, #32]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	430b      	orrs	r3, r1
 80066c6:	491b      	ldr	r1, [pc, #108]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066cc:	4b1b      	ldr	r3, [pc, #108]	; (800673c <HAL_RCC_OscConfig+0x4cc>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d2:	f7fe fc0b 	bl	8004eec <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066da:	f7fe fc07 	bl	8004eec <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e03d      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066ec:	4b11      	ldr	r3, [pc, #68]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCC_OscConfig+0x46a>
 80066f8:	e035      	b.n	8006766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fa:	4b10      	ldr	r3, [pc, #64]	; (800673c <HAL_RCC_OscConfig+0x4cc>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006700:	f7fe fbf4 	bl	8004eec <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006708:	f7fe fbf0 	bl	8004eec <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e026      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_RCC_OscConfig+0x4c4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x498>
 8006726:	e01e      	b.n	8006766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d107      	bne.n	8006740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e019      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
 8006734:	40021000 	.word	0x40021000
 8006738:	40007000 	.word	0x40007000
 800673c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <HAL_RCC_OscConfig+0x500>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	429a      	cmp	r2, r3
 8006752:	d106      	bne.n	8006762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675e:	429a      	cmp	r2, r3
 8006760:	d001      	beq.n	8006766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40021000 	.word	0x40021000

08006774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0d0      	b.n	800692a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006788:	4b6a      	ldr	r3, [pc, #424]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d910      	bls.n	80067b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006796:	4b67      	ldr	r3, [pc, #412]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 0207 	bic.w	r2, r3, #7
 800679e:	4965      	ldr	r1, [pc, #404]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b63      	ldr	r3, [pc, #396]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0b8      	b.n	800692a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067d0:	4b59      	ldr	r3, [pc, #356]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4a58      	ldr	r2, [pc, #352]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80067d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e8:	4b53      	ldr	r3, [pc, #332]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4a52      	ldr	r2, [pc, #328]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80067f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f4:	4b50      	ldr	r3, [pc, #320]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	494d      	ldr	r1, [pc, #308]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 8006802:	4313      	orrs	r3, r2
 8006804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d040      	beq.n	8006894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	4b47      	ldr	r3, [pc, #284]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d115      	bne.n	8006852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e07f      	b.n	800692a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d107      	bne.n	8006842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006832:	4b41      	ldr	r3, [pc, #260]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e073      	b.n	800692a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006842:	4b3d      	ldr	r3, [pc, #244]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e06b      	b.n	800692a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006852:	4b39      	ldr	r3, [pc, #228]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f023 0203 	bic.w	r2, r3, #3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	4936      	ldr	r1, [pc, #216]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 8006860:	4313      	orrs	r3, r2
 8006862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006864:	f7fe fb42 	bl	8004eec <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	e00a      	b.n	8006882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686c:	f7fe fb3e 	bl	8004eec <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f241 3288 	movw	r2, #5000	; 0x1388
 800687a:	4293      	cmp	r3, r2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e053      	b.n	800692a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006882:	4b2d      	ldr	r3, [pc, #180]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 020c 	and.w	r2, r3, #12
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	429a      	cmp	r2, r3
 8006892:	d1eb      	bne.n	800686c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006894:	4b27      	ldr	r3, [pc, #156]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d210      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 0207 	bic.w	r2, r3, #7
 80068aa:	4922      	ldr	r1, [pc, #136]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e032      	b.n	800692a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4916      	ldr	r1, [pc, #88]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	490e      	ldr	r1, [pc, #56]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006902:	f000 f821 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006906:	4602      	mov	r2, r0
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	490a      	ldr	r1, [pc, #40]	; (800693c <HAL_RCC_ClockConfig+0x1c8>)
 8006914:	5ccb      	ldrb	r3, [r1, r3]
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_RCC_ClockConfig+0x1cc>)
 800691c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCC_ClockConfig+0x1d0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe faa0 	bl	8004e68 <HAL_InitTick>

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40022000 	.word	0x40022000
 8006938:	40021000 	.word	0x40021000
 800693c:	0800e070 	.word	0x0800e070
 8006940:	20000004 	.word	0x20000004
 8006944:	20000008 	.word	0x20000008

08006948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	b490      	push	{r4, r7}
 800694a:	b08a      	sub	sp, #40	; 0x28
 800694c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800694e:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006950:	1d3c      	adds	r4, r7, #4
 8006952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006958:	f240 2301 	movw	r3, #513	; 0x201
 800695c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	2300      	movs	r3, #0
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006972:	4b21      	ldr	r3, [pc, #132]	; (80069f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f003 030c 	and.w	r3, r3, #12
 800697e:	2b04      	cmp	r3, #4
 8006980:	d002      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x40>
 8006982:	2b08      	cmp	r3, #8
 8006984:	d003      	beq.n	800698e <HAL_RCC_GetSysClockFreq+0x46>
 8006986:	e02b      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006988:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800698a:	623b      	str	r3, [r7, #32]
      break;
 800698c:	e02b      	b.n	80069e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	0c9b      	lsrs	r3, r3, #18
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	3328      	adds	r3, #40	; 0x28
 8006998:	443b      	add	r3, r7
 800699a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800699e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d012      	beq.n	80069d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	0c5b      	lsrs	r3, r3, #17
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	3328      	adds	r3, #40	; 0x28
 80069b6:	443b      	add	r3, r7
 80069b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4a0e      	ldr	r2, [pc, #56]	; (80069fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80069c2:	fb03 f202 	mul.w	r2, r3, r2
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
 80069ce:	e004      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	4a0b      	ldr	r2, [pc, #44]	; (8006a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	623b      	str	r3, [r7, #32]
      break;
 80069de:	e002      	b.n	80069e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069e0:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80069e2:	623b      	str	r3, [r7, #32]
      break;
 80069e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069e6:	6a3b      	ldr	r3, [r7, #32]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3728      	adds	r7, #40	; 0x28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc90      	pop	{r4, r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	0800d770 	.word	0x0800d770
 80069f8:	40021000 	.word	0x40021000
 80069fc:	007a1200 	.word	0x007a1200
 8006a00:	003d0900 	.word	0x003d0900

08006a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a08:	4b02      	ldr	r3, [pc, #8]	; (8006a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	20000004 	.word	0x20000004

08006a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a1c:	f7ff fff2 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a20:	4602      	mov	r2, r0
 8006a22:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	4903      	ldr	r1, [pc, #12]	; (8006a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a2e:	5ccb      	ldrb	r3, [r1, r3]
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	0800e080 	.word	0x0800e080

08006a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a44:	f7ff ffde 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	0adb      	lsrs	r3, r3, #11
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	4903      	ldr	r1, [pc, #12]	; (8006a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a56:	5ccb      	ldrb	r3, [r1, r3]
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40021000 	.word	0x40021000
 8006a64:	0800e080 	.word	0x0800e080

08006a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a70:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <RCC_Delay+0x34>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <RCC_Delay+0x38>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	0a5b      	lsrs	r3, r3, #9
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a84:	bf00      	nop
  }
  while (Delay --);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1e5a      	subs	r2, r3, #1
 8006a8a:	60fa      	str	r2, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f9      	bne.n	8006a84 <RCC_Delay+0x1c>
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr
 8006a9c:	20000004 	.word	0x20000004
 8006aa0:	10624dd3 	.word	0x10624dd3

08006aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d07d      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac4:	4b4f      	ldr	r3, [pc, #316]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10d      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad0:	4b4c      	ldr	r3, [pc, #304]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	4a4b      	ldr	r2, [pc, #300]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ada:	61d3      	str	r3, [r2, #28]
 8006adc:	4b49      	ldr	r3, [pc, #292]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aec:	4b46      	ldr	r3, [pc, #280]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d118      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006af8:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a42      	ldr	r2, [pc, #264]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b04:	f7fe f9f2 	bl	8004eec <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b0a:	e008      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0c:	f7fe f9ee 	bl	8004eec <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	; 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e06d      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b2a:	4b36      	ldr	r3, [pc, #216]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d02e      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d027      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b48:	4b2e      	ldr	r3, [pc, #184]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b58:	4b2c      	ldr	r3, [pc, #176]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b5e:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d014      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6e:	f7fe f9bd 	bl	8004eec <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b76:	f7fe f9b9 	bl	8004eec <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e036      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8c:	4b1d      	ldr	r3, [pc, #116]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0ee      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b98:	4b1a      	ldr	r3, [pc, #104]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4917      	ldr	r1, [pc, #92]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d105      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bb0:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bc8:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	490b      	ldr	r1, [pc, #44]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	4904      	ldr	r1, [pc, #16]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40021000 	.word	0x40021000
 8006c08:	40007000 	.word	0x40007000
 8006c0c:	42420440 	.word	0x42420440

08006c10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b08d      	sub	sp, #52	; 0x34
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c18:	4b58      	ldr	r3, [pc, #352]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006c1a:	f107 040c 	add.w	r4, r7, #12
 8006c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c24:	f240 2301 	movw	r3, #513	; 0x201
 8006c28:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	2300      	movs	r3, #0
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c32:	2300      	movs	r3, #0
 8006c34:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d00a      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	f200 808e 	bhi.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d049      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d079      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006c58:	e086      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006c5a:	4b49      	ldr	r3, [pc, #292]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006c60:	4b47      	ldr	r3, [pc, #284]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d07f      	beq.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	0c9b      	lsrs	r3, r3, #18
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	3330      	adds	r3, #48	; 0x30
 8006c76:	443b      	add	r3, r7
 8006c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006c7c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d017      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c88:	4b3d      	ldr	r3, [pc, #244]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	0c5b      	lsrs	r3, r3, #17
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	3330      	adds	r3, #48	; 0x30
 8006c94:	443b      	add	r3, r7
 8006c96:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00d      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006ca6:	4a37      	ldr	r2, [pc, #220]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	4a33      	ldr	r2, [pc, #204]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006cbc:	fb02 f303 	mul.w	r3, r2, r3
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006cc2:	4b2f      	ldr	r3, [pc, #188]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cce:	d102      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006cd4:	e04a      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4a2c      	ldr	r2, [pc, #176]	; (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006ce4:	e042      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006ce6:	4b26      	ldr	r3, [pc, #152]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf6:	d108      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d08:	e01f      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d14:	d109      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006d16:	4b1a      	ldr	r3, [pc, #104]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006d22:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d28:	e00f      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d34:	d11c      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006d42:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d48:	e012      	b.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006d4a:	e011      	b.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006d4c:	f7ff fe78 	bl	8006a40 <HAL_RCC_GetPCLK2Freq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	0b9b      	lsrs	r3, r3, #14
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d66:	e004      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d70:	bf00      	nop
    }
  }
  return (frequency);
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3734      	adds	r7, #52	; 0x34
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd90      	pop	{r4, r7, pc}
 8006d7c:	0800d780 	.word	0x0800d780
 8006d80:	40021000 	.word	0x40021000
 8006d84:	007a1200 	.word	0x007a1200
 8006d88:	003d0900 	.word	0x003d0900
 8006d8c:	aaaaaaab 	.word	0xaaaaaaab

08006d90 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e084      	b.n	8006eb0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7c5b      	ldrb	r3, [r3, #17]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fd fe1c 	bl	80049f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 faf4 	bl	80073b0 <HAL_RTC_WaitForSynchro>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e06b      	b.n	8006eb0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fbad 	bl	8007538 <RTC_EnterInitMode>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2204      	movs	r2, #4
 8006de8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e060      	b.n	8006eb0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0207 	bic.w	r2, r2, #7
 8006dfc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006e06:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <HAL_RTC_Init+0x128>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <HAL_RTC_Init+0x128>)
 8006e0c:	f023 0301 	bic.w	r3, r3, #1
 8006e10:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006e12:	4b29      	ldr	r3, [pc, #164]	; (8006eb8 <HAL_RTC_Init+0x128>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	4926      	ldr	r1, [pc, #152]	; (8006eb8 <HAL_RTC_Init+0x128>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d003      	beq.n	8006e36 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e00e      	b.n	8006e54 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006e36:	2001      	movs	r0, #1
 8006e38:	f7ff feea 	bl	8006c10 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e3c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2204      	movs	r2, #4
 8006e48:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e030      	b.n	8006eb0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f023 010f 	bic.w	r1, r3, #15
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	0c1a      	lsrs	r2, r3, #16
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	b291      	uxth	r1, r2
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb81 	bl	8007588 <RTC_ExitInitMode>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2204      	movs	r2, #4
 8006e90:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e00c      	b.n	8006eb0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006eae:	2300      	movs	r3, #0
  }
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40006c00 	.word	0x40006c00

08006ebc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_RTC_SetTime+0x20>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e080      	b.n	8006fe2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	7c1b      	ldrb	r3, [r3, #16]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_RTC_SetTime+0x30>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e07a      	b.n	8006fe2 <HAL_RTC_SetTime+0x126>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d113      	bne.n	8006f26 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006f08:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	4619      	mov	r1, r3
 8006f12:	460b      	mov	r3, r1
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	1a5b      	subs	r3, r3, r1
 8006f18:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006f1a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006f20:	4413      	add	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e01e      	b.n	8006f64 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fb71 	bl	8007612 <RTC_Bcd2ToByte>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006f38:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fb66 	bl	8007612 <RTC_Bcd2ToByte>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006f52:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	789b      	ldrb	r3, [r3, #2]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fb5a 	bl	8007612 <RTC_Bcd2ToByte>
 8006f5e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006f60:	4423      	add	r3, r4
 8006f62:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fa7f 	bl	800746a <RTC_WriteTimeCounter>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2204      	movs	r2, #4
 8006f76:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e02f      	b.n	8006fe2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0205 	bic.w	r2, r2, #5
 8006f90:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fa90 	bl	80074b8 <RTC_ReadAlarmCounter>
 8006f98:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d018      	beq.n	8006fd4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d214      	bcs.n	8006fd4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006fb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006fb4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006fb6:	6939      	ldr	r1, [r7, #16]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fa96 	bl	80074ea <RTC_WriteAlarmCounter>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e006      	b.n	8006fe2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd90      	pop	{r4, r7, pc}
	...

08006fec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_RTC_GetTime+0x28>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0b5      	b.n	8007184 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e0ac      	b.n	8007184 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f9ed 	bl	800740a <RTC_ReadTimeCounter>
 8007030:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	4a55      	ldr	r2, [pc, #340]	; (800718c <HAL_RTC_GetTime+0x1a0>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	0adb      	lsrs	r3, r3, #11
 800703c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	4b52      	ldr	r3, [pc, #328]	; (800718c <HAL_RTC_GetTime+0x1a0>)
 8007042:	fba3 1302 	umull	r1, r3, r3, r2
 8007046:	0adb      	lsrs	r3, r3, #11
 8007048:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	4a4f      	ldr	r2, [pc, #316]	; (8007190 <HAL_RTC_GetTime+0x1a4>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	b2da      	uxtb	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	4a4a      	ldr	r2, [pc, #296]	; (800718c <HAL_RTC_GetTime+0x1a0>)
 8007064:	fba2 1203 	umull	r1, r2, r2, r3
 8007068:	0ad2      	lsrs	r2, r2, #11
 800706a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800706e:	fb01 f202 	mul.w	r2, r1, r2
 8007072:	1a9a      	subs	r2, r3, r2
 8007074:	4b46      	ldr	r3, [pc, #280]	; (8007190 <HAL_RTC_GetTime+0x1a4>)
 8007076:	fba3 1302 	umull	r1, r3, r3, r2
 800707a:	0959      	lsrs	r1, r3, #5
 800707c:	460b      	mov	r3, r1
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	1a5b      	subs	r3, r3, r1
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	1ad1      	subs	r1, r2, r3
 8007086:	b2ca      	uxtb	r2, r1
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b17      	cmp	r3, #23
 8007090:	d955      	bls.n	800713e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4a3f      	ldr	r2, [pc, #252]	; (8007194 <HAL_RTC_GetTime+0x1a8>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800709e:	6939      	ldr	r1, [r7, #16]
 80070a0:	4b3c      	ldr	r3, [pc, #240]	; (8007194 <HAL_RTC_GetTime+0x1a8>)
 80070a2:	fba3 2301 	umull	r2, r3, r3, r1
 80070a6:	091a      	lsrs	r2, r3, #4
 80070a8:	4613      	mov	r3, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	4413      	add	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	1aca      	subs	r2, r1, r3
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f9fd 	bl	80074b8 <RTC_ReadAlarmCounter>
 80070be:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d008      	beq.n	80070da <HAL_RTC_GetTime+0xee>
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d904      	bls.n	80070da <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	e002      	b.n	80070e0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295
 80070de:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <HAL_RTC_GetTime+0x1ac>)
 80070e4:	fb02 f303 	mul.w	r3, r2, r3
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80070ee:	69b9      	ldr	r1, [r7, #24]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f9ba 	bl	800746a <RTC_WriteTimeCounter>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e041      	b.n	8007184 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d00c      	beq.n	8007122 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	4413      	add	r3, r2
 800710e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f9e9 	bl	80074ea <RTC_WriteAlarmCounter>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e030      	b.n	8007184 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007122:	69f9      	ldr	r1, [r7, #28]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f9e0 	bl	80074ea <RTC_WriteAlarmCounter>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e027      	b.n	8007184 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fa88 	bl	800764c <RTC_DateUpdate>
 800713c:	e003      	b.n	8007146 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01a      	beq.n	8007182 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fa41 	bl	80075d8 <RTC_ByteToBcd2>
 8007156:	4603      	mov	r3, r0
 8007158:	461a      	mov	r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fa38 	bl	80075d8 <RTC_ByteToBcd2>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fa2f 	bl	80075d8 <RTC_ByteToBcd2>
 800717a:	4603      	mov	r3, r0
 800717c:	461a      	mov	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3720      	adds	r7, #32
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	91a2b3c5 	.word	0x91a2b3c5
 8007190:	88888889 	.word	0x88888889
 8007194:	aaaaaaab 	.word	0xaaaaaaab
 8007198:	00015180 	.word	0x00015180

0800719c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	2300      	movs	r3, #0
 80071ae:	61bb      	str	r3, [r7, #24]
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_RTC_SetDate+0x24>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e097      	b.n	80072f4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	7c1b      	ldrb	r3, [r3, #16]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_RTC_SetDate+0x34>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e091      	b.n	80072f4 <HAL_RTC_SetDate+0x158>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2202      	movs	r2, #2
 80071da:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10c      	bne.n	80071fc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	78da      	ldrb	r2, [r3, #3]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	785a      	ldrb	r2, [r3, #1]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	789a      	ldrb	r2, [r3, #2]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	739a      	strb	r2, [r3, #14]
 80071fa:	e01a      	b.n	8007232 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	78db      	ldrb	r3, [r3, #3]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fa06 	bl	8007612 <RTC_Bcd2ToByte>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f9fd 	bl	8007612 <RTC_Bcd2ToByte>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f9f4 	bl	8007612 <RTC_Bcd2ToByte>
 800722a:	4603      	mov	r3, r0
 800722c:	461a      	mov	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	7bdb      	ldrb	r3, [r3, #15]
 8007236:	4618      	mov	r0, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	7b59      	ldrb	r1, [r3, #13]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	7b9b      	ldrb	r3, [r3, #14]
 8007240:	461a      	mov	r2, r3
 8007242:	f000 fadf 	bl	8007804 <RTC_WeekDayNum>
 8007246:	4603      	mov	r3, r0
 8007248:	461a      	mov	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	7b1a      	ldrb	r2, [r3, #12]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f8d7 	bl	800740a <RTC_ReadTimeCounter>
 800725c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4a26      	ldr	r2, [pc, #152]	; (80072fc <HAL_RTC_SetDate+0x160>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	0adb      	lsrs	r3, r3, #11
 8007268:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b18      	cmp	r3, #24
 800726e:	d93a      	bls.n	80072e6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4a23      	ldr	r2, [pc, #140]	; (8007300 <HAL_RTC_SetDate+0x164>)
 8007274:	fba2 2303 	umull	r2, r3, r2, r3
 8007278:	091b      	lsrs	r3, r3, #4
 800727a:	4a22      	ldr	r2, [pc, #136]	; (8007304 <HAL_RTC_SetDate+0x168>)
 800727c:	fb02 f303 	mul.w	r3, r2, r3
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007286:	69f9      	ldr	r1, [r7, #28]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f8ee 	bl	800746a <RTC_WriteTimeCounter>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2204      	movs	r2, #4
 8007298:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e027      	b.n	80072f4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f907 	bl	80074b8 <RTC_ReadAlarmCounter>
 80072aa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d018      	beq.n	80072e6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d214      	bcs.n	80072e6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80072c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80072c6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80072c8:	69b9      	ldr	r1, [r7, #24]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f90d 	bl	80074ea <RTC_WriteAlarmCounter>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2204      	movs	r2, #4
 80072da:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e006      	b.n	80072f4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	91a2b3c5 	.word	0x91a2b3c5
 8007300:	aaaaaaab 	.word	0xaaaaaaab
 8007304:	00015180 	.word	0x00015180

08007308 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	2100      	movs	r1, #0
 800731a:	460a      	mov	r2, r1
 800731c:	801a      	strh	r2, [r3, #0]
 800731e:	460a      	mov	r2, r1
 8007320:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_RTC_GetDate+0x26>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e03a      	b.n	80073a8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007332:	f107 0314 	add.w	r3, r7, #20
 8007336:	2200      	movs	r2, #0
 8007338:	4619      	mov	r1, r3
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7ff fe56 	bl	8006fec <HAL_RTC_GetTime>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e02e      	b.n	80073a8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	7b1a      	ldrb	r2, [r3, #12]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	7bda      	ldrb	r2, [r3, #15]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	7b5a      	ldrb	r2, [r3, #13]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	7b9a      	ldrb	r2, [r3, #14]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01a      	beq.n	80073a6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	78db      	ldrb	r3, [r3, #3]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f92f 	bl	80075d8 <RTC_ByteToBcd2>
 800737a:	4603      	mov	r3, r0
 800737c:	461a      	mov	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f926 	bl	80075d8 <RTC_ByteToBcd2>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	789b      	ldrb	r3, [r3, #2]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f91d 	bl	80075d8 <RTC_ByteToBcd2>
 800739e:	4603      	mov	r3, r0
 80073a0:	461a      	mov	r2, r3
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e01d      	b.n	8007402 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0208 	bic.w	r2, r2, #8
 80073d4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80073d6:	f7fd fd89 	bl	8004eec <HAL_GetTick>
 80073da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80073dc:	e009      	b.n	80073f2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80073de:	f7fd fd85 	bl	8004eec <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ec:	d901      	bls.n	80073f2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e007      	b.n	8007402 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0ee      	beq.n	80073de <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800740a:	b480      	push	{r7}
 800740c:	b087      	sub	sp, #28
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	827b      	strh	r3, [r7, #18]
 8007416:	2300      	movs	r3, #0
 8007418:	823b      	strh	r3, [r7, #16]
 800741a:	2300      	movs	r3, #0
 800741c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800743a:	8a7a      	ldrh	r2, [r7, #18]
 800743c:	8a3b      	ldrh	r3, [r7, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d008      	beq.n	8007454 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007442:	8a3b      	ldrh	r3, [r7, #16]
 8007444:	041a      	lsls	r2, r3, #16
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	b29b      	uxth	r3, r3
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e004      	b.n	800745e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007454:	8a7b      	ldrh	r3, [r7, #18]
 8007456:	041a      	lsls	r2, r3, #16
 8007458:	89fb      	ldrh	r3, [r7, #14]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800745e:	697b      	ldr	r3, [r7, #20]
}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr

0800746a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f85d 	bl	8007538 <RTC_EnterInitMode>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	e011      	b.n	80074ae <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	0c12      	lsrs	r2, r2, #16
 8007492:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	b292      	uxth	r2, r2
 800749c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f872 	bl	8007588 <RTC_ExitInitMode>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	81fb      	strh	r3, [r7, #14]
 80074c4:	2300      	movs	r3, #0
 80074c6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80074d8:	89fb      	ldrh	r3, [r7, #14]
 80074da:	041a      	lsls	r2, r3, #16
 80074dc:	89bb      	ldrh	r3, [r7, #12]
 80074de:	4313      	orrs	r3, r2
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f81d 	bl	8007538 <RTC_EnterInitMode>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
 8007508:	e011      	b.n	800752e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	0c12      	lsrs	r2, r2, #16
 8007512:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	b292      	uxth	r2, r2
 800751c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f832 	bl	8007588 <RTC_ExitInitMode>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007544:	f7fd fcd2 	bl	8004eec <HAL_GetTick>
 8007548:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800754a:	e009      	b.n	8007560 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800754c:	f7fd fcce 	bl	8004eec <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800755a:	d901      	bls.n	8007560 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e00f      	b.n	8007580 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0ee      	beq.n	800754c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0210 	orr.w	r2, r2, #16
 800757c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0210 	bic.w	r2, r2, #16
 80075a2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80075a4:	f7fd fca2 	bl	8004eec <HAL_GetTick>
 80075a8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80075aa:	e009      	b.n	80075c0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80075ac:	f7fd fc9e 	bl	8004eec <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ba:	d901      	bls.n	80075c0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e007      	b.n	80075d0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0ee      	beq.n	80075ac <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80075e6:	e005      	b.n	80075f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	3b0a      	subs	r3, #10
 80075f2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d8f6      	bhi.n	80075e8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	b2da      	uxtb	r2, r3
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	4313      	orrs	r3, r2
 8007606:	b2db      	uxtb	r3, r3
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr

08007612 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	4603      	mov	r3, r0
 800761a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	b2db      	uxtb	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	b2da      	uxtb	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	4413      	add	r3, r2
 8007640:	b2db      	uxtb	r3, r3
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr

0800764c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	2300      	movs	r3, #0
 800765c:	613b      	str	r3, [r7, #16]
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7bdb      	ldrb	r3, [r3, #15]
 800766a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7b5b      	ldrb	r3, [r3, #13]
 8007670:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7b9b      	ldrb	r3, [r3, #14]
 8007676:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007678:	2300      	movs	r3, #0
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	e06f      	b.n	800775e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d011      	beq.n	80076a8 <RTC_DateUpdate+0x5c>
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b03      	cmp	r3, #3
 8007688:	d00e      	beq.n	80076a8 <RTC_DateUpdate+0x5c>
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b05      	cmp	r3, #5
 800768e:	d00b      	beq.n	80076a8 <RTC_DateUpdate+0x5c>
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2b07      	cmp	r3, #7
 8007694:	d008      	beq.n	80076a8 <RTC_DateUpdate+0x5c>
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d005      	beq.n	80076a8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b0a      	cmp	r3, #10
 80076a0:	d002      	beq.n	80076a8 <RTC_DateUpdate+0x5c>
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b0c      	cmp	r3, #12
 80076a6:	d117      	bne.n	80076d8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b1e      	cmp	r3, #30
 80076ac:	d803      	bhi.n	80076b6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3301      	adds	r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80076b4:	e050      	b.n	8007758 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b0c      	cmp	r3, #12
 80076ba:	d005      	beq.n	80076c8 <RTC_DateUpdate+0x7c>
        {
          month++;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3301      	adds	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80076c2:	2301      	movs	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80076c6:	e047      	b.n	8007758 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80076c8:	2301      	movs	r3, #1
 80076ca:	613b      	str	r3, [r7, #16]
          day = 1U;
 80076cc:	2301      	movs	r3, #1
 80076ce:	60fb      	str	r3, [r7, #12]
          year++;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	3301      	adds	r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80076d6:	e03f      	b.n	8007758 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d008      	beq.n	80076f0 <RTC_DateUpdate+0xa4>
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b06      	cmp	r3, #6
 80076e2:	d005      	beq.n	80076f0 <RTC_DateUpdate+0xa4>
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b09      	cmp	r3, #9
 80076e8:	d002      	beq.n	80076f0 <RTC_DateUpdate+0xa4>
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	2b0b      	cmp	r3, #11
 80076ee:	d10c      	bne.n	800770a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b1d      	cmp	r3, #29
 80076f4:	d803      	bhi.n	80076fe <RTC_DateUpdate+0xb2>
      {
        day++;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80076fc:	e02c      	b.n	8007758 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3301      	adds	r3, #1
 8007702:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007704:	2301      	movs	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007708:	e026      	b.n	8007758 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d123      	bne.n	8007758 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b1b      	cmp	r3, #27
 8007714:	d803      	bhi.n	800771e <RTC_DateUpdate+0xd2>
      {
        day++;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e01c      	b.n	8007758 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b1c      	cmp	r3, #28
 8007722:	d111      	bne.n	8007748 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	b29b      	uxth	r3, r3
 8007728:	4618      	mov	r0, r3
 800772a:	f000 f839 	bl	80077a0 <RTC_IsLeapYear>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <RTC_DateUpdate+0xf0>
        {
          day++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e00d      	b.n	8007758 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	3301      	adds	r3, #1
 8007740:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007742:	2301      	movs	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	e007      	b.n	8007758 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b1d      	cmp	r3, #29
 800774c:	d104      	bne.n	8007758 <RTC_DateUpdate+0x10c>
      {
        month++;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3301      	adds	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007754:	2301      	movs	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3301      	adds	r3, #1
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d38b      	bcc.n	800767e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	b2da      	uxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	b2da      	uxtb	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	4619      	mov	r1, r3
 8007788:	6978      	ldr	r0, [r7, #20]
 800778a:	f000 f83b 	bl	8007804 <RTC_WeekDayNum>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	731a      	strb	r2, [r3, #12]
}
 8007796:	bf00      	nop
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e01d      	b.n	80077f6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	4a10      	ldr	r2, [pc, #64]	; (8007800 <RTC_IsLeapYear+0x60>)
 80077be:	fba2 1203 	umull	r1, r2, r2, r3
 80077c2:	0952      	lsrs	r2, r2, #5
 80077c4:	2164      	movs	r1, #100	; 0x64
 80077c6:	fb01 f202 	mul.w	r2, r1, r2
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e00f      	b.n	80077f6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <RTC_IsLeapYear+0x60>)
 80077da:	fba2 1203 	umull	r1, r2, r2, r3
 80077de:	09d2      	lsrs	r2, r2, #7
 80077e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077e4:	fb01 f202 	mul.w	r2, r1, r2
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80077f4:	2300      	movs	r3, #0
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr
 8007800:	51eb851f 	.word	0x51eb851f

08007804 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
 8007810:	4613      	mov	r3, r2
 8007812:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	60bb      	str	r3, [r7, #8]
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007822:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d82d      	bhi.n	8007886 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	4613      	mov	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	4413      	add	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	4a2c      	ldr	r2, [pc, #176]	; (80078e8 <RTC_WeekDayNum+0xe4>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	085a      	lsrs	r2, r3, #1
 800783e:	78bb      	ldrb	r3, [r7, #2]
 8007840:	441a      	add	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	441a      	add	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	3b01      	subs	r3, #1
 800784a:	089b      	lsrs	r3, r3, #2
 800784c:	441a      	add	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3b01      	subs	r3, #1
 8007852:	4926      	ldr	r1, [pc, #152]	; (80078ec <RTC_WeekDayNum+0xe8>)
 8007854:	fba1 1303 	umull	r1, r3, r1, r3
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	3b01      	subs	r3, #1
 8007860:	4922      	ldr	r1, [pc, #136]	; (80078ec <RTC_WeekDayNum+0xe8>)
 8007862:	fba1 1303 	umull	r1, r3, r1, r3
 8007866:	09db      	lsrs	r3, r3, #7
 8007868:	4413      	add	r3, r2
 800786a:	1d1a      	adds	r2, r3, #4
 800786c:	4b20      	ldr	r3, [pc, #128]	; (80078f0 <RTC_WeekDayNum+0xec>)
 800786e:	fba3 1302 	umull	r1, r3, r3, r2
 8007872:	1ad1      	subs	r1, r2, r3
 8007874:	0849      	lsrs	r1, r1, #1
 8007876:	440b      	add	r3, r1
 8007878:	0899      	lsrs	r1, r3, #2
 800787a:	460b      	mov	r3, r1
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	1a5b      	subs	r3, r3, r1
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e029      	b.n	80078da <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	4613      	mov	r3, r2
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4413      	add	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <RTC_WeekDayNum+0xe4>)
 8007894:	fba2 2303 	umull	r2, r3, r2, r3
 8007898:	085a      	lsrs	r2, r3, #1
 800789a:	78bb      	ldrb	r3, [r7, #2]
 800789c:	441a      	add	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	441a      	add	r2, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	089b      	lsrs	r3, r3, #2
 80078a6:	441a      	add	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4910      	ldr	r1, [pc, #64]	; (80078ec <RTC_WeekDayNum+0xe8>)
 80078ac:	fba1 1303 	umull	r1, r3, r1, r3
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	490d      	ldr	r1, [pc, #52]	; (80078ec <RTC_WeekDayNum+0xe8>)
 80078b8:	fba1 1303 	umull	r1, r3, r1, r3
 80078bc:	09db      	lsrs	r3, r3, #7
 80078be:	4413      	add	r3, r2
 80078c0:	1c9a      	adds	r2, r3, #2
 80078c2:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <RTC_WeekDayNum+0xec>)
 80078c4:	fba3 1302 	umull	r1, r3, r3, r2
 80078c8:	1ad1      	subs	r1, r2, r3
 80078ca:	0849      	lsrs	r1, r1, #1
 80078cc:	440b      	add	r3, r1
 80078ce:	0899      	lsrs	r1, r3, #2
 80078d0:	460b      	mov	r3, r1
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	1a5b      	subs	r3, r3, r1
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	b2db      	uxtb	r3, r3
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr
 80078e8:	38e38e39 	.word	0x38e38e39
 80078ec:	51eb851f 	.word	0x51eb851f
 80078f0:	24924925 	.word	0x24924925

080078f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e076      	b.n	80079f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	d108      	bne.n	8007920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007916:	d009      	beq.n	800792c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	61da      	str	r2, [r3, #28]
 800791e:	e005      	b.n	800792c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fd f878 	bl	8004a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b0:	ea42 0103 	orr.w	r1, r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	0c1a      	lsrs	r2, r3, #16
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f002 0204 	and.w	r2, r2, #4
 80079d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_SPI_Transmit+0x22>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e126      	b.n	8007c6c <HAL_SPI_Transmit+0x270>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a26:	f7fd fa61 	bl	8004eec <HAL_GetTick>
 8007a2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a2c:	88fb      	ldrh	r3, [r7, #6]
 8007a2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d002      	beq.n	8007a42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a40:	e10b      	b.n	8007c5a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_SPI_Transmit+0x52>
 8007a48:	88fb      	ldrh	r3, [r7, #6]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d102      	bne.n	8007a54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a52:	e102      	b.n	8007c5a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2203      	movs	r2, #3
 8007a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	88fa      	ldrh	r2, [r7, #6]
 8007a6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	88fa      	ldrh	r2, [r7, #6]
 8007a72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a9a:	d10f      	bne.n	8007abc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d007      	beq.n	8007ada <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae2:	d14b      	bne.n	8007b7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <HAL_SPI_Transmit+0xf6>
 8007aec:	8afb      	ldrh	r3, [r7, #22]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d13e      	bne.n	8007b70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	881a      	ldrh	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b16:	e02b      	b.n	8007b70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d112      	bne.n	8007b4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	881a      	ldrh	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	1c9a      	adds	r2, r3, #2
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b4a:	e011      	b.n	8007b70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b4c:	f7fd f9ce 	bl	8004eec <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d803      	bhi.n	8007b64 <HAL_SPI_Transmit+0x168>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b62:	d102      	bne.n	8007b6a <HAL_SPI_Transmit+0x16e>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b6e:	e074      	b.n	8007c5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1ce      	bne.n	8007b18 <HAL_SPI_Transmit+0x11c>
 8007b7a:	e04c      	b.n	8007c16 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_SPI_Transmit+0x18e>
 8007b84:	8afb      	ldrh	r3, [r7, #22]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d140      	bne.n	8007c0c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	330c      	adds	r3, #12
 8007b94:	7812      	ldrb	r2, [r2, #0]
 8007b96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007bb0:	e02c      	b.n	8007c0c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d113      	bne.n	8007be8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	7812      	ldrb	r2, [r2, #0]
 8007bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007be6:	e011      	b.n	8007c0c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007be8:	f7fd f980 	bl	8004eec <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d803      	bhi.n	8007c00 <HAL_SPI_Transmit+0x204>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d102      	bne.n	8007c06 <HAL_SPI_Transmit+0x20a>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c0a:	e026      	b.n	8007c5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1cd      	bne.n	8007bb2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 fa54 	bl	80080c8 <SPI_EndRxTxTransaction>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e000      	b.n	8007c5a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007c58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3720      	adds	r7, #32
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08c      	sub	sp, #48	; 0x30
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c82:	2301      	movs	r3, #1
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <HAL_SPI_TransmitReceive+0x26>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e18a      	b.n	8007fb0 <HAL_SPI_TransmitReceive+0x33c>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ca2:	f7fd f923 	bl	8004eec <HAL_GetTick>
 8007ca6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007cb8:	887b      	ldrh	r3, [r7, #2]
 8007cba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d00f      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x70>
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cca:	d107      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d103      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x68>
 8007cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d003      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ce2:	e15b      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <HAL_SPI_TransmitReceive+0x82>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <HAL_SPI_TransmitReceive+0x82>
 8007cf0:	887b      	ldrh	r3, [r7, #2]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d103      	bne.n	8007cfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007cfc:	e14e      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d003      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	887a      	ldrh	r2, [r7, #2]
 8007d28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	887a      	ldrh	r2, [r7, #2]
 8007d34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	887a      	ldrh	r2, [r7, #2]
 8007d3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d007      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d6e:	d178      	bne.n	8007e62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <HAL_SPI_TransmitReceive+0x10a>
 8007d78:	8b7b      	ldrh	r3, [r7, #26]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d166      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	881a      	ldrh	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	1c9a      	adds	r2, r3, #2
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007da2:	e053      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d11b      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x176>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d016      	beq.n	8007dea <HAL_SPI_TransmitReceive+0x176>
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d113      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	881a      	ldrh	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	1c9a      	adds	r2, r3, #2
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d119      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x1b8>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d014      	beq.n	8007e2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	b292      	uxth	r2, r2
 8007e0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e14:	1c9a      	adds	r2, r3, #2
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e2c:	f7fd f85e 	bl	8004eec <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d807      	bhi.n	8007e4c <HAL_SPI_TransmitReceive+0x1d8>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d003      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e4a:	e0a7      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1a6      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x130>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1a1      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x130>
 8007e60:	e07c      	b.n	8007f5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <HAL_SPI_TransmitReceive+0x1fc>
 8007e6a:	8b7b      	ldrh	r3, [r7, #26]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d16b      	bne.n	8007f48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e96:	e057      	b.n	8007f48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d11c      	bne.n	8007ee0 <HAL_SPI_TransmitReceive+0x26c>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d017      	beq.n	8007ee0 <HAL_SPI_TransmitReceive+0x26c>
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d114      	bne.n	8007ee0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	7812      	ldrb	r2, [r2, #0]
 8007ec2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d119      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x2ae>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d014      	beq.n	8007f22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f22:	f7fc ffe3 	bl	8004eec <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d803      	bhi.n	8007f3a <HAL_SPI_TransmitReceive+0x2c6>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d102      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x2cc>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d103      	bne.n	8007f48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f46:	e029      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1a2      	bne.n	8007e98 <HAL_SPI_TransmitReceive+0x224>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d19d      	bne.n	8007e98 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f8b1 	bl	80080c8 <SPI_EndRxTxTransaction>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f78:	e010      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	e000      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007f9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3730      	adds	r7, #48	; 0x30
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fc8:	f7fc ff90 	bl	8004eec <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	1a9b      	subs	r3, r3, r2
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fd8:	f7fc ff88 	bl	8004eec <HAL_GetTick>
 8007fdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fde:	4b39      	ldr	r3, [pc, #228]	; (80080c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	015b      	lsls	r3, r3, #5
 8007fe4:	0d1b      	lsrs	r3, r3, #20
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	fb02 f303 	mul.w	r3, r2, r3
 8007fec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fee:	e054      	b.n	800809a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff6:	d050      	beq.n	800809a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ff8:	f7fc ff78 	bl	8004eec <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	429a      	cmp	r2, r3
 8008006:	d902      	bls.n	800800e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d13d      	bne.n	800808a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800801c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008026:	d111      	bne.n	800804c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008030:	d004      	beq.n	800803c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803a:	d107      	bne.n	800804c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800804a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008054:	d10f      	bne.n	8008076 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008074:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e017      	b.n	80080ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	3b01      	subs	r3, #1
 8008098:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4013      	ands	r3, r2
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	bf0c      	ite	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	2300      	movne	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d19b      	bne.n	8007ff0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3720      	adds	r7, #32
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000004 	.word	0x20000004

080080c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	2180      	movs	r1, #128	; 0x80
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff ff6a 	bl	8007fb8 <SPI_WaitFlagStateUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d007      	beq.n	80080fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ee:	f043 0220 	orr.w	r2, r3, #32
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e000      	b.n	80080fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e041      	b.n	800819a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fc fcd0 	bl	8004ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f000 fa70 	bl	8008628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d001      	beq.n	80081bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e03a      	b.n	8008232 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a18      	ldr	r2, [pc, #96]	; (800823c <HAL_TIM_Base_Start_IT+0x98>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00e      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x58>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e6:	d009      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x58>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a14      	ldr	r2, [pc, #80]	; (8008240 <HAL_TIM_Base_Start_IT+0x9c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x58>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a13      	ldr	r2, [pc, #76]	; (8008244 <HAL_TIM_Base_Start_IT+0xa0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d111      	bne.n	8008220 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b06      	cmp	r3, #6
 800820c:	d010      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0201 	orr.w	r2, r2, #1
 800821c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821e:	e007      	b.n	8008230 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr
 800823c:	40012c00 	.word	0x40012c00
 8008240:	40000400 	.word	0x40000400
 8008244:	40000800 	.word	0x40000800

08008248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b02      	cmp	r3, #2
 800825c:	d122      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b02      	cmp	r3, #2
 800826a:	d11b      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0202 	mvn.w	r2, #2
 8008274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f9b1 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 8008290:	e005      	b.n	800829e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f9a4 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9b3 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d122      	bne.n	80082f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d11b      	bne.n	80082f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0204 	mvn.w	r2, #4
 80082c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2202      	movs	r2, #2
 80082ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f987 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 80082e4:	e005      	b.n	80082f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f97a 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f989 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b08      	cmp	r3, #8
 8008304:	d122      	bne.n	800834c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	2b08      	cmp	r3, #8
 8008312:	d11b      	bne.n	800834c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0208 	mvn.w	r2, #8
 800831c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f95d 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 8008338:	e005      	b.n	8008346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f950 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f95f 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b10      	cmp	r3, #16
 8008358:	d122      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b10      	cmp	r3, #16
 8008366:	d11b      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0210 	mvn.w	r2, #16
 8008370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2208      	movs	r2, #8
 8008376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f933 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 800838c:	e005      	b.n	800839a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f926 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f935 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d10e      	bne.n	80083cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d107      	bne.n	80083cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0201 	mvn.w	r2, #1
 80083c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fb ffb6 	bl	8004338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d6:	2b80      	cmp	r3, #128	; 0x80
 80083d8:	d10e      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e4:	2b80      	cmp	r3, #128	; 0x80
 80083e6:	d107      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa77 	bl	80088e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b40      	cmp	r3, #64	; 0x40
 8008404:	d10e      	bne.n	8008424 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	d107      	bne.n	8008424 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800841c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8f9 	bl	8008616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b20      	cmp	r3, #32
 8008430:	d10e      	bne.n	8008450 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b20      	cmp	r3, #32
 800843e:	d107      	bne.n	8008450 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0220 	mvn.w	r2, #32
 8008448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa42 	bl	80088d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_TIM_ConfigClockSource+0x18>
 800846c:	2302      	movs	r3, #2
 800846e:	e0b3      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x180>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800848e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a8:	d03e      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0xd0>
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ae:	f200 8087 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b6:	f000 8085 	beq.w	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084be:	d87f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084c0:	2b70      	cmp	r3, #112	; 0x70
 80084c2:	d01a      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0xa2>
 80084c4:	2b70      	cmp	r3, #112	; 0x70
 80084c6:	d87b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084c8:	2b60      	cmp	r3, #96	; 0x60
 80084ca:	d050      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x116>
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	d877      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084d0:	2b50      	cmp	r3, #80	; 0x50
 80084d2:	d03c      	beq.n	800854e <HAL_TIM_ConfigClockSource+0xf6>
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	d873      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d058      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x136>
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d86f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084e0:	2b30      	cmp	r3, #48	; 0x30
 80084e2:	d064      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d86b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d060      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d867      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05c      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d05a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084f8:	e062      	b.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6899      	ldr	r1, [r3, #8]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f000 f966 	bl	80087da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800851c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
      break;
 8008526:	e04e      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6899      	ldr	r1, [r3, #8]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f000 f94f 	bl	80087da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800854a:	609a      	str	r2, [r3, #8]
      break;
 800854c:	e03b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 f8c6 	bl	80086ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2150      	movs	r1, #80	; 0x50
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f91d 	bl	80087a6 <TIM_ITRx_SetConfig>
      break;
 800856c:	e02b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6859      	ldr	r1, [r3, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	461a      	mov	r2, r3
 800857c:	f000 f8e4 	bl	8008748 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2160      	movs	r1, #96	; 0x60
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f90d 	bl	80087a6 <TIM_ITRx_SetConfig>
      break;
 800858c:	e01b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6859      	ldr	r1, [r3, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	461a      	mov	r2, r3
 800859c:	f000 f8a6 	bl	80086ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2140      	movs	r1, #64	; 0x40
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f8fd 	bl	80087a6 <TIM_ITRx_SetConfig>
      break;
 80085ac:	e00b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 f8f4 	bl	80087a6 <TIM_ITRx_SetConfig>
        break;
 80085be:	e002      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085c0:	bf00      	nop
 80085c2:	e000      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a29      	ldr	r2, [pc, #164]	; (80086e0 <TIM_Base_SetConfig+0xb8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00b      	beq.n	8008658 <TIM_Base_SetConfig+0x30>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008646:	d007      	beq.n	8008658 <TIM_Base_SetConfig+0x30>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a26      	ldr	r2, [pc, #152]	; (80086e4 <TIM_Base_SetConfig+0xbc>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_Base_SetConfig+0x30>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <TIM_Base_SetConfig+0xc0>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d108      	bne.n	800866a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <TIM_Base_SetConfig+0xb8>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00b      	beq.n	800868a <TIM_Base_SetConfig+0x62>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008678:	d007      	beq.n	800868a <TIM_Base_SetConfig+0x62>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a19      	ldr	r2, [pc, #100]	; (80086e4 <TIM_Base_SetConfig+0xbc>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <TIM_Base_SetConfig+0x62>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <TIM_Base_SetConfig+0xc0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d108      	bne.n	800869c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a07      	ldr	r2, [pc, #28]	; (80086e0 <TIM_Base_SetConfig+0xb8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d103      	bne.n	80086d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	615a      	str	r2, [r3, #20]
}
 80086d6:	bf00      	nop
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr
 80086e0:	40012c00 	.word	0x40012c00
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800

080086ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	f023 0201 	bic.w	r2, r3, #1
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4313      	orrs	r3, r2
 8008720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f023 030a 	bic.w	r3, r3, #10
 8008728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	621a      	str	r2, [r3, #32]
}
 800873e:	bf00      	nop
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr

08008748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	f023 0210 	bic.w	r2, r3, #16
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008772:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	031b      	lsls	r3, r3, #12
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	621a      	str	r2, [r3, #32]
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr

080087a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b085      	sub	sp, #20
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	f043 0307 	orr.w	r3, r3, #7
 80087c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	609a      	str	r2, [r3, #8]
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr

080087da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087da:	b480      	push	{r7}
 80087dc:	b087      	sub	sp, #28
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
 80087e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	021a      	lsls	r2, r3, #8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	4313      	orrs	r3, r2
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	609a      	str	r2, [r3, #8]
}
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800882c:	2302      	movs	r3, #2
 800882e:	e046      	b.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a16      	ldr	r2, [pc, #88]	; (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00e      	beq.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887c:	d009      	beq.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a12      	ldr	r2, [pc, #72]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d004      	beq.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d10c      	bne.n	80088ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40000400 	.word	0x40000400
 80088d0:	40000800 	.word	0x40000800

080088d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bc80      	pop	{r7}
 80088e4:	4770      	bx	lr

080088e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e03f      	b.n	800898a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fc f8fc 	bl	8004b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2224      	movs	r2, #36	; 0x24
 8008928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800893a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc63 	bl	8009208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695a      	ldr	r2, [r3, #20]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b08a      	sub	sp, #40	; 0x28
 8008996:	af02      	add	r7, sp, #8
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	603b      	str	r3, [r7, #0]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d17c      	bne.n	8008aac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_UART_Transmit+0x2c>
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e075      	b.n	8008aae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Transmit+0x3e>
 80089cc:	2302      	movs	r3, #2
 80089ce:	e06e      	b.n	8008aae <HAL_UART_Transmit+0x11c>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2221      	movs	r2, #33	; 0x21
 80089e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80089e6:	f7fc fa81 	bl	8004eec <HAL_GetTick>
 80089ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a00:	d108      	bne.n	8008a14 <HAL_UART_Transmit+0x82>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e003      	b.n	8008a1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008a24:	e02a      	b.n	8008a7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2180      	movs	r1, #128	; 0x80
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fa71 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e036      	b.n	8008aae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	3302      	adds	r3, #2
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	e007      	b.n	8008a6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1cf      	bne.n	8008a26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2140      	movs	r1, #64	; 0x40
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 fa41 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e006      	b.n	8008aae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	e000      	b.n	8008aae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008aac:	2302      	movs	r3, #2
  }
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3720      	adds	r7, #32
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d166      	bne.n	8008ba0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <HAL_UART_Receive_DMA+0x26>
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e05f      	b.n	8008ba2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_UART_Receive_DMA+0x38>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e058      	b.n	8008ba2 <HAL_UART_Receive_DMA+0xea>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	88fa      	ldrh	r2, [r7, #6]
 8008b02:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2222      	movs	r2, #34	; 0x22
 8008b0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	4a25      	ldr	r2, [pc, #148]	; (8008bac <HAL_UART_Receive_DMA+0xf4>)
 8008b18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1e:	4a24      	ldr	r2, [pc, #144]	; (8008bb0 <HAL_UART_Receive_DMA+0xf8>)
 8008b20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b26:	4a23      	ldr	r2, [pc, #140]	; (8008bb4 <HAL_UART_Receive_DMA+0xfc>)
 8008b28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2e:	2200      	movs	r2, #0
 8008b30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8008b32:	f107 0308 	add.w	r3, r7, #8
 8008b36:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	f7fc fb65 	bl	8005218 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008b4e:	2300      	movs	r3, #0
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b7a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695a      	ldr	r2, [r3, #20]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b9a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e000      	b.n	8008ba2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008ba0:	2302      	movs	r3, #2
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	08008e01 	.word	0x08008e01
 8008bb0:	08008e69 	.word	0x08008e69
 8008bb4:	08008e85 	.word	0x08008e85

08008bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10d      	bne.n	8008c0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f003 0320 	and.w	r3, r3, #32
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <HAL_UART_IRQHandler+0x52>
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa7f 	bl	8009106 <UART_Receive_IT>
      return;
 8008c08:	e0d0      	b.n	8008dac <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 80b0 	beq.w	8008d72 <HAL_UART_IRQHandler+0x1ba>
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <HAL_UART_IRQHandler+0x70>
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 80a5 	beq.w	8008d72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <HAL_UART_IRQHandler+0x90>
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c40:	f043 0201 	orr.w	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <HAL_UART_IRQHandler+0xb0>
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c60:	f043 0202 	orr.w	r2, r3, #2
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <HAL_UART_IRQHandler+0xd0>
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c80:	f043 0204 	orr.w	r2, r3, #4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00f      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xfa>
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <HAL_UART_IRQHandler+0xee>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008caa:	f043 0208 	orr.w	r2, r3, #8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d077      	beq.n	8008daa <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x11c>
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa19 	bl	8009106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bf14      	ite	ne
 8008ce2:	2301      	movne	r3, #1
 8008ce4:	2300      	moveq	r3, #0
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d102      	bne.n	8008cfc <HAL_UART_IRQHandler+0x144>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d031      	beq.n	8008d60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f96a 	bl	8008fd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d023      	beq.n	8008d58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d013      	beq.n	8008d50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2c:	4a21      	ldr	r2, [pc, #132]	; (8008db4 <HAL_UART_IRQHandler+0x1fc>)
 8008d2e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fc facf 	bl	80052d8 <HAL_DMA_Abort_IT>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d016      	beq.n	8008d6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4e:	e00e      	b.n	8008d6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f84c 	bl	8008dee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d56:	e00a      	b.n	8008d6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f848 	bl	8008dee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5e:	e006      	b.n	8008d6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f844 	bl	8008dee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008d6c:	e01d      	b.n	8008daa <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6e:	bf00      	nop
    return;
 8008d70:	e01b      	b.n	8008daa <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <HAL_UART_IRQHandler+0x1d6>
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f956 	bl	8009038 <UART_Transmit_IT>
    return;
 8008d8c:	e00e      	b.n	8008dac <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <HAL_UART_IRQHandler+0x1f4>
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f997 	bl	80090d6 <UART_EndTransmit_IT>
    return;
 8008da8:	e000      	b.n	8008dac <HAL_UART_IRQHandler+0x1f4>
    return;
 8008daa:	bf00      	nop
  }
}
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	08009011 	.word	0x08009011

08008db8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr

08008ddc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr

08008dee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bc80      	pop	{r7}
 8008dfe:	4770      	bx	lr

08008e00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d11e      	bne.n	8008e5a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e30:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	695a      	ldr	r2, [r3, #20]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0201 	bic.w	r2, r2, #1
 8008e40:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	695a      	ldr	r2, [r3, #20]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e50:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff ffb5 	bl	8008dca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7ff ffb0 	bl	8008ddc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf14      	ite	ne
 8008ea4:	2301      	movne	r3, #1
 8008ea6:	2300      	moveq	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b21      	cmp	r3, #33	; 0x21
 8008eb6:	d108      	bne.n	8008eca <UART_DMAError+0x46>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008ec4:	68b8      	ldr	r0, [r7, #8]
 8008ec6:	f000 f871 	bl	8008fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf14      	ite	ne
 8008ed8:	2301      	movne	r3, #1
 8008eda:	2300      	moveq	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b22      	cmp	r3, #34	; 0x22
 8008eea:	d108      	bne.n	8008efe <UART_DMAError+0x7a>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d005      	beq.n	8008efe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ef8:	68b8      	ldr	r0, [r7, #8]
 8008efa:	f000 f86c 	bl	8008fd6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f02:	f043 0210 	orr.w	r2, r3, #16
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f0a:	68b8      	ldr	r0, [r7, #8]
 8008f0c:	f7ff ff6f 	bl	8008dee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f28:	e02c      	b.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d028      	beq.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d007      	beq.n	8008f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f38:	f7fb ffd8 	bl	8004eec <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d21d      	bcs.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695a      	ldr	r2, [r3, #20]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0201 	bic.w	r2, r2, #1
 8008f66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e00f      	b.n	8008fa4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	bf0c      	ite	eq
 8008f94:	2301      	moveq	r3, #1
 8008f96:	2300      	movne	r3, #0
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d0c3      	beq.n	8008f2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008fc2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bc80      	pop	{r7}
 8008fd4:	4770      	bx	lr

08008fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	695a      	ldr	r2, [r3, #20]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f022 0201 	bic.w	r2, r2, #1
 8008ffc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff fedf 	bl	8008dee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b21      	cmp	r3, #33	; 0x21
 800904a:	d13e      	bne.n	80090ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009054:	d114      	bne.n	8009080 <UART_Transmit_IT+0x48>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d110      	bne.n	8009080 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009072:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a1b      	ldr	r3, [r3, #32]
 8009078:	1c9a      	adds	r2, r3, #2
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	621a      	str	r2, [r3, #32]
 800907e:	e008      	b.n	8009092 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	1c59      	adds	r1, r3, #1
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6211      	str	r1, [r2, #32]
 800908a:	781a      	ldrb	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009096:	b29b      	uxth	r3, r3
 8009098:	3b01      	subs	r3, #1
 800909a:	b29b      	uxth	r3, r3
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	4619      	mov	r1, r3
 80090a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10f      	bne.n	80090c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e000      	b.n	80090cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090ca:	2302      	movs	r3, #2
  }
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bc80      	pop	{r7}
 80090d4:	4770      	bx	lr

080090d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fe5e 	bl	8008db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b22      	cmp	r3, #34	; 0x22
 8009118:	d170      	bne.n	80091fc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009122:	d117      	bne.n	8009154 <UART_Receive_IT+0x4e>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d113      	bne.n	8009154 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800912c:	2300      	movs	r3, #0
 800912e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009142:	b29a      	uxth	r2, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	1c9a      	adds	r2, r3, #2
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	629a      	str	r2, [r3, #40]	; 0x28
 8009152:	e026      	b.n	80091a2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800915a:	2300      	movs	r3, #0
 800915c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009166:	d007      	beq.n	8009178 <UART_Receive_IT+0x72>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <UART_Receive_IT+0x80>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b2da      	uxtb	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	701a      	strb	r2, [r3, #0]
 8009184:	e008      	b.n	8009198 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009192:	b2da      	uxtb	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3b01      	subs	r3, #1
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	4619      	mov	r1, r3
 80091b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d120      	bne.n	80091f8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0220 	bic.w	r2, r2, #32
 80091c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	695a      	ldr	r2, [r3, #20]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f022 0201 	bic.w	r2, r2, #1
 80091e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff fdeb 	bl	8008dca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e002      	b.n	80091fe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e000      	b.n	80091fe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80091fc:	2302      	movs	r3, #2
  }
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	431a      	orrs	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	4313      	orrs	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009242:	f023 030c 	bic.w	r3, r3, #12
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	430b      	orrs	r3, r1
 800924e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699a      	ldr	r2, [r3, #24]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a2c      	ldr	r2, [pc, #176]	; (800931c <UART_SetConfig+0x114>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d103      	bne.n	8009278 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009270:	f7fd fbe6 	bl	8006a40 <HAL_RCC_GetPCLK2Freq>
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	e002      	b.n	800927e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009278:	f7fd fbce 	bl	8006a18 <HAL_RCC_GetPCLK1Freq>
 800927c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009a      	lsls	r2, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	fbb2 f3f3 	udiv	r3, r2, r3
 8009294:	4a22      	ldr	r2, [pc, #136]	; (8009320 <UART_SetConfig+0x118>)
 8009296:	fba2 2303 	umull	r2, r3, r2, r3
 800929a:	095b      	lsrs	r3, r3, #5
 800929c:	0119      	lsls	r1, r3, #4
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	009a      	lsls	r2, r3, #2
 80092a8:	441a      	add	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80092b4:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <UART_SetConfig+0x118>)
 80092b6:	fba3 0302 	umull	r0, r3, r3, r2
 80092ba:	095b      	lsrs	r3, r3, #5
 80092bc:	2064      	movs	r0, #100	; 0x64
 80092be:	fb00 f303 	mul.w	r3, r0, r3
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	011b      	lsls	r3, r3, #4
 80092c6:	3332      	adds	r3, #50	; 0x32
 80092c8:	4a15      	ldr	r2, [pc, #84]	; (8009320 <UART_SetConfig+0x118>)
 80092ca:	fba2 2303 	umull	r2, r3, r2, r3
 80092ce:	095b      	lsrs	r3, r3, #5
 80092d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092d4:	4419      	add	r1, r3
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4613      	mov	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	009a      	lsls	r2, r3, #2
 80092e0:	441a      	add	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80092ec:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <UART_SetConfig+0x118>)
 80092ee:	fba3 0302 	umull	r0, r3, r3, r2
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	2064      	movs	r0, #100	; 0x64
 80092f6:	fb00 f303 	mul.w	r3, r0, r3
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	3332      	adds	r3, #50	; 0x32
 8009300:	4a07      	ldr	r2, [pc, #28]	; (8009320 <UART_SetConfig+0x118>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	f003 020f 	and.w	r2, r3, #15
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	440a      	add	r2, r1
 8009312:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	40013800 	.word	0x40013800
 8009320:	51eb851f 	.word	0x51eb851f

08009324 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009328:	4904      	ldr	r1, [pc, #16]	; (800933c <MX_FATFS_Init+0x18>)
 800932a:	4805      	ldr	r0, [pc, #20]	; (8009340 <MX_FATFS_Init+0x1c>)
 800932c:	f004 f8ee 	bl	800d50c <FATFS_LinkDriver>
 8009330:	4603      	mov	r3, r0
 8009332:	461a      	mov	r2, r3
 8009334:	4b03      	ldr	r3, [pc, #12]	; (8009344 <MX_FATFS_Init+0x20>)
 8009336:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009338:	bf00      	nop
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000928 	.word	0x20000928
 8009340:	20000010 	.word	0x20000010
 8009344:	20000924 	.word	0x20000924

08009348 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800934c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800934e:	4618      	mov	r0, r3
 8009350:	46bd      	mov	sp, r7
 8009352:	bc80      	pop	{r7}
 8009354:	4770      	bx	lr

08009356 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	4603      	mov	r3, r0
 800935e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	4618      	mov	r0, r3
 8009364:	f7fa fcce 	bl	8003d04 <SD_disk_initialize>
 8009368:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	4603      	mov	r3, r0
 800937a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	4618      	mov	r0, r3
 8009380:	f7fa fdac 	bl	8003edc <SD_disk_status>
 8009384:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800939e:	7bf8      	ldrb	r0, [r7, #15]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	f7fa fdad 	bl	8003f04 <SD_disk_read>
 80093aa:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80093c4:	7bf8      	ldrb	r0, [r7, #15]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	f7fa fe04 	bl	8003fd8 <SD_disk_write>
 80093d0:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	4603      	mov	r3, r0
 80093e2:	603a      	str	r2, [r7, #0]
 80093e4:	71fb      	strb	r3, [r7, #7]
 80093e6:	460b      	mov	r3, r1
 80093e8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80093ea:	79b9      	ldrb	r1, [r7, #6]
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fa fe75 	bl	80040e0 <SD_disk_ioctl>
 80093f6:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	4a08      	ldr	r2, [pc, #32]	; (8009430 <disk_status+0x30>)
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	79fa      	ldrb	r2, [r7, #7]
 8009418:	4905      	ldr	r1, [pc, #20]	; (8009430 <disk_status+0x30>)
 800941a:	440a      	add	r2, r1
 800941c:	7a12      	ldrb	r2, [r2, #8]
 800941e:	4610      	mov	r0, r2
 8009420:	4798      	blx	r3
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000b4c 	.word	0x20000b4c

08009434 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	4a0d      	ldr	r2, [pc, #52]	; (800947c <disk_initialize+0x48>)
 8009446:	5cd3      	ldrb	r3, [r2, r3]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d111      	bne.n	8009470 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	4a0b      	ldr	r2, [pc, #44]	; (800947c <disk_initialize+0x48>)
 8009450:	2101      	movs	r1, #1
 8009452:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	4a09      	ldr	r2, [pc, #36]	; (800947c <disk_initialize+0x48>)
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	79fa      	ldrb	r2, [r7, #7]
 8009462:	4906      	ldr	r1, [pc, #24]	; (800947c <disk_initialize+0x48>)
 8009464:	440a      	add	r2, r1
 8009466:	7a12      	ldrb	r2, [r2, #8]
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000b4c 	.word	0x20000b4c

08009480 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	607a      	str	r2, [r7, #4]
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <disk_read+0x3c>)
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	689c      	ldr	r4, [r3, #8]
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	4a07      	ldr	r2, [pc, #28]	; (80094bc <disk_read+0x3c>)
 80094a0:	4413      	add	r3, r2
 80094a2:	7a18      	ldrb	r0, [r3, #8]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	47a0      	blx	r4
 80094ac:	4603      	mov	r3, r0
 80094ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd90      	pop	{r4, r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000b4c 	.word	0x20000b4c

080094c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80094c0:	b590      	push	{r4, r7, lr}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	4a0a      	ldr	r2, [pc, #40]	; (80094fc <disk_write+0x3c>)
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	68dc      	ldr	r4, [r3, #12]
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	4a07      	ldr	r2, [pc, #28]	; (80094fc <disk_write+0x3c>)
 80094e0:	4413      	add	r3, r2
 80094e2:	7a18      	ldrb	r0, [r3, #8]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	47a0      	blx	r4
 80094ec:	4603      	mov	r3, r0
 80094ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd90      	pop	{r4, r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20000b4c 	.word	0x20000b4c

08009500 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	603a      	str	r2, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
 800950c:	460b      	mov	r3, r1
 800950e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	4a09      	ldr	r2, [pc, #36]	; (8009538 <disk_ioctl+0x38>)
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	79fa      	ldrb	r2, [r7, #7]
 800951e:	4906      	ldr	r1, [pc, #24]	; (8009538 <disk_ioctl+0x38>)
 8009520:	440a      	add	r2, r1
 8009522:	7a10      	ldrb	r0, [r2, #8]
 8009524:	79b9      	ldrb	r1, [r7, #6]
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	4798      	blx	r3
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]
  return res;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20000b4c 	.word	0x20000b4c

0800953c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009550:	e007      	b.n	8009562 <mem_cpy+0x26>
		*d++ = *s++;
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	1c53      	adds	r3, r2, #1
 8009556:	613b      	str	r3, [r7, #16]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	1c59      	adds	r1, r3, #1
 800955c:	6179      	str	r1, [r7, #20]
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	1e5a      	subs	r2, r3, #1
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f2      	bne.n	8009552 <mem_cpy+0x16>
}
 800956c:	bf00      	nop
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	bc80      	pop	{r7}
 8009576:	4770      	bx	lr

08009578 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009588:	e005      	b.n	8009596 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	617a      	str	r2, [r7, #20]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	1e5a      	subs	r2, r3, #1
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1f4      	bne.n	800958a <mem_set+0x12>
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr

080095ac <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80095ac:	b480      	push	{r7}
 80095ae:	b089      	sub	sp, #36	; 0x24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	61fb      	str	r3, [r7, #28]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80095c4:	bf00      	nop
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00d      	beq.n	80095ec <mem_cmp+0x40>
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	61fa      	str	r2, [r7, #28]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	4619      	mov	r1, r3
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	61ba      	str	r2, [r7, #24]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	1acb      	subs	r3, r1, r3
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0ec      	beq.n	80095c6 <mem_cmp+0x1a>
	return r;
 80095ec:	697b      	ldr	r3, [r7, #20]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3724      	adds	r7, #36	; 0x24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr

080095f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009602:	e002      	b.n	800960a <chk_chr+0x12>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3301      	adds	r3, #1
 8009608:	607b      	str	r3, [r7, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d005      	beq.n	800961e <chk_chr+0x26>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	4293      	cmp	r3, r2
 800961c:	d1f2      	bne.n	8009604 <chk_chr+0xc>
	return *str;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	781b      	ldrb	r3, [r3, #0]
}
 8009622:	4618      	mov	r0, r3
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	bc80      	pop	{r7}
 800962a:	4770      	bx	lr

0800962c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009636:	2300      	movs	r3, #0
 8009638:	60bb      	str	r3, [r7, #8]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	e03b      	b.n	80096b8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8009640:	4931      	ldr	r1, [pc, #196]	; (8009708 <chk_lock+0xdc>)
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	4613      	mov	r3, r2
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d02c      	beq.n	80096ae <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009654:	492c      	ldr	r1, [pc, #176]	; (8009708 <chk_lock+0xdc>)
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	4613      	mov	r3, r2
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d120      	bne.n	80096b2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8009670:	4925      	ldr	r1, [pc, #148]	; (8009708 <chk_lock+0xdc>)
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4613      	mov	r3, r2
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	3304      	adds	r3, #4
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009688:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800968a:	429a      	cmp	r2, r3
 800968c:	d111      	bne.n	80096b2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800968e:	491e      	ldr	r1, [pc, #120]	; (8009708 <chk_lock+0xdc>)
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4613      	mov	r3, r2
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	3308      	adds	r3, #8
 800969e:	881a      	ldrh	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d102      	bne.n	80096b2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80096ac:	e007      	b.n	80096be <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80096ae:	2301      	movs	r3, #1
 80096b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3301      	adds	r3, #1
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d9c0      	bls.n	8009640 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d109      	bne.n	80096d8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <chk_lock+0xa4>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d101      	bne.n	80096d4 <chk_lock+0xa8>
 80096d0:	2300      	movs	r3, #0
 80096d2:	e013      	b.n	80096fc <chk_lock+0xd0>
 80096d4:	2312      	movs	r3, #18
 80096d6:	e011      	b.n	80096fc <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10b      	bne.n	80096f6 <chk_lock+0xca>
 80096de:	490a      	ldr	r1, [pc, #40]	; (8009708 <chk_lock+0xdc>)
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4613      	mov	r3, r2
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	330a      	adds	r3, #10
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096f4:	d101      	bne.n	80096fa <chk_lock+0xce>
 80096f6:	2310      	movs	r3, #16
 80096f8:	e000      	b.n	80096fc <chk_lock+0xd0>
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	20000934 	.word	0x20000934

0800970c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009712:	2300      	movs	r3, #0
 8009714:	607b      	str	r3, [r7, #4]
 8009716:	e002      	b.n	800971e <enq_lock+0x12>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3301      	adds	r3, #1
 800971c:	607b      	str	r3, [r7, #4]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d809      	bhi.n	8009738 <enq_lock+0x2c>
 8009724:	490a      	ldr	r1, [pc, #40]	; (8009750 <enq_lock+0x44>)
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1ef      	bne.n	8009718 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b02      	cmp	r3, #2
 800973c:	bf14      	ite	ne
 800973e:	2301      	movne	r3, #1
 8009740:	2300      	moveq	r3, #0
 8009742:	b2db      	uxtb	r3, r3
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	bc80      	pop	{r7}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000934 	.word	0x20000934

08009754 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e02e      	b.n	80097c2 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8009764:	4958      	ldr	r1, [pc, #352]	; (80098c8 <inc_lock+0x174>)
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	4613      	mov	r3, r2
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	4413      	add	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	440b      	add	r3, r1
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d11d      	bne.n	80097bc <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8009780:	4951      	ldr	r1, [pc, #324]	; (80098c8 <inc_lock+0x174>)
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4613      	mov	r3, r2
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	4413      	add	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	440b      	add	r3, r1
 800978e:	3304      	adds	r3, #4
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009798:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800979a:	429a      	cmp	r2, r3
 800979c:	d10e      	bne.n	80097bc <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800979e:	494a      	ldr	r1, [pc, #296]	; (80098c8 <inc_lock+0x174>)
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4613      	mov	r3, r2
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	3308      	adds	r3, #8
 80097ae:	881a      	ldrh	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097b6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d006      	beq.n	80097ca <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3301      	adds	r3, #1
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d9cd      	bls.n	8009764 <inc_lock+0x10>
 80097c8:	e000      	b.n	80097cc <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80097ca:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d148      	bne.n	8009864 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	e002      	b.n	80097de <inc_lock+0x8a>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d809      	bhi.n	80097f8 <inc_lock+0xa4>
 80097e4:	4938      	ldr	r1, [pc, #224]	; (80098c8 <inc_lock+0x174>)
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	4613      	mov	r3, r2
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1ef      	bne.n	80097d8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d101      	bne.n	8009802 <inc_lock+0xae>
 80097fe:	2300      	movs	r3, #0
 8009800:	e05d      	b.n	80098be <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009808:	6819      	ldr	r1, [r3, #0]
 800980a:	482f      	ldr	r0, [pc, #188]	; (80098c8 <inc_lock+0x174>)
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4613      	mov	r3, r2
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	4413      	add	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4403      	add	r3, r0
 8009818:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009820:	6899      	ldr	r1, [r3, #8]
 8009822:	4829      	ldr	r0, [pc, #164]	; (80098c8 <inc_lock+0x174>)
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4613      	mov	r3, r2
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4403      	add	r3, r0
 8009830:	3304      	adds	r3, #4
 8009832:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983a:	88d8      	ldrh	r0, [r3, #6]
 800983c:	4922      	ldr	r1, [pc, #136]	; (80098c8 <inc_lock+0x174>)
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4613      	mov	r3, r2
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	3308      	adds	r3, #8
 800984c:	4602      	mov	r2, r0
 800984e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009850:	491d      	ldr	r1, [pc, #116]	; (80098c8 <inc_lock+0x174>)
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	4613      	mov	r3, r2
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	330a      	adds	r3, #10
 8009860:	2200      	movs	r2, #0
 8009862:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00c      	beq.n	8009884 <inc_lock+0x130>
 800986a:	4917      	ldr	r1, [pc, #92]	; (80098c8 <inc_lock+0x174>)
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4613      	mov	r3, r2
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	330a      	adds	r3, #10
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <inc_lock+0x130>
 8009880:	2300      	movs	r3, #0
 8009882:	e01c      	b.n	80098be <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <inc_lock+0x14e>
 800988a:	490f      	ldr	r1, [pc, #60]	; (80098c8 <inc_lock+0x174>)
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4613      	mov	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4413      	add	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	440b      	add	r3, r1
 8009898:	330a      	adds	r3, #10
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	3301      	adds	r3, #1
 800989e:	b299      	uxth	r1, r3
 80098a0:	e001      	b.n	80098a6 <inc_lock+0x152>
 80098a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80098a6:	4808      	ldr	r0, [pc, #32]	; (80098c8 <inc_lock+0x174>)
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4613      	mov	r3, r2
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4403      	add	r3, r0
 80098b4:	330a      	adds	r3, #10
 80098b6:	460a      	mov	r2, r1
 80098b8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3301      	adds	r3, #1
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bc80      	pop	{r7}
 80098c6:	4770      	bx	lr
 80098c8:	20000934 	.word	0x20000934

080098cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	607b      	str	r3, [r7, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d82e      	bhi.n	800993e <dec_lock+0x72>
		n = Files[i].ctr;
 80098e0:	491b      	ldr	r1, [pc, #108]	; (8009950 <dec_lock+0x84>)
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	330a      	adds	r3, #10
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80098f4:	89fb      	ldrh	r3, [r7, #14]
 80098f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098fa:	d101      	bne.n	8009900 <dec_lock+0x34>
 80098fc:	2300      	movs	r3, #0
 80098fe:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009900:	89fb      	ldrh	r3, [r7, #14]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <dec_lock+0x40>
 8009906:	89fb      	ldrh	r3, [r7, #14]
 8009908:	3b01      	subs	r3, #1
 800990a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800990c:	4910      	ldr	r1, [pc, #64]	; (8009950 <dec_lock+0x84>)
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	4613      	mov	r3, r2
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	330a      	adds	r3, #10
 800991c:	89fa      	ldrh	r2, [r7, #14]
 800991e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d108      	bne.n	8009938 <dec_lock+0x6c>
 8009926:	490a      	ldr	r1, [pc, #40]	; (8009950 <dec_lock+0x84>)
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	4613      	mov	r3, r2
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4413      	add	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	440b      	add	r3, r1
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	737b      	strb	r3, [r7, #13]
 800993c:	e001      	b.n	8009942 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800993e:	2302      	movs	r3, #2
 8009940:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009942:	7b7b      	ldrb	r3, [r7, #13]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	20000934 	.word	0x20000934

08009954 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e016      	b.n	8009990 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009962:	4910      	ldr	r1, [pc, #64]	; (80099a4 <clear_lock+0x50>)
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	4613      	mov	r3, r2
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	440b      	add	r3, r1
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d108      	bne.n	800998a <clear_lock+0x36>
 8009978:	490a      	ldr	r1, [pc, #40]	; (80099a4 <clear_lock+0x50>)
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4613      	mov	r3, r2
 800997e:	005b      	lsls	r3, r3, #1
 8009980:	4413      	add	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3301      	adds	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d9e5      	bls.n	8009962 <clear_lock+0xe>
	}
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	20000934 	.word	0x20000934

080099a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ba:	791b      	ldrb	r3, [r3, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d040      	beq.n	8009a42 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d0:	7858      	ldrb	r0, [r3, #1]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	2301      	movs	r3, #1
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	f7ff fd72 	bl	80094c0 <disk_write>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <sync_window+0x40>
			res = FR_DISK_ERR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	73fb      	strb	r3, [r7, #15]
 80099e6:	e02c      	b.n	8009a42 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ee:	2200      	movs	r2, #0
 80099f0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	1ad2      	subs	r2, r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d21b      	bcs.n	8009a42 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a10:	78db      	ldrb	r3, [r3, #3]
 8009a12:	613b      	str	r3, [r7, #16]
 8009a14:	e012      	b.n	8009a3c <sync_window+0x94>
					wsect += fs->fsize;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a2a:	7858      	ldrb	r0, [r3, #1]
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	2301      	movs	r3, #1
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	f7ff fd45 	bl	80094c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d8e9      	bhi.n	8009a16 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d01e      	beq.n	8009aa6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff ff9d 	bl	80099a8 <sync_window>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d116      	bne.n	8009aa6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a7e:	7858      	ldrb	r0, [r3, #1]
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	2301      	movs	r3, #1
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	f7ff fcfb 	bl	8009480 <disk_read>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d004      	beq.n	8009a9a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009a90:	f04f 33ff 	mov.w	r3, #4294967295
 8009a94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ff75 	bl	80099a8 <sync_window>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f040 80ad 	bne.w	8009c24 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	f040 8098 	bne.w	8009c08 <sync_fs+0x158>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ade:	795b      	ldrb	r3, [r3, #5]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	f040 8091 	bne.w	8009c08 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aee:	895b      	ldrh	r3, [r3, #10]
 8009af0:	461a      	mov	r2, r3
 8009af2:	2100      	movs	r1, #0
 8009af4:	f7ff fd40 	bl	8009578 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2255      	movs	r2, #85	; 0x55
 8009afc:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	22aa      	movs	r2, #170	; 0xaa
 8009b04:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2252      	movs	r2, #82	; 0x52
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2252      	movs	r2, #82	; 0x52
 8009b12:	705a      	strb	r2, [r3, #1]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2261      	movs	r2, #97	; 0x61
 8009b18:	709a      	strb	r2, [r3, #2]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2241      	movs	r2, #65	; 0x41
 8009b1e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2272      	movs	r2, #114	; 0x72
 8009b24:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2272      	movs	r2, #114	; 0x72
 8009b2c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2241      	movs	r2, #65	; 0x41
 8009b34:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2261      	movs	r2, #97	; 0x61
 8009b3c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	0a1b      	lsrs	r3, r3, #8
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	0c1b      	lsrs	r3, r3, #16
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	0e1b      	lsrs	r3, r3, #24
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	0a1b      	lsrs	r3, r3, #8
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	0c1b      	lsrs	r3, r3, #16
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	0e1b      	lsrs	r3, r3, #24
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009be4:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bec:	7858      	ldrb	r0, [r3, #1]
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	f7ff fc61 	bl	80094c0 <disk_write>
			fs->fsi_flag = 0;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c04:	2200      	movs	r2, #0
 8009c06:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c0e:	785b      	ldrb	r3, [r3, #1]
 8009c10:	2200      	movs	r2, #0
 8009c12:	2100      	movs	r1, #0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fc73 	bl	8009500 <disk_ioctl>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	3b02      	subs	r3, #2
 8009c3c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	3b02      	subs	r3, #2
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d301      	bcc.n	8009c52 <clust2sect+0x24>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e00c      	b.n	8009c6c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c58:	789b      	ldrb	r3, [r3, #2]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	fb03 f202 	mul.w	r2, r3, r2
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6a:	4413      	add	r3, r2
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bc80      	pop	{r7}
 8009c74:	4770      	bx	lr

08009c76 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d906      	bls.n	8009c94 <get_fat+0x1e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d302      	bcc.n	8009c9a <get_fat+0x24>
		val = 1;	/* Internal error */
 8009c94:	2301      	movs	r3, #1
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	e0e4      	b.n	8009e64 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	f000 8098 	beq.w	8009dde <get_fat+0x168>
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	f300 80ce 	bgt.w	8009e50 <get_fat+0x1da>
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d002      	beq.n	8009cbe <get_fat+0x48>
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d05f      	beq.n	8009d7c <get_fat+0x106>
 8009cbc:	e0c8      	b.n	8009e50 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd2:	6a1a      	ldr	r2, [r3, #32]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cda:	895b      	ldrh	r3, [r3, #10]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ce4:	4413      	add	r3, r2
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff feaf 	bl	8009a4c <move_window>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f040 80b0 	bne.w	8009e56 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	60fa      	str	r2, [r7, #12]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d02:	8952      	ldrh	r2, [r2, #10]
 8009d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d08:	fb01 f202 	mul.w	r2, r1, r2
 8009d0c:	1a9b      	subs	r3, r3, r2
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	5cd3      	ldrb	r3, [r2, r3]
 8009d12:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1a:	6a1a      	ldr	r2, [r3, #32]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d22:	895b      	ldrh	r3, [r3, #10]
 8009d24:	4619      	mov	r1, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d2c:	4413      	add	r3, r2
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff fe8b 	bl	8009a4c <move_window>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f040 808e 	bne.w	8009e5a <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d44:	895b      	ldrh	r3, [r3, #10]
 8009d46:	461a      	mov	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d4e:	fb01 f202 	mul.w	r2, r1, r2
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	5cd3      	ldrb	r3, [r2, r3]
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <get_fat+0xfc>
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	091b      	lsrs	r3, r3, #4
 8009d70:	e002      	b.n	8009d78 <get_fat+0x102>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d78:	617b      	str	r3, [r7, #20]
			break;
 8009d7a:	e073      	b.n	8009e64 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d82:	6a1a      	ldr	r2, [r3, #32]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8a:	895b      	ldrh	r3, [r3, #10]
 8009d8c:	085b      	lsrs	r3, r3, #1
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	4619      	mov	r1, r3
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d98:	4413      	add	r3, r2
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff fe55 	bl	8009a4c <move_window>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d15a      	bne.n	8009e5e <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009db2:	8952      	ldrh	r2, [r2, #10]
 8009db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009db8:	fb01 f202 	mul.w	r2, r1, r2
 8009dbc:	1a9b      	subs	r3, r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	b21a      	sxth	r2, r3
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b21b      	sxth	r3, r3
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	b21b      	sxth	r3, r3
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	617b      	str	r3, [r7, #20]
			break;
 8009ddc:	e042      	b.n	8009e64 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de4:	6a1a      	ldr	r2, [r3, #32]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	895b      	ldrh	r3, [r3, #10]
 8009dee:	089b      	lsrs	r3, r3, #2
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	4619      	mov	r1, r3
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dfa:	4413      	add	r3, r2
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff fe24 	bl	8009a4c <move_window>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d12b      	bne.n	8009e62 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e14:	8952      	ldrh	r2, [r2, #10]
 8009e16:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e1a:	fb01 f202 	mul.w	r2, r1, r2
 8009e1e:	1a9b      	subs	r3, r3, r2
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	4413      	add	r3, r2
 8009e24:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	3303      	adds	r3, #3
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	061a      	lsls	r2, r3, #24
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	3302      	adds	r3, #2
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	041b      	lsls	r3, r3, #16
 8009e36:	4313      	orrs	r3, r2
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	3201      	adds	r2, #1
 8009e3c:	7812      	ldrb	r2, [r2, #0]
 8009e3e:	0212      	lsls	r2, r2, #8
 8009e40:	4313      	orrs	r3, r2
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	7812      	ldrb	r2, [r2, #0]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e4c:	617b      	str	r3, [r7, #20]
			break;
 8009e4e:	e009      	b.n	8009e64 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8009e50:	2301      	movs	r3, #1
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	e006      	b.n	8009e64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e56:	bf00      	nop
 8009e58:	e004      	b.n	8009e64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e5a:	bf00      	nop
 8009e5c:	e002      	b.n	8009e64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e5e:	bf00      	nop
 8009e60:	e000      	b.n	8009e64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e62:	bf00      	nop
		}
	}

	return val;
 8009e64:	697b      	ldr	r3, [r7, #20]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b088      	sub	sp, #32
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d906      	bls.n	8009e8e <put_fat+0x20>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d302      	bcc.n	8009e94 <put_fat+0x26>
		res = FR_INT_ERR;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	77fb      	strb	r3, [r7, #31]
 8009e92:	e13a      	b.n	800a10a <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	f000 80d0 	beq.w	800a042 <put_fat+0x1d4>
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	f300 8127 	bgt.w	800a0f6 <put_fat+0x288>
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d003      	beq.n	8009eb4 <put_fat+0x46>
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	f000 808f 	beq.w	8009fd0 <put_fat+0x162>
 8009eb2:	e120      	b.n	800a0f6 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	085b      	lsrs	r3, r3, #1
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec8:	6a1a      	ldr	r2, [r3, #32]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed0:	895b      	ldrh	r3, [r3, #10]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009eda:	4413      	add	r3, r2
 8009edc:	4619      	mov	r1, r3
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fdb4 	bl	8009a4c <move_window>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ee8:	7ffb      	ldrb	r3, [r7, #31]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f040 8106 	bne.w	800a0fc <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	617a      	str	r2, [r7, #20]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009efc:	8952      	ldrh	r2, [r2, #10]
 8009efe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f02:	fb01 f202 	mul.w	r2, r1, r2
 8009f06:	1a9b      	subs	r3, r3, r2
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00d      	beq.n	8009f34 <put_fat+0xc6>
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	b25b      	sxtb	r3, r3
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	b25a      	sxtb	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	b25b      	sxtb	r3, r3
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	b25b      	sxtb	r3, r3
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	e001      	b.n	8009f38 <put_fat+0xca>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f42:	2201      	movs	r2, #1
 8009f44:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f4c:	6a1a      	ldr	r2, [r3, #32]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f54:	895b      	ldrh	r3, [r3, #10]
 8009f56:	4619      	mov	r1, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f5e:	4413      	add	r3, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7ff fd72 	bl	8009a4c <move_window>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f6c:	7ffb      	ldrb	r3, [r7, #31]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f040 80c6 	bne.w	800a100 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7a:	895b      	ldrh	r3, [r3, #10]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f84:	fb01 f202 	mul.w	r2, r1, r2
 8009f88:	1a9b      	subs	r3, r3, r2
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <put_fat+0x134>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	091b      	lsrs	r3, r3, #4
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	e00e      	b.n	8009fc0 <put_fat+0x152>
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	b25b      	sxtb	r3, r3
 8009fa8:	f023 030f 	bic.w	r3, r3, #15
 8009fac:	b25a      	sxtb	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	0a1b      	lsrs	r3, r3, #8
 8009fb2:	b25b      	sxtb	r3, r3
 8009fb4:	f003 030f 	and.w	r3, r3, #15
 8009fb8:	b25b      	sxtb	r3, r3
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	b25b      	sxtb	r3, r3
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fca:	2201      	movs	r2, #1
 8009fcc:	711a      	strb	r2, [r3, #4]
			break;
 8009fce:	e09c      	b.n	800a10a <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd6:	6a1a      	ldr	r2, [r3, #32]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fde:	895b      	ldrh	r3, [r3, #10]
 8009fe0:	085b      	lsrs	r3, r3, #1
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fec:	4413      	add	r3, r2
 8009fee:	4619      	mov	r1, r3
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7ff fd2b 	bl	8009a4c <move_window>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ffa:	7ffb      	ldrb	r3, [r7, #31]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f040 8081 	bne.w	800a104 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a00c:	8952      	ldrh	r2, [r2, #10]
 800a00e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a012:	fb01 f202 	mul.w	r2, r1, r2
 800a016:	1a9b      	subs	r3, r3, r2
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4413      	add	r3, r2
 800a01c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	b2da      	uxtb	r2, r3
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	0a1b      	lsrs	r3, r3, #8
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	3301      	adds	r3, #1
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03c:	2201      	movs	r2, #1
 800a03e:	711a      	strb	r2, [r3, #4]
			break;
 800a040:	e063      	b.n	800a10a <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a048:	6a1a      	ldr	r2, [r3, #32]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a050:	895b      	ldrh	r3, [r3, #10]
 800a052:	089b      	lsrs	r3, r3, #2
 800a054:	b29b      	uxth	r3, r3
 800a056:	4619      	mov	r1, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a05e:	4413      	add	r3, r2
 800a060:	4619      	mov	r1, r3
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff fcf2 	bl	8009a4c <move_window>
 800a068:	4603      	mov	r3, r0
 800a06a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a06c:	7ffb      	ldrb	r3, [r7, #31]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d14a      	bne.n	800a108 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a07c:	8952      	ldrh	r2, [r2, #10]
 800a07e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a082:	fb01 f202 	mul.w	r2, r1, r2
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	3303      	adds	r3, #3
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	061a      	lsls	r2, r3, #24
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	3302      	adds	r3, #2
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	041b      	lsls	r3, r3, #16
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	3201      	adds	r2, #1
 800a0a4:	7812      	ldrb	r2, [r2, #0]
 800a0a6:	0212      	lsls	r2, r2, #8
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	7812      	ldrb	r2, [r2, #0]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	0a1b      	lsrs	r3, r3, #8
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	0c1a      	lsrs	r2, r3, #16
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	3302      	adds	r3, #2
 800a0da:	b2d2      	uxtb	r2, r2
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	0e1a      	lsrs	r2, r3, #24
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	3303      	adds	r3, #3
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	711a      	strb	r2, [r3, #4]
			break;
 800a0f4:	e009      	b.n	800a10a <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	77fb      	strb	r3, [r7, #31]
 800a0fa:	e006      	b.n	800a10a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a0fc:	bf00      	nop
 800a0fe:	e004      	b.n	800a10a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a100:	bf00      	nop
 800a102:	e002      	b.n	800a10a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a104:	bf00      	nop
 800a106:	e000      	b.n	800a10a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a108:	bf00      	nop
		}
	}

	return res;
 800a10a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d906      	bls.n	800a132 <remove_chain+0x1e>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d302      	bcc.n	800a138 <remove_chain+0x24>
		res = FR_INT_ERR;
 800a132:	2302      	movs	r3, #2
 800a134:	73fb      	strb	r3, [r7, #15]
 800a136:	e049      	b.n	800a1cc <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a13c:	e03b      	b.n	800a1b6 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff fd98 	bl	8009c76 <get_fat>
 800a146:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d03b      	beq.n	800a1c6 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d102      	bne.n	800a15a <remove_chain+0x46>
 800a154:	2302      	movs	r3, #2
 800a156:	73fb      	strb	r3, [r7, #15]
 800a158:	e038      	b.n	800a1cc <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a160:	d102      	bne.n	800a168 <remove_chain+0x54>
 800a162:	2301      	movs	r3, #1
 800a164:	73fb      	strb	r3, [r7, #15]
 800a166:	e031      	b.n	800a1cc <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a168:	2200      	movs	r2, #0
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff fe7e 	bl	8009e6e <put_fat>
 800a172:	4603      	mov	r3, r0
 800a174:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d126      	bne.n	800a1ca <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d013      	beq.n	800a1b2 <remove_chain+0x9e>
				fs->free_clust++;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	3301      	adds	r3, #1
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a19a:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a2:	795b      	ldrb	r3, [r3, #5]
 800a1a4:	f043 0301 	orr.w	r3, r3, #1
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b0:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d3bc      	bcc.n	800a13e <remove_chain+0x2a>
 800a1c4:	e002      	b.n	800a1cc <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800a1c6:	bf00      	nop
 800a1c8:	e000      	b.n	800a1cc <remove_chain+0xb8>
			if (res != FR_OK) break;
 800a1ca:	bf00      	nop
		}
	}

	return res;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b086      	sub	sp, #24
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d111      	bne.n	800a20a <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d006      	beq.n	800a204 <create_chain+0x2e>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	429a      	cmp	r2, r3
 800a202:	d31d      	bcc.n	800a240 <create_chain+0x6a>
 800a204:	2301      	movs	r3, #1
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	e01a      	b.n	800a240 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff fd32 	bl	8009c76 <get_fat>
 800a212:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d801      	bhi.n	800a21e <create_chain+0x48>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e07f      	b.n	800a31e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a224:	d101      	bne.n	800a22a <create_chain+0x54>
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	e079      	b.n	800a31e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	429a      	cmp	r2, r3
 800a236:	d201      	bcs.n	800a23c <create_chain+0x66>
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	e070      	b.n	800a31e <create_chain+0x148>
		scl = clst;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	3301      	adds	r3, #1
 800a248:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	429a      	cmp	r2, r3
 800a256:	d307      	bcc.n	800a268 <create_chain+0x92>
			ncl = 2;
 800a258:	2302      	movs	r3, #2
 800a25a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	429a      	cmp	r2, r3
 800a262:	d901      	bls.n	800a268 <create_chain+0x92>
 800a264:	2300      	movs	r3, #0
 800a266:	e05a      	b.n	800a31e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a268:	6979      	ldr	r1, [r7, #20]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff fd03 	bl	8009c76 <get_fat>
 800a270:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00e      	beq.n	800a296 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d002      	beq.n	800a286 <create_chain+0xb0>
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <create_chain+0xb4>
			return cs;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	e049      	b.n	800a31e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d1d8      	bne.n	800a244 <create_chain+0x6e>
 800a292:	2300      	movs	r3, #0
 800a294:	e043      	b.n	800a31e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800a296:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a298:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a29c:	6979      	ldr	r1, [r7, #20]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fde5 	bl	8009e6e <put_fat>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d109      	bne.n	800a2c2 <create_chain+0xec>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff fdd8 	bl	8009e6e <put_fat>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d121      	bne.n	800a30c <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e0:	d01c      	beq.n	800a31c <create_chain+0x146>
			fs->free_clust--;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2f2:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fa:	795b      	ldrb	r3, [r3, #5]
 800a2fc:	f043 0301 	orr.w	r3, r3, #1
 800a300:	b2da      	uxtb	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a308:	715a      	strb	r2, [r3, #5]
 800a30a:	e007      	b.n	800a31c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d102      	bne.n	800a318 <create_chain+0x142>
 800a312:	f04f 33ff 	mov.w	r3, #4294967295
 800a316:	e000      	b.n	800a31a <create_chain+0x144>
 800a318:	2301      	movs	r3, #1
 800a31a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a31c:	697b      	ldr	r3, [r7, #20]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a326:	b480      	push	{r7}
 800a328:	b087      	sub	sp, #28
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	3304      	adds	r3, #4
 800a33a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a348:	895b      	ldrh	r3, [r3, #10]
 800a34a:	461a      	mov	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a35e:	7892      	ldrb	r2, [r2, #2]
 800a360:	fbb3 f3f2 	udiv	r3, r3, r2
 800a364:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	1d1a      	adds	r2, r3, #4
 800a36a:	613a      	str	r2, [r7, #16]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <clmt_clust+0x54>
 800a376:	2300      	movs	r3, #0
 800a378:	e010      	b.n	800a39c <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d307      	bcc.n	800a392 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	3304      	adds	r3, #4
 800a38e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a390:	e7e9      	b.n	800a366 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800a392:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	4413      	add	r3, r2
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr

0800a3a6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ba:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d009      	beq.n	800a3e0 <dir_sdi+0x3a>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d301      	bcc.n	800a3e4 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e0aa      	b.n	800a53a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d110      	bne.n	800a40c <dir_sdi+0x66>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d107      	bne.n	800a40c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d115      	bne.n	800a43e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41e:	891b      	ldrh	r3, [r3, #8]
 800a420:	461a      	mov	r2, r3
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	4293      	cmp	r3, r2
 800a426:	d301      	bcc.n	800a42c <dir_sdi+0x86>
			return FR_INT_ERR;
 800a428:	2302      	movs	r3, #2
 800a42a:	e086      	b.n	800a53a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	613b      	str	r3, [r7, #16]
 800a43c:	e043      	b.n	800a4c6 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44a:	895b      	ldrh	r3, [r3, #10]
 800a44c:	095b      	lsrs	r3, r3, #5
 800a44e:	b29b      	uxth	r3, r3
 800a450:	461a      	mov	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a45e:	789b      	ldrb	r3, [r3, #2]
 800a460:	fb02 f303 	mul.w	r3, r2, r3
 800a464:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a466:	e021      	b.n	800a4ac <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6979      	ldr	r1, [r7, #20]
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff fbff 	bl	8009c76 <get_fat>
 800a478:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a480:	d101      	bne.n	800a486 <dir_sdi+0xe0>
 800a482:	2301      	movs	r3, #1
 800a484:	e059      	b.n	800a53a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d909      	bls.n	800a4a0 <dir_sdi+0xfa>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d301      	bcc.n	800a4a4 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e04a      	b.n	800a53a <dir_sdi+0x194>
			idx -= ic;
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d2d9      	bcs.n	800a468 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6979      	ldr	r1, [r7, #20]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fbb5 	bl	8009c2e <clust2sect>
 800a4c4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d101      	bne.n	800a4dc <dir_sdi+0x136>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e02e      	b.n	800a53a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e8:	895b      	ldrh	r3, [r3, #10]
 800a4ea:	095b      	lsrs	r3, r3, #5
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a500:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4618      	mov	r0, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a518:	895b      	ldrh	r3, [r3, #10]
 800a51a:	095b      	lsrs	r3, r3, #5
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	461a      	mov	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	fbb3 f1f2 	udiv	r1, r3, r2
 800a526:	fb01 f202 	mul.w	r2, r1, r2
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	015b      	lsls	r3, r3, #5
 800a52e:	4403      	add	r3, r0
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a536:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a542:	b590      	push	{r4, r7, lr}
 800a544:	b087      	sub	sp, #28
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a552:	88db      	ldrh	r3, [r3, #6]
 800a554:	3301      	adds	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d005      	beq.n	800a56c <dir_next+0x2a>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <dir_next+0x2e>
		return FR_NO_FILE;
 800a56c:	2304      	movs	r3, #4
 800a56e:	e12e      	b.n	800a7ce <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a57c:	895b      	ldrh	r3, [r3, #10]
 800a57e:	095b      	lsrs	r3, r3, #5
 800a580:	b29b      	uxth	r3, r3
 800a582:	461a      	mov	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	fbb3 f1f2 	udiv	r1, r3, r2
 800a58a:	fb01 f202 	mul.w	r2, r1, r2
 800a58e:	1a9b      	subs	r3, r3, r2
 800a590:	2b00      	cmp	r3, #0
 800a592:	f040 80fa 	bne.w	800a78a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5a6:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10d      	bne.n	800a5d0 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c0:	891b      	ldrh	r3, [r3, #8]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	f0c0 80df 	bcc.w	800a78a <dir_next+0x248>
				return FR_NO_FILE;
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	e0fe      	b.n	800a7ce <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5dc:	895b      	ldrh	r3, [r3, #10]
 800a5de:	095b      	lsrs	r3, r3, #5
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5f0:	6812      	ldr	r2, [r2, #0]
 800a5f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5f6:	7892      	ldrb	r2, [r2, #2]
 800a5f8:	3a01      	subs	r2, #1
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f040 80c4 	bne.w	800a78a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	4619      	mov	r1, r3
 800a614:	4610      	mov	r0, r2
 800a616:	f7ff fb2e 	bl	8009c76 <get_fat>
 800a61a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d801      	bhi.n	800a626 <dir_next+0xe4>
 800a622:	2302      	movs	r3, #2
 800a624:	e0d3      	b.n	800a7ce <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62c:	d101      	bne.n	800a632 <dir_next+0xf0>
 800a62e:	2301      	movs	r3, #1
 800a630:	e0cd      	b.n	800a7ce <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	429a      	cmp	r2, r3
 800a644:	f0c0 808e 	bcc.w	800a764 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <dir_next+0x110>
 800a64e:	2304      	movs	r3, #4
 800a650:	e0bd      	b.n	800a7ce <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	4619      	mov	r1, r3
 800a664:	4610      	mov	r0, r2
 800a666:	f7ff fdb6 	bl	800a1d6 <create_chain>
 800a66a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <dir_next+0x134>
 800a672:	2307      	movs	r3, #7
 800a674:	e0ab      	b.n	800a7ce <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <dir_next+0x13e>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e0a6      	b.n	800a7ce <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a686:	d101      	bne.n	800a68c <dir_next+0x14a>
 800a688:	2301      	movs	r3, #1
 800a68a:	e0a0      	b.n	800a7ce <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff f987 	bl	80099a8 <sync_window>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <dir_next+0x162>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e094      	b.n	800a7ce <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ba:	895b      	ldrh	r3, [r3, #10]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	2100      	movs	r1, #0
 800a6c0:	f7fe ff5a 	bl	8009578 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d2:	681c      	ldr	r4, [r3, #0]
 800a6d4:	6979      	ldr	r1, [r7, #20]
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7ff faa9 	bl	8009c2e <clust2sect>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800a6e2:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	613b      	str	r3, [r7, #16]
 800a6e8:	e021      	b.n	800a72e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff f950 	bl	80099a8 <sync_window>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <dir_next+0x1d0>
 800a70e:	2301      	movs	r3, #1
 800a710:	e05d      	b.n	800a7ce <dir_next+0x28c>
						dp->fs->winsect++;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a71e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a720:	3201      	adds	r2, #1
 800a722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a726:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	3301      	adds	r3, #1
 800a72c:	613b      	str	r3, [r7, #16]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a73a:	789b      	ldrb	r3, [r3, #2]
 800a73c:	461a      	mov	r2, r3
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	4293      	cmp	r3, r2
 800a742:	d3d2      	bcc.n	800a6ea <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	1acb      	subs	r3, r1, r3
 800a75e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a762:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76a:	461a      	mov	r2, r3
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6979      	ldr	r1, [r7, #20]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff fa57 	bl	8009c2e <clust2sect>
 800a780:	4602      	mov	r2, r0
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a788:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a794:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ac:	895b      	ldrh	r3, [r3, #10]
 800a7ae:	095b      	lsrs	r3, r3, #5
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7ba:	fb01 f202 	mul.w	r2, r1, r2
 800a7be:	1a9b      	subs	r3, r3, r2
 800a7c0:	015b      	lsls	r3, r3, #5
 800a7c2:	4403      	add	r3, r0
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7ca:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd90      	pop	{r4, r7, pc}

0800a7d6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff fddf 	bl	800a3a6 <dir_sdi>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d135      	bne.n	800a85e <dir_alloc+0x88>
		n = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	4619      	mov	r1, r3
 800a808:	4610      	mov	r0, r2
 800a80a:	f7ff f91f 	bl	8009a4c <move_window>
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a812:	7bfb      	ldrb	r3, [r7, #15]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d121      	bne.n	800a85c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2be5      	cmp	r3, #229	; 0xe5
 800a824:	d006      	beq.n	800a834 <dir_alloc+0x5e>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d107      	bne.n	800a844 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	3301      	adds	r3, #1
 800a838:	60bb      	str	r3, [r7, #8]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d102      	bne.n	800a848 <dir_alloc+0x72>
 800a842:	e00c      	b.n	800a85e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a844:	2300      	movs	r3, #0
 800a846:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a848:	2101      	movs	r1, #1
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7ff fe79 	bl	800a542 <dir_next>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0cd      	beq.n	800a7f6 <dir_alloc+0x20>
 800a85a:	e000      	b.n	800a85e <dir_alloc+0x88>
			if (res != FR_OK) break;
 800a85c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b04      	cmp	r3, #4
 800a862:	d101      	bne.n	800a868 <dir_alloc+0x92>
 800a864:	2307      	movs	r3, #7
 800a866:	73fb      	strb	r3, [r7, #15]
	return res;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a872:	b480      	push	{r7}
 800a874:	b085      	sub	sp, #20
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	331b      	adds	r3, #27
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	b21a      	sxth	r2, r3
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	331a      	adds	r3, #26
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	b21b      	sxth	r3, r3
 800a88e:	4313      	orrs	r3, r2
 800a890:	b21b      	sxth	r3, r3
 800a892:	b29b      	uxth	r3, r3
 800a894:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d10f      	bne.n	800a8c2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	3315      	adds	r3, #21
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	b21a      	sxth	r2, r3
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	3314      	adds	r3, #20
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	b21b      	sxth	r3, r3
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	b21b      	sxth	r3, r3
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	041b      	lsls	r3, r3, #16
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]

	return cl;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr

0800a8ce <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	331a      	adds	r3, #26
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	b2d2      	uxtb	r2, r2
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	0a1b      	lsrs	r3, r3, #8
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	331b      	adds	r3, #27
 800a8ee:	b2d2      	uxtb	r2, r2
 800a8f0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	0c1a      	lsrs	r2, r3, #16
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3314      	adds	r3, #20
 800a8fa:	b2d2      	uxtb	r2, r2
 800a8fc:	701a      	strb	r2, [r3, #0]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	0c1b      	lsrs	r3, r3, #16
 800a902:	b29b      	uxth	r3, r3
 800a904:	0a1b      	lsrs	r3, r3, #8
 800a906:	b29a      	uxth	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3315      	adds	r3, #21
 800a90c:	b2d2      	uxtb	r2, r2
 800a90e:	701a      	strb	r2, [r3, #0]
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr
	...

0800a91c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a92e:	1e5a      	subs	r2, r3, #1
 800a930:	4613      	mov	r3, r2
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a93c:	2300      	movs	r3, #0
 800a93e:	613b      	str	r3, [r7, #16]
 800a940:	2301      	movs	r3, #1
 800a942:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a944:	4a2b      	ldr	r2, [pc, #172]	; (800a9f4 <cmp_lfn+0xd8>)
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	4413      	add	r3, r2
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	3301      	adds	r3, #1
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	4413      	add	r3, r2
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	021b      	lsls	r3, r3, #8
 800a956:	b21a      	sxth	r2, r3
 800a958:	4926      	ldr	r1, [pc, #152]	; (800a9f4 <cmp_lfn+0xd8>)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	440b      	add	r3, r1
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	4619      	mov	r1, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	440b      	add	r3, r1
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	b21b      	sxth	r3, r3
 800a96a:	4313      	orrs	r3, r2
 800a96c:	b21b      	sxth	r3, r3
 800a96e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a970:	89fb      	ldrh	r3, [r7, #14]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d019      	beq.n	800a9aa <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a976:	89bb      	ldrh	r3, [r7, #12]
 800a978:	4618      	mov	r0, r3
 800a97a:	f002 fe11 	bl	800d5a0 <ff_wtoupper>
 800a97e:	4603      	mov	r3, r0
 800a980:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2bfe      	cmp	r3, #254	; 0xfe
 800a986:	d80e      	bhi.n	800a9a6 <cmp_lfn+0x8a>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	617a      	str	r2, [r7, #20]
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	4413      	add	r3, r2
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	4618      	mov	r0, r3
 800a998:	f002 fe02 	bl	800d5a0 <ff_wtoupper>
 800a99c:	4603      	mov	r3, r0
 800a99e:	461a      	mov	r2, r3
 800a9a0:	89fb      	ldrh	r3, [r7, #14]
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d008      	beq.n	800a9b8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e01f      	b.n	800a9ea <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800a9aa:	89bb      	ldrh	r3, [r7, #12]
 800a9ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d001      	beq.n	800a9b8 <cmp_lfn+0x9c>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e018      	b.n	800a9ea <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	613b      	str	r3, [r7, #16]
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b0c      	cmp	r3, #12
 800a9c2:	d9bf      	bls.n	800a944 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00b      	beq.n	800a9e8 <cmp_lfn+0xcc>
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d008      	beq.n	800a9e8 <cmp_lfn+0xcc>
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	005b      	lsls	r3, r3, #1
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <cmp_lfn+0xcc>
		return 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e000      	b.n	800a9ea <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800a9e8:	2301      	movs	r3, #1
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	0800e108 	.word	0x0800e108

0800a9f8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b089      	sub	sp, #36	; 0x24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	4611      	mov	r1, r2
 800aa04:	461a      	mov	r2, r3
 800aa06:	460b      	mov	r3, r1
 800aa08:	71fb      	strb	r3, [r7, #7]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	330d      	adds	r3, #13
 800aa12:	79ba      	ldrb	r2, [r7, #6]
 800aa14:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	330b      	adds	r3, #11
 800aa1a:	220f      	movs	r2, #15
 800aa1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	330c      	adds	r3, #12
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	331a      	adds	r3, #26
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	331b      	adds	r3, #27
 800aa32:	2200      	movs	r2, #0
 800aa34:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	1e5a      	subs	r2, r3, #1
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	4413      	add	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	82fb      	strh	r3, [r7, #22]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800aa4e:	8afb      	ldrh	r3, [r7, #22]
 800aa50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d007      	beq.n	800aa68 <fit_lfn+0x70>
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	61fa      	str	r2, [r7, #28]
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800aa68:	4a1c      	ldr	r2, [pc, #112]	; (800aadc <fit_lfn+0xe4>)
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	461a      	mov	r2, r3
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	4413      	add	r3, r2
 800aa76:	8afa      	ldrh	r2, [r7, #22]
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	8afb      	ldrh	r3, [r7, #22]
 800aa7e:	0a1b      	lsrs	r3, r3, #8
 800aa80:	b299      	uxth	r1, r3
 800aa82:	4a16      	ldr	r2, [pc, #88]	; (800aadc <fit_lfn+0xe4>)
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	4413      	add	r3, r2
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	4413      	add	r3, r2
 800aa90:	b2ca      	uxtb	r2, r1
 800aa92:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800aa94:	8afb      	ldrh	r3, [r7, #22]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <fit_lfn+0xa8>
 800aa9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa9e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	61bb      	str	r3, [r7, #24]
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	2b0c      	cmp	r3, #12
 800aaaa:	d9d0      	bls.n	800aa4e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800aaac:	8afb      	ldrh	r3, [r7, #22]
 800aaae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d006      	beq.n	800aac4 <fit_lfn+0xcc>
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	005b      	lsls	r3, r3, #1
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4413      	add	r3, r2
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d103      	bne.n	800aacc <fit_lfn+0xd4>
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	79fa      	ldrb	r2, [r7, #7]
 800aad0:	701a      	strb	r2, [r3, #0]
}
 800aad2:	bf00      	nop
 800aad4:	3724      	adds	r7, #36	; 0x24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bc80      	pop	{r7}
 800aada:	4770      	bx	lr
 800aadc:	0800e108 	.word	0x0800e108

0800aae0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08c      	sub	sp, #48	; 0x30
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800aaee:	220b      	movs	r2, #11
 800aaf0:	68b9      	ldr	r1, [r7, #8]
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7fe fd22 	bl	800953c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b05      	cmp	r3, #5
 800aafc:	d92b      	bls.n	800ab56 <gen_numname+0x76>
		sr = seq;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ab02:	e022      	b.n	800ab4a <gen_numname+0x6a>
			wc = *lfn++;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	1c9a      	adds	r2, r3, #2
 800ab08:	607a      	str	r2, [r7, #4]
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ab0e:	2300      	movs	r3, #0
 800ab10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab12:	e017      	b.n	800ab44 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	005a      	lsls	r2, r3, #1
 800ab18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ab22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab24:	085b      	lsrs	r3, r3, #1
 800ab26:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <gen_numname+0x5e>
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ab38:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ab3c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab40:	3301      	adds	r3, #1
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	2b0f      	cmp	r3, #15
 800ab48:	d9e4      	bls.n	800ab14 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1d8      	bne.n	800ab04 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ab56:	2307      	movs	r3, #7
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	f003 030f 	and.w	r3, r3, #15
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	3330      	adds	r3, #48	; 0x30
 800ab66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ab6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab6e:	2b39      	cmp	r3, #57	; 0x39
 800ab70:	d904      	bls.n	800ab7c <gen_numname+0x9c>
 800ab72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab76:	3307      	adds	r3, #7
 800ab78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	1e5a      	subs	r2, r3, #1
 800ab80:	62ba      	str	r2, [r7, #40]	; 0x28
 800ab82:	3330      	adds	r3, #48	; 0x30
 800ab84:	443b      	add	r3, r7
 800ab86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ab8a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	091b      	lsrs	r3, r3, #4
 800ab92:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1df      	bne.n	800ab5a <gen_numname+0x7a>
	ns[i] = '~';
 800ab9a:	f107 0214 	add.w	r2, r7, #20
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	4413      	add	r3, r2
 800aba2:	227e      	movs	r2, #126	; 0x7e
 800aba4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aba6:	2300      	movs	r3, #0
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
 800abaa:	e002      	b.n	800abb2 <gen_numname+0xd2>
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	3301      	adds	r3, #1
 800abb0:	627b      	str	r3, [r7, #36]	; 0x24
 800abb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d205      	bcs.n	800abc6 <gen_numname+0xe6>
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbe:	4413      	add	r3, r2
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b20      	cmp	r3, #32
 800abc4:	d1f2      	bne.n	800abac <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	2b07      	cmp	r3, #7
 800abca:	d807      	bhi.n	800abdc <gen_numname+0xfc>
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	62ba      	str	r2, [r7, #40]	; 0x28
 800abd2:	3330      	adds	r3, #48	; 0x30
 800abd4:	443b      	add	r3, r7
 800abd6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800abda:	e000      	b.n	800abde <gen_numname+0xfe>
 800abdc:	2120      	movs	r1, #32
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	1c5a      	adds	r2, r3, #1
 800abe2:	627a      	str	r2, [r7, #36]	; 0x24
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	460a      	mov	r2, r1
 800abea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	2b07      	cmp	r3, #7
 800abf0:	d9e9      	bls.n	800abc6 <gen_numname+0xe6>
}
 800abf2:	bf00      	nop
 800abf4:	bf00      	nop
 800abf6:	3730      	adds	r7, #48	; 0x30
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ac08:	230b      	movs	r3, #11
 800ac0a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	0852      	lsrs	r2, r2, #1
 800ac12:	01db      	lsls	r3, r3, #7
 800ac14:	4313      	orrs	r3, r2
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	1c59      	adds	r1, r3, #1
 800ac1c:	6079      	str	r1, [r7, #4]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	4413      	add	r3, r2
 800ac22:	73fb      	strb	r3, [r7, #15]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1ed      	bne.n	800ac0c <sum_sfn+0x10>
	return sum;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bc80      	pop	{r7}
 800ac3a:	4770      	bx	lr

0800ac3c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ac44:	2100      	movs	r1, #0
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fbad 	bl	800a3a6 <dir_sdi>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <dir_find+0x1e>
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
 800ac58:	e0b8      	b.n	800adcc <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ac5a:	23ff      	movs	r3, #255	; 0xff
 800ac5c:	753b      	strb	r3, [r7, #20]
 800ac5e:	7d3b      	ldrb	r3, [r7, #20]
 800ac60:	757b      	strb	r3, [r7, #21]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6c:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4610      	mov	r0, r2
 800ac82:	f7fe fee3 	bl	8009a4c <move_window>
 800ac86:	4603      	mov	r3, r0
 800ac88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac8a:	7dfb      	ldrb	r3, [r7, #23]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f040 8097 	bne.w	800adc0 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aca2:	7dbb      	ldrb	r3, [r7, #22]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <dir_find+0x72>
 800aca8:	2304      	movs	r3, #4
 800acaa:	75fb      	strb	r3, [r7, #23]
 800acac:	e08d      	b.n	800adca <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	330b      	adds	r3, #11
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acb8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800acba:	7dbb      	ldrb	r3, [r7, #22]
 800acbc:	2be5      	cmp	r3, #229	; 0xe5
 800acbe:	d007      	beq.n	800acd0 <dir_find+0x94>
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	f003 0308 	and.w	r3, r3, #8
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00b      	beq.n	800ace2 <dir_find+0xa6>
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	2b0f      	cmp	r3, #15
 800acce:	d008      	beq.n	800ace2 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800acd0:	23ff      	movs	r3, #255	; 0xff
 800acd2:	757b      	strb	r3, [r7, #21]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acde:	849a      	strh	r2, [r3, #36]	; 0x24
 800ace0:	e063      	b.n	800adaa <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	2b0f      	cmp	r3, #15
 800ace6:	d137      	bne.n	800ad58 <dir_find+0x11c>
				if (dp->lfn) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d05a      	beq.n	800adaa <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800acf4:	7dbb      	ldrb	r3, [r7, #22]
 800acf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d010      	beq.n	800ad20 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	7b5b      	ldrb	r3, [r3, #13]
 800ad02:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ad04:	7dbb      	ldrb	r3, [r7, #22]
 800ad06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad0a:	75bb      	strb	r3, [r7, #22]
 800ad0c:	7dbb      	ldrb	r3, [r7, #22]
 800ad0e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad16:	88da      	ldrh	r2, [r3, #6]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad1e:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ad20:	7dba      	ldrb	r2, [r7, #22]
 800ad22:	7d7b      	ldrb	r3, [r7, #21]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d114      	bne.n	800ad52 <dir_find+0x116>
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	330d      	adds	r3, #13
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	7d3a      	ldrb	r2, [r7, #20]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d10e      	bne.n	800ad52 <dir_find+0x116>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	6939      	ldr	r1, [r7, #16]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff fdec 	bl	800a91c <cmp_lfn>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <dir_find+0x116>
 800ad4a:	7d7b      	ldrb	r3, [r7, #21]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	e000      	b.n	800ad54 <dir_find+0x118>
 800ad52:	23ff      	movs	r3, #255	; 0xff
 800ad54:	757b      	strb	r3, [r7, #21]
 800ad56:	e028      	b.n	800adaa <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ad58:	7d7b      	ldrb	r3, [r7, #21]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d107      	bne.n	800ad6e <dir_find+0x132>
 800ad5e:	6938      	ldr	r0, [r7, #16]
 800ad60:	f7ff ff4c 	bl	800abfc <sum_sfn>
 800ad64:	4603      	mov	r3, r0
 800ad66:	461a      	mov	r2, r3
 800ad68:	7d3b      	ldrb	r3, [r7, #20]
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d02a      	beq.n	800adc4 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	330b      	adds	r3, #11
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10b      	bne.n	800ad9a <dir_find+0x15e>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	220b      	movs	r2, #11
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6938      	ldr	r0, [r7, #16]
 800ad90:	f7fe fc0c 	bl	80095ac <mem_cmp>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d016      	beq.n	800adc8 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ad9a:	23ff      	movs	r3, #255	; 0xff
 800ad9c:	757b      	strb	r3, [r7, #21]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ada8:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800adaa:	2100      	movs	r1, #0
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff fbc8 	bl	800a542 <dir_next>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f43f af58 	beq.w	800ac6e <dir_find+0x32>
 800adbe:	e004      	b.n	800adca <dir_find+0x18e>
		if (res != FR_OK) break;
 800adc0:	bf00      	nop
 800adc2:	e002      	b.n	800adca <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800adc4:	bf00      	nop
 800adc6:	e000      	b.n	800adca <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800adc8:	bf00      	nop

	return res;
 800adca:	7dfb      	ldrb	r3, [r7, #23]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b08c      	sub	sp, #48	; 0x30
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	623b      	str	r3, [r7, #32]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800adf0:	f107 030c 	add.w	r3, r7, #12
 800adf4:	220c      	movs	r2, #12
 800adf6:	6a39      	ldr	r1, [r7, #32]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe fb9f 	bl	800953c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d03b      	beq.n	800ae80 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	330b      	adds	r3, #11
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae16:	461a      	mov	r2, r3
 800ae18:	2300      	movs	r3, #0
 800ae1a:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae20:	e013      	b.n	800ae4a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800ae22:	f107 010c 	add.w	r1, r7, #12
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	69fa      	ldr	r2, [r7, #28]
 800ae2a:	6a38      	ldr	r0, [r7, #32]
 800ae2c:	f7ff fe58 	bl	800aae0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff ff03 	bl	800ac3c <dir_find>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ae3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d106      	bne.n	800ae52 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	3301      	adds	r3, #1
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	2b63      	cmp	r3, #99	; 0x63
 800ae4e:	d9e8      	bls.n	800ae22 <dir_register+0x4e>
 800ae50:	e000      	b.n	800ae54 <dir_register+0x80>
			if (res != FR_OK) break;
 800ae52:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	2b64      	cmp	r3, #100	; 0x64
 800ae58:	d101      	bne.n	800ae5e <dir_register+0x8a>
 800ae5a:	2307      	movs	r3, #7
 800ae5c:	e0d8      	b.n	800b010 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ae5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d002      	beq.n	800ae6c <dir_register+0x98>
 800ae66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae6a:	e0d1      	b.n	800b010 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	330b      	adds	r3, #11
 800ae70:	7dfa      	ldrb	r2, [r7, #23]
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d014      	beq.n	800aeb4 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae8e:	e002      	b.n	800ae96 <dir_register+0xc2>
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	3301      	adds	r3, #1
 800ae94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1f5      	bne.n	800ae90 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	3319      	adds	r3, #25
 800aea8:	4a5b      	ldr	r2, [pc, #364]	; (800b018 <dir_register+0x244>)
 800aeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800aeae:	089b      	lsrs	r3, r3, #2
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb2:	e001      	b.n	800aeb8 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800aeb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff fc8b 	bl	800a7d6 <dir_alloc>
 800aec0:	4603      	mov	r3, r0
 800aec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800aec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d15b      	bne.n	800af86 <dir_register+0x1b2>
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	3b01      	subs	r3, #1
 800aed2:	627b      	str	r3, [r7, #36]	; 0x24
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d055      	beq.n	800af86 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee0:	88db      	ldrh	r3, [r3, #6]
 800aee2:	461a      	mov	r2, r3
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff fa5b 	bl	800a3a6 <dir_sdi>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800aef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d143      	bne.n	800af86 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff fe78 	bl	800abfc <sum_sfn>
 800af0c:	4603      	mov	r3, r0
 800af0e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	f7fe fd92 	bl	8009a4c <move_window>
 800af28:	4603      	mov	r3, r0
 800af2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800af2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af32:	2b00      	cmp	r3, #0
 800af34:	d126      	bne.n	800af84 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af3c:	6a18      	ldr	r0, [r3, #32]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af44:	6959      	ldr	r1, [r3, #20]
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	7efb      	ldrb	r3, [r7, #27]
 800af4c:	f7ff fd54 	bl	800a9f8 <fit_lfn>
				dp->fs->wflag = 1;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5c:	2201      	movs	r2, #1
 800af5e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800af60:	2100      	movs	r1, #0
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff faed 	bl	800a542 <dir_next>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800af6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af72:	2b00      	cmp	r3, #0
 800af74:	d107      	bne.n	800af86 <dir_register+0x1b2>
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	3b01      	subs	r3, #1
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1c6      	bne.n	800af10 <dir_register+0x13c>
 800af82:	e000      	b.n	800af86 <dir_register+0x1b2>
				if (res != FR_OK) break;
 800af84:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800af86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d13e      	bne.n	800b00c <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	4619      	mov	r1, r3
 800afa0:	4610      	mov	r0, r2
 800afa2:	f7fe fd53 	bl	8009a4c <move_window>
 800afa6:	4603      	mov	r3, r0
 800afa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800afac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d12b      	bne.n	800b00c <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	2220      	movs	r2, #32
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe fad9 	bl	8009578 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afcc:	6958      	ldr	r0, [r3, #20]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	220b      	movs	r2, #11
 800afd8:	4619      	mov	r1, r3
 800afda:	f7fe faaf 	bl	800953c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	330b      	adds	r3, #11
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	330c      	adds	r3, #12
 800aff4:	f002 0218 	and.w	r2, r2, #24
 800aff8:	b2d2      	uxtb	r2, r2
 800affa:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b008:	2201      	movs	r2, #1
 800b00a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800b00c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b010:	4618      	mov	r0, r3
 800b012:	3730      	adds	r7, #48	; 0x30
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	4ec4ec4f 	.word	0x4ec4ec4f

0800b01c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08a      	sub	sp, #40	; 0x28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	613b      	str	r3, [r7, #16]
 800b02c:	e002      	b.n	800b034 <create_name+0x18>
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	3301      	adds	r3, #1
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b2f      	cmp	r3, #47	; 0x2f
 800b03a:	d0f8      	beq.n	800b02e <create_name+0x12>
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b5c      	cmp	r3, #92	; 0x5c
 800b042:	d0f4      	beq.n	800b02e <create_name+0x12>
	lfn = dp->lfn;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b04a:	6a1b      	ldr	r3, [r3, #32]
 800b04c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	61ba      	str	r2, [r7, #24]
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	4413      	add	r3, r2
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b066:	2b1f      	cmp	r3, #31
 800b068:	d92f      	bls.n	800b0ca <create_name+0xae>
 800b06a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b06c:	2b2f      	cmp	r3, #47	; 0x2f
 800b06e:	d02c      	beq.n	800b0ca <create_name+0xae>
 800b070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b072:	2b5c      	cmp	r3, #92	; 0x5c
 800b074:	d029      	beq.n	800b0ca <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2bfe      	cmp	r3, #254	; 0xfe
 800b07a:	d901      	bls.n	800b080 <create_name+0x64>
			return FR_INVALID_NAME;
 800b07c:	2306      	movs	r3, #6
 800b07e:	e186      	b.n	800b38e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b082:	b2db      	uxtb	r3, r3
 800b084:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b088:	2101      	movs	r1, #1
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fa4e 	bl	800d52c <ff_convert>
 800b090:	4603      	mov	r3, r0
 800b092:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <create_name+0x82>
 800b09a:	2306      	movs	r3, #6
 800b09c:	e177      	b.n	800b38e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b09e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0a0:	2b7f      	cmp	r3, #127	; 0x7f
 800b0a2:	d809      	bhi.n	800b0b8 <create_name+0x9c>
 800b0a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	488e      	ldr	r0, [pc, #568]	; (800b2e4 <create_name+0x2c8>)
 800b0aa:	f7fe faa5 	bl	80095f8 <chk_chr>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <create_name+0x9c>
			return FR_INVALID_NAME;
 800b0b4:	2306      	movs	r3, #6
 800b0b6:	e16a      	b.n	800b38e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	617a      	str	r2, [r7, #20]
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b0c8:	e7c5      	b.n	800b056 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	441a      	add	r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b0d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0d6:	2b1f      	cmp	r3, #31
 800b0d8:	d801      	bhi.n	800b0de <create_name+0xc2>
 800b0da:	2304      	movs	r3, #4
 800b0dc:	e000      	b.n	800b0e0 <create_name+0xc4>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b0e4:	e011      	b.n	800b10a <create_name+0xee>
		w = lfn[di - 1];
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b0f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	d002      	beq.n	800b104 <create_name+0xe8>
 800b0fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b100:	2b2e      	cmp	r3, #46	; 0x2e
 800b102:	d106      	bne.n	800b112 <create_name+0xf6>
		di--;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	3b01      	subs	r3, #1
 800b108:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1ea      	bne.n	800b0e6 <create_name+0xca>
 800b110:	e000      	b.n	800b114 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800b112:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <create_name+0x102>
 800b11a:	2306      	movs	r3, #6
 800b11c:	e137      	b.n	800b38e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	4413      	add	r3, r2
 800b126:	2200      	movs	r2, #0
 800b128:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	220b      	movs	r2, #11
 800b134:	2120      	movs	r1, #32
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe fa1e 	bl	8009578 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b13c:	2300      	movs	r3, #0
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	e002      	b.n	800b148 <create_name+0x12c>
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	3301      	adds	r3, #1
 800b146:	61bb      	str	r3, [r7, #24]
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	2b20      	cmp	r3, #32
 800b154:	d0f5      	beq.n	800b142 <create_name+0x126>
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	4413      	add	r3, r2
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	2b2e      	cmp	r3, #46	; 0x2e
 800b162:	d0ee      	beq.n	800b142 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d009      	beq.n	800b17e <create_name+0x162>
 800b16a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b16e:	f043 0303 	orr.w	r3, r3, #3
 800b172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b176:	e002      	b.n	800b17e <create_name+0x162>
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d009      	beq.n	800b198 <create_name+0x17c>
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b18a:	3b01      	subs	r3, #1
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	4413      	add	r3, r2
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	2b2e      	cmp	r3, #46	; 0x2e
 800b196:	d1ef      	bne.n	800b178 <create_name+0x15c>

	b = i = 0; ni = 8;
 800b198:	2300      	movs	r3, #0
 800b19a:	623b      	str	r3, [r7, #32]
 800b19c:	2300      	movs	r3, #0
 800b19e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b1a2:	2308      	movs	r3, #8
 800b1a4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	61ba      	str	r2, [r7, #24]
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	881b      	ldrh	r3, [r3, #0]
 800b1b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 8091 	beq.w	800b2e0 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d006      	beq.n	800b1d2 <create_name+0x1b6>
 800b1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b1c8:	d10a      	bne.n	800b1e0 <create_name+0x1c4>
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d006      	beq.n	800b1e0 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800b1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1d6:	f043 0303 	orr.w	r3, r3, #3
 800b1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1de:	e07e      	b.n	800b2de <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b1e0:	6a3a      	ldr	r2, [r7, #32]
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d203      	bcs.n	800b1f0 <create_name+0x1d4>
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d123      	bne.n	800b238 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	2b0b      	cmp	r3, #11
 800b1f4:	d106      	bne.n	800b204 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800b1f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1fa:	f043 0303 	orr.w	r3, r3, #3
 800b1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b202:	e076      	b.n	800b2f2 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d005      	beq.n	800b218 <create_name+0x1fc>
 800b20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b210:	f043 0303 	orr.w	r3, r3, #3
 800b214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b218:	69ba      	ldr	r2, [r7, #24]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d867      	bhi.n	800b2f0 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	61bb      	str	r3, [r7, #24]
 800b224:	2308      	movs	r3, #8
 800b226:	623b      	str	r3, [r7, #32]
 800b228:	230b      	movs	r3, #11
 800b22a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b22c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b236:	e052      	b.n	800b2de <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b23a:	2b7f      	cmp	r3, #127	; 0x7f
 800b23c:	d914      	bls.n	800b268 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b23e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b240:	2100      	movs	r1, #0
 800b242:	4618      	mov	r0, r3
 800b244:	f002 f972 	bl	800d52c <ff_convert>
 800b248:	4603      	mov	r3, r0
 800b24a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b24c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d004      	beq.n	800b25c <create_name+0x240>
 800b252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b254:	3b80      	subs	r3, #128	; 0x80
 800b256:	4a24      	ldr	r2, [pc, #144]	; (800b2e8 <create_name+0x2cc>)
 800b258:	5cd3      	ldrb	r3, [r2, r3]
 800b25a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b260:	f043 0302 	orr.w	r3, r3, #2
 800b264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d007      	beq.n	800b27e <create_name+0x262>
 800b26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b270:	4619      	mov	r1, r3
 800b272:	481e      	ldr	r0, [pc, #120]	; (800b2ec <create_name+0x2d0>)
 800b274:	f7fe f9c0 	bl	80095f8 <chk_chr>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d008      	beq.n	800b290 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b27e:	235f      	movs	r3, #95	; 0x5f
 800b280:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b286:	f043 0303 	orr.w	r3, r3, #3
 800b28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b28e:	e01b      	b.n	800b2c8 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b292:	2b40      	cmp	r3, #64	; 0x40
 800b294:	d909      	bls.n	800b2aa <create_name+0x28e>
 800b296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b298:	2b5a      	cmp	r3, #90	; 0x5a
 800b29a:	d806      	bhi.n	800b2aa <create_name+0x28e>
					b |= 2;
 800b29c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2a0:	f043 0302 	orr.w	r3, r3, #2
 800b2a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2a8:	e00e      	b.n	800b2c8 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b2aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ac:	2b60      	cmp	r3, #96	; 0x60
 800b2ae:	d90b      	bls.n	800b2c8 <create_name+0x2ac>
 800b2b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2b2:	2b7a      	cmp	r3, #122	; 0x7a
 800b2b4:	d808      	bhi.n	800b2c8 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800b2b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2ba:	f043 0301 	orr.w	r3, r3, #1
 800b2be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c4:	3b20      	subs	r3, #32
 800b2c6:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ce:	699a      	ldr	r2, [r3, #24]
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	1c59      	adds	r1, r3, #1
 800b2d4:	6239      	str	r1, [r7, #32]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b2de:	e762      	b.n	800b1a6 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800b2e0:	bf00      	nop
 800b2e2:	e006      	b.n	800b2f2 <create_name+0x2d6>
 800b2e4:	0800d790 	.word	0x0800d790
 800b2e8:	0800e088 	.word	0x0800e088
 800b2ec:	0800d79c 	.word	0x0800d79c
			if (si > di) break;			/* No extension */
 800b2f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2be5      	cmp	r3, #229	; 0xe5
 800b2fe:	d105      	bne.n	800b30c <create_name+0x2f0>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	2205      	movs	r2, #5
 800b30a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	2b08      	cmp	r3, #8
 800b310:	d104      	bne.n	800b31c <create_name+0x300>
 800b312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b31c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b320:	f003 030c 	and.w	r3, r3, #12
 800b324:	2b0c      	cmp	r3, #12
 800b326:	d005      	beq.n	800b334 <create_name+0x318>
 800b328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	2b03      	cmp	r3, #3
 800b332:	d105      	bne.n	800b340 <create_name+0x324>
		cf |= NS_LFN;
 800b334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b338:	f043 0302 	orr.w	r3, r3, #2
 800b33c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d117      	bne.n	800b37c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b34c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b350:	f003 0303 	and.w	r3, r3, #3
 800b354:	2b01      	cmp	r3, #1
 800b356:	d105      	bne.n	800b364 <create_name+0x348>
 800b358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b35c:	f043 0310 	orr.w	r3, r3, #16
 800b360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b368:	f003 030c 	and.w	r3, r3, #12
 800b36c:	2b04      	cmp	r3, #4
 800b36e:	d105      	bne.n	800b37c <create_name+0x360>
 800b370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b374:	f043 0308 	orr.w	r3, r3, #8
 800b378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	330b      	adds	r3, #11
 800b386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b38a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b38c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3728      	adds	r7, #40	; 0x28
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop

0800b398 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b2f      	cmp	r3, #47	; 0x2f
 800b3a8:	d003      	beq.n	800b3b2 <follow_path+0x1a>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b5c      	cmp	r3, #92	; 0x5c
 800b3b0:	d102      	bne.n	800b3b8 <follow_path+0x20>
		path++;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3be:	461a      	mov	r2, r3
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b1f      	cmp	r3, #31
 800b3ca:	d80c      	bhi.n	800b3e6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7fe ffe9 	bl	800a3a6 <dir_sdi>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3de:	461a      	mov	r2, r3
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	6153      	str	r3, [r2, #20]
 800b3e4:	e049      	b.n	800b47a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b3e6:	463b      	mov	r3, r7
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff fe16 	bl	800b01c <create_name>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d13a      	bne.n	800b470 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fc1e 	bl	800ac3c <dir_find>
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	7adb      	ldrb	r3, [r3, #11]
 800b40e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d12b      	bne.n	800b474 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	d126      	bne.n	800b474 <follow_path+0xdc>
 800b426:	2305      	movs	r3, #5
 800b428:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b42a:	e023      	b.n	800b474 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	f003 0304 	and.w	r3, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	d120      	bne.n	800b478 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	330b      	adds	r3, #11
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	f003 0310 	and.w	r3, r3, #16
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800b44e:	2305      	movs	r3, #5
 800b450:	73fb      	strb	r3, [r7, #15]
 800b452:	e012      	b.n	800b47a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	4618      	mov	r0, r3
 800b460:	f7ff fa07 	bl	800a872 <ld_clust>
 800b464:	4602      	mov	r2, r0
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b46c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b46e:	e7ba      	b.n	800b3e6 <follow_path+0x4e>
			if (res != FR_OK) break;
 800b470:	bf00      	nop
 800b472:	e002      	b.n	800b47a <follow_path+0xe2>
				break;
 800b474:	bf00      	nop
 800b476:	e000      	b.n	800b47a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b478:	bf00      	nop
		}
	}

	return res;
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b48c:	f04f 33ff 	mov.w	r3, #4294967295
 800b490:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d031      	beq.n	800b4fe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e002      	b.n	800b4a8 <get_ldnumber+0x24>
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	2b1f      	cmp	r3, #31
 800b4ae:	d903      	bls.n	800b4b8 <get_ldnumber+0x34>
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b3a      	cmp	r3, #58	; 0x3a
 800b4b6:	d1f4      	bne.n	800b4a2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	2b3a      	cmp	r3, #58	; 0x3a
 800b4be:	d11c      	bne.n	800b4fa <get_ldnumber+0x76>
			tp = *path;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	60fa      	str	r2, [r7, #12]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	3b30      	subs	r3, #48	; 0x30
 800b4d0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	d80e      	bhi.n	800b4f6 <get_ldnumber+0x72>
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d10a      	bne.n	800b4f6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d107      	bne.n	800b4f6 <get_ldnumber+0x72>
					vol = (int)i;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	e002      	b.n	800b500 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b4fe:	693b      	ldr	r3, [r7, #16]
}
 800b500:	4618      	mov	r0, r3
 800b502:	371c      	adds	r7, #28
 800b504:	46bd      	mov	sp, r7
 800b506:	bc80      	pop	{r7}
 800b508:	4770      	bx	lr
	...

0800b50c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51c:	2200      	movs	r2, #0
 800b51e:	711a      	strb	r2, [r3, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b526:	461a      	mov	r2, r3
 800b528:	f04f 33ff 	mov.w	r3, #4294967295
 800b52c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7fe fa8b 	bl	8009a4c <move_window>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <check_fs+0x34>
		return 3;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e04a      	b.n	800b5d6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b546:	3301      	adds	r3, #1
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	021b      	lsls	r3, r3, #8
 800b54c:	b21a      	sxth	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b554:	b21b      	sxth	r3, r3
 800b556:	4313      	orrs	r3, r2
 800b558:	b21b      	sxth	r3, r3
 800b55a:	4a21      	ldr	r2, [pc, #132]	; (800b5e0 <check_fs+0xd4>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d001      	beq.n	800b564 <check_fs+0x58>
		return 2;
 800b560:	2302      	movs	r3, #2
 800b562:	e038      	b.n	800b5d6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3336      	adds	r3, #54	; 0x36
 800b568:	3303      	adds	r3, #3
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	061a      	lsls	r2, r3, #24
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3336      	adds	r3, #54	; 0x36
 800b572:	3302      	adds	r3, #2
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	041b      	lsls	r3, r3, #16
 800b578:	4313      	orrs	r3, r2
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	3236      	adds	r2, #54	; 0x36
 800b57e:	3201      	adds	r2, #1
 800b580:	7812      	ldrb	r2, [r2, #0]
 800b582:	0212      	lsls	r2, r2, #8
 800b584:	4313      	orrs	r3, r2
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b58c:	4313      	orrs	r3, r2
 800b58e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b592:	4a14      	ldr	r2, [pc, #80]	; (800b5e4 <check_fs+0xd8>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d101      	bne.n	800b59c <check_fs+0x90>
		return 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	e01c      	b.n	800b5d6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3352      	adds	r3, #82	; 0x52
 800b5a0:	3303      	adds	r3, #3
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	061a      	lsls	r2, r3, #24
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	3352      	adds	r3, #82	; 0x52
 800b5aa:	3302      	adds	r3, #2
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	041b      	lsls	r3, r3, #16
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	3252      	adds	r2, #82	; 0x52
 800b5b6:	3201      	adds	r2, #1
 800b5b8:	7812      	ldrb	r2, [r2, #0]
 800b5ba:	0212      	lsls	r2, r2, #8
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b5ca:	4a06      	ldr	r2, [pc, #24]	; (800b5e4 <check_fs+0xd8>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d101      	bne.n	800b5d4 <check_fs+0xc8>
		return 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e000      	b.n	800b5d6 <check_fs+0xca>

	return 1;
 800b5d4:	2301      	movs	r3, #1
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	ffffaa55 	.word	0xffffaa55
 800b5e4:	00544146 	.word	0x00544146

0800b5e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b096      	sub	sp, #88	; 0x58
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b5fc:	68b8      	ldr	r0, [r7, #8]
 800b5fe:	f7ff ff41 	bl	800b484 <get_ldnumber>
 800b602:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b606:	2b00      	cmp	r3, #0
 800b608:	da01      	bge.n	800b60e <find_volume+0x26>
 800b60a:	230b      	movs	r3, #11
 800b60c:	e311      	b.n	800bc32 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b60e:	4a98      	ldr	r2, [pc, #608]	; (800b870 <find_volume+0x288>)
 800b610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b616:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <find_volume+0x3a>
 800b61e:	230c      	movs	r3, #12
 800b620:	e307      	b.n	800bc32 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b626:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d01c      	beq.n	800b66e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fd fedf 	bl	8009400 <disk_status>
 800b642:	4603      	mov	r3, r0
 800b644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10c      	bne.n	800b66e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d007      	beq.n	800b66a <find_volume+0x82>
 800b65a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b65e:	f003 0304 	and.w	r3, r3, #4
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b666:	230a      	movs	r3, #10
 800b668:	e2e3      	b.n	800bc32 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800b66a:	2300      	movs	r3, #0
 800b66c:	e2e1      	b.n	800bc32 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b682:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b68a:	785b      	ldrb	r3, [r3, #1]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fd fed1 	bl	8009434 <disk_initialize>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e2c4      	b.n	800bc32 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d007      	beq.n	800b6be <find_volume+0xd6>
 800b6ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800b6ba:	230a      	movs	r3, #10
 800b6bc:	e2b9      	b.n	800bc32 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c4:	7858      	ldrb	r0, [r3, #1]
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6cc:	330a      	adds	r3, #10
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	f7fd ff15 	bl	8009500 <disk_ioctl>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10d      	bne.n	800b6f8 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6e2:	895b      	ldrh	r3, [r3, #10]
 800b6e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6e8:	d306      	bcc.n	800b6f8 <find_volume+0x110>
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6f0:	895b      	ldrh	r3, [r3, #10]
 800b6f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f6:	d901      	bls.n	800b6fc <find_volume+0x114>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e29a      	b.n	800bc32 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b702:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b704:	f7ff ff02 	bl	800b50c <check_fs>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b70e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b712:	2b01      	cmp	r3, #1
 800b714:	d153      	bne.n	800b7be <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b716:	2300      	movs	r3, #0
 800b718:	643b      	str	r3, [r7, #64]	; 0x40
 800b71a:	e028      	b.n	800b76e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b71c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b720:	011b      	lsls	r3, r3, #4
 800b722:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b726:	4413      	add	r3, r2
 800b728:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	3304      	adds	r3, #4
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d012      	beq.n	800b75a <find_volume+0x172>
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	330b      	adds	r3, #11
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	061a      	lsls	r2, r3, #24
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	330a      	adds	r3, #10
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	041b      	lsls	r3, r3, #16
 800b744:	4313      	orrs	r3, r2
 800b746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b748:	3209      	adds	r2, #9
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	0212      	lsls	r2, r2, #8
 800b74e:	4313      	orrs	r3, r2
 800b750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b752:	3208      	adds	r2, #8
 800b754:	7812      	ldrb	r2, [r2, #0]
 800b756:	431a      	orrs	r2, r3
 800b758:	e000      	b.n	800b75c <find_volume+0x174>
 800b75a:	2200      	movs	r2, #0
 800b75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	3358      	adds	r3, #88	; 0x58
 800b762:	443b      	add	r3, r7
 800b764:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76a:	3301      	adds	r3, #1
 800b76c:	643b      	str	r3, [r7, #64]	; 0x40
 800b76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b770:	2b03      	cmp	r3, #3
 800b772:	d9d3      	bls.n	800b71c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b774:	2300      	movs	r3, #0
 800b776:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <find_volume+0x19c>
 800b77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b780:	3b01      	subs	r3, #1
 800b782:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	3358      	adds	r3, #88	; 0x58
 800b78a:	443b      	add	r3, r7
 800b78c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b790:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b794:	2b00      	cmp	r3, #0
 800b796:	d005      	beq.n	800b7a4 <find_volume+0x1bc>
 800b798:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b79a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b79c:	f7ff feb6 	bl	800b50c <check_fs>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	e000      	b.n	800b7a6 <find_volume+0x1be>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b7aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d005      	beq.n	800b7be <find_volume+0x1d6>
 800b7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d9e2      	bls.n	800b784 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b7be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d101      	bne.n	800b7ca <find_volume+0x1e2>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e233      	b.n	800bc32 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b7ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <find_volume+0x1ee>
 800b7d2:	230d      	movs	r3, #13
 800b7d4:	e22d      	b.n	800bc32 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	7b1b      	ldrb	r3, [r3, #12]
 800b7da:	021b      	lsls	r3, r3, #8
 800b7dc:	b21a      	sxth	r2, r3
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	7adb      	ldrb	r3, [r3, #11]
 800b7e2:	b21b      	sxth	r3, r3
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	b21a      	sxth	r2, r3
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ee:	895b      	ldrh	r3, [r3, #10]
 800b7f0:	b21b      	sxth	r3, r3
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d001      	beq.n	800b7fa <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800b7f6:	230d      	movs	r3, #13
 800b7f8:	e21b      	b.n	800bc32 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	7ddb      	ldrb	r3, [r3, #23]
 800b7fe:	021b      	lsls	r3, r3, #8
 800b800:	b21a      	sxth	r2, r3
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	7d9b      	ldrb	r3, [r3, #22]
 800b806:	b21b      	sxth	r3, r3
 800b808:	4313      	orrs	r3, r2
 800b80a:	b21b      	sxth	r3, r3
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b812:	2b00      	cmp	r3, #0
 800b814:	d112      	bne.n	800b83c <find_volume+0x254>
 800b816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b818:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b81c:	061a      	lsls	r2, r3, #24
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b824:	041b      	lsls	r3, r3, #16
 800b826:	4313      	orrs	r3, r2
 800b828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b82a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b82e:	0212      	lsls	r2, r2, #8
 800b830:	4313      	orrs	r3, r2
 800b832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b834:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b838:	4313      	orrs	r3, r2
 800b83a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b842:	461a      	mov	r2, r3
 800b844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b846:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	7c1a      	ldrb	r2, [r3, #16]
 800b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b852:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b85a:	78db      	ldrb	r3, [r3, #3]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d009      	beq.n	800b874 <find_volume+0x28c>
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b866:	78db      	ldrb	r3, [r3, #3]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d003      	beq.n	800b874 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800b86c:	230d      	movs	r3, #13
 800b86e:	e1e0      	b.n	800bc32 <find_volume+0x64a>
 800b870:	2000092c 	.word	0x2000092c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b87a:	78db      	ldrb	r3, [r3, #3]
 800b87c:	461a      	mov	r2, r3
 800b87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b880:	fb02 f303 	mul.w	r3, r2, r3
 800b884:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	7b5a      	ldrb	r2, [r3, #13]
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b890:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b898:	789b      	ldrb	r3, [r3, #2]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00c      	beq.n	800b8b8 <find_volume+0x2d0>
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a4:	789b      	ldrb	r3, [r3, #2]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ae:	789b      	ldrb	r3, [r3, #2]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800b8b8:	230d      	movs	r3, #13
 800b8ba:	e1ba      	b.n	800bc32 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	7c9b      	ldrb	r3, [r3, #18]
 800b8c0:	021b      	lsls	r3, r3, #8
 800b8c2:	b21a      	sxth	r2, r3
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	7c5b      	ldrb	r3, [r3, #17]
 800b8c8:	b21b      	sxth	r3, r3
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	b21b      	sxth	r3, r3
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8de:	891b      	ldrh	r3, [r3, #8]
 800b8e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b8e6:	8952      	ldrh	r2, [r2, #10]
 800b8e8:	0952      	lsrs	r2, r2, #5
 800b8ea:	b292      	uxth	r2, r2
 800b8ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8f0:	fb01 f202 	mul.w	r2, r1, r2
 800b8f4:	1a9b      	subs	r3, r3, r2
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800b8fc:	230d      	movs	r3, #13
 800b8fe:	e198      	b.n	800bc32 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	7d1b      	ldrb	r3, [r3, #20]
 800b904:	021b      	lsls	r3, r3, #8
 800b906:	b21a      	sxth	r2, r3
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	7cdb      	ldrb	r3, [r3, #19]
 800b90c:	b21b      	sxth	r3, r3
 800b90e:	4313      	orrs	r3, r2
 800b910:	b21b      	sxth	r3, r3
 800b912:	b29b      	uxth	r3, r3
 800b914:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d112      	bne.n	800b942 <find_volume+0x35a>
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b922:	061a      	lsls	r2, r3, #24
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b92a:	041b      	lsls	r3, r3, #16
 800b92c:	4313      	orrs	r3, r2
 800b92e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b930:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b934:	0212      	lsls	r2, r2, #8
 800b936:	4313      	orrs	r3, r2
 800b938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b93a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b93e:	4313      	orrs	r3, r2
 800b940:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	7bdb      	ldrb	r3, [r3, #15]
 800b946:	021b      	lsls	r3, r3, #8
 800b948:	b21a      	sxth	r2, r3
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	7b9b      	ldrb	r3, [r3, #14]
 800b94e:	b21b      	sxth	r3, r3
 800b950:	4313      	orrs	r3, r2
 800b952:	b21b      	sxth	r3, r3
 800b954:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b956:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <find_volume+0x378>
 800b95c:	230d      	movs	r3, #13
 800b95e:	e168      	b.n	800bc32 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b960:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b964:	4413      	add	r3, r2
 800b966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b96c:	8911      	ldrh	r1, [r2, #8]
 800b96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b974:	8952      	ldrh	r2, [r2, #10]
 800b976:	0952      	lsrs	r2, r2, #5
 800b978:	b292      	uxth	r2, r2
 800b97a:	fbb1 f2f2 	udiv	r2, r1, r2
 800b97e:	b292      	uxth	r2, r2
 800b980:	4413      	add	r3, r2
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	429a      	cmp	r2, r3
 800b98a:	d201      	bcs.n	800b990 <find_volume+0x3a8>
 800b98c:	230d      	movs	r3, #13
 800b98e:	e150      	b.n	800bc32 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b998:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b99c:	7892      	ldrb	r2, [r2, #2]
 800b99e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9a2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <find_volume+0x3c6>
 800b9aa:	230d      	movs	r3, #13
 800b9ac:	e141      	b.n	800bc32 <find_volume+0x64a>
	fmt = FS_FAT12;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d902      	bls.n	800b9c4 <find_volume+0x3dc>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d902      	bls.n	800b9d4 <find_volume+0x3ec>
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	3302      	adds	r3, #2
 800b9d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9de:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ea:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b9ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f0:	4413      	add	r3, r2
 800b9f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9f8:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800b9fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	4413      	add	r3, r2
 800ba00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba06:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800ba08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d124      	bne.n	800ba5a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba16:	891b      	ldrh	r3, [r3, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <find_volume+0x438>
 800ba1c:	230d      	movs	r3, #13
 800ba1e:	e108      	b.n	800bc32 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba26:	061a      	lsls	r2, r3, #24
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ba2e:	041b      	lsls	r3, r3, #16
 800ba30:	4313      	orrs	r3, r2
 800ba32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba34:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ba38:	0212      	lsls	r2, r2, #8
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba3e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ba42:	4313      	orrs	r3, r2
 800ba44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba4a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	647b      	str	r3, [r7, #68]	; 0x44
 800ba58:	e02b      	b.n	800bab2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba60:	891b      	ldrh	r3, [r3, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <find_volume+0x482>
 800ba66:	230d      	movs	r3, #13
 800ba68:	e0e3      	b.n	800bc32 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba70:	6a1a      	ldr	r2, [r3, #32]
 800ba72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba74:	4413      	add	r3, r2
 800ba76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba7c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ba7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d105      	bne.n	800ba92 <find_volume+0x4aa>
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	e00e      	b.n	800bab0 <find_volume+0x4c8>
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba98:	695a      	ldr	r2, [r3, #20]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	4413      	add	r3, r2
 800baa0:	085a      	lsrs	r2, r3, #1
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800bab0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac0:	895b      	ldrh	r3, [r3, #10]
 800bac2:	4619      	mov	r1, r3
 800bac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac6:	440b      	add	r3, r1
 800bac8:	3b01      	subs	r3, #1
 800baca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bacc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800bad0:	8949      	ldrh	r1, [r1, #10]
 800bad2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d201      	bcs.n	800bade <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800bada:	230d      	movs	r3, #13
 800badc:	e0a9      	b.n	800bc32 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae4:	461a      	mov	r2, r3
 800bae6:	f04f 33ff 	mov.w	r3, #4294967295
 800baea:	6113      	str	r3, [r2, #16]
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bafa:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb02:	2280      	movs	r2, #128	; 0x80
 800bb04:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bb06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d17a      	bne.n	800bc04 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb14:	021b      	lsls	r3, r3, #8
 800bb16:	b21a      	sxth	r2, r3
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb1e:	b21b      	sxth	r3, r3
 800bb20:	4313      	orrs	r3, r2
 800bb22:	b21b      	sxth	r3, r3
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d16d      	bne.n	800bc04 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800bb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb30:	f7fd ff8c 	bl	8009a4c <move_window>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d164      	bne.n	800bc04 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb40:	2200      	movs	r2, #0
 800bb42:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	b21a      	sxth	r2, r3
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bb54:	b21b      	sxth	r3, r3
 800bb56:	4313      	orrs	r3, r2
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	4a38      	ldr	r2, [pc, #224]	; (800bc3c <find_volume+0x654>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d151      	bne.n	800bc04 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	78db      	ldrb	r3, [r3, #3]
 800bb64:	061a      	lsls	r2, r3, #24
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb68:	789b      	ldrb	r3, [r3, #2]
 800bb6a:	041b      	lsls	r3, r3, #16
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb70:	7852      	ldrb	r2, [r2, #1]
 800bb72:	0212      	lsls	r2, r2, #8
 800bb74:	4313      	orrs	r3, r2
 800bb76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb78:	7812      	ldrb	r2, [r2, #0]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	4a30      	ldr	r2, [pc, #192]	; (800bc40 <find_volume+0x658>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d140      	bne.n	800bc04 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800bb88:	061a      	lsls	r2, r3, #24
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800bb90:	041b      	lsls	r3, r3, #16
 800bb92:	4313      	orrs	r3, r2
 800bb94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb96:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800bb9a:	0212      	lsls	r2, r2, #8
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800bba4:	4313      	orrs	r3, r2
 800bba6:	4a27      	ldr	r2, [pc, #156]	; (800bc44 <find_volume+0x65c>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d12b      	bne.n	800bc04 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800bbb2:	061a      	lsls	r2, r3, #24
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800bbba:	041b      	lsls	r3, r3, #16
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbc0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800bbc4:	0212      	lsls	r2, r2, #8
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbca:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbd6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbda:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800bbde:	061a      	lsls	r2, r3, #24
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800bbe6:	041b      	lsls	r3, r3, #16
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbec:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800bbf0:	0212      	lsls	r2, r2, #8
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bc02:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc10:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800bc12:	4b0d      	ldr	r3, [pc, #52]	; (800bc48 <find_volume+0x660>)
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	3301      	adds	r3, #1
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <find_volume+0x660>)
 800bc1c:	801a      	strh	r2, [r3, #0]
 800bc1e:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <find_volume+0x660>)
 800bc20:	881a      	ldrh	r2, [r3, #0]
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc28:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc2c:	f7fd fe92 	bl	8009954 <clear_lock>
#endif

	return FR_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3758      	adds	r7, #88	; 0x58
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	ffffaa55 	.word	0xffffaa55
 800bc40:	41615252 	.word	0x41615252
 800bc44:	61417272 	.word	0x61417272
 800bc48:	20000930 	.word	0x20000930

0800bc4c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d02a      	beq.n	800bcb4 <validate+0x68>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d024      	beq.n	800bcb4 <validate+0x68>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d01b      	beq.n	800bcb4 <validate+0x68>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc88:	88da      	ldrh	r2, [r3, #6]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc90:	889b      	ldrh	r3, [r3, #4]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d10e      	bne.n	800bcb4 <validate+0x68>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fd fbab 	bl	8009400 <disk_status>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800bcb4:	2309      	movs	r3, #9
 800bcb6:	e000      	b.n	800bcba <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
	...

0800bcc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800bcd6:	f107 0310 	add.w	r3, r7, #16
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff fbd2 	bl	800b484 <get_ldnumber>
 800bce0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	da01      	bge.n	800bcec <f_mount+0x28>
 800bce8:	230b      	movs	r3, #11
 800bcea:	e02f      	b.n	800bd4c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bcec:	4a19      	ldr	r2, [pc, #100]	; (800bd54 <f_mount+0x90>)
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcf4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d007      	beq.n	800bd0c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800bcfc:	69b8      	ldr	r0, [r7, #24]
 800bcfe:	f7fd fe29 	bl	8009954 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd08:	2200      	movs	r2, #0
 800bd0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d004      	beq.n	800bd1c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd18:	2200      	movs	r2, #0
 800bd1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	490d      	ldr	r1, [pc, #52]	; (800bd54 <f_mount+0x90>)
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <f_mount+0x6e>
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d001      	beq.n	800bd36 <f_mount+0x72>
 800bd32:	2300      	movs	r3, #0
 800bd34:	e00a      	b.n	800bd4c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800bd36:	f107 0108 	add.w	r1, r7, #8
 800bd3a:	f107 030c 	add.w	r3, r7, #12
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fc51 	bl	800b5e8 <find_volume>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3720      	adds	r7, #32
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	2000092c 	.word	0x2000092c

0800bd58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd66:	f843 0c4c 	str.w	r0, [r3, #-76]
 800bd6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd6e:	f843 1c50 	str.w	r1, [r3, #-80]
 800bd72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd76:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800bd7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd7e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <f_open+0x32>
 800bd86:	2309      	movs	r3, #9
 800bd88:	e2f7      	b.n	800c37a <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800bd8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd8e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bd92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd96:	461a      	mov	r2, r3
 800bd98:	2300      	movs	r3, #0
 800bd9a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bd9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bda0:	461a      	mov	r2, r3
 800bda2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bda6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bdaa:	f003 031f 	and.w	r3, r3, #31
 800bdae:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bdb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bdb6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	f107 0118 	add.w	r1, r7, #24
 800bdc4:	3910      	subs	r1, #16
 800bdc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bdca:	3b18      	subs	r3, #24
 800bdcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fc09 	bl	800b5e8 <find_volume>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bddc:	f102 0217 	add.w	r2, r2, #23
 800bde0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bde2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bde6:	f103 0317 	add.w	r3, r3, #23
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f040 82bf 	bne.w	800c370 <f_open+0x618>
		INIT_BUF(dj);
 800bdf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f107 0318 	add.w	r3, r7, #24
 800bdfc:	3b04      	subs	r3, #4
 800bdfe:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800be02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800be06:	461a      	mov	r2, r3
 800be08:	4bd4      	ldr	r3, [pc, #848]	; (800c15c <f_open+0x404>)
 800be0a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800be0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800be12:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800be16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be1a:	3b18      	subs	r3, #24
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff faba 	bl	800b398 <follow_path>
 800be24:	4603      	mov	r3, r0
 800be26:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800be2a:	f102 0217 	add.w	r2, r2, #23
 800be2e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800be30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800be34:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800be38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800be3c:	f102 0210 	add.w	r2, r2, #16
 800be40:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800be42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800be46:	f103 0317 	add.w	r3, r3, #23
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d126      	bne.n	800be9e <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800be50:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800be54:	f103 0310 	add.w	r3, r3, #16
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <f_open+0x114>
				res = FR_INVALID_NAME;
 800be5e:	2306      	movs	r3, #6
 800be60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800be64:	f102 0217 	add.w	r2, r2, #23
 800be68:	7013      	strb	r3, [r2, #0]
 800be6a:	e018      	b.n	800be9e <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800be70:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800be74:	f023 0301 	bic.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	bf14      	ite	ne
 800be7c:	2301      	movne	r3, #1
 800be7e:	2300      	moveq	r3, #0
 800be80:	b2db      	uxtb	r3, r3
 800be82:	461a      	mov	r2, r3
 800be84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be88:	3b18      	subs	r3, #24
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fd fbcd 	bl	800962c <chk_lock>
 800be92:	4603      	mov	r3, r0
 800be94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800be98:	f102 0217 	add.w	r2, r2, #23
 800be9c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bea2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bea6:	f003 031c 	and.w	r3, r3, #28
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 813c 	beq.w	800c128 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800beb0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800beb4:	f103 0317 	add.w	r3, r3, #23
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d02e      	beq.n	800bf1c <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800bebe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bec2:	f103 0317 	add.w	r3, r3, #23
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d112      	bne.n	800bef2 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800becc:	f7fd fc1e 	bl	800970c <enq_lock>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d007      	beq.n	800bee6 <f_open+0x18e>
 800bed6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800beda:	3b18      	subs	r3, #24
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe ff79 	bl	800add4 <dir_register>
 800bee2:	4603      	mov	r3, r0
 800bee4:	e000      	b.n	800bee8 <f_open+0x190>
 800bee6:	2312      	movs	r3, #18
 800bee8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800beec:	f102 0217 	add.w	r2, r2, #23
 800bef0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bef2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bef6:	461a      	mov	r2, r3
 800bef8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800befc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bf00:	f043 0308 	orr.w	r3, r3, #8
 800bf04:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800bf08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf0c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800bf10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bf14:	f102 0210 	add.w	r2, r2, #16
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	e01f      	b.n	800bf5c <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf20:	f103 0310 	add.w	r3, r3, #16
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	330b      	adds	r3, #11
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	f003 0311 	and.w	r3, r3, #17
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d006      	beq.n	800bf40 <f_open+0x1e8>
					res = FR_DENIED;
 800bf32:	2307      	movs	r3, #7
 800bf34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bf38:	f102 0217 	add.w	r2, r2, #23
 800bf3c:	7013      	strb	r3, [r2, #0]
 800bf3e:	e00d      	b.n	800bf5c <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800bf40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf44:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d005      	beq.n	800bf5c <f_open+0x204>
						res = FR_EXIST;
 800bf50:	2308      	movs	r3, #8
 800bf52:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bf56:	f102 0217 	add.w	r2, r2, #23
 800bf5a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf60:	f103 0317 	add.w	r3, r3, #23
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f040 8113 	bne.w	800c192 <f_open+0x43a>
 800bf6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf70:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bf74:	f003 0308 	and.w	r3, r3, #8
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f000 810a 	beq.w	800c192 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800bf7e:	f7fd f9e3 	bl	8009348 <get_fattime>
 800bf82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf86:	f103 030c 	add.w	r3, r3, #12
 800bf8a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800bf8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bf90:	f103 0310 	add.w	r3, r3, #16
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	330e      	adds	r3, #14
 800bf98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bf9c:	f102 020c 	add.w	r2, r2, #12
 800bfa0:	6812      	ldr	r2, [r2, #0]
 800bfa2:	b2d2      	uxtb	r2, r2
 800bfa4:	701a      	strb	r2, [r3, #0]
 800bfa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfaa:	f103 030c 	add.w	r3, r3, #12
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	0a1b      	lsrs	r3, r3, #8
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfba:	f103 0310 	add.w	r3, r3, #16
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	330f      	adds	r3, #15
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	701a      	strb	r2, [r3, #0]
 800bfc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfca:	f103 030c 	add.w	r3, r3, #12
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	0c1a      	lsrs	r2, r3, #16
 800bfd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfd6:	f103 0310 	add.w	r3, r3, #16
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3310      	adds	r3, #16
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bfe6:	f103 030c 	add.w	r3, r3, #12
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	0e1a      	lsrs	r2, r3, #24
 800bfee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bff2:	f103 0310 	add.w	r3, r3, #16
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3311      	adds	r3, #17
 800bffa:	b2d2      	uxtb	r2, r2
 800bffc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bffe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c002:	f103 0310 	add.w	r3, r3, #16
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	330b      	adds	r3, #11
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800c00e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c012:	f103 0310 	add.w	r3, r3, #16
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	331c      	adds	r3, #28
 800c01a:	2200      	movs	r2, #0
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c022:	f103 0310 	add.w	r3, r3, #16
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	331d      	adds	r3, #29
 800c02a:	2200      	movs	r2, #0
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c032:	f103 0310 	add.w	r3, r3, #16
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	331e      	adds	r3, #30
 800c03a:	2200      	movs	r2, #0
 800c03c:	701a      	strb	r2, [r3, #0]
 800c03e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c042:	f103 0310 	add.w	r3, r3, #16
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	331f      	adds	r3, #31
 800c04a:	2200      	movs	r2, #0
 800c04c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800c04e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c052:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c056:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c05a:	f102 0210 	add.w	r2, r2, #16
 800c05e:	6811      	ldr	r1, [r2, #0]
 800c060:	4618      	mov	r0, r3
 800c062:	f7fe fc06 	bl	800a872 <ld_clust>
 800c066:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c06a:	f103 0308 	add.w	r3, r3, #8
 800c06e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800c070:	2100      	movs	r1, #0
 800c072:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c076:	f103 0310 	add.w	r3, r3, #16
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	f7fe fc27 	bl	800a8ce <st_clust>
				dj.fs->wflag = 1;
 800c080:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c084:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c08c:	2201      	movs	r2, #1
 800c08e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800c090:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c094:	f103 0308 	add.w	r3, r3, #8
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d079      	beq.n	800c192 <f_open+0x43a>
					dw = dj.fs->winsect;
 800c09e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c0a2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c0b0:	f102 020c 	add.w	r2, r2, #12
 800c0b4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800c0b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c0ba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c0be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c0c2:	f102 0208 	add.w	r2, r2, #8
 800c0c6:	6811      	ldr	r1, [r2, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe f823 	bl	800a114 <remove_chain>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c0d4:	f102 0217 	add.w	r2, r2, #23
 800c0d8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800c0da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c0de:	f103 0317 	add.w	r3, r3, #23
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d154      	bne.n	800c192 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800c0e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c0ec:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800c0f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c0f4:	f103 0308 	add.w	r3, r3, #8
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c100:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800c102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c106:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c10a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c10e:	f102 020c 	add.w	r2, r2, #12
 800c112:	6811      	ldr	r1, [r2, #0]
 800c114:	4618      	mov	r0, r3
 800c116:	f7fd fc99 	bl	8009a4c <move_window>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c120:	f102 0217 	add.w	r2, r2, #23
 800c124:	7013      	strb	r3, [r2, #0]
 800c126:	e034      	b.n	800c192 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800c128:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c12c:	f103 0317 	add.w	r3, r3, #23
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d12d      	bne.n	800c192 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800c136:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c13a:	f103 0310 	add.w	r3, r3, #16
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	330b      	adds	r3, #11
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	f003 0310 	and.w	r3, r3, #16
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d009      	beq.n	800c160 <f_open+0x408>
					res = FR_NO_FILE;
 800c14c:	2304      	movs	r3, #4
 800c14e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c152:	f102 0217 	add.w	r2, r2, #23
 800c156:	7013      	strb	r3, [r2, #0]
 800c158:	e01b      	b.n	800c192 <f_open+0x43a>
 800c15a:	bf00      	nop
 800c15c:	2000094c 	.word	0x2000094c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800c160:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c164:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d010      	beq.n	800c192 <f_open+0x43a>
 800c170:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c174:	f103 0310 	add.w	r3, r3, #16
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	330b      	adds	r3, #11
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d005      	beq.n	800c192 <f_open+0x43a>
						res = FR_DENIED;
 800c186:	2307      	movs	r3, #7
 800c188:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c18c:	f102 0217 	add.w	r2, r2, #23
 800c190:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800c192:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c196:	f103 0317 	add.w	r3, r3, #23
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d157      	bne.n	800c250 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c1a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c1a4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c1a8:	f003 0308 	and.w	r3, r3, #8
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00a      	beq.n	800c1c6 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800c1b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c1ba:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c1be:	f043 0320 	orr.w	r3, r3, #32
 800c1c2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800c1c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c1ca:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c1d8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c1dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c1e0:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800c1e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c1e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c1ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c1f4:	f103 0310 	add.w	r3, r3, #16
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c1fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c200:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c204:	f023 0301 	bic.w	r3, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	bf14      	ite	ne
 800c20c:	2301      	movne	r3, #1
 800c20e:	2300      	moveq	r3, #0
 800c210:	b2db      	uxtb	r3, r3
 800c212:	461a      	mov	r2, r3
 800c214:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c218:	3b18      	subs	r3, #24
 800c21a:	4611      	mov	r1, r2
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fd fa99 	bl	8009754 <inc_lock>
 800c222:	4602      	mov	r2, r0
 800c224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c228:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c230:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800c232:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c236:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c240:	2b00      	cmp	r3, #0
 800c242:	d105      	bne.n	800c250 <f_open+0x4f8>
 800c244:	2302      	movs	r3, #2
 800c246:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c24a:	f102 0217 	add.w	r2, r2, #23
 800c24e:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800c250:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c254:	f103 0317 	add.w	r3, r3, #23
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f040 8088 	bne.w	800c370 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800c260:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c264:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c26c:	461a      	mov	r2, r3
 800c26e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c272:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c276:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800c278:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c27c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c284:	2200      	movs	r2, #0
 800c286:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800c288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c28c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c290:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c294:	f102 0210 	add.w	r2, r2, #16
 800c298:	6811      	ldr	r1, [r2, #0]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe fae9 	bl	800a872 <ld_clust>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c2a6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ae:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c2b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c2b4:	f103 0310 	add.w	r3, r3, #16
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	331f      	adds	r3, #31
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	061a      	lsls	r2, r3, #24
 800c2c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c2c4:	f103 0310 	add.w	r3, r3, #16
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	331e      	adds	r3, #30
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	041b      	lsls	r3, r3, #16
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c2d6:	f102 0210 	add.w	r2, r2, #16
 800c2da:	6812      	ldr	r2, [r2, #0]
 800c2dc:	321d      	adds	r2, #29
 800c2de:	7812      	ldrb	r2, [r2, #0]
 800c2e0:	0212      	lsls	r2, r2, #8
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c2e8:	f102 0210 	add.w	r2, r2, #16
 800c2ec:	6812      	ldr	r2, [r2, #0]
 800c2ee:	321c      	adds	r2, #28
 800c2f0:	7812      	ldrb	r2, [r2, #0]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c2f8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c2fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c300:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800c302:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c306:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c30e:	461a      	mov	r2, r3
 800c310:	2300      	movs	r3, #0
 800c312:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800c314:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c318:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c320:	461a      	mov	r2, r3
 800c322:	2300      	movs	r3, #0
 800c324:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c32a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c332:	461a      	mov	r2, r3
 800c334:	2300      	movs	r3, #0
 800c336:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c33c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c340:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c344:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c348:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c34c:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800c34e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c352:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c360:	88da      	ldrh	r2, [r3, #6]
 800c362:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c366:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c36e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800c370:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c374:	f103 0317 	add.w	r3, r3, #23
 800c378:	781b      	ldrb	r3, [r3, #0]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop

0800c388 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	; 0x28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2200      	movs	r2, #0
 800c39e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff fc53 	bl	800bc4c <validate>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <f_write+0x2c>
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	e21e      	b.n	800c7f2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ba:	79db      	ldrb	r3, [r3, #7]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d004      	beq.n	800c3ca <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3c6:	79db      	ldrb	r3, [r3, #7]
 800c3c8:	e213      	b.n	800c7f2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d0:	799b      	ldrb	r3, [r3, #6]
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c3da:	2307      	movs	r3, #7
 800c3dc:	e209      	b.n	800c7f2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3e4:	689a      	ldr	r2, [r3, #8]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	441a      	add	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	f080 81d9 	bcs.w	800c7aa <f_write+0x422>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c3fc:	e1d5      	b.n	800c7aa <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c40c:	6812      	ldr	r2, [r2, #0]
 800c40e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c412:	8952      	ldrh	r2, [r2, #10]
 800c414:	fbb3 f1f2 	udiv	r1, r3, r2
 800c418:	fb01 f202 	mul.w	r2, r1, r2
 800c41c:	1a9b      	subs	r3, r3, r2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f040 8169 	bne.w	800c6f6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c432:	6812      	ldr	r2, [r2, #0]
 800c434:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c438:	8952      	ldrh	r2, [r2, #10]
 800c43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c44c:	789b      	ldrb	r3, [r3, #2]
 800c44e:	3b01      	subs	r3, #1
 800c450:	b2db      	uxtb	r3, r3
 800c452:	4013      	ands	r3, r2
 800c454:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c456:	7dbb      	ldrb	r3, [r7, #22]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d15f      	bne.n	800c51c <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d111      	bne.n	800c48c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	2b00      	cmp	r3, #0
 800c476:	d126      	bne.n	800c4c6 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2100      	movs	r1, #0
 800c482:	4618      	mov	r0, r3
 800c484:	f7fd fea7 	bl	800a1d6 <create_chain>
 800c488:	6278      	str	r0, [r7, #36]	; 0x24
 800c48a:	e01c      	b.n	800c4c6 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	2b00      	cmp	r3, #0
 800c496:	d009      	beq.n	800c4ac <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f7fd ff3f 	bl	800a326 <clmt_clust>
 800c4a8:	6278      	str	r0, [r7, #36]	; 0x24
 800c4aa:	e00c      	b.n	800c4c6 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	f7fd fe89 	bl	800a1d6 <create_chain>
 800c4c4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 8173 	beq.w	800c7b4 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d106      	bne.n	800c4e2 <f_write+0x15a>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4da:	2202      	movs	r2, #2
 800c4dc:	71da      	strb	r2, [r3, #7]
 800c4de:	2302      	movs	r3, #2
 800c4e0:	e187      	b.n	800c7f2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e8:	d106      	bne.n	800c4f8 <f_write+0x170>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	71da      	strb	r2, [r3, #7]
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e17c      	b.n	800c7f2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fe:	461a      	mov	r2, r3
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d105      	bne.n	800c51c <f_write+0x194>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c516:	461a      	mov	r2, r3
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c522:	799b      	ldrb	r3, [r3, #6]
 800c524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d023      	beq.n	800c574 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c538:	7858      	ldrb	r0, [r3, #1]
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c542:	699a      	ldr	r2, [r3, #24]
 800c544:	2301      	movs	r3, #1
 800c546:	f7fc ffbb 	bl	80094c0 <disk_write>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d006      	beq.n	800c55e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c556:	2201      	movs	r2, #1
 800c558:	71da      	strb	r2, [r3, #7]
 800c55a:	2301      	movs	r3, #1
 800c55c:	e149      	b.n	800c7f2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c564:	799b      	ldrb	r3, [r3, #6]
 800c566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c572:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f7fd fb51 	bl	8009c2e <clust2sect>
 800c58c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d106      	bne.n	800c5a2 <f_write+0x21a>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c59a:	2202      	movs	r2, #2
 800c59c:	71da      	strb	r2, [r3, #7]
 800c59e:	2302      	movs	r3, #2
 800c5a0:	e127      	b.n	800c7f2 <f_write+0x46a>
			sect += csect;
 800c5a2:	7dbb      	ldrb	r3, [r7, #22]
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b6:	895b      	ldrh	r3, [r3, #10]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5c0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d069      	beq.n	800c69c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c5c8:	7dba      	ldrb	r2, [r7, #22]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5d4:	6812      	ldr	r2, [r2, #0]
 800c5d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5da:	7892      	ldrb	r2, [r2, #2]
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d90a      	bls.n	800c5f6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ec:	789b      	ldrb	r3, [r3, #2]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	7dbb      	ldrb	r3, [r7, #22]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c602:	7858      	ldrb	r0, [r3, #1]
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	69b9      	ldr	r1, [r7, #24]
 800c60a:	f7fc ff59 	bl	80094c0 <disk_write>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d006      	beq.n	800c622 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c61a:	2201      	movs	r2, #1
 800c61c:	71da      	strb	r2, [r3, #7]
 800c61e:	2301      	movs	r3, #1
 800c620:	e0e7      	b.n	800c7f2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c628:	699a      	ldr	r2, [r3, #24]
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	429a      	cmp	r2, r3
 800c632:	d926      	bls.n	800c682 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c63c:	699a      	ldr	r2, [r3, #24]
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c648:	6812      	ldr	r2, [r2, #0]
 800c64a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c64e:	8952      	ldrh	r2, [r2, #10]
 800c650:	fb02 f303 	mul.w	r3, r2, r3
 800c654:	69ba      	ldr	r2, [r7, #24]
 800c656:	18d1      	adds	r1, r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c664:	895b      	ldrh	r3, [r3, #10]
 800c666:	461a      	mov	r2, r3
 800c668:	f7fc ff68 	bl	800953c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c672:	799b      	ldrb	r3, [r3, #6]
 800c674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c680:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c68e:	895b      	ldrh	r3, [r3, #10]
 800c690:	461a      	mov	r2, r3
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	fb02 f303 	mul.w	r3, r2, r3
 800c698:	623b      	str	r3, [r7, #32]
				continue;
 800c69a:	e06e      	b.n	800c77a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d01f      	beq.n	800c6ea <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d215      	bcs.n	800c6ea <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ca:	7858      	ldrb	r0, [r3, #1]
 800c6cc:	68f9      	ldr	r1, [r7, #12]
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	f7fc fed5 	bl	8009480 <disk_read>
 800c6d6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d006      	beq.n	800c6ea <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	71da      	strb	r2, [r3, #7]
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e083      	b.n	800c7f2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c702:	895b      	ldrh	r3, [r3, #10]
 800c704:	4618      	mov	r0, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c714:	6812      	ldr	r2, [r2, #0]
 800c716:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c71a:	8952      	ldrh	r2, [r2, #10]
 800c71c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c720:	fb01 f202 	mul.w	r2, r1, r2
 800c724:	1a9b      	subs	r3, r3, r2
 800c726:	1ac3      	subs	r3, r0, r3
 800c728:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800c72a:	6a3a      	ldr	r2, [r7, #32]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d901      	bls.n	800c736 <f_write+0x3ae>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c74a:	8952      	ldrh	r2, [r2, #10]
 800c74c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c750:	fb01 f202 	mul.w	r2, r1, r2
 800c754:	1a9b      	subs	r3, r3, r2
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	4413      	add	r3, r2
 800c75a:	6a3a      	ldr	r2, [r7, #32]
 800c75c:	69b9      	ldr	r1, [r7, #24]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fc feec 	bl	800953c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76a:	799b      	ldrb	r3, [r3, #6]
 800c76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c770:	b2da      	uxtb	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c778:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800c77a:	69ba      	ldr	r2, [r7, #24]
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	4413      	add	r3, r2
 800c780:	61bb      	str	r3, [r7, #24]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c788:	689a      	ldr	r2, [r3, #8]
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	4413      	add	r3, r2
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c794:	6093      	str	r3, [r2, #8]
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	441a      	add	r2, r3
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6a3b      	ldr	r3, [r7, #32]
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f47f ae26 	bne.w	800c3fe <f_write+0x76>
 800c7b2:	e000      	b.n	800c7b6 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7b4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d907      	bls.n	800c7da <f_write+0x452>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c7d8:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7e0:	799b      	ldrb	r3, [r3, #6]
 800c7e2:	f043 0320 	orr.w	r3, r3, #32
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ee:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3728      	adds	r7, #40	; 0x28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b086      	sub	sp, #24
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff fa22 	bl	800bc4c <validate>
 800c808:	4603      	mov	r3, r0
 800c80a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f040 80bc 	bne.w	800c98c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c81a:	799b      	ldrb	r3, [r3, #6]
 800c81c:	f003 0320 	and.w	r3, r3, #32
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 80b3 	beq.w	800c98c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c82c:	799b      	ldrb	r3, [r3, #6]
 800c82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c832:	2b00      	cmp	r3, #0
 800c834:	d01e      	beq.n	800c874 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c842:	7858      	ldrb	r0, [r3, #1]
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c84c:	699a      	ldr	r2, [r3, #24]
 800c84e:	2301      	movs	r3, #1
 800c850:	f7fc fe36 	bl	80094c0 <disk_write>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c85a:	2301      	movs	r3, #1
 800c85c:	e097      	b.n	800c98e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c864:	799b      	ldrb	r3, [r3, #6]
 800c866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c872:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	4619      	mov	r1, r3
 800c886:	4610      	mov	r0, r2
 800c888:	f7fd f8e0 	bl	8009a4c <move_window>
 800c88c:	4603      	mov	r3, r0
 800c88e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d17a      	bne.n	800c98c <f_sync+0x192>
				dir = fp->dir_ptr;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	330b      	adds	r3, #11
 800c8a4:	781a      	ldrb	r2, [r3, #0]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	330b      	adds	r3, #11
 800c8aa:	f042 0220 	orr.w	r2, r2, #32
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	331c      	adds	r3, #28
 800c8be:	b2d2      	uxtb	r2, r2
 800c8c0:	701a      	strb	r2, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	0a1b      	lsrs	r3, r3, #8
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	331d      	adds	r3, #29
 800c8d4:	b2d2      	uxtb	r2, r2
 800c8d6:	701a      	strb	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	0c1a      	lsrs	r2, r3, #16
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	331e      	adds	r3, #30
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	0e1a      	lsrs	r2, r3, #24
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	331f      	adds	r3, #31
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	4619      	mov	r1, r3
 800c906:	6938      	ldr	r0, [r7, #16]
 800c908:	f7fd ffe1 	bl	800a8ce <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c90c:	f7fc fd1c 	bl	8009348 <get_fattime>
 800c910:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	3316      	adds	r3, #22
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	b2d2      	uxtb	r2, r2
 800c91a:	701a      	strb	r2, [r3, #0]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	0a1b      	lsrs	r3, r3, #8
 800c922:	b29a      	uxth	r2, r3
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	3317      	adds	r3, #23
 800c928:	b2d2      	uxtb	r2, r2
 800c92a:	701a      	strb	r2, [r3, #0]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	0c1a      	lsrs	r2, r3, #16
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	3318      	adds	r3, #24
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	0e1a      	lsrs	r2, r3, #24
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	3319      	adds	r3, #25
 800c940:	b2d2      	uxtb	r2, r2
 800c942:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	3312      	adds	r3, #18
 800c948:	2200      	movs	r2, #0
 800c94a:	701a      	strb	r2, [r3, #0]
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	3313      	adds	r3, #19
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c95a:	799b      	ldrb	r3, [r3, #6]
 800c95c:	f023 0320 	bic.w	r3, r3, #32
 800c960:	b2da      	uxtb	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c968:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c976:	2201      	movs	r2, #1
 800c978:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4618      	mov	r0, r3
 800c984:	f7fd f894 	bl	8009ab0 <sync_fs>
 800c988:	4603      	mov	r3, r0
 800c98a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b084      	sub	sp, #16
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7ff ff2b 	bl	800c7fa <f_sync>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d119      	bne.n	800c9e2 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7ff f94c 	bl	800bc4c <validate>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d111      	bne.n	800c9e2 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fc ff80 	bl	80098cc <dec_lock>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d105      	bne.n	800c9e2 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9dc:	461a      	mov	r2, r3
 800c9de:	2300      	movs	r3, #0
 800c9e0:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b090      	sub	sp, #64	; 0x40
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff f928 	bl	800bc4c <validate>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ca02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d002      	beq.n	800ca10 <f_lseek+0x24>
 800ca0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca0e:	e2da      	b.n	800cfc6 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca16:	79db      	ldrb	r3, [r3, #7]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca22:	79db      	ldrb	r3, [r3, #7]
 800ca24:	e2cf      	b.n	800cfc6 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f000 8124 	beq.w	800cc7c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3a:	d16c      	bne.n	800cb16 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca44:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	1d1a      	adds	r2, r3, #4
 800ca4a:	627a      	str	r2, [r7, #36]	; 0x24
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	617b      	str	r3, [r7, #20]
 800ca50:	2302      	movs	r3, #2
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d046      	beq.n	800caf2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	613b      	str	r3, [r7, #16]
 800ca68:	2300      	movs	r3, #0
 800ca6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	3302      	adds	r3, #2
 800ca70:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	60fb      	str	r3, [r7, #12]
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	3301      	adds	r3, #1
 800ca7a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fd f8f5 	bl	8009c76 <get_fat>
 800ca8c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d806      	bhi.n	800caa2 <f_lseek+0xb6>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	71da      	strb	r2, [r3, #7]
 800ca9e:	2302      	movs	r3, #2
 800caa0:	e291      	b.n	800cfc6 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800caa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa8:	d106      	bne.n	800cab8 <f_lseek+0xcc>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cab0:	2201      	movs	r2, #1
 800cab2:	71da      	strb	r2, [r3, #7]
 800cab4:	2301      	movs	r3, #1
 800cab6:	e286      	b.n	800cfc6 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3301      	adds	r3, #1
 800cabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d0d7      	beq.n	800ca72 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d809      	bhi.n	800cade <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cacc:	1d1a      	adds	r2, r3, #4
 800cace:	627a      	str	r2, [r7, #36]	; 0x24
 800cad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	1d1a      	adds	r2, r3, #4
 800cad8:	627a      	str	r2, [r7, #36]	; 0x24
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caee:	429a      	cmp	r2, r3
 800caf0:	d3b8      	bcc.n	800ca64 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cafc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800cafe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d803      	bhi.n	800cb0e <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	2200      	movs	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	e259      	b.n	800cfc2 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cb0e:	2311      	movs	r3, #17
 800cb10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cb14:	e255      	b.n	800cfc2 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d904      	bls.n	800cb2e <f_lseek+0x142>
				ofs = fp->fsize;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb34:	461a      	mov	r2, r3
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 8240 	beq.w	800cfc2 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	4619      	mov	r1, r3
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7fd fbec 	bl	800a326 <clmt_clust>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb56:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb66:	695b      	ldr	r3, [r3, #20]
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	f7fd f85f 	bl	8009c2e <clust2sect>
 800cb70:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d106      	bne.n	800cb86 <f_lseek+0x19a>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb7e:	2202      	movs	r2, #2
 800cb80:	71da      	strb	r2, [r3, #7]
 800cb82:	2302      	movs	r3, #2
 800cb84:	e21f      	b.n	800cfc6 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb90:	6812      	ldr	r2, [r2, #0]
 800cb92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb96:	8952      	ldrh	r2, [r2, #10]
 800cb98:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cba2:	6812      	ldr	r2, [r2, #0]
 800cba4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cba8:	7892      	ldrb	r2, [r2, #2]
 800cbaa:	3a01      	subs	r2, #1
 800cbac:	4013      	ands	r3, r2
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cbc2:	6812      	ldr	r2, [r2, #0]
 800cbc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cbc8:	8952      	ldrh	r2, [r2, #10]
 800cbca:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbce:	fb01 f202 	mul.w	r2, r1, r2
 800cbd2:	1a9b      	subs	r3, r3, r2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 81f4 	beq.w	800cfc2 <f_lseek+0x5d6>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	69ba      	ldr	r2, [r7, #24]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	f000 81ec 	beq.w	800cfc2 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbf0:	799b      	ldrb	r3, [r3, #6]
 800cbf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d023      	beq.n	800cc42 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc06:	7858      	ldrb	r0, [r3, #1]
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc10:	699a      	ldr	r2, [r3, #24]
 800cc12:	2301      	movs	r3, #1
 800cc14:	f7fc fc54 	bl	80094c0 <disk_write>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d006      	beq.n	800cc2c <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc24:	2201      	movs	r2, #1
 800cc26:	71da      	strb	r2, [r3, #7]
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e1cc      	b.n	800cfc6 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc32:	799b      	ldrb	r3, [r3, #6]
 800cc34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc40:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc4e:	7858      	ldrb	r0, [r3, #1]
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	2301      	movs	r3, #1
 800cc54:	69ba      	ldr	r2, [r7, #24]
 800cc56:	f7fc fc13 	bl	8009480 <disk_read>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d006      	beq.n	800cc6e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc66:	2201      	movs	r2, #1
 800cc68:	71da      	strb	r2, [r3, #7]
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e1ab      	b.n	800cfc6 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc74:	461a      	mov	r2, r3
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	6193      	str	r3, [r2, #24]
 800cc7a:	e1a2      	b.n	800cfc2 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	683a      	ldr	r2, [r7, #0]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d90c      	bls.n	800cca4 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc90:	799b      	ldrb	r3, [r3, #6]
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d104      	bne.n	800cca4 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccbc:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 8100 	beq.w	800cec6 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccd2:	789b      	ldrb	r3, [r3, #2]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cce2:	895b      	ldrh	r3, [r3, #10]
 800cce4:	fb02 f303 	mul.w	r3, r2, r3
 800cce8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d021      	beq.n	800cd34 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	1e5a      	subs	r2, r3, #1
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	fbb2 f2f3 	udiv	r2, r2, r3
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	1e59      	subs	r1, r3, #1
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d315      	bcc.n	800cd34 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	1e5a      	subs	r2, r3, #1
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	425b      	negs	r3, r3
 800cd10:	4013      	ands	r3, r2
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cd18:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd2e:	695b      	ldr	r3, [r3, #20]
 800cd30:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd32:	e031      	b.n	800cd98 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d123      	bne.n	800cd8c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fd fa41 	bl	800a1d6 <create_chain>
 800cd54:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d106      	bne.n	800cd6a <f_lseek+0x37e>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd62:	2202      	movs	r2, #2
 800cd64:	71da      	strb	r2, [r3, #7]
 800cd66:	2302      	movs	r3, #2
 800cd68:	e12d      	b.n	800cfc6 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd70:	d106      	bne.n	800cd80 <f_lseek+0x394>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd78:	2201      	movs	r2, #1
 800cd7a:	71da      	strb	r2, [r3, #7]
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e122      	b.n	800cfc6 <f_lseek+0x5da>
					fp->sclust = clst;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd86:	461a      	mov	r2, r3
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd92:	461a      	mov	r2, r3
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 8093 	beq.w	800cec6 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800cda0:	e052      	b.n	800ce48 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cda8:	799b      	ldrb	r3, [r3, #6]
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00e      	beq.n	800cdd0 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fd fa0a 	bl	800a1d6 <create_chain>
 800cdc2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10b      	bne.n	800cde2 <f_lseek+0x3f6>
							ofs = bcs; break;
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	603b      	str	r3, [r7, #0]
 800cdce:	e03f      	b.n	800ce50 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fc ff4b 	bl	8009c76 <get_fat>
 800cde0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde8:	d106      	bne.n	800cdf8 <f_lseek+0x40c>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	71da      	strb	r2, [r3, #7]
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e0e6      	b.n	800cfc6 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d909      	bls.n	800ce12 <f_lseek+0x426>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d306      	bcc.n	800ce20 <f_lseek+0x434>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce18:	2202      	movs	r2, #2
 800ce1a:	71da      	strb	r2, [r3, #7]
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	e0d2      	b.n	800cfc6 <f_lseek+0x5da>
					fp->clust = clst;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce26:	461a      	mov	r2, r3
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce32:	689a      	ldr	r2, [r3, #8]
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	4413      	add	r3, r2
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ce3e:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d8a8      	bhi.n	800cda2 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce56:	689a      	ldr	r2, [r3, #8]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ce62:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce70:	895b      	ldrh	r3, [r3, #10]
 800ce72:	461a      	mov	r2, r3
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce7a:	fb01 f202 	mul.w	r2, r1, r2
 800ce7e:	1a9b      	subs	r3, r3, r2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d020      	beq.n	800cec6 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fc fecd 	bl	8009c2e <clust2sect>
 800ce94:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d106      	bne.n	800ceaa <f_lseek+0x4be>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cea2:	2202      	movs	r2, #2
 800cea4:	71da      	strb	r2, [r3, #7]
 800cea6:	2302      	movs	r3, #2
 800cea8:	e08d      	b.n	800cfc6 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb6:	895b      	ldrh	r3, [r3, #10]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cec2:	4413      	add	r3, r2
 800cec4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ced4:	6812      	ldr	r2, [r2, #0]
 800ced6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ceda:	8952      	ldrh	r2, [r2, #10]
 800cedc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cee0:	fb01 f202 	mul.w	r2, r1, r2
 800cee4:	1a9b      	subs	r3, r3, r2
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d04e      	beq.n	800cf88 <f_lseek+0x59c>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef0:	699b      	ldr	r3, [r3, #24]
 800cef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d047      	beq.n	800cf88 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cefe:	799b      	ldrb	r3, [r3, #6]
 800cf00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d023      	beq.n	800cf50 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf14:	7858      	ldrb	r0, [r3, #1]
 800cf16:	6879      	ldr	r1, [r7, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf1e:	699a      	ldr	r2, [r3, #24]
 800cf20:	2301      	movs	r3, #1
 800cf22:	f7fc facd 	bl	80094c0 <disk_write>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d006      	beq.n	800cf3a <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf32:	2201      	movs	r2, #1
 800cf34:	71da      	strb	r2, [r3, #7]
 800cf36:	2301      	movs	r3, #1
 800cf38:	e045      	b.n	800cfc6 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf40:	799b      	ldrb	r3, [r3, #6]
 800cf42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf4e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf5c:	7858      	ldrb	r0, [r3, #1]
 800cf5e:	6879      	ldr	r1, [r7, #4]
 800cf60:	2301      	movs	r3, #1
 800cf62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf64:	f7fc fa8c 	bl	8009480 <disk_read>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d006      	beq.n	800cf7c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf74:	2201      	movs	r2, #1
 800cf76:	71da      	strb	r2, [r3, #7]
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e024      	b.n	800cfc6 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf82:	461a      	mov	r2, r3
 800cf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf86:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d912      	bls.n	800cfc2 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfaa:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfb2:	799b      	ldrb	r3, [r3, #6]
 800cfb4:	f043 0320 	orr.w	r3, r3, #32
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfc0:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800cfc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3740      	adds	r7, #64	; 0x40
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b084      	sub	sp, #16
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	2b0a      	cmp	r3, #10
 800cfde:	d103      	bne.n	800cfe8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800cfe0:	210d      	movs	r1, #13
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7ff fff3 	bl	800cfce <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	db25      	blt.n	800d040 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	1c5a      	adds	r2, r3, #1
 800cff8:	60fa      	str	r2, [r7, #12]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	4413      	add	r3, r2
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b3c      	cmp	r3, #60	; 0x3c
 800d006:	dd12      	ble.n	800d02e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f103 010c 	add.w	r1, r3, #12
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	f107 0308 	add.w	r3, r7, #8
 800d018:	f7ff f9b6 	bl	800c388 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	429a      	cmp	r2, r3
 800d022:	d101      	bne.n	800d028 <putc_bfd+0x5a>
 800d024:	2300      	movs	r3, #0
 800d026:	e001      	b.n	800d02c <putc_bfd+0x5e>
 800d028:	f04f 33ff 	mov.w	r3, #4294967295
 800d02c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	1c5a      	adds	r2, r3, #1
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	609a      	str	r2, [r3, #8]
 800d03e:	e000      	b.n	800d042 <putc_bfd+0x74>
	if (i < 0) return;
 800d040:	bf00      	nop
}
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d048:	b40e      	push	{r1, r2, r3}
 800d04a:	b590      	push	{r4, r7, lr}
 800d04c:	b0a2      	sub	sp, #136	; 0x88
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	60bb      	str	r3, [r7, #8]
	pb.nchr = pb.idx = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	60fb      	str	r3, [r7, #12]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	613b      	str	r3, [r7, #16]

	va_start(arp, fmt);
 800d05e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d062:	66bb      	str	r3, [r7, #104]	; 0x68

	for (;;) {
		c = *fmt++;
 800d064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d068:	1c5a      	adds	r2, r3, #1
 800d06a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if (c == 0) break;			/* End of string */
 800d074:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 81d7 	beq.w	800d42c <f_printf+0x3e4>
		if (c != '%') {				/* Non escape character */
 800d07e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d082:	2b25      	cmp	r3, #37	; 0x25
 800d084:	d008      	beq.n	800d098 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d086:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800d08a:	f107 0308 	add.w	r3, r7, #8
 800d08e:	4611      	mov	r1, r2
 800d090:	4618      	mov	r0, r3
 800d092:	f7ff ff9c 	bl	800cfce <putc_bfd>
			continue;
 800d096:	e1c8      	b.n	800d42a <f_printf+0x3e2>
		}
		w = f = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800d09e:	2300      	movs	r3, #0
 800d0a0:	67bb      	str	r3, [r7, #120]	; 0x78
		c = *fmt++;
 800d0a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if (c == '0') {				/* Flag: '0' padding */
 800d0b2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d0b6:	2b30      	cmp	r3, #48	; 0x30
 800d0b8:	d10b      	bne.n	800d0d2 <f_printf+0x8a>
			f = 1; c = *fmt++;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800d0c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800d0d0:	e022      	b.n	800d118 <f_printf+0xd0>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d0d2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d0d6:	2b2d      	cmp	r3, #45	; 0x2d
 800d0d8:	d11e      	bne.n	800d118 <f_printf+0xd0>
				f = 2; c = *fmt++;
 800d0da:	2302      	movs	r3, #2
 800d0dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800d0e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d0f0:	e012      	b.n	800d118 <f_printf+0xd0>
			w = w * 10 + c - '0';
 800d0f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d102:	4413      	add	r3, r2
 800d104:	3b30      	subs	r3, #48	; 0x30
 800d106:	67bb      	str	r3, [r7, #120]	; 0x78
			c = *fmt++;
 800d108:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		while (IsDigit(c)) {		/* Precision */
 800d118:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d11c:	2b2f      	cmp	r3, #47	; 0x2f
 800d11e:	d903      	bls.n	800d128 <f_printf+0xe0>
 800d120:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d124:	2b39      	cmp	r3, #57	; 0x39
 800d126:	d9e4      	bls.n	800d0f2 <f_printf+0xaa>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d128:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d12c:	2b6c      	cmp	r3, #108	; 0x6c
 800d12e:	d003      	beq.n	800d138 <f_printf+0xf0>
 800d130:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d134:	2b4c      	cmp	r3, #76	; 0x4c
 800d136:	d10d      	bne.n	800d154 <f_printf+0x10c>
			f |= 4; c = *fmt++;
 800d138:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d13c:	f043 0304 	orr.w	r3, r3, #4
 800d140:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800d144:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		}
		if (!c) break;
 800d154:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 8169 	beq.w	800d430 <f_printf+0x3e8>
		d = c;
 800d15e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d162:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		if (IsLower(d)) d -= 0x20;
 800d166:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d16a:	2b60      	cmp	r3, #96	; 0x60
 800d16c:	d908      	bls.n	800d180 <f_printf+0x138>
 800d16e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d172:	2b7a      	cmp	r3, #122	; 0x7a
 800d174:	d804      	bhi.n	800d180 <f_printf+0x138>
 800d176:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d17a:	3b20      	subs	r3, #32
 800d17c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		switch (d) {				/* Type is... */
 800d180:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d184:	3b42      	subs	r3, #66	; 0x42
 800d186:	2b16      	cmp	r3, #22
 800d188:	f200 808f 	bhi.w	800d2aa <f_printf+0x262>
 800d18c:	a201      	add	r2, pc, #4	; (adr r2, 800d194 <f_printf+0x14c>)
 800d18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d192:	bf00      	nop
 800d194:	0800d28b 	.word	0x0800d28b
 800d198:	0800d273 	.word	0x0800d273
 800d19c:	0800d29b 	.word	0x0800d29b
 800d1a0:	0800d2ab 	.word	0x0800d2ab
 800d1a4:	0800d2ab 	.word	0x0800d2ab
 800d1a8:	0800d2ab 	.word	0x0800d2ab
 800d1ac:	0800d2ab 	.word	0x0800d2ab
 800d1b0:	0800d2ab 	.word	0x0800d2ab
 800d1b4:	0800d2ab 	.word	0x0800d2ab
 800d1b8:	0800d2ab 	.word	0x0800d2ab
 800d1bc:	0800d2ab 	.word	0x0800d2ab
 800d1c0:	0800d2ab 	.word	0x0800d2ab
 800d1c4:	0800d2ab 	.word	0x0800d2ab
 800d1c8:	0800d293 	.word	0x0800d293
 800d1cc:	0800d2ab 	.word	0x0800d2ab
 800d1d0:	0800d2ab 	.word	0x0800d2ab
 800d1d4:	0800d2ab 	.word	0x0800d2ab
 800d1d8:	0800d1f1 	.word	0x0800d1f1
 800d1dc:	0800d2ab 	.word	0x0800d2ab
 800d1e0:	0800d29b 	.word	0x0800d29b
 800d1e4:	0800d2ab 	.word	0x0800d2ab
 800d1e8:	0800d2ab 	.word	0x0800d2ab
 800d1ec:	0800d2a3 	.word	0x0800d2a3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d1f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1f2:	1d1a      	adds	r2, r3, #4
 800d1f4:	66ba      	str	r2, [r7, #104]	; 0x68
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	66fb      	str	r3, [r7, #108]	; 0x6c
			for (j = 0; p[j]; j++) ;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d1fe:	e002      	b.n	800d206 <f_printf+0x1be>
 800d200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d202:	3301      	adds	r3, #1
 800d204:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d206:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d20a:	4413      	add	r3, r2
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1f6      	bne.n	800d200 <f_printf+0x1b8>
			if (!(f & 2)) {
 800d212:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d216:	f003 0302 	and.w	r3, r3, #2
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d117      	bne.n	800d24e <f_printf+0x206>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d21e:	e005      	b.n	800d22c <f_printf+0x1e4>
 800d220:	f107 0308 	add.w	r3, r7, #8
 800d224:	2120      	movs	r1, #32
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff fed1 	bl	800cfce <putc_bfd>
 800d22c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d22e:	1c5a      	adds	r2, r3, #1
 800d230:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d232:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d234:	429a      	cmp	r2, r3
 800d236:	d8f3      	bhi.n	800d220 <f_printf+0x1d8>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d238:	e009      	b.n	800d24e <f_printf+0x206>
 800d23a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d23c:	1c5a      	adds	r2, r3, #1
 800d23e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d240:	781a      	ldrb	r2, [r3, #0]
 800d242:	f107 0308 	add.w	r3, r7, #8
 800d246:	4611      	mov	r1, r2
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff fec0 	bl	800cfce <putc_bfd>
 800d24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1f1      	bne.n	800d23a <f_printf+0x1f2>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d256:	e005      	b.n	800d264 <f_printf+0x21c>
 800d258:	f107 0308 	add.w	r3, r7, #8
 800d25c:	2120      	movs	r1, #32
 800d25e:	4618      	mov	r0, r3
 800d260:	f7ff feb5 	bl	800cfce <putc_bfd>
 800d264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d26a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d8f3      	bhi.n	800d258 <f_printf+0x210>
			continue;
 800d270:	e0db      	b.n	800d42a <f_printf+0x3e2>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d274:	1d1a      	adds	r2, r3, #4
 800d276:	66ba      	str	r2, [r7, #104]	; 0x68
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	f107 0308 	add.w	r3, r7, #8
 800d280:	4611      	mov	r1, r2
 800d282:	4618      	mov	r0, r3
 800d284:	f7ff fea3 	bl	800cfce <putc_bfd>
 800d288:	e0cf      	b.n	800d42a <f_printf+0x3e2>
		case 'B' :					/* Binary */
			r = 2; break;
 800d28a:	2302      	movs	r3, #2
 800d28c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800d290:	e014      	b.n	800d2bc <f_printf+0x274>
		case 'O' :					/* Octal */
			r = 8; break;
 800d292:	2308      	movs	r3, #8
 800d294:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800d298:	e010      	b.n	800d2bc <f_printf+0x274>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d29a:	230a      	movs	r3, #10
 800d29c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800d2a0:	e00c      	b.n	800d2bc <f_printf+0x274>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800d2a8:	e008      	b.n	800d2bc <f_printf+0x274>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d2aa:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800d2ae:	f107 0308 	add.w	r3, r7, #8
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fe8a 	bl	800cfce <putc_bfd>
 800d2ba:	e0b6      	b.n	800d42a <f_printf+0x3e2>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d2bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d2c0:	f003 0304 	and.w	r3, r3, #4
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d004      	beq.n	800d2d2 <f_printf+0x28a>
 800d2c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2ca:	1d1a      	adds	r2, r3, #4
 800d2cc:	66ba      	str	r2, [r7, #104]	; 0x68
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	e00c      	b.n	800d2ec <f_printf+0x2a4>
 800d2d2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d2d6:	2b44      	cmp	r3, #68	; 0x44
 800d2d8:	d104      	bne.n	800d2e4 <f_printf+0x29c>
 800d2da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2dc:	1d1a      	adds	r2, r3, #4
 800d2de:	66ba      	str	r2, [r7, #104]	; 0x68
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	e003      	b.n	800d2ec <f_printf+0x2a4>
 800d2e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2e6:	1d1a      	adds	r2, r3, #4
 800d2e8:	66ba      	str	r2, [r7, #104]	; 0x68
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	677b      	str	r3, [r7, #116]	; 0x74
		if (d == 'D' && (v & 0x80000000)) {
 800d2ee:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d2f2:	2b44      	cmp	r3, #68	; 0x44
 800d2f4:	d10b      	bne.n	800d30e <f_printf+0x2c6>
 800d2f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	da08      	bge.n	800d30e <f_printf+0x2c6>
			v = 0 - v;
 800d2fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2fe:	425b      	negs	r3, r3
 800d300:	677b      	str	r3, [r7, #116]	; 0x74
			f |= 8;
 800d302:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d306:	f043 0308 	orr.w	r3, r3, #8
 800d30a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		i = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		do {
			d = (TCHAR)(v % r); v /= r;
 800d314:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800d318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d31a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d31e:	fb01 f202 	mul.w	r2, r1, r2
 800d322:	1a9b      	subs	r3, r3, r2
 800d324:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800d328:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800d32c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d332:	677b      	str	r3, [r7, #116]	; 0x74
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d334:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d338:	2b09      	cmp	r3, #9
 800d33a:	d90b      	bls.n	800d354 <f_printf+0x30c>
 800d33c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d340:	2b78      	cmp	r3, #120	; 0x78
 800d342:	d101      	bne.n	800d348 <f_printf+0x300>
 800d344:	2227      	movs	r2, #39	; 0x27
 800d346:	e000      	b.n	800d34a <f_printf+0x302>
 800d348:	2207      	movs	r2, #7
 800d34a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d34e:	4413      	add	r3, r2
 800d350:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			s[i++] = d + '0';
 800d354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d358:	1c5a      	adds	r2, r3, #1
 800d35a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d35e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800d362:	3230      	adds	r2, #48	; 0x30
 800d364:	b2d2      	uxtb	r2, r2
 800d366:	3388      	adds	r3, #136	; 0x88
 800d368:	443b      	add	r3, r7
 800d36a:	f803 2c34 	strb.w	r2, [r3, #-52]
		} while (v && i < sizeof s / sizeof s[0]);
 800d36e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <f_printf+0x334>
 800d374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d378:	2b0f      	cmp	r3, #15
 800d37a:	d9cb      	bls.n	800d314 <f_printf+0x2cc>
		if (f & 8) s[i++] = '-';
 800d37c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d380:	f003 0308 	and.w	r3, r3, #8
 800d384:	2b00      	cmp	r3, #0
 800d386:	d009      	beq.n	800d39c <f_printf+0x354>
 800d388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d392:	3388      	adds	r3, #136	; 0x88
 800d394:	443b      	add	r3, r7
 800d396:	222d      	movs	r2, #45	; 0x2d
 800d398:	f803 2c34 	strb.w	r2, [r3, #-52]
		j = i; d = (f & 1) ? '0' : ' ';
 800d39c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d3a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d3a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d3a6:	f003 0301 	and.w	r3, r3, #1
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <f_printf+0x36a>
 800d3ae:	2330      	movs	r3, #48	; 0x30
 800d3b0:	e000      	b.n	800d3b4 <f_printf+0x36c>
 800d3b2:	2320      	movs	r3, #32
 800d3b4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d3b8:	e007      	b.n	800d3ca <f_printf+0x382>
 800d3ba:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800d3be:	f107 0308 	add.w	r3, r7, #8
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff fe02 	bl	800cfce <putc_bfd>
 800d3ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d105      	bne.n	800d3e2 <f_printf+0x39a>
 800d3d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d3dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d8eb      	bhi.n	800d3ba <f_printf+0x372>
		do putc_bfd(&pb, s[--i]); while (i);
 800d3e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d3ec:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800d3f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d3f4:	4413      	add	r3, r2
 800d3f6:	781a      	ldrb	r2, [r3, #0]
 800d3f8:	f107 0308 	add.w	r3, r7, #8
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fde5 	bl	800cfce <putc_bfd>
 800d404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1ea      	bne.n	800d3e2 <f_printf+0x39a>
		while (j++ < w) putc_bfd(&pb, d);
 800d40c:	e007      	b.n	800d41e <f_printf+0x3d6>
 800d40e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800d412:	f107 0308 	add.w	r3, r7, #8
 800d416:	4611      	mov	r1, r2
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff fdd8 	bl	800cfce <putc_bfd>
 800d41e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d424:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d426:	429a      	cmp	r2, r3
 800d428:	d8f1      	bhi.n	800d40e <f_printf+0x3c6>
		c = *fmt++;
 800d42a:	e61b      	b.n	800d064 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d42c:	bf00      	nop
 800d42e:	e000      	b.n	800d432 <f_printf+0x3ea>
		if (!c) break;
 800d430:	bf00      	nop
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2b00      	cmp	r3, #0
 800d436:	db15      	blt.n	800d464 <f_printf+0x41c>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800d438:	68b8      	ldr	r0, [r7, #8]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	461c      	mov	r4, r3
 800d43e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d442:	f107 0308 	add.w	r3, r7, #8
 800d446:	f103 010c 	add.w	r1, r3, #12
 800d44a:	4613      	mov	r3, r2
 800d44c:	4622      	mov	r2, r4
 800d44e:	f7fe ff9b 	bl	800c388 <f_write>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d105      	bne.n	800d464 <f_printf+0x41c>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d101      	bne.n	800d464 <f_printf+0x41c>
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	e001      	b.n	800d468 <f_printf+0x420>
	return EOF;
 800d464:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3788      	adds	r7, #136	; 0x88
 800d46c:	46bd      	mov	sp, r7
 800d46e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d472:	b003      	add	sp, #12
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop

0800d478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	4613      	mov	r3, r2
 800d484:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d486:	2301      	movs	r3, #1
 800d488:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800d48e:	4b1e      	ldr	r3, [pc, #120]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d490:	7a5b      	ldrb	r3, [r3, #9]
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b01      	cmp	r3, #1
 800d496:	d831      	bhi.n	800d4fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d498:	4b1b      	ldr	r3, [pc, #108]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d49a:	7a5b      	ldrb	r3, [r3, #9]
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	461a      	mov	r2, r3
 800d4a0:	4b19      	ldr	r3, [pc, #100]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800d4a6:	4b18      	ldr	r3, [pc, #96]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d4a8:	7a5b      	ldrb	r3, [r3, #9]
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	4a16      	ldr	r2, [pc, #88]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800d4b6:	4b14      	ldr	r3, [pc, #80]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d4b8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4b12      	ldr	r3, [pc, #72]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d4c0:	4413      	add	r3, r2
 800d4c2:	79fa      	ldrb	r2, [r7, #7]
 800d4c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4c6:	4b10      	ldr	r3, [pc, #64]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d4c8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	b2d1      	uxtb	r1, r2
 800d4d0:	4a0d      	ldr	r2, [pc, #52]	; (800d508 <FATFS_LinkDriverEx+0x90>)
 800d4d2:	7251      	strb	r1, [r2, #9]
 800d4d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d4d6:	7dbb      	ldrb	r3, [r7, #22]
 800d4d8:	3330      	adds	r3, #48	; 0x30
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	223a      	movs	r2, #58	; 0x3a
 800d4e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	3302      	adds	r3, #2
 800d4ec:	222f      	movs	r2, #47	; 0x2f
 800d4ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	3303      	adds	r3, #3
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	bc80      	pop	{r7}
 800d506:	4770      	bx	lr
 800d508:	20000b4c 	.word	0x20000b4c

0800d50c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d516:	2200      	movs	r2, #0
 800d518:	6839      	ldr	r1, [r7, #0]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff ffac 	bl	800d478 <FATFS_LinkDriverEx>
 800d520:	4603      	mov	r3, r0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
	...

0800d52c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	6039      	str	r1, [r7, #0]
 800d536:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d538:	88fb      	ldrh	r3, [r7, #6]
 800d53a:	2b7f      	cmp	r3, #127	; 0x7f
 800d53c:	d802      	bhi.n	800d544 <ff_convert+0x18>
		c = chr;
 800d53e:	88fb      	ldrh	r3, [r7, #6]
 800d540:	81fb      	strh	r3, [r7, #14]
 800d542:	e025      	b.n	800d590 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d00b      	beq.n	800d562 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d54a:	88fb      	ldrh	r3, [r7, #6]
 800d54c:	2bff      	cmp	r3, #255	; 0xff
 800d54e:	d805      	bhi.n	800d55c <ff_convert+0x30>
 800d550:	88fb      	ldrh	r3, [r7, #6]
 800d552:	3b80      	subs	r3, #128	; 0x80
 800d554:	4a11      	ldr	r2, [pc, #68]	; (800d59c <ff_convert+0x70>)
 800d556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d55a:	e000      	b.n	800d55e <ff_convert+0x32>
 800d55c:	2300      	movs	r3, #0
 800d55e:	81fb      	strh	r3, [r7, #14]
 800d560:	e016      	b.n	800d590 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800d562:	2300      	movs	r3, #0
 800d564:	81fb      	strh	r3, [r7, #14]
 800d566:	e009      	b.n	800d57c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d568:	89fb      	ldrh	r3, [r7, #14]
 800d56a:	4a0c      	ldr	r2, [pc, #48]	; (800d59c <ff_convert+0x70>)
 800d56c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d570:	88fa      	ldrh	r2, [r7, #6]
 800d572:	429a      	cmp	r2, r3
 800d574:	d006      	beq.n	800d584 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d576:	89fb      	ldrh	r3, [r7, #14]
 800d578:	3301      	adds	r3, #1
 800d57a:	81fb      	strh	r3, [r7, #14]
 800d57c:	89fb      	ldrh	r3, [r7, #14]
 800d57e:	2b7f      	cmp	r3, #127	; 0x7f
 800d580:	d9f2      	bls.n	800d568 <ff_convert+0x3c>
 800d582:	e000      	b.n	800d586 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d584:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d586:	89fb      	ldrh	r3, [r7, #14]
 800d588:	3380      	adds	r3, #128	; 0x80
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d590:	89fb      	ldrh	r3, [r7, #14]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	bc80      	pop	{r7}
 800d59a:	4770      	bx	lr
 800d59c:	0800e118 	.word	0x0800e118

0800d5a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e002      	b.n	800d5b6 <ff_wtoupper+0x16>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	4a0f      	ldr	r2, [pc, #60]	; (800d5f4 <ff_wtoupper+0x54>)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d006      	beq.n	800d5d0 <ff_wtoupper+0x30>
 800d5c2:	4a0c      	ldr	r2, [pc, #48]	; (800d5f4 <ff_wtoupper+0x54>)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5ca:	88fa      	ldrh	r2, [r7, #6]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d1ef      	bne.n	800d5b0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800d5d0:	4a08      	ldr	r2, [pc, #32]	; (800d5f4 <ff_wtoupper+0x54>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <ff_wtoupper+0x46>
 800d5dc:	4a06      	ldr	r2, [pc, #24]	; (800d5f8 <ff_wtoupper+0x58>)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5e4:	e000      	b.n	800d5e8 <ff_wtoupper+0x48>
 800d5e6:	88fb      	ldrh	r3, [r7, #6]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3714      	adds	r7, #20
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bc80      	pop	{r7}
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	0800e218 	.word	0x0800e218
 800d5f8:	0800e3f8 	.word	0x0800e3f8

0800d5fc <__libc_init_array>:
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	2600      	movs	r6, #0
 800d600:	4d0c      	ldr	r5, [pc, #48]	; (800d634 <__libc_init_array+0x38>)
 800d602:	4c0d      	ldr	r4, [pc, #52]	; (800d638 <__libc_init_array+0x3c>)
 800d604:	1b64      	subs	r4, r4, r5
 800d606:	10a4      	asrs	r4, r4, #2
 800d608:	42a6      	cmp	r6, r4
 800d60a:	d109      	bne.n	800d620 <__libc_init_array+0x24>
 800d60c:	f000 f830 	bl	800d670 <_init>
 800d610:	2600      	movs	r6, #0
 800d612:	4d0a      	ldr	r5, [pc, #40]	; (800d63c <__libc_init_array+0x40>)
 800d614:	4c0a      	ldr	r4, [pc, #40]	; (800d640 <__libc_init_array+0x44>)
 800d616:	1b64      	subs	r4, r4, r5
 800d618:	10a4      	asrs	r4, r4, #2
 800d61a:	42a6      	cmp	r6, r4
 800d61c:	d105      	bne.n	800d62a <__libc_init_array+0x2e>
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
 800d620:	f855 3b04 	ldr.w	r3, [r5], #4
 800d624:	4798      	blx	r3
 800d626:	3601      	adds	r6, #1
 800d628:	e7ee      	b.n	800d608 <__libc_init_array+0xc>
 800d62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d62e:	4798      	blx	r3
 800d630:	3601      	adds	r6, #1
 800d632:	e7f2      	b.n	800d61a <__libc_init_array+0x1e>
 800d634:	0800e5d8 	.word	0x0800e5d8
 800d638:	0800e5d8 	.word	0x0800e5d8
 800d63c:	0800e5d8 	.word	0x0800e5d8
 800d640:	0800e5dc 	.word	0x0800e5dc

0800d644 <memcpy>:
 800d644:	440a      	add	r2, r1
 800d646:	4291      	cmp	r1, r2
 800d648:	f100 33ff 	add.w	r3, r0, #4294967295
 800d64c:	d100      	bne.n	800d650 <memcpy+0xc>
 800d64e:	4770      	bx	lr
 800d650:	b510      	push	{r4, lr}
 800d652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d656:	4291      	cmp	r1, r2
 800d658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d65c:	d1f9      	bne.n	800d652 <memcpy+0xe>
 800d65e:	bd10      	pop	{r4, pc}

0800d660 <memset>:
 800d660:	4603      	mov	r3, r0
 800d662:	4402      	add	r2, r0
 800d664:	4293      	cmp	r3, r2
 800d666:	d100      	bne.n	800d66a <memset+0xa>
 800d668:	4770      	bx	lr
 800d66a:	f803 1b01 	strb.w	r1, [r3], #1
 800d66e:	e7f9      	b.n	800d664 <memset+0x4>

0800d670 <_init>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	bf00      	nop
 800d674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d676:	bc08      	pop	{r3}
 800d678:	469e      	mov	lr, r3
 800d67a:	4770      	bx	lr

0800d67c <_fini>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	bf00      	nop
 800d680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d682:	bc08      	pop	{r3}
 800d684:	469e      	mov	lr, r3
 800d686:	4770      	bx	lr
