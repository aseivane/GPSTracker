
GPSTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009998  08009998  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08009998  08009998  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009998  08009998  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080099a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000024  080099c4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  080099c4  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000476ef  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d8  00000000  00000000  0006773c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003318  00000000  00000000  0006cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003078  00000000  00000000  0006ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca31  00000000  00000000  00072fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027bb3  00000000  00000000  0008f9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4340  00000000  00000000  000b758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b8cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dcb4  00000000  00000000  0015b91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800900c 	.word	0x0800900c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800900c 	.word	0x0800900c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <initGPS>:
  * @brief  Init GPS attributes.
  * @param self pointer to GPSdata object
  * @retval -
  */
void initGPS(GPSdata * _gps)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	initGPSmodel(_gps);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f954 	bl	80009f6 <initGPSmodel>

	//configGPS();	// Sends directives for selected NMEA talkers
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <updateGPS>:
  * @param self pointer to GPSdata object
  * @param bufferDMA pointer to UART DMA buffer
  * @retval -
  */
void updateGPS(GPSdata* _gps, uint8_t* bufferDMA)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800075e:	af00      	add	r7, sp, #0
 8000760:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000764:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000768:	6018      	str	r0, [r3, #0]
 800076a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800076e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8000772:	6019      	str	r1, [r3, #0]
	uint8_t copy_buffer[MAX_NMEA_LEN];

	uint8_t fields[FIELD_BUFF][FIELD_BUFF];
	for(uint8_t i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000774:	2300      	movs	r3, #0
 8000776:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
 800077a:	e012      	b.n	80007a2 <updateGPS+0x4a>
		memset(fields[i], END_OF_STRING, FIELD_BUFF);
 800077c:	f897 2427 	ldrb.w	r2, [r7, #1063]	; 0x427
 8000780:	f107 010c 	add.w	r1, r7, #12
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	2214      	movs	r2, #20
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f008 fc32 	bl	8008ffc <memset>
	for(uint8_t i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000798:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 800079c:	3301      	adds	r3, #1
 800079e:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
 80007a2:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 80007a6:	2b13      	cmp	r3, #19
 80007a8:	d9e8      	bls.n	800077c <updateGPS+0x24>

	memcpy(copy_buffer, bufferDMA, MAX_NMEA_LEN);
 80007aa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80007ae:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 80007b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80007b6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4610      	mov	r0, r2
 80007be:	4619      	mov	r1, r3
 80007c0:	f240 238a 	movw	r3, #650	; 0x28a
 80007c4:	461a      	mov	r2, r3
 80007c6:	f008 fc0b 	bl	8008fe0 <memcpy>

	getMessageFields( copy_buffer, (uint8_t*) "GPGGA", fields );
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80007d2:	4909      	ldr	r1, [pc, #36]	; (80007f8 <updateGPS+0xa0>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fa61 	bl	8000c9c <getMessageFields>

	setGPSdata(_gps, fields, GPGGA);
 80007da:	f107 010c 	add.w	r1, r7, #12
 80007de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80007e2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80007e6:	2200      	movs	r2, #0
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	f000 f91c 	bl	8000a26 <setGPSdata>

}
 80007ee:	bf00      	nop
 80007f0:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	08009024 	.word	0x08009024

080007fc <updateDateTime>:
  * @param self pointer to GPSdata object
  * @param bufferDMA pointer to UART DMA buffer
  * @retval -
  */
void updateDateTime( RTC_HandleTypeDef* hrtc, uint8_t* bufferDMA)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8000802:	af00      	add	r7, sp, #0
 8000804:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000808:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800080c:	6018      	str	r0, [r3, #0]
 800080e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000812:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8000816:	6019      	str	r1, [r3, #0]
	static uint8_t updatedTime = FALSE;
	static uint8_t updatedDate = FALSE;

	if ( TRUE == updatedTime && TRUE == updatedDate ) return;
 8000818:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <updateDateTime+0x10c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d103      	bne.n	8000828 <updateDateTime+0x2c>
 8000820:	4b3a      	ldr	r3, [pc, #232]	; (800090c <updateDateTime+0x110>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d065      	beq.n	80008f4 <updateDateTime+0xf8>

	uint8_t copy_buffer[DMA_BUFF_SIZE];
	uint8_t fields[FIELD_BUFF][FIELD_BUFF];

	for(uint8_t i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000828:	2300      	movs	r3, #0
 800082a:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 800082e:	e012      	b.n	8000856 <updateDateTime+0x5a>
	memset(fields[i], END_OF_STRING, FIELD_BUFF);
 8000830:	f897 22a7 	ldrb.w	r2, [r7, #679]	; 0x2a7
 8000834:	f107 010c 	add.w	r1, r7, #12
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	2214      	movs	r2, #20
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f008 fbd8 	bl	8008ffc <memset>
	for(uint8_t i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 800084c:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8000850:	3301      	adds	r3, #1
 8000852:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 8000856:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800085a:	2b13      	cmp	r3, #19
 800085c:	d9e8      	bls.n	8000830 <updateDateTime+0x34>

	memcpy(copy_buffer, bufferDMA, DMA_BUFF_SIZE);
 800085e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000862:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8000866:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800086a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4610      	mov	r0, r2
 8000872:	4619      	mov	r1, r3
 8000874:	f240 130b 	movw	r3, #267	; 0x10b
 8000878:	461a      	mov	r2, r3
 800087a:	f008 fbb1 	bl	8008fe0 <memcpy>

	getMessageFields( copy_buffer, (uint8_t*)"GPZDA", fields );
 800087e:	f107 020c 	add.w	r2, r7, #12
 8000882:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000886:	4922      	ldr	r1, [pc, #136]	; (8000910 <updateDateTime+0x114>)
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa07 	bl	8000c9c <getMessageFields>

	if ( '\0' == *(fields[TIME]) ) return;
 800088e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000892:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d02d      	beq.n	80008f8 <updateDateTime+0xfc>

	if ( !updatedTime )
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <updateDateTime+0x10c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10d      	bne.n	80008c0 <updateDateTime+0xc4>
	updatedTime = setTime( hrtc, fields[TIME] );
 80008a4:	f107 020c 	add.w	r2, r7, #12
 80008a8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80008ac:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80008b0:	4611      	mov	r1, r2
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f000 f861 	bl	800097a <setTime>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <updateDateTime+0x10c>)
 80008be:	701a      	strb	r2, [r3, #0]

	if ( '\0' == *(fields[DAY]) ) return;
 80008c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80008c4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80008c8:	7d1b      	ldrb	r3, [r3, #20]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d016      	beq.n	80008fc <updateDateTime+0x100>

	if ( !updatedDate )
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <updateDateTime+0x110>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d113      	bne.n	80008fe <updateDateTime+0x102>
	updatedDate = setDate( hrtc, fields );
 80008d6:	f107 020c 	add.w	r2, r7, #12
 80008da:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80008de:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80008e2:	4611      	mov	r1, r2
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f000 f815 	bl	8000914 <setDate>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <updateDateTime+0x110>)
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e004      	b.n	80008fe <updateDateTime+0x102>
	if ( TRUE == updatedTime && TRUE == updatedDate ) return;
 80008f4:	bf00      	nop
 80008f6:	e002      	b.n	80008fe <updateDateTime+0x102>
	if ( '\0' == *(fields[TIME]) ) return;
 80008f8:	bf00      	nop
 80008fa:	e000      	b.n	80008fe <updateDateTime+0x102>
	if ( '\0' == *(fields[DAY]) ) return;
 80008fc:	bf00      	nop
}
 80008fe:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000040 	.word	0x20000040
 800090c:	20000041 	.word	0x20000041
 8000910:	0800902c 	.word	0x0800902c

08000914 <setDate>:

uint8_t setDate(RTC_HandleTypeDef* hrtc, uint8_t fields[FIELD_BUFF][FIELD_BUFF])
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef Date;
	int aux;

	ascii_to_int(fields[1], &aux);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3314      	adds	r3, #20
 8000922:	f107 0208 	add.w	r2, r7, #8
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fafd 	bl	8000f28 <ascii_to_int>
  	Date.Date = (uint8_t) aux;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	73bb      	strb	r3, [r7, #14]

  	ascii_to_int(fields[2], &aux);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	3328      	adds	r3, #40	; 0x28
 8000938:	f107 0208 	add.w	r2, r7, #8
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f000 faf2 	bl	8000f28 <ascii_to_int>
	Date.Month = (uint8_t) aux;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	737b      	strb	r3, [r7, #13]

	ascii_to_int(fields[3]+2, &aux);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	333c      	adds	r3, #60	; 0x3c
 800094e:	3302      	adds	r3, #2
 8000950:	f107 0208 	add.w	r2, r7, #8
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fae6 	bl	8000f28 <ascii_to_int>
	Date.Year = (uint8_t) aux;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	73fb      	strb	r3, [r7, #15]

	HAL_RTC_SetDate( hrtc, &Date,  RTC_FORMAT_BIN);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f006 fa6a 	bl	8006e44 <HAL_RTC_SetDate>
	return 1U;
 8000970:	2301      	movs	r3, #1
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <setTime>:

uint8_t setTime(RTC_HandleTypeDef* hrtc, uint8_t fields[FIELD_BUFF])
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef Time;
	int aux;

	fields[6] = '\0';
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	3306      	adds	r3, #6
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	ascii_to_int(fields+4, &aux);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	3304      	adds	r3, #4
 8000990:	f107 0208 	add.w	r2, r7, #8
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fac6 	bl	8000f28 <ascii_to_int>
	Time.Seconds = (uint8_t) aux;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	73bb      	strb	r3, [r7, #14]
	fields[4] = '\0';
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	ascii_to_int(fields+2, &aux);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	3302      	adds	r3, #2
 80009ae:	f107 0208 	add.w	r2, r7, #8
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fab7 	bl	8000f28 <ascii_to_int>
	Time.Minutes = (uint8_t) aux;
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	737b      	strb	r3, [r7, #13]
	fields[2] = '\0';
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	3302      	adds	r3, #2
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	ascii_to_int(fields, &aux);
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	4619      	mov	r1, r3
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f000 faaa 	bl	8000f28 <ascii_to_int>
	Time.Hours = (uint8_t) aux - 3;
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	3b03      	subs	r3, #3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	733b      	strb	r3, [r7, #12]

	HAL_RTC_SetTime(hrtc, &Time,  RTC_FORMAT_BIN);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f006 f8bc 	bl	8006b64 <HAL_RTC_SetTime>
	return 1U;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <initGPSmodel>:
/**
  * @brief  Init GPS attributes.
  * @retval -
  */
void initGPSmodel(GPSdata * self)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	  self->latitude = 0;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
	  self->longitude = 0;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
	  self->satellites_in_view = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	731a      	strb	r2, [r3, #12]
	  self->altitude = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <setGPSdata>:
  * @param fields array of uint8_t strings
  * @param talker NMEAtalker 
  * @retval -
  */
void setGPSdata( GPSdata * self, uint8_t fields[][FIELD_BUFF], enum NMEAtalker talker )
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71fb      	strb	r3, [r7, #7]
    switch(talker)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <setGPSdata+0x1a>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d005      	beq.n	8000a4a <setGPSdata+0x24>
    	break;
    case GPGLL:

    	break;
    default:
      break;
 8000a3e:	e005      	b.n	8000a4c <setGPSdata+0x26>
    	updateGPGGA(self, fields);
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f806 	bl	8000a54 <updateGPGGA>
    	break;
 8000a48:	e000      	b.n	8000a4c <setGPSdata+0x26>
    	break;
 8000a4a:	bf00      	nop
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <updateGPGGA>:
  * @param self pointer to GPSdata object
  * @param fields array of uint8_t strings
  * @retval -
  */
void updateGPGGA(GPSdata * self, uint8_t fields[][FIELD_BUFF])
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  enum GNGGAfields {
  TIME, LATITUDE, NoS, LONGITUDE, EoW,
  FIX, SIV, HDOP, ALTTUDE_GEOID, ALTTUDE_METER,
  GEO_SEP, GEO_SEP_METER, DIFF, DIFF_REF};
  /* converts latitude field to float */
	ascii_to_float(fields[LATITUDE], &(self->latitude) );
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	3314      	adds	r3, #20
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fac6 	bl	8000ff8 <ascii_to_float>

  /* if the latitude is 0, it means the fields are empty, return */
  if ( 0 == self->latitude) return ;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f04f 0100 	mov.w	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe0b 	bl	8000690 <__aeabi_fcmpeq>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d13a      	bne.n	8000af6 <updateGPGGA+0xa2>
  
  /* converts degrees to decimal */
	NMEA_deg2dec(&(self->latitude));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f83c 	bl	8000b00 <NMEA_deg2dec>
	if(*(fields[NoS]) == 'S') // changes the sign if needed
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	3328      	adds	r3, #40	; 0x28
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b53      	cmp	r3, #83	; 0x53
 8000a90:	d105      	bne.n	8000a9e <updateGPGGA+0x4a>
			self->latitude = -self->latitude;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]

  /* converts longitude field to float */
	ascii_to_float(fields[LONGITUDE], &(self->longitude) );
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4610      	mov	r0, r2
 8000aac:	f000 faa4 	bl	8000ff8 <ascii_to_float>
	NMEA_deg2dec(&(self->longitude));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f823 	bl	8000b00 <NMEA_deg2dec>
	if(*(fields[EoW])== 'W')  // changes the sign if needed
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3350      	adds	r3, #80	; 0x50
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b57      	cmp	r3, #87	; 0x57
 8000ac2:	d105      	bne.n	8000ad0 <updateGPGGA+0x7c>
			self->longitude = -self->longitude;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	605a      	str	r2, [r3, #4]

	ascii_to_int(fields[SIV], &(self->satellites_in_view));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	330c      	adds	r3, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	4610      	mov	r0, r2
 8000ade:	f000 fa23 	bl	8000f28 <ascii_to_int>

	ascii_to_int(fields[ALTTUDE_METER], &(self->altitude));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3308      	adds	r3, #8
 8000aec:	4619      	mov	r1, r3
 8000aee:	4610      	mov	r0, r2
 8000af0:	f000 fa1a 	bl	8000f28 <ascii_to_int>
 8000af4:	e000      	b.n	8000af8 <updateGPGGA+0xa4>
  if ( 0 == self->latitude) return ;
 8000af6:	bf00      	nop

}
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <NMEA_deg2dec>:

void NMEA_deg2dec(float* number)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if(!*number) return;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f04f 0100 	mov.w	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fdbd 	bl	8000690 <__aeabi_fcmpeq>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d13c      	bne.n	8000b96 <NMEA_deg2dec+0x96>
	*number/=100;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	491f      	ldr	r1, [pc, #124]	; (8000ba0 <NMEA_deg2dec+0xa0>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fcd4 	bl	80004d0 <__aeabi_fdiv>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]
	int integer = (int) *number;//grados
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fddd 	bl	80006f4 <__aeabi_f2iz>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	60fb      	str	r3, [r7, #12]
	*number = (*number - (float)integer)*100;// quedan solo los minutos y sus decimales
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681c      	ldr	r4, [r3, #0]
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff fbbc 	bl	80002c0 <__aeabi_i2f>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f7ff fb01 	bl	8000154 <__aeabi_fsub>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4912      	ldr	r1, [pc, #72]	; (8000ba0 <NMEA_deg2dec+0xa0>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fc06 	bl	8000368 <__aeabi_fmul>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
	*number /=60;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	490e      	ldr	r1, [pc, #56]	; (8000ba4 <NMEA_deg2dec+0xa4>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fcb0 	bl	80004d0 <__aeabi_fdiv>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
	*number = (float) integer + (*number); //a los grados le agrega los minutos /60 para que sean grados
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff fba1 	bl	80002c0 <__aeabi_i2f>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4610      	mov	r0, r2
 8000b88:	f7ff fae6 	bl	8000158 <__addsf3>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	e000      	b.n	8000b98 <NMEA_deg2dec+0x98>
	if(!*number) return;
 8000b96:	bf00      	nop
}
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	42c80000 	.word	0x42c80000
 8000ba4:	42700000 	.word	0x42700000

08000ba8 <copyValues>:
 *  @param field_count count o fields to copy
 *  @param dest matrix to copy the values
 *  @return -
 */
void copyValues(uint8_t** fields, uint8_t field_count , uint8_t dest[FIELD_BUFF][FIELD_BUFF])
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	72fb      	strb	r3, [r7, #11]
	for(uint8_t index = 0; index<field_count;index++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	75fb      	strb	r3, [r7, #23]
 8000bba:	e066      	b.n	8000c8a <copyValues+0xe2>
	{
		if( fields[index] == NULL) return;
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d064      	beq.n	8000c94 <copyValues+0xec>

		/* if the next char in fields[index] string is a comma
		 * it means the field is empty */
		if (COMA == *(fields[index] + NEXT) ||
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b2c      	cmp	r3, #44	; 0x2c
 8000bda:	d053      	beq.n	8000c84 <copyValues+0xdc>
			END_STAR == *(fields[index] + NEXT)) 
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	781b      	ldrb	r3, [r3, #0]
		if (COMA == *(fields[index] + NEXT) ||
 8000bea:	2b2a      	cmp	r3, #42	; 0x2a
 8000bec:	d04a      	beq.n	8000c84 <copyValues+0xdc>
			;
		}
		else
		{
			/* checks if it's the last pointer with data*/
			if (fields[index + NEXT])
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d01f      	beq.n	8000c3e <copyValues+0x96>
			{
				memcpy( dest[index], fields[index] + NEXT, fields[NEXT + index] - fields[index] - 1);
 8000bfe:	7dfa      	ldrb	r2, [r7, #23]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	1898      	adds	r0, r3, r2
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4413      	add	r3, r2
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1c5c      	adds	r4, r3, #1
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	68f9      	ldr	r1, [r7, #12]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	3b01      	subs	r3, #1
 8000c34:	461a      	mov	r2, r3
 8000c36:	4621      	mov	r1, r4
 8000c38:	f008 f9d2 	bl	8008fe0 <memcpy>
 8000c3c:	e022      	b.n	8000c84 <copyValues+0xdc>
			}
			/* if it's the last pointer, copies char by char until * */
			else
			{
				uint8_t subIndex = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75bb      	strb	r3, [r7, #22]
				do
				{
					/* copy until * */
					dest[index][subIndex] = fields[index][subIndex + NEXT];
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	7dbb      	ldrb	r3, [r7, #22]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	18d1      	adds	r1, r2, r3
 8000c52:	7dfa      	ldrb	r2, [r7, #23]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	441a      	add	r2, r3
 8000c62:	7dbb      	ldrb	r3, [r7, #22]
 8000c64:	7809      	ldrb	r1, [r1, #0]
 8000c66:	54d1      	strb	r1, [r2, r3]
				} while ( fields[index][++subIndex + NEXT] != END_STAR);
 8000c68:	7dfb      	ldrb	r3, [r7, #23]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	7dbb      	ldrb	r3, [r7, #22]
 8000c74:	3301      	adds	r3, #1
 8000c76:	75bb      	strb	r3, [r7, #22]
 8000c78:	7dbb      	ldrb	r3, [r7, #22]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b2a      	cmp	r3, #42	; 0x2a
 8000c82:	d1de      	bne.n	8000c42 <copyValues+0x9a>
	for(uint8_t index = 0; index<field_count;index++)
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	3301      	adds	r3, #1
 8000c88:	75fb      	strb	r3, [r7, #23]
 8000c8a:	7dfa      	ldrb	r2, [r7, #23]
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d394      	bcc.n	8000bbc <copyValues+0x14>
 8000c92:	e000      	b.n	8000c96 <copyValues+0xee>
		if( fields[index] == NULL) return;
 8000c94:	bf00      	nop
			}
		}		
	}
}
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}

08000c9c <getMessageFields>:
 *  @param ptrTalker pointer to the talker from wich get the message.
 *  @param fieldsArray matrix to copy the values
 *  @return -
 */
void  getMessageFields(uint8_t* ptrMessage, uint8_t* ptrTalker, uint8_t fields_array[FIELD_BUFF][FIELD_BUFF] )
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	; 0x70
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	/* define an array of pointer to reference where each value 
	* is allocated in the message */
	uint8_t* fields[FIELD_BUFF];
	uint8_t* auxPtrMessage;

	for(i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000cae:	e00c      	b.n	8000cca <getMessageFields+0x2e>
		fields[i] = NULL;
 8000cb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	3370      	adds	r3, #112	; 0x70
 8000cb8:	443b      	add	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f843 2c5c 	str.w	r2, [r3, #-92]
	for(i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000cca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cce:	2b13      	cmp	r3, #19
 8000cd0:	d9ee      	bls.n	8000cb0 <getMessageFields+0x14>

	auxPtrMessage = getMessageptr( ptrMessage, ptrTalker, NULL );
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f000 f8bf 	bl	8000e5a <getMessageptr>
 8000cdc:	66b8      	str	r0, [r7, #104]	; 0x68
	if (NULL == auxPtrMessage) return; // if the talkers is not found, return
 8000cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d042      	beq.n	8000d6a <getMessageFields+0xce>

	if ( ! isSentenceComplete( ptrMessage, auxPtrMessage ) ) return;
 8000ce4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f845 	bl	8000d76 <isSentenceComplete>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d03d      	beq.n	8000d6e <getMessageFields+0xd2>
	

	uint8_t field_count = coma_count(auxPtrMessage);
 8000cf2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000cf4:	f000 f86b 	bl	8000dce <coma_count>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	for(i = 0; i< field_count; i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000d04:	e01a      	b.n	8000d3c <getMessageFields+0xa0>
	{
		for(auxPtrMessage; !( (*auxPtrMessage) == COMA || (*auxPtrMessage) == END_STAR); auxPtrMessage++);
 8000d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d08:	3301      	adds	r3, #1
 8000d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b2c      	cmp	r3, #44	; 0x2c
 8000d12:	d003      	beq.n	8000d1c <getMessageFields+0x80>
 8000d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b2a      	cmp	r3, #42	; 0x2a
 8000d1a:	d1f4      	bne.n	8000d06 <getMessageFields+0x6a>
		fields[i] = auxPtrMessage;
 8000d1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	3370      	adds	r3, #112	; 0x70
 8000d24:	443b      	add	r3, r7
 8000d26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d28:	f843 2c5c 	str.w	r2, [r3, #-92]
		auxPtrMessage++;
 8000d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d2e:	3301      	adds	r3, #1
 8000d30:	66bb      	str	r3, [r7, #104]	; 0x68
	for(i = 0; i< field_count; i++)
 8000d32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d36:	3301      	adds	r3, #1
 8000d38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000d3c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000d40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3e1      	bcc.n	8000d0c <getMessageFields+0x70>
	}
	fields[i] = NULL;
 8000d48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	3370      	adds	r3, #112	; 0x70
 8000d50:	443b      	add	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	f843 2c5c 	str.w	r2, [r3, #-92]

	copyValues(fields, field_count , fields_array);
 8000d58:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff20 	bl	8000ba8 <copyValues>
 8000d68:	e002      	b.n	8000d70 <getMessageFields+0xd4>
	if (NULL == auxPtrMessage) return; // if the talkers is not found, return
 8000d6a:	bf00      	nop
 8000d6c:	e000      	b.n	8000d70 <getMessageFields+0xd4>
	if ( ! isSentenceComplete( ptrMessage, auxPtrMessage ) ) return;
 8000d6e:	bf00      	nop
}
 8000d70:	3770      	adds	r7, #112	; 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <isSentenceComplete>:
 *  @param ptrStart pointer to look where to start from
 *  @param ptrMessage pointer to the start of the message.
 *  @return True or False.
 */
uint8_t isSentenceComplete(uint8_t *ptrMessage, uint8_t *ptrStart)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b085      	sub	sp, #20
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
	uint8_t* ptrAux;
	//checkea que la frase este completa
	for(ptrAux = ptrStart;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e002      	b.n	8000d8c <isSentenceComplete+0x16>
			*ptrAux != '\r' && *ptrAux != END_OF_STRING && (ptrAux-ptrMessage) < DMA_BUFF_SIZE;
			ptrAux++);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
			*ptrAux != '\r' && *ptrAux != END_OF_STRING && (ptrAux-ptrMessage) < DMA_BUFF_SIZE;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
	for(ptrAux = ptrStart;
 8000d90:	2b0d      	cmp	r3, #13
 8000d92:	d009      	beq.n	8000da8 <isSentenceComplete+0x32>
			*ptrAux != '\r' && *ptrAux != END_OF_STRING && (ptrAux-ptrMessage) < DMA_BUFF_SIZE;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <isSentenceComplete+0x32>
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000da6:	ddee      	ble.n	8000d86 <isSentenceComplete+0x10>
	//si llego al final, devuelve NULL
	if((ptrAux-ptrMessage) == DMA_BUFF_SIZE || *ptrAux == END_OF_STRING)
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f240 120b 	movw	r2, #267	; 0x10b
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d003      	beq.n	8000dbe <isSentenceComplete+0x48>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <isSentenceComplete+0x4c>
		return FALSE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <isSentenceComplete+0x4e>
	else return TRUE;
 8000dc2:	2301      	movs	r3, #1

}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <coma_count>:
 *
 *  @param string pointer that refers to where is expected tu start looking for.
 *  @return Number of commas.
 */
uint8_t coma_count(uint8_t* ptrMessage)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	uint8_t count=0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
	//aumenta el puntero hasta que encuentra una coma. Cuando la encuetra avanza
	//count y se va separando del inicio del puntero. Cuando no encuentra la coma
	//sigue aumentando el puntero hasta llegar al final.
	for (count=0U; ptrMessage[count] != END_STAR; 
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e00c      	b.n	8000dfa <coma_count+0x2c>
		 ptrMessage[count]==COMA ? count++ : *ptrMessage++);
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b2c      	cmp	r3, #44	; 0x2c
 8000dea:	d103      	bne.n	8000df4 <coma_count+0x26>
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e002      	b.n	8000dfa <coma_count+0x2c>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3301      	adds	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
	for (count=0U; ptrMessage[count] != END_STAR; 
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b2a      	cmp	r3, #42	; 0x2a
 8000e04:	d1ec      	bne.n	8000de0 <coma_count+0x12>
	return count;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <findStartChar>:
 *
 *  @param ptrStartBuff pointer that refers to where is expected tu start looking for.
 *  @return ptrAux. NULL if there is no match.
 */
uint8_t* findStartChar( uint8_t* ptrMessage, uint8_t *ptrStart )
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
	uint8_t* ptrAux ;	// aux pointer for moving through the string
	for( ptrAux = ptrStart ;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e002      	b.n	8000e28 <findStartChar+0x16>
		( '$' != *ptrAux ) && ( DMA_BUFF_SIZE > (ptrAux - ptrMessage) );
		ptrAux++);	//starts at the begining. Ends if it matches "$" or end of buffer
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
		( '$' != *ptrAux ) && ( DMA_BUFF_SIZE > (ptrAux - ptrMessage) );
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
	for( ptrAux = ptrStart ;
 8000e2c:	2b24      	cmp	r3, #36	; 0x24
 8000e2e:	d005      	beq.n	8000e3c <findStartChar+0x2a>
		( '$' != *ptrAux ) && ( DMA_BUFF_SIZE > (ptrAux - ptrMessage) );
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000e3a:	ddf2      	ble.n	8000e22 <findStartChar+0x10>
	
	if( DMA_BUFF_SIZE == ( ptrAux - ptrMessage ) )
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f240 120b 	movw	r2, #267	; 0x10b
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <findStartChar+0x3c>
		ptrAux= NULL;	// returns NULL if it didn't find a match
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
	
	return ptrAux;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <getMessageptr>:
 *  @param message pointer that refers to where is expected tu start looking for.
 *  @param type string to find. NMEA Talker
 *  @return token to start of message. NULL if there is no match.
 */
uint8_t* getMessageptr(uint8_t *message, const uint8_t *type,  uint8_t *init_ptr)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b088      	sub	sp, #32
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
	uint8_t* tok;
	const uint8_t * type_offset;
	uint8_t* tok_offset;

	/* assign aux pointers */
	if ( NULL == init_ptr ) tok = message;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <getMessageptr+0x18>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	e001      	b.n	8000e76 <getMessageptr+0x1c>
	else tok = init_ptr;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	61fb      	str	r3, [r7, #28]


	do
	{
		if( !(tok = findStartChar(message, tok) ) ) return NULL; //looks for next $ ocurrence
 8000e76:	69f9      	ldr	r1, [r7, #28]
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff ffca 	bl	8000e12 <findStartChar>
 8000e7e:	61f8      	str	r0, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <getMessageptr+0x30>
 8000e86:	2300      	movs	r3, #0
 8000e88:	e028      	b.n	8000edc <getMessageptr+0x82>
		tok++;	// findStartChar return a pointer to $. moves one more 
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
		#ifdef WINDOWS
		printTalker(tok);
		#endif

		type_offset= type;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
		tok_offset = tok;
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	617b      	str	r3, [r7, #20]

		/* compares the chars in type string
		 * until the end or a failed match
		 */
		while( ( *tok_offset ) == ( *type_offset )
 8000e98:	e005      	b.n	8000ea6 <getMessageptr+0x4c>
				&& END_OF_STRING != ( *type_offset ) )
		{
			tok_offset++;	// moves the pointer
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
			type_offset++;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
		while( ( *tok_offset ) == ( *type_offset )
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d103      	bne.n	8000eba <getMessageptr+0x60>
				&& END_OF_STRING != ( *type_offset ) )
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1ef      	bne.n	8000e9a <getMessageptr+0x40>
		}
	/* loop until reach the end of the buffer or 
	 * type_offset point to '\0', which means the type matched
	 * in the message
	 */ 
	}while ( END_OF_STRING != (*type_offset) &&
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
			DMA_BUFF_SIZE > (tok-message) );
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <getMessageptr+0x74>
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
	}while ( END_OF_STRING != (*type_offset) &&
 8000ec8:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000ecc:	ddd3      	ble.n	8000e76 <getMessageptr+0x1c>

	//checkea que haya cortado por coincidencia y no por fin del buffer
	if((*type_offset) != END_OF_STRING) return NULL;
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <getMessageptr+0x80>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <getMessageptr+0x82>

	return tok;
 8000eda:	69fb      	ldr	r3, [r7, #28]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <pow_10>:
  * @brief  Returns 10^n.
  * @param n 
  * @retval (int) 10^n
  */
int pow_10(uint8_t n)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
    if(!n) return 1;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <pow_10+0x14>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e012      	b.n	8000f1e <pow_10+0x3a>
    n--;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
    int power = 10;
 8000efe:	230a      	movs	r3, #10
 8000f00:	60fb      	str	r3, [r7, #12]
    while(n)
 8000f02:	e008      	b.n	8000f16 <pow_10+0x32>
    {
        power*=10;
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
        n--;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
    while(n)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f3      	bne.n	8000f04 <pow_10+0x20>
    }
    return power;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <ascii_to_int>:
  * @param ptrStr pointer to string to convert
  * @param ptrFloat pointer to float converted
  * @retval -
  */
void ascii_to_int(uint8_t *str, int *result)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    uint8_t negative = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
    /* if it's empty returns 0 */
    if(!str || (*str) == END_OF_STRING)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <ascii_to_int+0x1c>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d103      	bne.n	8000f4c <ascii_to_int+0x24>
    {
        (*result) = 0;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
        return ;
 8000f4a:	e037      	b.n	8000fbc <ascii_to_int+0x94>
    }

    /* checks if it's negative*/
    if(*str == '-')
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2d      	cmp	r3, #45	; 0x2d
 8000f52:	d104      	bne.n	8000f5e <ascii_to_int+0x36>
    {
        str++;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
        negative = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
    }

    /*calculates the length of the string */
    uint8_t size = myStrlen(str);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f82f 	bl	8000fc2 <myStrlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	737b      	strb	r3, [r7, #13]
    (*result) = 0;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]


    for ( uint8_t i = 0 ; i < size; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73bb      	strb	r3, [r7, #14]
 8000f72:	e017      	b.n	8000fa4 <ascii_to_int+0x7c>
        (*result) += (str[size-i-1] - ASCII_OFFSET)*pow_10(i);
 8000f74:	7b7a      	ldrb	r2, [r7, #13]
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ffab 	bl	8000ee4 <pow_10>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	fb03 f204 	mul.w	r2, r3, r4
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	441a      	add	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	601a      	str	r2, [r3, #0]
    for ( uint8_t i = 0 ; i < size; i++)
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73bb      	strb	r3, [r7, #14]
 8000fa4:	7bba      	ldrb	r2, [r7, #14]
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3e3      	bcc.n	8000f74 <ascii_to_int+0x4c>

    if(negative) (*result) = -(*result);
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <ascii_to_int+0x94>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	425a      	negs	r2, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd90      	pop	{r4, r7, pc}

08000fc2 <myStrlen>:
  * It has no checking
  * @param ptrStr pointer to string to convert
  * @retval strlen(ptrStr)
  */
uint8_t myStrlen(const uint8_t *ptrStr)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
    if(!ptrStr) return 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <myStrlen+0x12>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e00c      	b.n	8000fee <myStrlen+0x2c>

    uint8_t size;
    for (size = 0; ptrStr[size] != END_OF_STRING; size++);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e002      	b.n	8000fe0 <myStrlen+0x1e>
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f6      	bne.n	8000fda <myStrlen+0x18>
    return size;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <ascii_to_float>:
  * @param ptrStr pointer to string to convert
  * @param ptrFloat pointer to float converted
  * @retval -
  */
void ascii_to_float(const uint8_t* ptrStr, float* ptrFloat)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
    uint8_t coma;
    uint8_t size;
    uint8_t entero;
    const uint8_t* str=ptrStr;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	613b      	str	r3, [r7, #16]

    *ptrFloat = 0;  // cleans the float
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

    if ( (*ptrStr) == END_OF_STRING) return;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 808a 	beq.w	800112c <ascii_to_float+0x134>
    if(str[0] == '-') str++;    // if it's negative, go on, will see it later
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b2d      	cmp	r3, #45	; 0x2d
 800101e:	d102      	bne.n	8001026 <ascii_to_float+0x2e>
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	3301      	adds	r3, #1
 8001024:	613b      	str	r3, [r7, #16]

    /* checks the length to save the string library */
    size = myStrlen(str);
 8001026:	6938      	ldr	r0, [r7, #16]
 8001028:	f7ff ffcb 	bl	8000fc2 <myStrlen>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]

    /* makes all the number after the point an integer in ptrFloat*/
    for ( coma = 1; str[size-coma] != '.'; coma++)
 8001030:	2301      	movs	r3, #1
 8001032:	75fb      	strb	r3, [r7, #23]
 8001034:	e022      	b.n	800107c <ascii_to_float+0x84>
        *ptrFloat += ( str[size-coma] - ASCII_OFFSET ) * pow_10( coma -1 );
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	461a      	mov	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff48 	bl	8000ee4 <pow_10>
 8001054:	4603      	mov	r3, r0
 8001056:	fb03 f204 	mul.w	r2, r3, r4
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681c      	ldr	r4, [r3, #0]
 800105e:	4610      	mov	r0, r2
 8001060:	f7ff f92e 	bl	80002c0 <__aeabi_i2f>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	4620      	mov	r0, r4
 800106a:	f7ff f875 	bl	8000158 <__addsf3>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	601a      	str	r2, [r3, #0]
    for ( coma = 1; str[size-coma] != '.'; coma++)
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	3301      	adds	r3, #1
 800107a:	75fb      	strb	r3, [r7, #23]
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	461a      	mov	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b2e      	cmp	r3, #46	; 0x2e
 800108c:	d1d3      	bne.n	8001036 <ascii_to_float+0x3e>

    *ptrFloat = (*ptrFloat)/pow_10(coma-1); //moves all the numbers after the coma
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681c      	ldr	r4, [r3, #0]
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	3b01      	subs	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff23 	bl	8000ee4 <pow_10>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f90d 	bl	80002c0 <__aeabi_i2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff fa10 	bl	80004d0 <__aeabi_fdiv>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	601a      	str	r2, [r3, #0]
    coma++;
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	3301      	adds	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]

    /* makes all the number before the point an integer in ptrFloat*/
    for ( entero = coma ; (size+1) != entero; entero++)
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	75bb      	strb	r3, [r7, #22]
 80010c2:	e023      	b.n	800110c <ascii_to_float+0x114>
        *ptrFloat += (str[size-entero] - ASCII_OFFSET)*pow_10(entero-coma);
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	7dbb      	ldrb	r3, [r7, #22]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80010d6:	7dba      	ldrb	r2, [r7, #22]
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff00 	bl	8000ee4 <pow_10>
 80010e4:	4603      	mov	r3, r0
 80010e6:	fb03 f204 	mul.w	r2, r3, r4
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681c      	ldr	r4, [r3, #0]
 80010ee:	4610      	mov	r0, r2
 80010f0:	f7ff f8e6 	bl	80002c0 <__aeabi_i2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff f82d 	bl	8000158 <__addsf3>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	601a      	str	r2, [r3, #0]
    for ( entero = coma ; (size+1) != entero; entero++)
 8001106:	7dbb      	ldrb	r3, [r7, #22]
 8001108:	3301      	adds	r3, #1
 800110a:	75bb      	strb	r3, [r7, #22]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	429a      	cmp	r2, r3
 8001114:	d1d6      	bne.n	80010c4 <ascii_to_float+0xcc>

    /* checks if its negative */
    if(ptrStr[0]=='-') *ptrFloat = -(*ptrFloat);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b2d      	cmp	r3, #45	; 0x2d
 800111c:	d107      	bne.n	800112e <ascii_to_float+0x136>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e000      	b.n	800112e <ascii_to_float+0x136>
    if ( (*ptrStr) == END_OF_STRING) return;
 800112c:	bf00      	nop
}
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <int_to_ascii>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
__uint8_t int_to_ascii(int x, char dest[], __uint8_t d)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	71fb      	strb	r3, [r7, #7]
    __uint8_t digit;
    __uint8_t negative = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	77bb      	strb	r3, [r7, #30]
    char * str;

    if(x == 0)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d11f      	bne.n	800118c <int_to_ascii+0x58>
    {
        if(d)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d013      	beq.n	800117a <int_to_ascii+0x46>
        {
          __uint8_t d_aux = d;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	75bb      	strb	r3, [r7, #22]
          dest[d] = '\0';
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	4413      	add	r3, r2
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
          do
          {
            d--;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b01      	subs	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
            dest[d] = '0';
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	2230      	movs	r2, #48	; 0x30
 800116e:	701a      	strb	r2, [r3, #0]
          }while(d);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f4      	bne.n	8001160 <int_to_ascii+0x2c>

          return d_aux;
 8001176:	7dbb      	ldrb	r3, [r7, #22]
 8001178:	e069      	b.n	800124e <int_to_ascii+0x11a>
        }
        else
        {
            dest[0] = '0';
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2230      	movs	r2, #48	; 0x30
 800117e:	701a      	strb	r2, [r3, #0]
          dest[1] = '\0';
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
          return 1;
 8001188:	2301      	movs	r3, #1
 800118a:	e060      	b.n	800124e <int_to_ascii+0x11a>
        }
    }

    if(x<0)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	da08      	bge.n	80011a4 <int_to_ascii+0x70>
    {
        negative = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	77bb      	strb	r3, [r7, #30]
        x = -x;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	425b      	negs	r3, r3
 800119a:	60fb      	str	r3, [r7, #12]
        str = dest +1;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	e001      	b.n	80011a8 <int_to_ascii+0x74>
    }
    else str = dest;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	61bb      	str	r3, [r7, #24]

    for(digit = 0 ; x/pow_10(digit); digit++);
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
 80011ac:	e002      	b.n	80011b4 <int_to_ascii+0x80>
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	3301      	adds	r3, #1
 80011b2:	77fb      	strb	r3, [r7, #31]
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe94 	bl	8000ee4 <pow_10>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f2      	bne.n	80011ae <int_to_ascii+0x7a>

    if(d>digit)
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d90d      	bls.n	80011ec <int_to_ascii+0xb8>
    {
       while(d>digit )
 80011d0:	e008      	b.n	80011e4 <int_to_ascii+0xb0>
       {
        *str = '0';
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2230      	movs	r2, #48	; 0x30
 80011d6:	701a      	strb	r2, [r3, #0]
        str++;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	3301      	adds	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
        d--;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	71fb      	strb	r3, [r7, #7]
       while(d>digit )
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f2      	bhi.n	80011d2 <int_to_ascii+0x9e>
       }

    }
    str[digit] = '\0';
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4413      	add	r3, r2
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]

    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
 80011fa:	e01d      	b.n	8001238 <int_to_ascii+0x104>
        str[digit - decimal -1 ] = (x/pow_10(decimal))%pow_10(1) +'0';
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe70 	bl	8000ee4 <pow_10>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	fb93 f4f2 	sdiv	r4, r3, r2
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fe69 	bl	8000ee4 <pow_10>
 8001212:	4603      	mov	r3, r0
 8001214:	fb94 f2f3 	sdiv	r2, r4, r3
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	1ae3      	subs	r3, r4, r3
 800121e:	b2da      	uxtb	r2, r3
 8001220:	7ff9      	ldrb	r1, [r7, #31]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	1acb      	subs	r3, r1, r3
 8001226:	3b01      	subs	r3, #1
 8001228:	69b9      	ldr	r1, [r7, #24]
 800122a:	440b      	add	r3, r1
 800122c:	3230      	adds	r2, #48	; 0x30
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]
    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	3301      	adds	r3, #1
 8001236:	75fb      	strb	r3, [r7, #23]
 8001238:	7dfa      	ldrb	r2, [r7, #23]
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3dd      	bcc.n	80011fc <int_to_ascii+0xc8>

    if(negative)
 8001240:	7fbb      	ldrb	r3, [r7, #30]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <int_to_ascii+0x118>
        dest[0] = '-';
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	222d      	movs	r2, #45	; 0x2d
 800124a:	701a      	strb	r2, [r3, #0]

    return digit;
 800124c:	7ffb      	ldrb	r3, [r7, #31]

}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}

08001256 <float_to_ascii>:

// Converts a floating-point/double number to a string.
void float_to_ascii(float n, uint8_t* res, uint8_t afterpoint)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b088      	sub	sp, #32
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	4613      	mov	r3, r2
 8001262:	71fb      	strb	r3, [r7, #7]
    if(n<0)
 8001264:	f04f 0100 	mov.w	r1, #0
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff fa1b 	bl	80006a4 <__aeabi_fcmplt>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <float_to_ascii+0x32>
    {
        *res = '-';
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	222d      	movs	r2, #45	; 0x2d
 8001278:	701a      	strb	r2, [r3, #0]
        res++;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3301      	adds	r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
        n = -n;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001286:	60fb      	str	r3, [r7, #12]
    }
    // Extract integer part
    int ipart = (int)n;
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff fa33 	bl	80006f4 <__aeabi_f2iz>
 800128e:	4603      	mov	r3, r0
 8001290:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff f814 	bl	80002c0 <__aeabi_i2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4619      	mov	r1, r3
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7fe ff59 	bl	8000154 <__aeabi_fsub>
 80012a2:	4603      	mov	r3, r0
 80012a4:	61bb      	str	r3, [r7, #24]

    //if(fpart<0) fpart = -fpart;

    // convert integer part to string
    int i = int_to_ascii(ipart, res, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	69f8      	ldr	r0, [r7, #28]
 80012ac:	f7ff ff42 	bl	8001134 <int_to_ascii>
 80012b0:	4603      	mov	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d020      	beq.n	80012fc <float_to_ascii+0xa6>
        res[i++] = '.'; // add dot
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	461a      	mov	r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	222e      	movs	r2, #46	; 0x2e
 80012c8:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow_10(afterpoint);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe09 	bl	8000ee4 <pow_10>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe fff3 	bl	80002c0 <__aeabi_i2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	4619      	mov	r1, r3
 80012de:	69b8      	ldr	r0, [r7, #24]
 80012e0:	f7ff f842 	bl	8000368 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]

        int_to_ascii((int)fpart, res + i, afterpoint);
 80012e8:	69b8      	ldr	r0, [r7, #24]
 80012ea:	f7ff fa03 	bl	80006f4 <__aeabi_f2iz>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	4413      	add	r3, r2
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff ff1c 	bl	8001134 <int_to_ascii>
    }

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <insert_chars>:

void insert_chars(uint8_t *dest, uint8_t *src, uint8_t d)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	71fb      	strb	r3, [r7, #7]
	if(!dest || !src || *src == '\0' || !d) return;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d01c      	beq.n	8001352 <insert_chars+0x4e>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d019      	beq.n	8001352 <insert_chars+0x4e>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d015      	beq.n	8001352 <insert_chars+0x4e>
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d012      	beq.n	8001352 <insert_chars+0x4e>
    for(uint8_t i = 0; i<d; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	75fb      	strb	r3, [r7, #23]
 8001330:	e00a      	b.n	8001348 <insert_chars+0x44>
        dest[i] = src[i];
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	441a      	add	r2, r3
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	68f9      	ldr	r1, [r7, #12]
 800133c:	440b      	add	r3, r1
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i<d; i++)
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	3301      	adds	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
 8001348:	7dfa      	ldrb	r2, [r7, #23]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	429a      	cmp	r2, r3
 800134e:	d3f0      	bcc.n	8001332 <insert_chars+0x2e>
 8001350:	e000      	b.n	8001354 <insert_chars+0x50>
	if(!dest || !src || *src == '\0' || !d) return;
 8001352:	bf00      	nop
}
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <get_time_string>:

void get_time_string(RTC_TimeTypeDef *Time, uint8_t *time_string)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	uint8_t few_chars[3] = "";
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <get_time_string+0x84>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	733b      	strb	r3, [r7, #12]
 800136c:	f107 030d 	add.w	r3, r7, #13
 8001370:	2200      	movs	r2, #0
 8001372:	801a      	strh	r2, [r3, #0]
	int_to_ascii( (int) Time->Hours , few_chars, 2);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2202      	movs	r2, #2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fed7 	bl	8001134 <int_to_ascii>
	insert_chars(time_string, few_chars, 2);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2202      	movs	r2, #2
 800138c:	4619      	mov	r1, r3
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f7ff ffb8 	bl	8001304 <insert_chars>
	int_to_ascii( (int) Time->Minutes , few_chars, 2);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	4618      	mov	r0, r3
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2202      	movs	r2, #2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fec7 	bl	8001134 <int_to_ascii>
	insert_chars(time_string+3, few_chars, 2);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	3303      	adds	r3, #3
 80013aa:	f107 010c 	add.w	r1, r7, #12
 80013ae:	2202      	movs	r2, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffa7 	bl	8001304 <insert_chars>
	int_to_ascii( (int) Time->Seconds , few_chars, 2);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	789b      	ldrb	r3, [r3, #2]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2202      	movs	r2, #2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff feb6 	bl	8001134 <int_to_ascii>
	insert_chars(time_string+6, few_chars, 2);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	3306      	adds	r3, #6
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	2202      	movs	r2, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff96 	bl	8001304 <insert_chars>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	0800908c 	.word	0x0800908c

080013e4 <get_date_string>:

void get_date_string(RTC_DateTypeDef *Date, uint8_t *date_string)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	uint8_t few_chars[3] = "";
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <get_date_string+0x84>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	733b      	strb	r3, [r7, #12]
 80013f4:	f107 030d 	add.w	r3, r7, #13
 80013f8:	2200      	movs	r2, #0
 80013fa:	801a      	strh	r2, [r3, #0]
	int_to_ascii( (int) Date->Date , few_chars, 2);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	4618      	mov	r0, r3
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2202      	movs	r2, #2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fe93 	bl	8001134 <int_to_ascii>
	insert_chars(date_string, few_chars, 2);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2202      	movs	r2, #2
 8001414:	4619      	mov	r1, r3
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7ff ff74 	bl	8001304 <insert_chars>
	int_to_ascii( (int) Date->Month , few_chars, 2);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	4618      	mov	r0, r3
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2202      	movs	r2, #2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fe83 	bl	8001134 <int_to_ascii>
	insert_chars(date_string+3, few_chars, 2);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3303      	adds	r3, #3
 8001432:	f107 010c 	add.w	r1, r7, #12
 8001436:	2202      	movs	r2, #2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff63 	bl	8001304 <insert_chars>
	int_to_ascii( (int) Date->Year, few_chars, 2);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	78db      	ldrb	r3, [r3, #3]
 8001442:	4618      	mov	r0, r3
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2202      	movs	r2, #2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fe72 	bl	8001134 <int_to_ascii>
	insert_chars(date_string+6, few_chars, 2);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3306      	adds	r3, #6
 8001454:	f107 010c 	add.w	r1, r7, #12
 8001458:	2202      	movs	r2, #2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff52 	bl	8001304 <insert_chars>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0800908c 	.word	0x0800908c

0800146c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2110      	movs	r1, #16
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <SELECT+0x18>)
 8001476:	f004 f8c8 	bl	800560a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f003 fb94 	bl	8004ba8 <HAL_Delay>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010800 	.word	0x40010800

08001488 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2110      	movs	r1, #16
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <DESELECT+0x18>)
 8001492:	f004 f8ba 	bl	800560a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f003 fb86 	bl	8004ba8 <HAL_Delay>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010800 	.word	0x40010800

080014a4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014ae:	bf00      	nop
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <SPI_TxByte+0x30>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d1f8      	bne.n	80014b0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80014be:	1df9      	adds	r1, r7, #7
 80014c0:	2364      	movs	r3, #100	; 0x64
 80014c2:	2201      	movs	r2, #1
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <SPI_TxByte+0x30>)
 80014c6:	f006 f8ed 	bl	80076a4 <HAL_SPI_Transmit>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200000ac 	.word	0x200000ac

080014d8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014e4:	bf00      	nop
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <SPI_TxBuffer+0x30>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d1f8      	bne.n	80014e6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80014f4:	887a      	ldrh	r2, [r7, #2]
 80014f6:	2364      	movs	r3, #100	; 0x64
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <SPI_TxBuffer+0x30>)
 80014fc:	f006 f8d2 	bl	80076a4 <HAL_SPI_Transmit>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200000ac 	.word	0x200000ac

0800150c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001512:	23ff      	movs	r3, #255	; 0xff
 8001514:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001516:	bf00      	nop
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <SPI_RxByte+0x34>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b02      	cmp	r3, #2
 8001524:	d1f8      	bne.n	8001518 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001526:	1dba      	adds	r2, r7, #6
 8001528:	1df9      	adds	r1, r7, #7
 800152a:	2364      	movs	r3, #100	; 0x64
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <SPI_RxByte+0x34>)
 8001532:	f006 f9f3 	bl	800791c <HAL_SPI_TransmitReceive>

	return data;
 8001536:	79bb      	ldrb	r3, [r7, #6]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000ac 	.word	0x200000ac

08001544 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800154c:	f7ff ffde 	bl	800150c <SPI_RxByte>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	701a      	strb	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <SD_ReadyWait+0x30>)
 8001568:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800156c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800156e:	f7ff ffcd 	bl	800150c <SPI_RxByte>
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2bff      	cmp	r3, #255	; 0xff
 800157a:	d004      	beq.n	8001586 <SD_ReadyWait+0x26>
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SD_ReadyWait+0x30>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f3      	bne.n	800156e <SD_ReadyWait+0xe>

	return res;
 8001586:	79fb      	ldrb	r3, [r7, #7]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200004fc 	.word	0x200004fc

08001594 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800159a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800159e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80015a0:	f7ff ff72 	bl	8001488 <DESELECT>
	for(int i = 0; i < 10; i++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	e005      	b.n	80015b6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80015aa:	20ff      	movs	r0, #255	; 0xff
 80015ac:	f7ff ff7a 	bl	80014a4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	ddf6      	ble.n	80015aa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80015bc:	f7ff ff56 	bl	800146c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80015c0:	2340      	movs	r3, #64	; 0x40
 80015c2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80015d4:	2395      	movs	r3, #149	; 0x95
 80015d6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80015d8:	463b      	mov	r3, r7
 80015da:	2106      	movs	r1, #6
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff7b 	bl	80014d8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80015e2:	e002      	b.n	80015ea <SD_PowerOn+0x56>
	{
		cnt--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80015ea:	f7ff ff8f 	bl	800150c <SPI_RxByte>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d002      	beq.n	80015fa <SD_PowerOn+0x66>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f4      	bne.n	80015e4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80015fa:	f7ff ff45 	bl	8001488 <DESELECT>
	SPI_TxByte(0XFF);
 80015fe:	20ff      	movs	r0, #255	; 0xff
 8001600:	f7ff ff50 	bl	80014a4 <SPI_TxByte>

	PowerFlag = 1;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <SD_PowerOn+0x80>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000043 	.word	0x20000043

08001618 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <SD_PowerOff+0x14>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000043 	.word	0x20000043

08001630 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <SD_CheckPower+0x10>)
 8001636:	781b      	ldrb	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000043 	.word	0x20000043

08001644 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <SD_RxDataBlock+0x5c>)
 8001650:	22c8      	movs	r2, #200	; 0xc8
 8001652:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001654:	f7ff ff5a 	bl	800150c <SPI_RxByte>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2bff      	cmp	r3, #255	; 0xff
 8001660:	d104      	bne.n	800166c <SD_RxDataBlock+0x28>
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <SD_RxDataBlock+0x5c>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f3      	bne.n	8001654 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2bfe      	cmp	r3, #254	; 0xfe
 8001670:	d001      	beq.n	8001676 <SD_RxDataBlock+0x32>
 8001672:	2300      	movs	r3, #0
 8001674:	e00f      	b.n	8001696 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff61 	bl	8001544 <SPI_RxBytePtr>
	} while(len--);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	603a      	str	r2, [r7, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f4      	bne.n	8001676 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800168c:	f7ff ff3e 	bl	800150c <SPI_RxByte>
	SPI_RxByte();
 8001690:	f7ff ff3c 	bl	800150c <SPI_RxByte>

	return TRUE;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200004fa 	.word	0x200004fa

080016a4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80016b4:	f7ff ff54 	bl	8001560 <SD_ReadyWait>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d001      	beq.n	80016c2 <SD_TxDataBlock+0x1e>
 80016be:	2300      	movs	r3, #0
 80016c0:	e02f      	b.n	8001722 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff feed 	bl	80014a4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	2bfd      	cmp	r3, #253	; 0xfd
 80016ce:	d020      	beq.n	8001712 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80016d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff feff 	bl	80014d8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80016da:	f7ff ff17 	bl	800150c <SPI_RxByte>
		SPI_RxByte();
 80016de:	f7ff ff15 	bl	800150c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80016e2:	e00b      	b.n	80016fc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80016e4:	f7ff ff12 	bl	800150c <SPI_RxByte>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d006      	beq.n	8001704 <SD_TxDataBlock+0x60>
			i++;
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	3301      	adds	r3, #1
 80016fa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	2b40      	cmp	r3, #64	; 0x40
 8001700:	d9f0      	bls.n	80016e4 <SD_TxDataBlock+0x40>
 8001702:	e000      	b.n	8001706 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001704:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001706:	bf00      	nop
 8001708:	f7ff ff00 	bl	800150c <SPI_RxByte>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0fa      	beq.n	8001708 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	2b05      	cmp	r3, #5
 800171a:	d101      	bne.n	8001720 <SD_TxDataBlock+0x7c>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	6039      	str	r1, [r7, #0]
 8001734:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001736:	f7ff ff13 	bl	8001560 <SD_ReadyWait>
 800173a:	4603      	mov	r3, r0
 800173c:	2bff      	cmp	r3, #255	; 0xff
 800173e:	d001      	beq.n	8001744 <SD_SendCmd+0x1a>
 8001740:	23ff      	movs	r3, #255	; 0xff
 8001742:	e042      	b.n	80017ca <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff feac 	bl	80014a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	0e1b      	lsrs	r3, r3, #24
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fea6 	bl	80014a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fea0 	bl	80014a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fe9a 	bl	80014a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fe95 	bl	80014a4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b40      	cmp	r3, #64	; 0x40
 800177e:	d102      	bne.n	8001786 <SD_SendCmd+0x5c>
 8001780:	2395      	movs	r3, #149	; 0x95
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e007      	b.n	8001796 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b48      	cmp	r3, #72	; 0x48
 800178a:	d102      	bne.n	8001792 <SD_SendCmd+0x68>
 800178c:	2387      	movs	r3, #135	; 0x87
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <SD_SendCmd+0x6c>
	else crc = 1;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fe83 	bl	80014a4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b4c      	cmp	r3, #76	; 0x4c
 80017a2:	d101      	bne.n	80017a8 <SD_SendCmd+0x7e>
 80017a4:	f7ff feb2 	bl	800150c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80017a8:	230a      	movs	r3, #10
 80017aa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80017ac:	f7ff feae 	bl	800150c <SPI_RxByte>
 80017b0:	4603      	mov	r3, r0
 80017b2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80017b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da05      	bge.n	80017c8 <SD_SendCmd+0x9e>
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	3b01      	subs	r3, #1
 80017c0:	73bb      	strb	r3, [r7, #14]
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f1      	bne.n	80017ac <SD_SendCmd+0x82>

	return res;
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SD_disk_initialize+0x14>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d6      	b.n	8001996 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80017e8:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <SD_disk_initialize+0x1cc>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <SD_disk_initialize+0x2a>
 80017f6:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <SD_disk_initialize+0x1cc>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	e0cb      	b.n	8001996 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80017fe:	f7ff fec9 	bl	8001594 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001802:	f7ff fe33 	bl	800146c <SELECT>

	/* check disk type */
	type = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800180a:	2100      	movs	r1, #0
 800180c:	2040      	movs	r0, #64	; 0x40
 800180e:	f7ff ff8c 	bl	800172a <SD_SendCmd>
 8001812:	4603      	mov	r3, r0
 8001814:	2b01      	cmp	r3, #1
 8001816:	f040 80a6 	bne.w	8001966 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <SD_disk_initialize+0x1d0>)
 800181c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001820:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001822:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001826:	2048      	movs	r0, #72	; 0x48
 8001828:	f7ff ff7f 	bl	800172a <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b01      	cmp	r3, #1
 8001830:	d158      	bne.n	80018e4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e00c      	b.n	8001852 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001838:	7bfc      	ldrb	r4, [r7, #15]
 800183a:	f7ff fe67 	bl	800150c <SPI_RxByte>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	f104 0310 	add.w	r3, r4, #16
 8001846:	443b      	add	r3, r7
 8001848:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	3301      	adds	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d9ef      	bls.n	8001838 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001858:	7abb      	ldrb	r3, [r7, #10]
 800185a:	2b01      	cmp	r3, #1
 800185c:	f040 8083 	bne.w	8001966 <SD_disk_initialize+0x192>
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	2baa      	cmp	r3, #170	; 0xaa
 8001864:	d17f      	bne.n	8001966 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001866:	2100      	movs	r1, #0
 8001868:	2077      	movs	r0, #119	; 0x77
 800186a:	f7ff ff5e 	bl	800172a <SD_SendCmd>
 800186e:	4603      	mov	r3, r0
 8001870:	2b01      	cmp	r3, #1
 8001872:	d807      	bhi.n	8001884 <SD_disk_initialize+0xb0>
 8001874:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001878:	2069      	movs	r0, #105	; 0x69
 800187a:	f7ff ff56 	bl	800172a <SD_SendCmd>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <SD_disk_initialize+0x1d0>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1eb      	bne.n	8001866 <SD_disk_initialize+0x92>
 800188e:	e000      	b.n	8001892 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001890:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <SD_disk_initialize+0x1d0>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d064      	beq.n	8001966 <SD_disk_initialize+0x192>
 800189c:	2100      	movs	r1, #0
 800189e:	207a      	movs	r0, #122	; 0x7a
 80018a0:	f7ff ff43 	bl	800172a <SD_SendCmd>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d15d      	bne.n	8001966 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e00c      	b.n	80018ca <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80018b0:	7bfc      	ldrb	r4, [r7, #15]
 80018b2:	f7ff fe2b 	bl	800150c <SPI_RxByte>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	f104 0310 	add.w	r3, r4, #16
 80018be:	443b      	add	r3, r7
 80018c0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	3301      	adds	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d9ef      	bls.n	80018b0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80018d0:	7a3b      	ldrb	r3, [r7, #8]
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SD_disk_initialize+0x10a>
 80018da:	230c      	movs	r3, #12
 80018dc:	e000      	b.n	80018e0 <SD_disk_initialize+0x10c>
 80018de:	2304      	movs	r3, #4
 80018e0:	73bb      	strb	r3, [r7, #14]
 80018e2:	e040      	b.n	8001966 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80018e4:	2100      	movs	r1, #0
 80018e6:	2077      	movs	r0, #119	; 0x77
 80018e8:	f7ff ff1f 	bl	800172a <SD_SendCmd>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d808      	bhi.n	8001904 <SD_disk_initialize+0x130>
 80018f2:	2100      	movs	r1, #0
 80018f4:	2069      	movs	r0, #105	; 0x69
 80018f6:	f7ff ff18 	bl	800172a <SD_SendCmd>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d801      	bhi.n	8001904 <SD_disk_initialize+0x130>
 8001900:	2302      	movs	r3, #2
 8001902:	e000      	b.n	8001906 <SD_disk_initialize+0x132>
 8001904:	2301      	movs	r3, #1
 8001906:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d10e      	bne.n	800192c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800190e:	2100      	movs	r1, #0
 8001910:	2077      	movs	r0, #119	; 0x77
 8001912:	f7ff ff0a 	bl	800172a <SD_SendCmd>
 8001916:	4603      	mov	r3, r0
 8001918:	2b01      	cmp	r3, #1
 800191a:	d80e      	bhi.n	800193a <SD_disk_initialize+0x166>
 800191c:	2100      	movs	r1, #0
 800191e:	2069      	movs	r0, #105	; 0x69
 8001920:	f7ff ff03 	bl	800172a <SD_SendCmd>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d107      	bne.n	800193a <SD_disk_initialize+0x166>
 800192a:	e00d      	b.n	8001948 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800192c:	2100      	movs	r1, #0
 800192e:	2041      	movs	r0, #65	; 0x41
 8001930:	f7ff fefb 	bl	800172a <SD_SendCmd>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <SD_disk_initialize+0x1d0>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e1      	bne.n	8001908 <SD_disk_initialize+0x134>
 8001944:	e000      	b.n	8001948 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001946:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <SD_disk_initialize+0x1d0>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <SD_disk_initialize+0x18e>
 8001952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001956:	2050      	movs	r0, #80	; 0x50
 8001958:	f7ff fee7 	bl	800172a <SD_SendCmd>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SD_disk_initialize+0x192>
 8001962:	2300      	movs	r3, #0
 8001964:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <SD_disk_initialize+0x1d4>)
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800196c:	f7ff fd8c 	bl	8001488 <DESELECT>
	SPI_RxByte();
 8001970:	f7ff fdcc 	bl	800150c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <SD_disk_initialize+0x1cc>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <SD_disk_initialize+0x1cc>)
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e001      	b.n	8001990 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800198c:	f7ff fe44 	bl	8001618 <SD_PowerOff>
	}

	return Stat;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <SD_disk_initialize+0x1cc>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000000 	.word	0x20000000
 80019a4:	200004fa 	.word	0x200004fa
 80019a8:	20000042 	.word	0x20000042

080019ac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SD_disk_status+0x14>
 80019bc:	2301      	movs	r3, #1
 80019be:	e002      	b.n	80019c6 <SD_disk_status+0x1a>
	return Stat;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <SD_disk_status+0x24>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000000 	.word	0x20000000

080019d4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <SD_disk_read+0x1c>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <SD_disk_read+0x20>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e051      	b.n	8001a98 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <SD_disk_read+0xcc>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SD_disk_read+0x32>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e048      	b.n	8001a98 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <SD_disk_read+0xd0>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <SD_disk_read+0x44>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	025b      	lsls	r3, r3, #9
 8001a16:	607b      	str	r3, [r7, #4]

	SELECT();
 8001a18:	f7ff fd28 	bl	800146c <SELECT>

	if (count == 1)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d111      	bne.n	8001a46 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	2051      	movs	r0, #81	; 0x51
 8001a26:	f7ff fe80 	bl	800172a <SD_SendCmd>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d129      	bne.n	8001a84 <SD_disk_read+0xb0>
 8001a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a34:	68b8      	ldr	r0, [r7, #8]
 8001a36:	f7ff fe05 	bl	8001644 <SD_RxDataBlock>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d021      	beq.n	8001a84 <SD_disk_read+0xb0>
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	e01e      	b.n	8001a84 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2052      	movs	r0, #82	; 0x52
 8001a4a:	f7ff fe6e 	bl	800172a <SD_SendCmd>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d117      	bne.n	8001a84 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a58:	68b8      	ldr	r0, [r7, #8]
 8001a5a:	f7ff fdf3 	bl	8001644 <SD_RxDataBlock>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <SD_disk_read+0xa6>
				buff += 512;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a6a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ed      	bne.n	8001a54 <SD_disk_read+0x80>
 8001a78:	e000      	b.n	8001a7c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001a7a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	204c      	movs	r0, #76	; 0x4c
 8001a80:	f7ff fe53 	bl	800172a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001a84:	f7ff fd00 	bl	8001488 <DESELECT>
	SPI_RxByte();
 8001a88:	f7ff fd40 	bl	800150c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000042 	.word	0x20000042

08001aa8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <SD_disk_write+0x1c>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <SD_disk_write+0x20>
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	e06b      	b.n	8001ba0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <SD_disk_write+0x100>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SD_disk_write+0x32>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e062      	b.n	8001ba0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <SD_disk_write+0x100>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SD_disk_write+0x44>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e059      	b.n	8001ba0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001aec:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <SD_disk_write+0x104>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <SD_disk_write+0x56>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	025b      	lsls	r3, r3, #9
 8001afc:	607b      	str	r3, [r7, #4]

	SELECT();
 8001afe:	f7ff fcb5 	bl	800146c <SELECT>

	if (count == 1)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d110      	bne.n	8001b2a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	2058      	movs	r0, #88	; 0x58
 8001b0c:	f7ff fe0d 	bl	800172a <SD_SendCmd>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d13a      	bne.n	8001b8c <SD_disk_write+0xe4>
 8001b16:	21fe      	movs	r1, #254	; 0xfe
 8001b18:	68b8      	ldr	r0, [r7, #8]
 8001b1a:	f7ff fdc3 	bl	80016a4 <SD_TxDataBlock>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d033      	beq.n	8001b8c <SD_disk_write+0xe4>
			count = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	e030      	b.n	8001b8c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <SD_disk_write+0x104>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001b36:	2100      	movs	r1, #0
 8001b38:	2077      	movs	r0, #119	; 0x77
 8001b3a:	f7ff fdf6 	bl	800172a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	2057      	movs	r0, #87	; 0x57
 8001b42:	f7ff fdf2 	bl	800172a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	2059      	movs	r0, #89	; 0x59
 8001b4a:	f7ff fdee 	bl	800172a <SD_SendCmd>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11b      	bne.n	8001b8c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001b54:	21fc      	movs	r1, #252	; 0xfc
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f7ff fda4 	bl	80016a4 <SD_TxDataBlock>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <SD_disk_write+0xd0>
				buff += 512;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b68:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ee      	bne.n	8001b54 <SD_disk_write+0xac>
 8001b76:	e000      	b.n	8001b7a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001b78:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001b7a:	21fd      	movs	r1, #253	; 0xfd
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fd91 	bl	80016a4 <SD_TxDataBlock>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <SD_disk_write+0xe4>
			{
				count = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001b8c:	f7ff fc7c 	bl	8001488 <DESELECT>
	SPI_RxByte();
 8001b90:	f7ff fcbc 	bl	800150c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000042 	.word	0x20000042

08001bb0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b08b      	sub	sp, #44	; 0x2c
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	603a      	str	r2, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SD_disk_ioctl+0x1e>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e115      	b.n	8001dfa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d124      	bne.n	8001c24 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d012      	beq.n	8001c08 <SD_disk_ioctl+0x58>
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	dc1a      	bgt.n	8001c1c <SD_disk_ioctl+0x6c>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <SD_disk_ioctl+0x40>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d006      	beq.n	8001bfc <SD_disk_ioctl+0x4c>
 8001bee:	e015      	b.n	8001c1c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001bf0:	f7ff fd12 	bl	8001618 <SD_PowerOff>
			res = RES_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bfa:	e0fc      	b.n	8001df6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001bfc:	f7ff fcca 	bl	8001594 <SD_PowerOn>
			res = RES_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c06:	e0f6      	b.n	8001df6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	1c5c      	adds	r4, r3, #1
 8001c0c:	f7ff fd10 	bl	8001630 <SD_CheckPower>
 8001c10:	4603      	mov	r3, r0
 8001c12:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c1a:	e0ec      	b.n	8001df6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c22:	e0e8      	b.n	8001df6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c24:	4b77      	ldr	r3, [pc, #476]	; (8001e04 <SD_disk_ioctl+0x254>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SD_disk_ioctl+0x86>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0e1      	b.n	8001dfa <SD_disk_ioctl+0x24a>

		SELECT();
 8001c36:	f7ff fc19 	bl	800146c <SELECT>

		switch (ctrl)
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b0d      	cmp	r3, #13
 8001c3e:	f200 80cb 	bhi.w	8001dd8 <SD_disk_ioctl+0x228>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <SD_disk_ioctl+0x98>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001d43 	.word	0x08001d43
 8001c4c:	08001c81 	.word	0x08001c81
 8001c50:	08001d33 	.word	0x08001d33
 8001c54:	08001dd9 	.word	0x08001dd9
 8001c58:	08001dd9 	.word	0x08001dd9
 8001c5c:	08001dd9 	.word	0x08001dd9
 8001c60:	08001dd9 	.word	0x08001dd9
 8001c64:	08001dd9 	.word	0x08001dd9
 8001c68:	08001dd9 	.word	0x08001dd9
 8001c6c:	08001dd9 	.word	0x08001dd9
 8001c70:	08001dd9 	.word	0x08001dd9
 8001c74:	08001d55 	.word	0x08001d55
 8001c78:	08001d79 	.word	0x08001d79
 8001c7c:	08001d9d 	.word	0x08001d9d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001c80:	2100      	movs	r1, #0
 8001c82:	2049      	movs	r0, #73	; 0x49
 8001c84:	f7ff fd51 	bl	800172a <SD_SendCmd>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 80a8 	bne.w	8001de0 <SD_disk_ioctl+0x230>
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2110      	movs	r1, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fcd4 	bl	8001644 <SD_RxDataBlock>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 809e 	beq.w	8001de0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001ca4:	7b3b      	ldrb	r3, [r7, #12]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d10e      	bne.n	8001ccc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001cae:	7d7b      	ldrb	r3, [r7, #21]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	7d3b      	ldrb	r3, [r7, #20]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	029a      	lsls	r2, r3, #10
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e02e      	b.n	8001d2a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ccc:	7c7b      	ldrb	r3, [r7, #17]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	7dbb      	ldrb	r3, [r7, #22]
 8001cd6:	09db      	lsrs	r3, r3, #7
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	7d7b      	ldrb	r3, [r7, #21]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f003 0306 	and.w	r3, r3, #6
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001cf4:	7d3b      	ldrb	r3, [r7, #20]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	7cbb      	ldrb	r3, [r7, #18]
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001d1c:	8bfa      	ldrh	r2, [r7, #30]
 8001d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d22:	3b09      	subs	r3, #9
 8001d24:	409a      	lsls	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001d30:	e056      	b.n	8001de0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d38:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d40:	e055      	b.n	8001dee <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001d42:	f7ff fc0d 	bl	8001560 <SD_ReadyWait>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2bff      	cmp	r3, #255	; 0xff
 8001d4a:	d14b      	bne.n	8001de4 <SD_disk_ioctl+0x234>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d52:	e047      	b.n	8001de4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001d54:	2100      	movs	r1, #0
 8001d56:	2049      	movs	r0, #73	; 0x49
 8001d58:	f7ff fce7 	bl	800172a <SD_SendCmd>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d142      	bne.n	8001de8 <SD_disk_ioctl+0x238>
 8001d62:	2110      	movs	r1, #16
 8001d64:	6a38      	ldr	r0, [r7, #32]
 8001d66:	f7ff fc6d 	bl	8001644 <SD_RxDataBlock>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d03b      	beq.n	8001de8 <SD_disk_ioctl+0x238>
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d76:	e037      	b.n	8001de8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001d78:	2100      	movs	r1, #0
 8001d7a:	204a      	movs	r0, #74	; 0x4a
 8001d7c:	f7ff fcd5 	bl	800172a <SD_SendCmd>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d132      	bne.n	8001dec <SD_disk_ioctl+0x23c>
 8001d86:	2110      	movs	r1, #16
 8001d88:	6a38      	ldr	r0, [r7, #32]
 8001d8a:	f7ff fc5b 	bl	8001644 <SD_RxDataBlock>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d02b      	beq.n	8001dec <SD_disk_ioctl+0x23c>
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d9a:	e027      	b.n	8001dec <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	207a      	movs	r0, #122	; 0x7a
 8001da0:	f7ff fcc3 	bl	800172a <SD_SendCmd>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d116      	bne.n	8001dd8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001db0:	e00b      	b.n	8001dca <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001db2:	6a3c      	ldr	r4, [r7, #32]
 8001db4:	1c63      	adds	r3, r4, #1
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	f7ff fba8 	bl	800150c <SPI_RxByte>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001dca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d9ef      	bls.n	8001db2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dde:	e006      	b.n	8001dee <SD_disk_ioctl+0x23e>
			break;
 8001de0:	bf00      	nop
 8001de2:	e004      	b.n	8001dee <SD_disk_ioctl+0x23e>
			break;
 8001de4:	bf00      	nop
 8001de6:	e002      	b.n	8001dee <SD_disk_ioctl+0x23e>
			break;
 8001de8:	bf00      	nop
 8001dea:	e000      	b.n	8001dee <SD_disk_ioctl+0x23e>
			break;
 8001dec:	bf00      	nop
		}

		DESELECT();
 8001dee:	f7ff fb4b 	bl	8001488 <DESELECT>
		SPI_RxByte();
 8001df2:	f7ff fb8b 	bl	800150c <SPI_RxByte>
	}

	return res;
 8001df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	372c      	adds	r7, #44	; 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* TIM IT handler*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER TIM\r\n", strlen("ENTER TIM\r\n"),1000);
#endif

	updateScreen();	// Screen update
 8001e10:	f000 feee 	bl	8002bf0 <updateScreen>

#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"EXIT TIM\r\n", strlen("EXIT TIM\r\n"),1000);
#endif
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_UART_RxIdleCallback>:

void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER IT_RXIDLE\r\n", strlen("ENTER IT_RXIDLE\r\n"),1000);
	HAL_UART_Transmit(&huart3, usart_rx_dma_buffer, strlen(usart_rx_dma_buffer),1000);
#endif

	updateGPS(&gps, usart_rx_dma_buffer);
 8001e24:	4907      	ldr	r1, [pc, #28]	; (8001e44 <HAL_UART_RxIdleCallback+0x28>)
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <HAL_UART_RxIdleCallback+0x2c>)
 8001e28:	f7fe fc96 	bl	8000758 <updateGPS>
	GPSupdated = 1;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_UART_RxIdleCallback+0x30>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
	updateDateTime( &hrtc, usart_rx_dma_buffer );
 8001e32:	4904      	ldr	r1, [pc, #16]	; (8001e44 <HAL_UART_RxIdleCallback+0x28>)
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <HAL_UART_RxIdleCallback+0x34>)
 8001e36:	f7fe fce1 	bl	80007fc <updateDateTime>

#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"EXIT IT_RXIDLE\r\n", strlen("EXIT IT_RXIDLE\r\n"),1000);
#endif

}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001d0 	.word	0x200001d0
 8001e48:	200004e8 	.word	0x200004e8
 8001e4c:	2000045b 	.word	0x2000045b
 8001e50:	20000098 	.word	0x20000098

08001e54 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER EXTI\r\n", strlen("ENTER EXTI\r\n"),1000);
#endif
	longPress = HAL_GetTick();
 8001e5e:	f002 fe99 	bl	8004b94 <HAL_GetTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_GPIO_EXTI_Callback+0x38>)
 8001e66:	6013      	str	r3, [r2, #0]
	switch(GPIO_Pin)
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d002      	beq.n	8001e74 <HAL_GPIO_EXTI_Callback+0x20>
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d004      	beq.n	8001e7c <HAL_GPIO_EXTI_Callback+0x28>
			break;
	}
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"EXIT EXTI\r\n", strlen("EXIT EXTI\r\n"),1000);
#endif
}
 8001e72:	e007      	b.n	8001e84 <HAL_GPIO_EXTI_Callback+0x30>
			button_pressed = SIG_BUTTON;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
			break;
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_EXTI_Callback+0x30>
			button_pressed = SEL_BUTTON;
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001e7e:	2202      	movs	r2, #2
 8001e80:	701a      	strb	r2, [r3, #0]
			break;
 8001e82:	bf00      	nop
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000460 	.word	0x20000460
 8001e90:	2000045d 	.word	0x2000045d

08001e94 <check_buttons>:

void check_buttons()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	switch(button_pressed)
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <check_buttons+0x84>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d002      	beq.n	8001ea6 <check_buttons+0x12>
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d02f      	beq.n	8001f04 <check_buttons+0x70>
 8001ea4:	e032      	b.n	8001f0c <check_buttons+0x78>
	{
		case SIG_BUTTON:
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET );
 8001ea6:	bf00      	nop
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	481c      	ldr	r0, [pc, #112]	; (8001f1c <check_buttons+0x88>)
 8001eac:	f003 fb96 	bl	80055dc <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f8      	beq.n	8001ea8 <check_buttons+0x14>
			if( ( HAL_GetTick() - longPress < LONG_TIME_PRESS) )
 8001eb6:	f002 fe6d 	bl	8004b94 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <check_buttons+0x8c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d80e      	bhi.n	8001ee8 <check_buttons+0x54>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <check_buttons+0x90>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d103      	bne.n	8001eda <check_buttons+0x46>
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <check_buttons+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
			else
			{
				screen_power ^= 1 << 1;
				u8g2_SetPowerSave(&u8g2, screen_power);
			}
			break;
 8001ed8:	e018      	b.n	8001f0c <check_buttons+0x78>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <check_buttons+0x90>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <check_buttons+0x90>)
 8001ee4:	701a      	strb	r2, [r3, #0]
			break;
 8001ee6:	e011      	b.n	8001f0c <check_buttons+0x78>
				screen_power ^= 1 << 1;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <check_buttons+0x94>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f083 0302 	eor.w	r3, r3, #2
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <check_buttons+0x94>)
 8001ef4:	701a      	strb	r2, [r3, #0]
				u8g2_SetPowerSave(&u8g2, screen_power);
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <check_buttons+0x94>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <check_buttons+0x98>)
 8001efe:	f002 fced 	bl	80048dc <u8x8_SetPowerSave>
			break;
 8001f02:	e003      	b.n	8001f0c <check_buttons+0x78>

		case SEL_BUTTON:
			button_pressed = SEL_BUTTON;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <check_buttons+0x84>)
 8001f06:	2202      	movs	r2, #2
 8001f08:	701a      	strb	r2, [r3, #0]
			break;
 8001f0a:	bf00      	nop
	}
	button_pressed = 0;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <check_buttons+0x84>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000045d 	.word	0x2000045d
 8001f1c:	40010800 	.word	0x40010800
 8001f20:	20000460 	.word	0x20000460
 8001f24:	2000045a 	.word	0x2000045a
 8001f28:	2000045c 	.word	0x2000045c
 8001f2c:	20000464 	.word	0x20000464

08001f30 <Setup>:
/**
  * @brief  Init and setup Sreen, GPS, SD.
  * @retval -
  */
void Setup()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	initScreen(&u8g2); // Screen init, clear, home screen set
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <Setup+0x14>)
 8001f36:	f000 fe33 	bl	8002ba0 <initScreen>

	initGPS(&gps);	// Initialize default values for gps object
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <Setup+0x18>)
 8001f3c:	f7fe fc00 	bl	8000740 <initGPS>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000464 	.word	0x20000464
 8001f48:	200004e8 	.word	0x200004e8

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f50:	f002 fdc8 	bl	8004ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f54:	f000 f846 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f58:	f000 f9e4 	bl	8002324 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5c:	f000 f9c4 	bl	80022e8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f60:	f000 f89c 	bl	800209c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f64:	f000 f996 	bl	8002294 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001f68:	f000 f8c6 	bl	80020f8 <MX_RTC_Init>
  MX_FATFS_Init();
 8001f6c:	f006 ff52 	bl	8008e14 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001f70:	f000 f90c 	bl	800218c <MX_SPI1_Init>
#ifdef DEBUG
  MX_USART3_UART_Init();
#endif
  MX_TIM3_Init();
 8001f74:	f000 f940 	bl	80021f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /*Setup GPS model, OLED and SD*/
  Setup();
 8001f78:	f7ff ffda 	bl	8001f30 <Setup>

  /*Manual peripherial config*/
  HAL_UART_Receive_DMA(&huart1, usart_rx_dma_buffer, MAX_NMEA_LEN);	//Configure DMA
 8001f7c:	f240 228a 	movw	r2, #650	; 0x28a
 8001f80:	4914      	ldr	r1, [pc, #80]	; (8001fd4 <main+0x88>)
 8001f82:	4815      	ldr	r0, [pc, #84]	; (8001fd8 <main+0x8c>)
 8001f84:	f006 fb5a 	bl	800863c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim3);	//Configure TIM3 for OLED update
 8001f88:	4814      	ldr	r0, [pc, #80]	; (8001fdc <main+0x90>)
 8001f8a:	f005 ff5f 	bl	8007e4c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);	// enable idle line interrupt
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <main+0x8c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <main+0x8c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0210 	orr.w	r2, r2, #16
 8001f9c:	60da      	str	r2, [r3, #12]

  while (1)
  {

	  /* Is there new position info?*/
	  if( GPSupdated )
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <main+0x94>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d012      	beq.n	8001fcc <main+0x80>
	  {
		  __HAL_UART_DISABLE_IT(UART1, UART_IT_IDLE);	//disables IT util data is updated
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <main+0x8c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <main+0x8c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0210 	bic.w	r2, r2, #16
 8001fb4:	60da      	str	r2, [r3, #12]
		  //log_data();	// Saves data in SD
		  GPSupdated = 0;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <main+0x94>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);	// Enables IT again
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <main+0x8c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <main+0x8c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0210 	orr.w	r2, r2, #16
 8001fca:	60da      	str	r2, [r3, #12]
	  }
	  check_buttons();
 8001fcc:	f7ff ff62 	bl	8001e94 <check_buttons>
	  if( GPSupdated )
 8001fd0:	e7e5      	b.n	8001f9e <main+0x52>
 8001fd2:	bf00      	nop
 8001fd4:	200001d0 	.word	0x200001d0
 8001fd8:	2000014c 	.word	0x2000014c
 8001fdc:	20000104 	.word	0x20000104
 8001fe0:	2000045b 	.word	0x2000045b

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b094      	sub	sp, #80	; 0x50
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fee:	2228      	movs	r2, #40	; 0x28
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f007 f802 	bl	8008ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002014:	2301      	movs	r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002022:	2301      	movs	r3, #1
 8002024:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002026:	2302      	movs	r3, #2
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002030:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002034:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800203a:	4618      	mov	r0, r3
 800203c:	f003 ff6c 	bl	8005f18 <HAL_RCC_OscConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002046:	f000 f9cd 	bl	80023e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204a:	230f      	movs	r3, #15
 800204c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800205a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2102      	movs	r1, #2
 8002066:	4618      	mov	r0, r3
 8002068:	f004 f9d8 	bl	800641c <HAL_RCC_ClockConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002072:	f000 f9b7 	bl	80023e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002076:	2301      	movs	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800207a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fb62 	bl	800674c <HAL_RCCEx_PeriphCLKConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800208e:	f000 f9a9 	bl	80023e4 <Error_Handler>
  }
}
 8002092:	bf00      	nop
 8002094:	3750      	adds	r7, #80	; 0x50
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_I2C1_Init+0x50>)
 80020a2:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <MX_I2C1_Init+0x54>)
 80020a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_I2C1_Init+0x50>)
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <MX_I2C1_Init+0x58>)
 80020aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_I2C1_Init+0x50>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_I2C1_Init+0x50>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_I2C1_Init+0x50>)
 80020ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <MX_I2C1_Init+0x50>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_I2C1_Init+0x50>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <MX_I2C1_Init+0x50>)
 80020da:	f003 fac7 	bl	800566c <HAL_I2C_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020e4:	f000 f97e 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000044 	.word	0x20000044
 80020f0:	40005400 	.word	0x40005400
 80020f4:	00061a80 	.word	0x00061a80

080020f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2100      	movs	r1, #0
 8002102:	460a      	mov	r2, r1
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	460a      	mov	r2, r1
 8002108:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800210a:	2300      	movs	r3, #0
 800210c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <MX_RTC_Init+0x8c>)
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <MX_RTC_Init+0x90>)
 8002112:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_RTC_Init+0x8c>)
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <MX_RTC_Init+0x8c>)
 800211e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002122:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002124:	4817      	ldr	r0, [pc, #92]	; (8002184 <MX_RTC_Init+0x8c>)
 8002126:	f004 fc87 	bl	8006a38 <HAL_RTC_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002130:	f000 f958 	bl	80023e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <MX_RTC_Init+0x8c>)
 8002148:	f004 fd0c 	bl	8006b64 <HAL_RTC_SetTime>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002152:	f000 f947 	bl	80023e4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8002156:	2305      	movs	r3, #5
 8002158:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800215a:	2301      	movs	r3, #1
 800215c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 21;
 8002162:	2315      	movs	r3, #21
 8002164:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002166:	463b      	mov	r3, r7
 8002168:	2200      	movs	r2, #0
 800216a:	4619      	mov	r1, r3
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_RTC_Init+0x8c>)
 800216e:	f004 fe69 	bl	8006e44 <HAL_RTC_SetDate>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002178:	f000 f934 	bl	80023e4 <Error_Handler>
	HAL_RTC_SetAlarm_IT (&hrtc, &Alarm, RTC_FORMAT_BIN);
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_ALRA);*/
  /* USER CODE END RTC_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000098 	.word	0x20000098
 8002188:	40002800 	.word	0x40002800

0800218c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_SPI1_Init+0x64>)
 8002192:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <MX_SPI1_Init+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_SPI1_Init+0x64>)
 8002198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800219c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021c0:	2220      	movs	r2, #32
 80021c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021d8:	220a      	movs	r2, #10
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021de:	f005 f9dd 	bl	800759c <HAL_SPI_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021e8:	f000 f8fc 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200000ac 	.word	0x200000ac
 80021f4:	40013000 	.word	0x40013000

080021f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	463b      	mov	r3, r7
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <MX_TIM3_Init+0x94>)
 8002216:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <MX_TIM3_Init+0x98>)
 8002218:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_TIM3_Init+0x94>)
 800221c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002220:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_TIM3_Init+0x94>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <MX_TIM3_Init+0x94>)
 800222a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800222e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <MX_TIM3_Init+0x94>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <MX_TIM3_Init+0x94>)
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800223c:	4813      	ldr	r0, [pc, #76]	; (800228c <MX_TIM3_Init+0x94>)
 800223e:	f005 fdb5 	bl	8007dac <HAL_TIM_Base_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002248:	f000 f8cc 	bl	80023e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	4619      	mov	r1, r3
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <MX_TIM3_Init+0x94>)
 800225a:	f005 ff51 	bl	8008100 <HAL_TIM_ConfigClockSource>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002264:	f000 f8be 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002270:	463b      	mov	r3, r7
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_TIM3_Init+0x94>)
 8002276:	f006 f923 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002280:	f000 f8b0 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000104 	.word	0x20000104
 8002290:	40000400 	.word	0x40000400

08002294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <MX_USART1_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022cc:	f006 f968 	bl	80085a0 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f000 f885 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000014c 	.word	0x2000014c
 80022e4:	40013800 	.word	0x40013800

080022e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_DMA_Init+0x38>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <MX_DMA_Init+0x38>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6153      	str	r3, [r2, #20]
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_DMA_Init+0x38>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	200f      	movs	r0, #15
 800230c:	f002 fd47 	bl	8004d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002310:	200f      	movs	r0, #15
 8002312:	f002 fd60 	bl	8004dd6 <HAL_NVIC_EnableIRQ>

}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000

08002324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <MX_GPIO_Init+0xb4>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <MX_GPIO_Init+0xb4>)
 800233e:	f043 0310 	orr.w	r3, r3, #16
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <MX_GPIO_Init+0xb4>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <MX_GPIO_Init+0xb4>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <MX_GPIO_Init+0xb4>)
 8002356:	f043 0320 	orr.w	r3, r3, #32
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <MX_GPIO_Init+0xb4>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <MX_GPIO_Init+0xb4>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <MX_GPIO_Init+0xb4>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <MX_GPIO_Init+0xb4>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <MX_GPIO_Init+0xb4>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <MX_GPIO_Init+0xb4>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_GPIO_Init+0xb4>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002398:	2306      	movs	r3, #6
 800239a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_GPIO_Init+0xb8>)
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	4619      	mov	r1, r3
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_GPIO_Init+0xbc>)
 80023ac:	f002 ff92 	bl	80052d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2102      	movs	r1, #2
 80023b4:	2007      	movs	r0, #7
 80023b6:	f002 fcf2 	bl	8004d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023ba:	2007      	movs	r0, #7
 80023bc:	f002 fd0b 	bl	8004dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2102      	movs	r1, #2
 80023c4:	2008      	movs	r0, #8
 80023c6:	f002 fcea 	bl	8004d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80023ca:	2008      	movs	r0, #8
 80023cc:	f002 fd03 	bl	8004dd6 <HAL_NVIC_EnableIRQ>

}
 80023d0:	bf00      	nop
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	10210000 	.word	0x10210000
 80023e0:	40010800 	.word	0x40010800

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
}
 80023ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ec:	e7fe      	b.n	80023ec <Error_Handler+0x8>
	...

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_MspInit+0x5c>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_MspInit+0x5c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6193      	str	r3, [r2, #24]
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_MspInit+0x5c>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_MspInit+0x5c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_MspInit+0x5c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_MspInit+0x5c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_MspInit+0x60>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_MspInit+0x60>)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000

08002454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_I2C_MspInit+0x70>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d123      	bne.n	80024bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_I2C_MspInit+0x74>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <HAL_I2C_MspInit+0x74>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_I2C_MspInit+0x74>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002490:	2312      	movs	r3, #18
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4619      	mov	r1, r3
 800249e:	480b      	ldr	r0, [pc, #44]	; (80024cc <HAL_I2C_MspInit+0x78>)
 80024a0:	f002 ff18 	bl	80052d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_I2C_MspInit+0x74>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_I2C_MspInit+0x74>)
 80024aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ae:	61d3      	str	r3, [r2, #28]
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_I2C_MspInit+0x74>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40005400 	.word	0x40005400
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010c00 	.word	0x40010c00

080024d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_RTC_MspInit+0x3c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d110      	bne.n	8002504 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80024e2:	f003 fd0d 	bl	8005f00 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RTC_MspInit+0x40>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_RTC_MspInit+0x40>)
 80024ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024f0:	61d3      	str	r3, [r2, #28]
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_RTC_MspInit+0x40>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RTC_MspInit+0x44>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40002800 	.word	0x40002800
 8002510:	40021000 	.word	0x40021000
 8002514:	4242043c 	.word	0x4242043c

08002518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d12f      	bne.n	8002598 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 800253e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002568:	23b0      	movs	r3, #176	; 0xb0
 800256a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4619      	mov	r1, r3
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <HAL_SPI_MspInit+0x90>)
 800257c:	f002 feaa 	bl	80052d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002580:	2340      	movs	r3, #64	; 0x40
 8002582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	4619      	mov	r1, r3
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_SPI_MspInit+0x90>)
 8002594:	f002 fe9e 	bl	80052d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013000 	.word	0x40013000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010800 	.word	0x40010800

080025ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d113      	bne.n	80025e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	201d      	movs	r0, #29
 80025dc:	f002 fbdf 	bl	8004d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025e0:	201d      	movs	r0, #29
 80025e2:	f002 fbf8 	bl	8004dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0318 	add.w	r3, r7, #24
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a50      	ldr	r2, [pc, #320]	; (8002754 <HAL_UART_MspInit+0x15c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d161      	bne.n	80026dc <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_UART_MspInit+0x160>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_UART_MspInit+0x160>)
 800261e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_UART_MspInit+0x160>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_UART_MspInit+0x160>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a48      	ldr	r2, [pc, #288]	; (8002758 <HAL_UART_MspInit+0x160>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_UART_MspInit+0x160>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 0318 	add.w	r3, r7, #24
 800265a:	4619      	mov	r1, r3
 800265c:	483f      	ldr	r0, [pc, #252]	; (800275c <HAL_UART_MspInit+0x164>)
 800265e:	f002 fe39 	bl	80052d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 0318 	add.w	r3, r7, #24
 8002674:	4619      	mov	r1, r3
 8002676:	4839      	ldr	r0, [pc, #228]	; (800275c <HAL_UART_MspInit+0x164>)
 8002678:	f002 fe2c 	bl	80052d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800267c:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_UART_MspInit+0x168>)
 800267e:	4a39      	ldr	r2, [pc, #228]	; (8002764 <HAL_UART_MspInit+0x16c>)
 8002680:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_UART_MspInit+0x168>)
 8002684:	2200      	movs	r2, #0
 8002686:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_UART_MspInit+0x168>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_UART_MspInit+0x168>)
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_UART_MspInit+0x168>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_UART_MspInit+0x168>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_UART_MspInit+0x168>)
 80026a2:	2220      	movs	r2, #32
 80026a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_UART_MspInit+0x168>)
 80026a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026ae:	482c      	ldr	r0, [pc, #176]	; (8002760 <HAL_UART_MspInit+0x168>)
 80026b0:	f002 fbac 	bl	8004e0c <HAL_DMA_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80026ba:	f7ff fe93 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_UART_MspInit+0x168>)
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <HAL_UART_MspInit+0x168>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2025      	movs	r0, #37	; 0x25
 80026d0:	f002 fb65 	bl	8004d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026d4:	2025      	movs	r0, #37	; 0x25
 80026d6:	f002 fb7e 	bl	8004dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026da:	e036      	b.n	800274a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <HAL_UART_MspInit+0x170>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d131      	bne.n	800274a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <HAL_UART_MspInit+0x160>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_UART_MspInit+0x160>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f0:	61d3      	str	r3, [r2, #28]
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_UART_MspInit+0x160>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_UART_MspInit+0x160>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_UART_MspInit+0x160>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6193      	str	r3, [r2, #24]
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_UART_MspInit+0x160>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800271a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4619      	mov	r1, r3
 800272a:	4810      	ldr	r0, [pc, #64]	; (800276c <HAL_UART_MspInit+0x174>)
 800272c:	f002 fdd2 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4619      	mov	r1, r3
 8002744:	4809      	ldr	r0, [pc, #36]	; (800276c <HAL_UART_MspInit+0x174>)
 8002746:	f002 fdc5 	bl	80052d4 <HAL_GPIO_Init>
}
 800274a:	bf00      	nop
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40013800 	.word	0x40013800
 8002758:	40021000 	.word	0x40021000
 800275c:	40010800 	.word	0x40010800
 8002760:	2000018c 	.word	0x2000018c
 8002764:	40020058 	.word	0x40020058
 8002768:	40004800 	.word	0x40004800
 800276c:	40010c00 	.word	0x40010c00

08002770 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <SDTimer_Handler+0x3c>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <SDTimer_Handler+0x1c>
    Timer1--;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <SDTimer_Handler+0x3c>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <SDTimer_Handler+0x3c>)
 800278a:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <SDTimer_Handler+0x40>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <SDTimer_Handler+0x34>
    Timer2--;
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <SDTimer_Handler+0x40>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <SDTimer_Handler+0x40>)
 80027a2:	801a      	strh	r2, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	200004fa 	.word	0x200004fa
 80027b0:	200004fc 	.word	0x200004fc

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <NMI_Handler+0x4>

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <MemManage_Handler+0x4>

080027c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <SysTick_Handler+0x30>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <SysTick_Handler+0x30>)
 8002808:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <SysTick_Handler+0x30>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b09      	cmp	r3, #9
 8002812:	d904      	bls.n	800281e <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <SysTick_Handler+0x30>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 800281a:	f7ff ffa9 	bl	8002770 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281e:	f002 f9a7 	bl	8004b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200004f8 	.word	0x200004f8

0800282c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002830:	2002      	movs	r0, #2
 8002832:	f002 ff03 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}

0800283a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800283e:	2004      	movs	r0, #4
 8002840:	f002 fefc 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}

08002848 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <DMA1_Channel5_IRQHandler+0x10>)
 800284e:	f002 fc0d 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000018c 	.word	0x2000018c

0800285c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <TIM3_IRQHandler+0x10>)
 8002862:	f005 fb45 	bl	8007ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000104 	.word	0x20000104

08002870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002876:	4811      	ldr	r0, [pc, #68]	; (80028bc <USART1_IRQHandler+0x4c>)
 8002878:	f005 ff60 	bl	800873c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) != RESET))
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <USART1_IRQHandler+0x4c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d114      	bne.n	80028b4 <USART1_IRQHandler+0x44>
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <USART1_IRQHandler+0x4c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00d      	beq.n	80028b4 <USART1_IRQHandler+0x44>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <USART1_IRQHandler+0x4c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <USART1_IRQHandler+0x4c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
	  HAL_UART_RxIdleCallback(&huart1);
 80028ae:	4803      	ldr	r0, [pc, #12]	; (80028bc <USART1_IRQHandler+0x4c>)
 80028b0:	f7ff fab4 	bl	8001e1c <HAL_UART_RxIdleCallback>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2000014c 	.word	0x2000014c

080028c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <u8x8_byte_stm32hal_hw_i2c>:
extern u8g2_t u8g2;
extern RTC_HandleTypeDef hrtc;
extern uint8_t screen_number;

uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	72fb      	strb	r3, [r7, #11]
 80028da:	4613      	mov	r3, r2
 80028dc:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;


  switch(msg)
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	3b14      	subs	r3, #20
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d852      	bhi.n	800298c <u8x8_byte_stm32hal_hw_i2c+0xc0>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <u8x8_byte_stm32hal_hw_i2c+0x20>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	08002991 	.word	0x08002991
 80028f0:	0800298d 	.word	0x0800298d
 80028f4:	0800298d 	.word	0x0800298d
 80028f8:	08002921 	.word	0x08002921
 80028fc:	08002951 	.word	0x08002951
 8002900:	08002959 	.word	0x08002959
 8002904:	0800298d 	.word	0x0800298d
 8002908:	0800298d 	.word	0x0800298d
 800290c:	0800298d 	.word	0x0800298d
 8002910:	0800298d 	.word	0x0800298d
 8002914:	0800298d 	.word	0x0800298d
 8002918:	0800298d 	.word	0x0800298d
 800291c:	08002991 	.word	0x08002991
  {
    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	61fb      	str	r3, [r7, #28]
        while( arg_int > 0 )
 8002924:	e010      	b.n	8002948 <u8x8_byte_stm32hal_hw_i2c+0x7c>
        {
			buffer[buf_idx++] = *data;
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	b2d1      	uxtb	r1, r2
 800292e:	4a1b      	ldr	r2, [pc, #108]	; (800299c <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002930:	7011      	strb	r1, [r2, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	7819      	ldrb	r1, [r3, #0]
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 800293a:	5499      	strb	r1, [r3, r2]
			data++;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
			arg_int--;
 8002942:	7abb      	ldrb	r3, [r7, #10]
 8002944:	3b01      	subs	r3, #1
 8002946:	72bb      	strb	r3, [r7, #10]
        while( arg_int > 0 )
 8002948:	7abb      	ldrb	r3, [r7, #10]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1eb      	bne.n	8002926 <u8x8_byte_stm32hal_hw_i2c+0x5a>
        }
    }
    	break;
 800294e:	e020      	b.n	8002992 <u8x8_byte_stm32hal_hw_i2c+0xc6>
    	break;
    case U8X8_MSG_BYTE_SET_DC:
    	break;
    case U8X8_MSG_BYTE_START_TRANSFER:
		{
			buf_idx = 0;
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002956:	e01c      	b.n	8002992 <u8x8_byte_stm32hal_hw_i2c+0xc6>
    case U8X8_MSG_BYTE_END_TRANSFER:
	{
		uint8_t iaddress = I2C_ADDRESS;
 8002958:	233c      	movs	r3, #60	; 0x3c
 800295a:	76fb      	strb	r3, [r7, #27]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iaddress<<1, &buffer[0], buf_idx, 20u);
 800295c:	7efb      	ldrb	r3, [r7, #27]
 800295e:	b29b      	uxth	r3, r3
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	b299      	uxth	r1, r3
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	2214      	movs	r2, #20
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <u8x8_byte_stm32hal_hw_i2c+0xd8>)
 8002972:	f002 ffbf 	bl	80058f4 <HAL_I2C_Master_Transmit>
		volatile uint32_t i;
		for (i = 1; i <= 500; i++);
 8002976:	2301      	movs	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e002      	b.n	8002982 <u8x8_byte_stm32hal_hw_i2c+0xb6>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002988:	d9f8      	bls.n	800297c <u8x8_byte_stm32hal_hw_i2c+0xb0>
	}
    	break;
 800298a:	e002      	b.n	8002992 <u8x8_byte_stm32hal_hw_i2c+0xc6>
    default:
      return 0;
 800298c:	2300      	movs	r3, #0
 800298e:	e001      	b.n	8002994 <u8x8_byte_stm32hal_hw_i2c+0xc8>
    	break;
 8002990:	bf00      	nop
  }
  return 1;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200004fe 	.word	0x200004fe
 80029a0:	20000500 	.word	0x20000500
 80029a4:	20000044 	.word	0x20000044

080029a8 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	72fb      	strb	r3, [r7, #11]
 80029b6:	4613      	mov	r3, r2
 80029b8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	3b28      	subs	r3, #40	; 0x28
 80029be:	2b24      	cmp	r3, #36	; 0x24
 80029c0:	d861      	bhi.n	8002a86 <psoc_gpio_and_delay_cb+0xde>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <psoc_gpio_and_delay_cb+0x20>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002a91 	.word	0x08002a91
 80029cc:	08002a7d 	.word	0x08002a7d
 80029d0:	08002a91 	.word	0x08002a91
 80029d4:	08002a91 	.word	0x08002a91
 80029d8:	08002a5d 	.word	0x08002a5d
 80029dc:	08002a91 	.word	0x08002a91
 80029e0:	08002a87 	.word	0x08002a87
 80029e4:	08002a87 	.word	0x08002a87
 80029e8:	08002a87 	.word	0x08002a87
 80029ec:	08002a87 	.word	0x08002a87
 80029f0:	08002a87 	.word	0x08002a87
 80029f4:	08002a87 	.word	0x08002a87
 80029f8:	08002a87 	.word	0x08002a87
 80029fc:	08002a87 	.word	0x08002a87
 8002a00:	08002a87 	.word	0x08002a87
 8002a04:	08002a87 	.word	0x08002a87
 8002a08:	08002a87 	.word	0x08002a87
 8002a0c:	08002a87 	.word	0x08002a87
 8002a10:	08002a87 	.word	0x08002a87
 8002a14:	08002a87 	.word	0x08002a87
 8002a18:	08002a87 	.word	0x08002a87
 8002a1c:	08002a87 	.word	0x08002a87
 8002a20:	08002a87 	.word	0x08002a87
 8002a24:	08002a87 	.word	0x08002a87
 8002a28:	08002a87 	.word	0x08002a87
 8002a2c:	08002a87 	.word	0x08002a87
 8002a30:	08002a87 	.word	0x08002a87
 8002a34:	08002a87 	.word	0x08002a87
 8002a38:	08002a87 	.word	0x08002a87
 8002a3c:	08002a87 	.word	0x08002a87
 8002a40:	08002a87 	.word	0x08002a87
 8002a44:	08002a87 	.word	0x08002a87
 8002a48:	08002a87 	.word	0x08002a87
 8002a4c:	08002a87 	.word	0x08002a87
 8002a50:	08002a87 	.word	0x08002a87
 8002a54:	08002a87 	.word	0x08002a87
 8002a58:	08002a91 	.word	0x08002a91
      break;
    case U8X8_MSG_DELAY_NANO:
      /* not required for SW I2C */
    {
		volatile uint32_t i;
		for (i = 1; i <= arg_int*10; i++);
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e002      	b.n	8002a68 <psoc_gpio_and_delay_cb+0xc0>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	7aba      	ldrb	r2, [r7, #10]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	461a      	mov	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d2f3      	bcs.n	8002a62 <psoc_gpio_and_delay_cb+0xba>
    }
      break;
 8002a7a:	e00a      	b.n	8002a92 <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;

    case U8X8_MSG_DELAY_MILLI:
      HAL_Delay(arg_int);
 8002a7c:	7abb      	ldrb	r3, [r7, #10]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 f892 	bl	8004ba8 <HAL_Delay>
      break;
 8002a84:	e005      	b.n	8002a92 <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_GPIO_MENU_HOME:
      u8x8_SetGPIOResult(u8x8, Chip_GPIO_GetPinState(LPC_GPIO, KEY_HOME_PORT, KEY_HOME_PIN));
      break;
*/
    default:
      u8x8_SetGPIOResult(u8x8, 1);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      break;
 8002a8e:	e000      	b.n	8002a92 <psoc_gpio_and_delay_cb+0xea>
      break;
 8002a90:	bf00      	nop
  }
  return 1;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <draw_button_line>:


uint8_t draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af04      	add	r7, sp, #16
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	70fb      	strb	r3, [r7, #3]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70bb      	strb	r3, [r7, #2]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;

  u8g2_uint_t d;
  u8g2_uint_t x;

  cnt = u8x8_GetStringLineCnt(s);
 8002ab6:	69b8      	ldr	r0, [r7, #24]
 8002ab8:	f001 ffa1 	bl	80049fe <u8x8_GetStringLineCnt>
 8002abc:	4603      	mov	r3, r0
 8002abe:	72bb      	strb	r3, [r7, #10]


  /* calculate the width of the button line */
  button_line_width = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73bb      	strb	r3, [r7, #14]
 8002ac8:	e011      	b.n	8002aee <draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8002aca:	7bbb      	ldrb	r3, [r7, #14]
 8002acc:	69b9      	ldr	r1, [r7, #24]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 ffb7 	bl	8004a42 <u8x8_GetStringLineStart>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f001 f81b 	bl	8003b14 <u8g2_GetUTF8Width>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8002ae8:	7bbb      	ldrb	r3, [r7, #14]
 8002aea:	3301      	adds	r3, #1
 8002aec:	73bb      	strb	r3, [r7, #14]
 8002aee:	7bba      	ldrb	r2, [r7, #14]
 8002af0:	7abb      	ldrb	r3, [r7, #10]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3e9      	bcc.n	8002aca <draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8002af6:	7abb      	ldrb	r3, [r7, #10]
 8002af8:	461a      	mov	r2, r3
 8002afa:	0052      	lsls	r2, r2, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	4413      	add	r3, r2
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	3b06      	subs	r3, #6
 8002b0a:	73fb      	strb	r3, [r7, #15]

  /* calculate the left offset */
  d = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	78bb      	ldrb	r3, [r7, #2]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d208      	bcs.n	8002b2a <draw_button_line+0x8e>
  {
    d = w;
 8002b18:	78bb      	ldrb	r3, [r7, #2]
 8002b1a:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 8002b1c:	7b3a      	ldrb	r2, [r7, #12]
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	733b      	strb	r3, [r7, #12]
    d /= 2;
 8002b24:	7b3b      	ldrb	r3, [r7, #12]
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	733b      	strb	r3, [r7, #12]
  }

  /* draw the buttons */
  x = d;
 8002b2a:	7b3b      	ldrb	r3, [r7, #12]
 8002b2c:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73bb      	strb	r3, [r7, #14]
 8002b32:	e02c      	b.n	8002b8e <draw_button_line+0xf2>
  {
    is_invert = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 8002b38:	7bba      	ldrb	r2, [r7, #14]
 8002b3a:	787b      	ldrb	r3, [r7, #1]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d101      	bne.n	8002b44 <draw_button_line+0xa8>
      is_invert = 1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 ff7a 	bl	8004a42 <u8x8_GetStringLineStart>
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	7af9      	ldrb	r1, [r7, #11]
 8002b52:	7b7b      	ldrb	r3, [r7, #13]
 8002b54:	9302      	str	r3, [sp, #8]
 8002b56:	2301      	movs	r3, #1
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	9000      	str	r0, [sp, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f001 f999 	bl	8003e96 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8002b64:	7bbb      	ldrb	r3, [r7, #14]
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 ff6a 	bl	8004a42 <u8x8_GetStringLineStart>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 ffce 	bl	8003b14 <u8g2_GetUTF8Width>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	4413      	add	r3, r2
 8002b80:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	3306      	adds	r3, #6
 8002b86:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	73bb      	strb	r3, [r7, #14]
 8002b8e:	7bba      	ldrb	r2, [r7, #14]
 8002b90:	7abb      	ldrb	r3, [r7, #10]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3ce      	bcc.n	8002b34 <draw_button_line+0x98>
  }

  /* return the number of buttons */
  return cnt;
 8002b96:	7abb      	ldrb	r3, [r7, #10]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <initScreen>:
/**
  * @brief  Init and setup Sreen
  * @retval -
  */
void initScreen(u8g2_t* u8g2)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	  u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2,
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <initScreen+0x40>)
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <initScreen+0x44>)
 8002bac:	490e      	ldr	r1, [pc, #56]	; (8002be8 <initScreen+0x48>)
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa8e 	bl	80030d0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			  U8G2_R0,
			  u8x8_byte_stm32hal_hw_i2c,
			  psoc_gpio_and_delay_cb);	// Configure u8g2 type
	  u8g2_SetI2CAddress(u8g2, I2C_ADDRESS*2);	// Configure i2c address
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2278      	movs	r2, #120	; 0x78
 8002bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  u8g2_InitDisplay(u8g2);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f001 fe7e 	bl	80048be <u8x8_InitDisplay>
	  u8g2_ClearDisplay(u8g2);	// Clean screen for fist use
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa5e 	bl	8003084 <u8g2_ClearDisplay>
	  u8g2_SetPowerSave(u8g2, 0U);	// Disables Energy save
 8002bc8:	2100      	movs	r1, #0
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 fe86 	bl	80048dc <u8x8_SetPowerSave>

	  screen_number = 1;	// set home screen
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <initScreen+0x4c>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	080029a9 	.word	0x080029a9
 8002be4:	080028cd 	.word	0x080028cd
 8002be8:	0800991c 	.word	0x0800991c
 8002bec:	2000045a 	.word	0x2000045a

08002bf0 <updateScreen>:
/**
  * @brief  Updates the screen according the actual screen
  * @retval -
  */
void updateScreen()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af02      	add	r7, sp, #8
	switch(screen_number)
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <updateScreen+0x58>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d810      	bhi.n	8002c20 <updateScreen+0x30>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <updateScreen+0x14>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c15 	.word	0x08002c15
 8002c08:	08002c1b 	.word	0x08002c1b
 8002c0c:	08002c21 	.word	0x08002c21
 8002c10:	08002c21 	.word	0x08002c21
	{
	  case SCREEN_TIME:
		  draw_screen_time();
 8002c14:	f000 f81e 	bl	8002c54 <draw_screen_time>
		  break;
 8002c18:	e002      	b.n	8002c20 <updateScreen+0x30>
	  case SCREEN_UBIC:
		  draw_screen_ubic();
 8002c1a:	f000 f885 	bl	8002d28 <draw_screen_ubic>
		  break;
 8002c1e:	bf00      	nop
		  break;
	  case SCREEN_ODOMETER:
		  //draw_screen_odometer();
		  break;
	}
	draw_button_line(&u8g2, u8g2_GetDisplayHeight(&u8g2)-BUTTON_OFFSET, u8g2_GetDisplayWidth(&u8g2), 3, BUTTONS);
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <updateScreen+0x5c>)
 8002c22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c26:	3b02      	subs	r3, #2
 8002c28:	b2d9      	uxtb	r1, r3
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <updateScreen+0x5c>)
 8002c2c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <updateScreen+0x60>)
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2303      	movs	r3, #3
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <updateScreen+0x5c>)
 8002c38:	f7ff ff30 	bl	8002a9c <draw_button_line>

	u8g2_SendBuffer(&u8g2);
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <updateScreen+0x5c>)
 8002c3e:	f000 f9b9 	bl	8002fb4 <u8g2_SendBuffer>
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	2000045a 	.word	0x2000045a
 8002c4c:	20000464 	.word	0x20000464
 8002c50:	08009090 	.word	0x08009090

08002c54 <draw_screen_time>:
void draw_screen_time()
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef Time;
	RTC_DateTypeDef Date;
	uint8_t time_string[9] = "  :  :  ";
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <draw_screen_time+0xc0>)
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c62:	c303      	stmia	r3!, {r0, r1}
 8002c64:	701a      	strb	r2, [r3, #0]
	uint8_t date_string[9] = "  /  /  ";
 8002c66:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <draw_screen_time+0xc4>)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c6c:	c303      	stmia	r3!, {r0, r1}
 8002c6e:	701a      	strb	r2, [r3, #0]
	uint8_t y=11;
 8002c70:	230b      	movs	r3, #11
 8002c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t x=0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8g2_ClearBuffer(&u8g2);
 8002c7c:	4827      	ldr	r0, [pc, #156]	; (8002d1c <draw_screen_time+0xc8>)
 8002c7e:	f000 f926 	bl	8002ece <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8002c82:	2101      	movs	r1, #1
 8002c84:	4825      	ldr	r0, [pc, #148]	; (8002d1c <draw_screen_time+0xc8>)
 8002c86:	f000 fda4 	bl	80037d2 <u8g2_SetFontMode>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8002c8a:	4925      	ldr	r1, [pc, #148]	; (8002d20 <draw_screen_time+0xcc>)
 8002c8c:	4823      	ldr	r0, [pc, #140]	; (8002d1c <draw_screen_time+0xc8>)
 8002c8e:	f000 fec3 	bl	8003a18 <u8g2_SetFont>

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002c92:	f107 0320 	add.w	r3, r7, #32
 8002c96:	2200      	movs	r2, #0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4822      	ldr	r0, [pc, #136]	; (8002d24 <draw_screen_time+0xd0>)
 8002c9c:	f003 fffa 	bl	8006c94 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	481e      	ldr	r0, [pc, #120]	; (8002d24 <draw_screen_time+0xd0>)
 8002caa:	f004 f981 	bl	8006fb0 <HAL_RTC_GetDate>

	get_time_string(&Time, time_string);
 8002cae:	f107 0210 	add.w	r2, r7, #16
 8002cb2:	f107 0320 	add.w	r3, r7, #32
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe fb4f 	bl	800135c <get_time_string>

	u8g2_DrawStr(&u8g2, x, y, time_string);
 8002cbe:	f107 0310 	add.w	r3, r7, #16
 8002cc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002cc6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002cca:	4814      	ldr	r0, [pc, #80]	; (8002d1c <draw_screen_time+0xc8>)
 8002ccc:	f000 fdec 	bl	80038a8 <u8g2_DrawStr>

	get_date_string(&Date, date_string);
 8002cd0:	1d3a      	adds	r2, r7, #4
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fb83 	bl	80013e4 <get_date_string>
	x+=u8g2_GetStrWidth(&u8g2,time_string) + 5 ;
 8002cde:	f107 0310 	add.w	r3, r7, #16
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480d      	ldr	r0, [pc, #52]	; (8002d1c <draw_screen_time+0xc8>)
 8002ce6:	f000 ff01 	bl	8003aec <u8g2_GetStrWidth>
 8002cea:	4603      	mov	r3, r0
 8002cec:	3305      	adds	r3, #5
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8g2_DrawStr(&u8g2, x, y, date_string);
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d00:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <draw_screen_time+0xc8>)
 8002d06:	f000 fdcf 	bl	80038a8 <u8g2_DrawStr>
}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	; 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	080090a0 	.word	0x080090a0
 8002d18:	080090ac 	.word	0x080090ac
 8002d1c:	20000464 	.word	0x20000464
 8002d20:	08009100 	.word	0x08009100
 8002d24:	20000098 	.word	0x20000098

08002d28 <draw_screen_ubic>:

void draw_screen_ubic()
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
	extern GPSdata gps;
	uint8_t f_to_char[10];
	uint8_t y=11;
 8002d2e:	230b      	movs	r3, #11
 8002d30:	73fb      	strb	r3, [r7, #15]
	uint8_t x=0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73bb      	strb	r3, [r7, #14]

	memset(f_to_char, '\0',10);
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	220a      	movs	r2, #10
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f006 f95d 	bl	8008ffc <memset>

	u8g2_ClearBuffer(&u8g2);
 8002d42:	482b      	ldr	r0, [pc, #172]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002d44:	f000 f8c3 	bl	8002ece <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4829      	ldr	r0, [pc, #164]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002d4c:	f000 fd41 	bl	80037d2 <u8g2_SetFontMode>
	u8g2_SetFontDirection(&u8g2, 0);
 8002d50:	2100      	movs	r1, #0
 8002d52:	4827      	ldr	r0, [pc, #156]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002d54:	f000 fef2 	bl	8003b3c <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8002d58:	4926      	ldr	r1, [pc, #152]	; (8002df4 <draw_screen_ubic+0xcc>)
 8002d5a:	4825      	ldr	r0, [pc, #148]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002d5c:	f000 fe5c 	bl	8003a18 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, x, y, "Lat: ");
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	7bb9      	ldrb	r1, [r7, #14]
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <draw_screen_ubic+0xd0>)
 8002d66:	4822      	ldr	r0, [pc, #136]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002d68:	f000 fd9e 	bl	80038a8 <u8g2_DrawStr>
    x+=u8g2_GetStrWidth(&u8g2,"Lat: ");
 8002d6c:	4922      	ldr	r1, [pc, #136]	; (8002df8 <draw_screen_ubic+0xd0>)
 8002d6e:	4820      	ldr	r0, [pc, #128]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002d70:	f000 febc 	bl	8003aec <u8g2_GetStrWidth>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	73bb      	strb	r3, [r7, #14]
    float_to_ascii(gps.latitude , f_to_char, 6) ;
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <draw_screen_ubic+0xd4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1d39      	adds	r1, r7, #4
 8002d84:	2206      	movs	r2, #6
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fa65 	bl	8001256 <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	7bb9      	ldrb	r1, [r7, #14]
 8002d92:	4817      	ldr	r0, [pc, #92]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002d94:	f000 fd88 	bl	80038a8 <u8g2_DrawStr>

    memset(f_to_char, '\0',10);
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	220a      	movs	r2, #10
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f006 f92c 	bl	8008ffc <memset>
    x=0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73bb      	strb	r3, [r7, #14]
    y=2*y;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
    u8g2_DrawStr(&u8g2, x, y, "Lon: ");
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	7bb9      	ldrb	r1, [r7, #14]
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <draw_screen_ubic+0xd8>)
 8002db4:	480e      	ldr	r0, [pc, #56]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002db6:	f000 fd77 	bl	80038a8 <u8g2_DrawStr>
	x+=u8g2_GetStrWidth(&u8g2,"Lon: ");
 8002dba:	4911      	ldr	r1, [pc, #68]	; (8002e00 <draw_screen_ubic+0xd8>)
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002dbe:	f000 fe95 	bl	8003aec <u8g2_GetStrWidth>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	7bbb      	ldrb	r3, [r7, #14]
 8002dc8:	4413      	add	r3, r2
 8002dca:	73bb      	strb	r3, [r7, #14]
	float_to_ascii(gps.longitude , f_to_char, 6) ;
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <draw_screen_ubic+0xd4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	1d39      	adds	r1, r7, #4
 8002dd2:	2206      	movs	r2, #6
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fa3e 	bl	8001256 <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	7bb9      	ldrb	r1, [r7, #14]
 8002de0:	4803      	ldr	r0, [pc, #12]	; (8002df0 <draw_screen_ubic+0xc8>)
 8002de2:	f000 fd61 	bl	80038a8 <u8g2_DrawStr>
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000464 	.word	0x20000464
 8002df4:	08009100 	.word	0x08009100
 8002df8:	080090b8 	.word	0x080090b8
 8002dfc:	200004e8 	.word	0x200004e8
 8002e00:	080090c0 	.word	0x080090c0

08002e04 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	70fb      	strb	r3, [r7, #3]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70bb      	strb	r3, [r7, #2]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8002e1e:	e00d      	b.n	8002e3c <u8g2_DrawBox+0x38>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	78ba      	ldrb	r2, [r7, #2]
 8002e24:	78f9      	ldrb	r1, [r7, #3]
 8002e26:	2000      	movs	r0, #0
 8002e28:	9000      	str	r0, [sp, #0]
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 feff 	bl	8003c2e <u8g2_DrawHVLine>
    y++;    
 8002e30:	78bb      	ldrb	r3, [r7, #2]
 8002e32:	3301      	adds	r3, #1
 8002e34:	70bb      	strb	r3, [r7, #2]
    h--;
 8002e36:	7c3b      	ldrb	r3, [r7, #16]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8002e3c:	7c3b      	ldrb	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ee      	bne.n	8002e20 <u8g2_DrawBox+0x1c>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	70fb      	strb	r3, [r7, #3]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	70bb      	strb	r3, [r7, #2]
 8002e62:	4613      	mov	r3, r2
 8002e64:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002e6a:	787b      	ldrb	r3, [r7, #1]
 8002e6c:	78ba      	ldrb	r2, [r7, #2]
 8002e6e:	78f9      	ldrb	r1, [r7, #3]
 8002e70:	2000      	movs	r0, #0
 8002e72:	9000      	str	r0, [sp, #0]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 feda 	bl	8003c2e <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8002e7a:	7e3b      	ldrb	r3, [r7, #24]
 8002e7c:	78ba      	ldrb	r2, [r7, #2]
 8002e7e:	78f9      	ldrb	r1, [r7, #3]
 8002e80:	2001      	movs	r0, #1
 8002e82:	9000      	str	r0, [sp, #0]
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fed2 	bl	8003c2e <u8g2_DrawHVLine>
  x+=w;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	4413      	add	r3, r2
 8002e90:	70fb      	strb	r3, [r7, #3]
  x--;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8002e98:	7e3b      	ldrb	r3, [r7, #24]
 8002e9a:	78ba      	ldrb	r2, [r7, #2]
 8002e9c:	78f9      	ldrb	r1, [r7, #3]
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	9000      	str	r0, [sp, #0]
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fec3 	bl	8003c2e <u8g2_DrawHVLine>
  y+=h;
 8002ea8:	78ba      	ldrb	r2, [r7, #2]
 8002eaa:	7e3b      	ldrb	r3, [r7, #24]
 8002eac:	4413      	add	r3, r2
 8002eae:	70bb      	strb	r3, [r7, #2]
  y--;
 8002eb0:	78bb      	ldrb	r3, [r7, #2]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8002eb6:	787b      	ldrb	r3, [r7, #1]
 8002eb8:	78ba      	ldrb	r2, [r7, #2]
 8002eba:	7bf9      	ldrb	r1, [r7, #15]
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	9000      	str	r0, [sp, #0]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 feb4 	bl	8003c2e <u8g2_DrawHVLine>
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <u8g2_ClearBuffer>:
#include <string.h>
#include "u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	7c1b      	ldrb	r3, [r3, #16]
 8002edc:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f006 f87d 	bl	8008ffc <memset>
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	70fb      	strb	r3, [r7, #3]
 8002f16:	4613      	mov	r3, r2
 8002f18:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	7c1b      	ldrb	r3, [r3, #16]
 8002f20:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	89ba      	ldrh	r2, [r7, #12]
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8002f38:	89bb      	ldrh	r3, [r7, #12]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002f3e:	89bb      	ldrh	r3, [r7, #12]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	4413      	add	r3, r2
 8002f44:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002f46:	7bf9      	ldrb	r1, [r7, #15]
 8002f48:	78ba      	ldrb	r2, [r7, #2]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	2100      	movs	r1, #0
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f001 fc82 	bl	800485c <u8x8_DrawTile>
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f72:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	7c5b      	ldrb	r3, [r3, #17]
 8002f82:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8002f84:	7bba      	ldrb	r2, [r7, #14]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ffbd 	bl	8002f0a <u8g2_send_tile_row>
    src_row++;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	3301      	adds	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	7b7b      	ldrb	r3, [r7, #13]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d203      	bcs.n	8002fac <u8g2_send_buffer+0x4c>
 8002fa4:	7bba      	ldrb	r2, [r7, #14]
 8002fa6:	7b3b      	ldrb	r3, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3eb      	bcc.n	8002f84 <u8g2_send_buffer+0x24>
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ffcf 	bl	8002f60 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f001 fc9b 	bl	80048fe <u8x8_RefreshDisplay>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff5b 	bl	8002ece <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003018:	2100      	movs	r1, #0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffd8 	bl	8002fd0 <u8g2_SetBufferCurrTileRow>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff95 	bl	8002f60 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	4413      	add	r3, r2
 8003048:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	7c5b      	ldrb	r3, [r3, #17]
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	429a      	cmp	r2, r3
 8003054:	d304      	bcc.n	8003060 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f001 fc51 	bl	80048fe <u8x8_RefreshDisplay>
    return 0;
 800305c:	2300      	movs	r3, #0
 800305e:	e00d      	b.n	800307c <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff2f 	bl	8002ece <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffab 	bl	8002fd0 <u8g2_SetBufferCurrTileRow>
  return 1;
 800307a:	2301      	movs	r3, #1
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ffb7 	bl	8003000 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffc8 	bl	8003028 <u8g2_NextPage>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800309e:	2100      	movs	r1, #0
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff95 	bl	8002fd0 <u8g2_SetBufferCurrTileRow>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2208      	movs	r2, #8
 80030bc:	701a      	strb	r2, [r3, #0]
  return buf;
 80030be:	4b03      	ldr	r3, [pc, #12]	; (80030cc <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000520 	.word	0x20000520

080030d0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 80030e6:	490c      	ldr	r1, [pc, #48]	; (8003118 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f001 fc6b 	bl	80049c4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80030ee:	f107 0313 	add.w	r3, r7, #19
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ffdc 	bl	80030b0 <u8g2_m_16_8_f>
 80030f8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80030fa:	7cfa      	ldrb	r2, [r7, #19]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8003102:	6979      	ldr	r1, [r7, #20]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 ff58 	bl	8003fba <u8g2_SetupBuffer>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	080044fd 	.word	0x080044fd
 8003118:	08004759 	.word	0x08004759
 800311c:	08003d57 	.word	0x08003d57

08003120 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	781b      	ldrb	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	81fb      	strh	r3, [r7, #14]
    font++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3301      	adds	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	b29a      	uxth	r2, r3
 800316e:	89fb      	ldrh	r3, [r7, #14]
 8003170:	4413      	add	r3, r2
 8003172:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003174:	89fb      	ldrh	r3, [r7, #14]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800318a:	2100      	movs	r1, #0
 800318c:	6838      	ldr	r0, [r7, #0]
 800318e:	f7ff ffc7 	bl	8003120 <u8g2_font_get_byte>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800319a:	2101      	movs	r1, #1
 800319c:	6838      	ldr	r0, [r7, #0]
 800319e:	f7ff ffbf 	bl	8003120 <u8g2_font_get_byte>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80031aa:	2102      	movs	r1, #2
 80031ac:	6838      	ldr	r0, [r7, #0]
 80031ae:	f7ff ffb7 	bl	8003120 <u8g2_font_get_byte>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80031ba:	2103      	movs	r1, #3
 80031bc:	6838      	ldr	r0, [r7, #0]
 80031be:	f7ff ffaf 	bl	8003120 <u8g2_font_get_byte>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80031ca:	2104      	movs	r1, #4
 80031cc:	6838      	ldr	r0, [r7, #0]
 80031ce:	f7ff ffa7 	bl	8003120 <u8g2_font_get_byte>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80031da:	2105      	movs	r1, #5
 80031dc:	6838      	ldr	r0, [r7, #0]
 80031de:	f7ff ff9f 	bl	8003120 <u8g2_font_get_byte>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80031ea:	2106      	movs	r1, #6
 80031ec:	6838      	ldr	r0, [r7, #0]
 80031ee:	f7ff ff97 	bl	8003120 <u8g2_font_get_byte>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80031fa:	2107      	movs	r1, #7
 80031fc:	6838      	ldr	r0, [r7, #0]
 80031fe:	f7ff ff8f 	bl	8003120 <u8g2_font_get_byte>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800320a:	2108      	movs	r1, #8
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	f7ff ff87 	bl	8003120 <u8g2_font_get_byte>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800321a:	2109      	movs	r1, #9
 800321c:	6838      	ldr	r0, [r7, #0]
 800321e:	f7ff ff7f 	bl	8003120 <u8g2_font_get_byte>
 8003222:	4603      	mov	r3, r0
 8003224:	b25a      	sxtb	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800322a:	210a      	movs	r1, #10
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f7ff ff77 	bl	8003120 <u8g2_font_get_byte>
 8003232:	4603      	mov	r3, r0
 8003234:	b25a      	sxtb	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800323a:	210b      	movs	r1, #11
 800323c:	6838      	ldr	r0, [r7, #0]
 800323e:	f7ff ff6f 	bl	8003120 <u8g2_font_get_byte>
 8003242:	4603      	mov	r3, r0
 8003244:	b25a      	sxtb	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800324a:	210c      	movs	r1, #12
 800324c:	6838      	ldr	r0, [r7, #0]
 800324e:	f7ff ff67 	bl	8003120 <u8g2_font_get_byte>
 8003252:	4603      	mov	r3, r0
 8003254:	b25a      	sxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800325a:	210d      	movs	r1, #13
 800325c:	6838      	ldr	r0, [r7, #0]
 800325e:	f7ff ff5f 	bl	8003120 <u8g2_font_get_byte>
 8003262:	4603      	mov	r3, r0
 8003264:	b25a      	sxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800326a:	210e      	movs	r1, #14
 800326c:	6838      	ldr	r0, [r7, #0]
 800326e:	f7ff ff57 	bl	8003120 <u8g2_font_get_byte>
 8003272:	4603      	mov	r3, r0
 8003274:	b25a      	sxtb	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800327a:	210f      	movs	r1, #15
 800327c:	6838      	ldr	r0, [r7, #0]
 800327e:	f7ff ff4f 	bl	8003120 <u8g2_font_get_byte>
 8003282:	4603      	mov	r3, r0
 8003284:	b25a      	sxtb	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800328a:	2110      	movs	r1, #16
 800328c:	6838      	ldr	r0, [r7, #0]
 800328e:	f7ff ff47 	bl	8003120 <u8g2_font_get_byte>
 8003292:	4603      	mov	r3, r0
 8003294:	b25a      	sxtb	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800329a:	2111      	movs	r1, #17
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f7ff ff50 	bl	8003142 <u8g2_font_get_word>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80032aa:	2113      	movs	r1, #19
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	f7ff ff48 	bl	8003142 <u8g2_font_get_word>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80032ba:	2115      	movs	r1, #21
 80032bc:	6838      	ldr	r0, [r7, #0]
 80032be:	f7ff ff40 	bl	8003142 <u8g2_font_get_word>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	82da      	strh	r2, [r3, #22]
#endif
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7a9b      	ldrb	r3, [r3, #10]
 80032e2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	7b7b      	ldrb	r3, [r7, #13]
 80032f0:	fa42 f303 	asr.w	r3, r2, r3
 80032f4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80032fa:	7bba      	ldrb	r2, [r7, #14]
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	4413      	add	r3, r2
 8003300:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	2b07      	cmp	r3, #7
 8003306:	d91a      	bls.n	800333e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003308:	2308      	movs	r3, #8
 800330a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800330c:	7b3a      	ldrb	r2, [r7, #12]
 800330e:	7b7b      	ldrb	r3, [r7, #13]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	7b3b      	ldrb	r3, [r7, #12]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	b25a      	sxtb	r2, r3
 800332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003332:	4313      	orrs	r3, r2
 8003334:	b25b      	sxtb	r3, r3
 8003336:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	3b08      	subs	r3, #8
 800333c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	b2da      	uxtb	r2, r3
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	4013      	ands	r3, r2
 8003352:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7bba      	ldrb	r2, [r7, #14]
 8003358:	729a      	strb	r2, [r3, #10]
  return val;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffab 	bl	80032d2 <u8g2_font_decode_get_unsigned_bits>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003380:	2301      	movs	r3, #1
 8003382:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	3b01      	subs	r3, #1
 8003388:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800338a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	7bbb      	ldrb	r3, [r7, #14]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	73fb      	strb	r3, [r7, #15]
  return v;
 80033a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
 80033b8:	4613      	mov	r3, r2
 80033ba:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3354      	adds	r3, #84	; 0x54
 80033c0:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80033cc:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80033d4:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80033dc:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	7d7b      	ldrb	r3, [r7, #21]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80033ea:	7dfa      	ldrb	r2, [r7, #23]
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d201      	bcs.n	80033f6 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	791b      	ldrb	r3, [r3, #4]
 80033fa:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	795b      	ldrb	r3, [r3, #5]
 8003400:	737b      	strb	r3, [r7, #13]
    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
#else
    x += lx;
 8003402:	7bba      	ldrb	r2, [r7, #14]
 8003404:	7d7b      	ldrb	r3, [r7, #21]
 8003406:	4413      	add	r3, r2
 8003408:	73bb      	strb	r3, [r7, #14]
    y += ly;
 800340a:	7b7a      	ldrb	r2, [r7, #13]
 800340c:	7d3b      	ldrb	r3, [r7, #20]
 800340e:	4413      	add	r3, r2
 8003410:	737b      	strb	r3, [r7, #13]
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003412:	78bb      	ldrb	r3, [r7, #2]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <u8g2_font_decode_len+0x88>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	7b1a      	ldrb	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 8003422:	7dbb      	ldrb	r3, [r7, #22]
 8003424:	7b7a      	ldrb	r2, [r7, #13]
 8003426:	7bb9      	ldrb	r1, [r7, #14]
 8003428:	2000      	movs	r0, #0
 800342a:	9000      	str	r0, [sp, #0]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fbfe 	bl	8003c2e <u8g2_DrawHVLine>
 8003432:	e010      	b.n	8003456 <u8g2_font_decode_len+0xaa>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	7adb      	ldrb	r3, [r3, #11]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10c      	bne.n	8003456 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	7b5a      	ldrb	r2, [r3, #13]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 8003446:	7dbb      	ldrb	r3, [r7, #22]
 8003448:	7b7a      	ldrb	r2, [r7, #13]
 800344a:	7bb9      	ldrb	r1, [r7, #14]
 800344c:	2000      	movs	r0, #0
 800344e:	9000      	str	r0, [sp, #0]
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fbec 	bl	8003c2e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003456:	7dfa      	ldrb	r2, [r7, #23]
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	429a      	cmp	r2, r3
 800345c:	d309      	bcc.n	8003472 <u8g2_font_decode_len+0xc6>
      break;
    cnt -= rem;
 800345e:	7dfa      	ldrb	r2, [r7, #23]
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	757b      	strb	r3, [r7, #21]
    ly++;
 800346a:	7d3b      	ldrb	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003470:	e7b1      	b.n	80033d6 <u8g2_font_decode_len+0x2a>
      break;
 8003472:	bf00      	nop
  }
  lx += cnt;
 8003474:	7d7a      	ldrb	r2, [r7, #21]
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	4413      	add	r3, r2
 800347a:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800347c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8003484:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	71da      	strb	r2, [r3, #7]
  
}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3354      	adds	r3, #84	; 0x54
 80034a2:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80034b6:	4619      	mov	r1, r3
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff ff0a 	bl	80032d2 <u8g2_font_decode_get_unsigned_bits>
 80034be:	4603      	mov	r3, r0
 80034c0:	b25a      	sxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80034cc:	4619      	mov	r1, r3
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff feff 	bl	80032d2 <u8g2_font_decode_get_unsigned_bits>
 80034d4:	4603      	mov	r3, r0
 80034d6:	b25a      	sxtb	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	7b1b      	ldrb	r3, [r3, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	735a      	strb	r2, [r3, #13]
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3354      	adds	r3, #84	; 0x54
 8003510:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ffbd 	bl	8003494 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003520:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003528:	4619      	mov	r1, r3
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff1b 	bl	8003366 <u8g2_font_decode_get_signed_bits>
 8003530:	4603      	mov	r3, r0
 8003532:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800353a:	4619      	mov	r1, r3
 800353c:	6978      	ldr	r0, [r7, #20]
 800353e:	f7ff ff12 	bl	8003366 <u8g2_font_decode_get_signed_bits>
 8003542:	4603      	mov	r3, r0
 8003544:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800354c:	4619      	mov	r1, r3
 800354e:	6978      	ldr	r0, [r7, #20]
 8003550:	f7ff ff09 	bl	8003366 <u8g2_font_decode_get_signed_bits>
 8003554:	4603      	mov	r3, r0
 8003556:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	dd49      	ble.n	80035f6 <u8g2_font_decode_glyph+0xf4>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
#else
    decode->target_x += x;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	791a      	ldrb	r2, [r3, #4]
 8003566:	7cbb      	ldrb	r3, [r7, #18]
 8003568:	4413      	add	r3, r2
 800356a:	b2da      	uxtb	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	711a      	strb	r2, [r3, #4]
    decode->target_y -= h+y;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	795a      	ldrb	r2, [r3, #5]
 8003574:	7cf9      	ldrb	r1, [r7, #19]
 8003576:	7c7b      	ldrb	r3, [r7, #17]
 8003578:	440b      	add	r3, r1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	b2da      	uxtb	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	715a      	strb	r2, [r3, #5]
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003596:	4619      	mov	r1, r3
 8003598:	6978      	ldr	r0, [r7, #20]
 800359a:	f7ff fe9a 	bl	80032d2 <u8g2_font_decode_get_unsigned_bits>
 800359e:	4603      	mov	r3, r0
 80035a0:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80035a8:	4619      	mov	r1, r3
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff fe91 	bl	80032d2 <u8g2_font_decode_get_unsigned_bits>
 80035b0:	4603      	mov	r3, r0
 80035b2:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2200      	movs	r2, #0
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fef6 	bl	80033ac <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80035c0:	7bbb      	ldrb	r3, [r7, #14]
 80035c2:	2201      	movs	r2, #1
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fef0 	bl	80033ac <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80035cc:	2101      	movs	r1, #1
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	f7ff fe7f 	bl	80032d2 <u8g2_font_decode_get_unsigned_bits>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ec      	bne.n	80035b4 <u8g2_font_decode_glyph+0xb2>

      if ( decode->y >= h )
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80035e0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	dd00      	ble.n	80035ea <u8g2_font_decode_glyph+0xe8>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80035e8:	e7d2      	b.n	8003590 <u8g2_font_decode_glyph+0x8e>
	break;
 80035ea:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	7b1a      	ldrb	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
  return d;
 80035f6:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3317      	adds	r3, #23
 8003618:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	2bff      	cmp	r3, #255	; 0xff
 800361e:	d82a      	bhi.n	8003676 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	2b60      	cmp	r3, #96	; 0x60
 8003624:	d907      	bls.n	8003636 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4413      	add	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e009      	b.n	800364a <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d906      	bls.n	800364a <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8003642:	461a      	mov	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4413      	add	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d04e      	beq.n	80036f2 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	429a      	cmp	r2, r3
 800365e:	d102      	bne.n	8003666 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3302      	adds	r3, #2
 8003664:	e049      	b.n	80036fa <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4413      	add	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003674:	e7e9      	b.n	800364a <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800367c:	461a      	mov	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	4413      	add	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003688:	2100      	movs	r1, #0
 800368a:	6938      	ldr	r0, [r7, #16]
 800368c:	f7ff fd59 	bl	8003142 <u8g2_font_get_word>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4413      	add	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800369a:	2102      	movs	r1, #2
 800369c:	6938      	ldr	r0, [r7, #16]
 800369e:	f7ff fd50 	bl	8003142 <u8g2_font_get_word>
 80036a2:	4603      	mov	r3, r0
 80036a4:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3304      	adds	r3, #4
 80036aa:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80036ac:	89fa      	ldrh	r2, [r7, #14]
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d3e9      	bcc.n	8003688 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80036ba:	89fb      	ldrh	r3, [r7, #14]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80036ce:	89fb      	ldrh	r3, [r7, #14]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80036d4:	89fa      	ldrh	r2, [r7, #14]
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d102      	bne.n	80036e2 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3303      	adds	r3, #3
 80036e0:	e00b      	b.n	80036fa <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	3302      	adds	r3, #2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4413      	add	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80036f0:	e7e0      	b.n	80036b4 <u8g2_font_get_glyph_data+0xb2>
	break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <u8g2_font_get_glyph_data+0xf6>
	break;
 80036f6:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	4608      	mov	r0, r1
 800370c:	4611      	mov	r1, r2
 800370e:	461a      	mov	r2, r3
 8003710:	4603      	mov	r3, r0
 8003712:	70fb      	strb	r3, [r7, #3]
 8003714:	460b      	mov	r3, r1
 8003716:	70bb      	strb	r3, [r7, #2]
 8003718:	4613      	mov	r3, r2
 800371a:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	78ba      	ldrb	r2, [r7, #2]
 800372c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003730:	883b      	ldrh	r3, [r7, #0]
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ff64 	bl	8003602 <u8g2_font_get_glyph_data>
 800373a:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fedc 	bl	8003502 <u8g2_font_decode_glyph>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	4619      	mov	r1, r3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff4a 	bl	8003602 <u8g2_font_get_glyph_data>
 800376e:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8003776:	2300      	movs	r3, #0
 8003778:	e027      	b.n	80037ca <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fe89 	bl	8003494 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7ff fde8 	bl	8003366 <u8g2_font_decode_get_signed_bits>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f7ff fdd9 	bl	8003366 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7ff fdcf 	bl	8003366 <u8g2_font_decode_get_signed_bits>
 80037c8:	4603      	mov	r3, r0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	70fb      	strb	r3, [r7, #3]
 8003802:	460b      	mov	r3, r1
 8003804:	70bb      	strb	r3, [r7, #2]
 8003806:	4613      	mov	r3, r2
 8003808:	803b      	strh	r3, [r7, #0]
    case 3:
      x += u8g2->font_calc_vref(u8g2);
      break;
  }
#else
  y += u8g2->font_calc_vref(u8g2);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	78bb      	ldrb	r3, [r7, #2]
 8003818:	4413      	add	r3, r2
 800381a:	70bb      	strb	r3, [r7, #2]
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800381c:	883b      	ldrh	r3, [r7, #0]
 800381e:	78ba      	ldrb	r2, [r7, #2]
 8003820:	78f9      	ldrb	r1, [r7, #3]
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff6d 	bl	8003702 <u8g2_font_draw_glyph>
 8003828:	4603      	mov	r3, r0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	72fb      	strb	r3, [r7, #11]
 8003840:	4613      	mov	r3, r2
 8003842:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fcaa 	bl	800419e <u8x8_utf8_init>
  sum = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	4611      	mov	r1, r2
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	4798      	blx	r3
 800385c:	4603      	mov	r3, r0
 800385e:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003860:	8abb      	ldrh	r3, [r7, #20]
 8003862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <u8g2_draw_string+0x6a>
      break;
    str++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3301      	adds	r3, #1
 800386e:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003870:	8abb      	ldrh	r3, [r7, #20]
 8003872:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003876:	4293      	cmp	r3, r2
 8003878:	d0e9      	beq.n	800384e <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800387a:	8abb      	ldrh	r3, [r7, #20]
 800387c:	7aba      	ldrb	r2, [r7, #10]
 800387e:	7af9      	ldrb	r1, [r7, #11]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff ffb5 	bl	80037f0 <u8g2_DrawGlyph>
 8003886:	4603      	mov	r3, r0
 8003888:	74fb      	strb	r3, [r7, #19]
	case 3:
	  y -= delta;
	  break;
      }
#else
      x += delta;
 800388a:	7afa      	ldrb	r2, [r7, #11]
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	4413      	add	r3, r2
 8003890:	72fb      	strb	r3, [r7, #11]
#endif

      sum += delta;    
 8003892:	7dfa      	ldrb	r2, [r7, #23]
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	4413      	add	r3, r2
 8003898:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800389a:	e7d8      	b.n	800384e <u8g2_draw_string+0x1c>
      break;
 800389c:	bf00      	nop
    }
  }
  return sum;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	72fb      	strb	r3, [r7, #11]
 80038b6:	4613      	mov	r3, r2
 80038b8:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <u8g2_DrawStr+0x30>)
 80038be:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80038c0:	7aba      	ldrb	r2, [r7, #10]
 80038c2:	7af9      	ldrb	r1, [r7, #11]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ffb3 	bl	8003832 <u8g2_draw_string>
 80038cc:	4603      	mov	r3, r0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	080041b9 	.word	0x080041b9

080038dc <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	72fb      	strb	r3, [r7, #11]
 80038ea:	4613      	mov	r3, r2
 80038ec:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a06      	ldr	r2, [pc, #24]	; (800390c <u8g2_DrawUTF8+0x30>)
 80038f2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80038f4:	7aba      	ldrb	r2, [r7, #10]
 80038f6:	7af9      	ldrb	r1, [r7, #11]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff ff99 	bl	8003832 <u8g2_draw_string>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	080041e5 	.word	0x080041e5

08003910 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05d      	beq.n	80039dc <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04d      	beq.n	80039de <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d11c      	bne.n	8003986 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f993 207d 	ldrsb.w	r2, [r3, #125]	; 0x7d
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8003958:	429a      	cmp	r2, r3
 800395a:	da05      	bge.n	8003968 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8003974:	429a      	cmp	r2, r3
 8003976:	dd32      	ble.n	80039de <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003984:	e02b      	b.n	80039de <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8003994:	4619      	mov	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800399c:	440b      	add	r3, r1
 800399e:	429a      	cmp	r2, r3
 80039a0:	da0d      	bge.n	80039be <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	b25a      	sxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80039ca:	429a      	cmp	r2, r3
 80039cc:	dd07      	ble.n	80039de <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80039da:	e000      	b.n	80039de <u8g2_UpdateRefHeight+0xce>
    return;
 80039dc:	bf00      	nop
  }  
}
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  return 0;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
	...

080039fc <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a03      	ldr	r2, [pc, #12]	; (8003a14 <u8g2_SetFontPosBaseline+0x18>)
 8003a08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	080039e7 	.word	0x080039e7

08003a18 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d00b      	beq.n	8003a44 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3364      	adds	r3, #100	; 0x64
 8003a36:	6839      	ldr	r1, [r7, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fba1 	bl	8003180 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ff66 	bl	8003910 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fb9d 	bl	800419e <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	4611      	mov	r1, r2
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8003a7e:	89bb      	ldrh	r3, [r7, #12]
 8003a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <u8g2_string_width+0x64>
      break;
    str++;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8003a8e:	89bb      	ldrh	r3, [r7, #12]
 8003a90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d0e9      	beq.n	8003a6c <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8003a98:	89bb      	ldrh	r3, [r7, #12]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fe5b 	bl	8003758 <u8g2_GetGlyphWidth>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	7bbb      	ldrb	r3, [r7, #14]
 8003aaa:	4413      	add	r3, r2
 8003aac:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003aae:	e7dd      	b.n	8003a6c <u8g2_string_width+0x20>
      break;
 8003ab0:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d011      	beq.n	8003ae0 <u8g2_string_width+0x94>
  {
    w -= dx;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	7bbb      	ldrb	r3, [r7, #14]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	4413      	add	r3, r2
 8003ad0:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	4413      	add	r3, r2
 8003ade:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <u8g2_GetStrWidth+0x24>)
 8003afa:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ffa4 	bl	8003a4c <u8g2_string_width>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	080041b9 	.word	0x080041b9

08003b14 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <u8g2_GetUTF8Width+0x24>)
 8003b22:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff ff90 	bl	8003a4c <u8g2_string_width>
 8003b2c:	4603      	mov	r3, r0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	080041e5 	.word	0x080041e5

08003b3c <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
#endif
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b087      	sub	sp, #28
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	461a      	mov	r2, r3
 8003b60:	460b      	mov	r3, r1
 8003b62:	71fb      	strb	r3, [r7, #7]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	7dbb      	ldrb	r3, [r7, #22]
 8003b78:	4413      	add	r3, r2
 8003b7a:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003b7c:	7dfa      	ldrb	r2, [r7, #23]
 8003b7e:	7dbb      	ldrb	r3, [r7, #22]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d90b      	bls.n	8003b9c <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003b84:	7dfa      	ldrb	r2, [r7, #23]
 8003b86:	79bb      	ldrb	r3, [r7, #6]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d205      	bcs.n	8003b98 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003b8c:	79bb      	ldrb	r3, [r7, #6]
 8003b8e:	75bb      	strb	r3, [r7, #22]
      b--;
 8003b90:	7dbb      	ldrb	r3, [r7, #22]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	75bb      	strb	r3, [r7, #22]
 8003b96:	e001      	b.n	8003b9c <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003b9c:	7dfa      	ldrb	r2, [r7, #23]
 8003b9e:	79bb      	ldrb	r3, [r7, #6]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d301      	bcc.n	8003ba8 <u8g2_clip_intersection2+0x56>
    return 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e01c      	b.n	8003be2 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003ba8:	7dba      	ldrb	r2, [r7, #22]
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d801      	bhi.n	8003bb4 <u8g2_clip_intersection2+0x62>
    return 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e016      	b.n	8003be2 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003bb4:	7dfa      	ldrb	r2, [r7, #23]
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d201      	bcs.n	8003bc0 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8003bc0:	7dba      	ldrb	r2, [r7, #22]
 8003bc2:	79bb      	ldrb	r3, [r7, #6]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d901      	bls.n	8003bcc <u8g2_clip_intersection2+0x7a>
    b = d;
 8003bc8:	79bb      	ldrb	r3, [r7, #6]
 8003bca:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	7dfa      	ldrb	r2, [r7, #23]
 8003bd0:	701a      	strb	r2, [r3, #0]
  b -= a;
 8003bd2:	7dba      	ldrb	r2, [r7, #22]
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	7dba      	ldrb	r2, [r7, #22]
 8003bde:	701a      	strb	r2, [r3, #0]
  return 1;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	70fb      	strb	r3, [r7, #3]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	70bb      	strb	r3, [r7, #2]
 8003c02:	4613      	mov	r3, r2
 8003c04:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c0c:	78ba      	ldrb	r2, [r7, #2]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003c16:	7878      	ldrb	r0, [r7, #1]
 8003c18:	78ba      	ldrb	r2, [r7, #2]
 8003c1a:	78f9      	ldrb	r1, [r7, #3]
 8003c1c:	7e3b      	ldrb	r3, [r7, #24]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	4603      	mov	r3, r0
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	47a0      	blx	r4
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}

08003c2e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003c2e:	b590      	push	{r4, r7, lr}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	70fb      	strb	r3, [r7, #3]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70bb      	strb	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003c48:	787b      	ldrb	r3, [r7, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d06a      	beq.n	8003d24 <u8g2_DrawHVLine+0xf6>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003c4e:	787b      	ldrb	r3, [r7, #1]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d918      	bls.n	8003c86 <u8g2_DrawHVLine+0x58>
      {
	if ( dir == 2 )
 8003c54:	7e3b      	ldrb	r3, [r7, #24]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d109      	bne.n	8003c6e <u8g2_DrawHVLine+0x40>
	{
	  x -= len;
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	787b      	ldrb	r3, [r7, #1]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	70fb      	strb	r3, [r7, #3]
	  x++;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	3301      	adds	r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	70fb      	strb	r3, [r7, #3]
 8003c6c:	e00b      	b.n	8003c86 <u8g2_DrawHVLine+0x58>
	}
	else if ( dir == 3 )
 8003c6e:	7e3b      	ldrb	r3, [r7, #24]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d108      	bne.n	8003c86 <u8g2_DrawHVLine+0x58>
	{
	  y -= len;
 8003c74:	78ba      	ldrb	r2, [r7, #2]
 8003c76:	787b      	ldrb	r3, [r7, #1]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	70bb      	strb	r3, [r7, #2]
	  y++;
 8003c7e:	78bb      	ldrb	r3, [r7, #2]
 8003c80:	3301      	adds	r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8003c86:	7e3b      	ldrb	r3, [r7, #24]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003c8e:	7e3b      	ldrb	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d119      	bne.n	8003cc8 <u8g2_DrawHVLine+0x9a>
      {
	if ( y < u8g2->user_y0 )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003c9a:	78bb      	ldrb	r3, [r7, #2]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d838      	bhi.n	8003d12 <u8g2_DrawHVLine+0xe4>
	  return;
	if ( y >= u8g2->user_y1 )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8003ca6:	78bb      	ldrb	r3, [r7, #2]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d934      	bls.n	8003d16 <u8g2_DrawHVLine+0xe8>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003cb8:	1c79      	adds	r1, r7, #1
 8003cba:	1cf8      	adds	r0, r7, #3
 8003cbc:	f7ff ff49 	bl	8003b52 <u8g2_clip_intersection2>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <u8g2_DrawHVLine+0xcc>
	  return;
 8003cc6:	e02d      	b.n	8003d24 <u8g2_DrawHVLine+0xf6>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d822      	bhi.n	8003d1a <u8g2_DrawHVLine+0xec>
	  return;
	if ( x >= u8g2->user_x1 )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d91e      	bls.n	8003d1e <u8g2_DrawHVLine+0xf0>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003cec:	1c79      	adds	r1, r7, #1
 8003cee:	1cb8      	adds	r0, r7, #2
 8003cf0:	f7ff ff2f 	bl	8003b52 <u8g2_clip_intersection2>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d013      	beq.n	8003d22 <u8g2_DrawHVLine+0xf4>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	689c      	ldr	r4, [r3, #8]
 8003d00:	78f9      	ldrb	r1, [r7, #3]
 8003d02:	78ba      	ldrb	r2, [r7, #2]
 8003d04:	7878      	ldrb	r0, [r7, #1]
 8003d06:	7e3b      	ldrb	r3, [r7, #24]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	47a0      	blx	r4
 8003d10:	e008      	b.n	8003d24 <u8g2_DrawHVLine+0xf6>
	  return;
 8003d12:	bf00      	nop
 8003d14:	e006      	b.n	8003d24 <u8g2_DrawHVLine+0xf6>
	  return;
 8003d16:	bf00      	nop
 8003d18:	e004      	b.n	8003d24 <u8g2_DrawHVLine+0xf6>
	  return;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <u8g2_DrawHVLine+0xf6>
	  return;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <u8g2_DrawHVLine+0xf6>
	  return;
 8003d22:	bf00      	nop
    }
}
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd90      	pop	{r4, r7, pc}

08003d2a <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  if ( color >= 3 )
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d903      	bls.n	8003d4c <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	4608      	mov	r0, r1
 8003d60:	4611      	mov	r1, r2
 8003d62:	461a      	mov	r2, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	70fb      	strb	r3, [r7, #3]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70bb      	strb	r3, [r7, #2]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8003d70:	78bb      	ldrb	r3, [r7, #2]
 8003d72:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8003d80:	7c3a      	ldrb	r2, [r7, #16]
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d801      	bhi.n	8003da0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003d9c:	7c3b      	ldrb	r3, [r7, #16]
 8003d9e:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d001      	beq.n	8003dae <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003daa:	7c3b      	ldrb	r3, [r7, #16]
 8003dac:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003dae:	78bb      	ldrb	r3, [r7, #2]
 8003db0:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8003db2:	89fb      	ldrh	r3, [r7, #14]
 8003db4:	f023 0307 	bic.w	r3, r3, #7
 8003db8:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	7c1b      	ldrb	r3, [r3, #16]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	89fa      	ldrh	r2, [r7, #14]
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8003dd0:	89fb      	ldrh	r3, [r7, #14]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
  ptr += x;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8003de0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d117      	bne.n	8003e18 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	7cbb      	ldrb	r3, [r7, #18]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	7c7b      	ldrb	r3, [r7, #17]
 8003dfc:	4053      	eors	r3, r2
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
	len--;
 8003e0a:	787b      	ldrb	r3, [r7, #1]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e8      	bne.n	8003de8 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003e16:	e039      	b.n	8003e8c <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	7cbb      	ldrb	r3, [r7, #18]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	7c7b      	ldrb	r3, [r7, #17]
 8003e2c:	4053      	eors	r3, r2
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	3301      	adds	r3, #1
 8003e38:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	74fb      	strb	r3, [r7, #19]
      len--;
 8003e42:	787b      	ldrb	r3, [r7, #1]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d115      	bne.n	8003e7a <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e54:	461a      	mov	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4413      	add	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d801      	bhi.n	8003e6a <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d008      	beq.n	8003e86 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8003e74:	2301      	movs	r3, #1
 8003e76:	747b      	strb	r3, [r7, #17]
 8003e78:	e005      	b.n	8003e86 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8003e7a:	7cbb      	ldrb	r3, [r7, #18]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8003e80:	7c7b      	ldrb	r3, [r7, #17]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8003e86:	787b      	ldrb	r3, [r7, #1]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1c5      	bne.n	8003e18 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	4608      	mov	r0, r1
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	70fb      	strb	r3, [r7, #3]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70bb      	strb	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fe42 	bl	8003b3c <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	78bb      	ldrb	r3, [r7, #2]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 8003eca:	69b9      	ldr	r1, [r7, #24]
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fe21 	bl	8003b14 <u8g2_GetUTF8Width>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 8003eda:	7aba      	ldrb	r2, [r7, #10]
 8003edc:	787b      	ldrb	r3, [r7, #1]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d209      	bcs.n	8003ef6 <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 8003ee2:	787b      	ldrb	r3, [r7, #1]
 8003ee4:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	7abb      	ldrb	r3, [r7, #10]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e001      	b.n	8003efa <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 8003ef6:	7abb      	ldrb	r3, [r7, #10]
 8003ef8:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	78ba      	ldrb	r2, [r7, #2]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	737b      	strb	r3, [r7, #13]
  fw = w;
 8003f0c:	787b      	ldrb	r3, [r7, #1]
 8003f0e:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8003f24:	2101      	movs	r1, #1
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff feff 	bl	8003d2a <u8g2_SetDrawColor>
  if ( is_invert )
 8003f2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d021      	beq.n	8003f78 <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8003f34:	7b38      	ldrb	r0, [r7, #12]
 8003f36:	7b7a      	ldrb	r2, [r7, #13]
 8003f38:	7bb9      	ldrb	r1, [r7, #14]
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fe ff5f 	bl	8002e04 <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8003f46:	e017      	b.n	8003f78 <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 8003f48:	7bbb      	ldrb	r3, [r7, #14]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	73bb      	strb	r3, [r7, #14]
    fy--;
 8003f4e:	7b7b      	ldrb	r3, [r7, #13]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	737b      	strb	r3, [r7, #13]
    fw +=2;
 8003f54:	7b3b      	ldrb	r3, [r7, #12]
 8003f56:	3302      	adds	r3, #2
 8003f58:	733b      	strb	r3, [r7, #12]
    fh +=2;
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 8003f60:	7b38      	ldrb	r0, [r7, #12]
 8003f62:	7b7a      	ldrb	r2, [r7, #13]
 8003f64:	7bb9      	ldrb	r1, [r7, #14]
 8003f66:	7afb      	ldrb	r3, [r7, #11]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fe ff6d 	bl	8002e4c <u8g2_DrawFrame>
    border_size--;
 8003f72:	7f3b      	ldrb	r3, [r7, #28]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 8003f78:	7f3b      	ldrb	r3, [r7, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e4      	bne.n	8003f48 <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 8003f7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 8003f86:	2100      	movs	r1, #0
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fece 	bl	8003d2a <u8g2_SetDrawColor>
 8003f8e:	e003      	b.n	8003f98 <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 8003f90:	2101      	movs	r1, #1
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fec9 	bl	8003d2a <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	b2d9      	uxtb	r1, r3
 8003fa0:	78ba      	ldrb	r2, [r7, #2]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fc99 	bl	80038dc <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 8003faa:	2101      	movs	r1, #1
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff febc 	bl	8003d2a <u8g2_SetDrawColor>

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	79fa      	ldrb	r2, [r7, #7]
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  
  u8g2->draw_color = 1;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  u8g2->is_auto_page_clear = 1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  
  u8g2->cb = u8g2_cb;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
#else
  u8g2->cb->update_page_win(u8g2);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	4798      	blx	r3
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff fce8 	bl	80039fc <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
#endif
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	7c1b      	ldrb	r3, [r3, #16]
 800405c:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b1f      	cmp	r3, #31
 8004062:	d901      	bls.n	8004068 <u8g2_update_dimension_common+0x34>
    t = 31;
 8004064:	231f      	movs	r3, #31
 8004066:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004092:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800409c:	4413      	add	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	7c52      	ldrb	r2, [r2, #17]
 80040a2:	4293      	cmp	r3, r2
 80040a4:	dd06      	ble.n	80040b4 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	7c5a      	ldrb	r2, [r3, #17]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	4413      	add	r3, r2
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	22f0      	movs	r2, #240	; 0xf0
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	8a9b      	ldrh	r3, [r3, #20]
 80040f0:	2bf0      	cmp	r3, #240	; 0xf0
 80040f2:	d805      	bhi.n	8004100 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	8a9b      	ldrh	r3, [r3, #20]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	8adb      	ldrh	r3, [r3, #22]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff88 	bl	8004034 <u8g2_update_dimension_common>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af02      	add	r7, sp, #8
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	461a      	mov	r2, r3
 8004178:	4603      	mov	r3, r0
 800417a:	70fb      	strb	r3, [r7, #3]
 800417c:	460b      	mov	r3, r1
 800417e:	70bb      	strb	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004184:	7878      	ldrb	r0, [r7, #1]
 8004186:	78ba      	ldrb	r2, [r7, #2]
 8004188:	78f9      	ldrb	r1, [r7, #3]
 800418a:	7c3b      	ldrb	r3, [r7, #16]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	4603      	mov	r3, r0
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fd2b 	bl	8003bec <u8g2_draw_hv_line_2dir>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <u8x8_ascii_next+0x18>
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	2b0a      	cmp	r3, #10
 80041ce:	d102      	bne.n	80041d6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80041d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d4:	e001      	b.n	80041da <u8x8_ascii_next+0x22>
  return b;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	b29b      	uxth	r3, r3
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <u8x8_utf8_next+0x18>
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	2b0a      	cmp	r3, #10
 80041fa:	d102      	bne.n	8004202 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80041fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004200:	e06e      	b.n	80042e0 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004208:	2b00      	cmp	r3, #0
 800420a:	d145      	bne.n	8004298 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2bfb      	cmp	r3, #251	; 0xfb
 8004210:	d908      	bls.n	8004224 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2205      	movs	r2, #5
 8004216:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	70fb      	strb	r3, [r7, #3]
 8004222:	e032      	b.n	800428a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	2bf7      	cmp	r3, #247	; 0xf7
 8004228:	d908      	bls.n	800423c <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	70fb      	strb	r3, [r7, #3]
 800423a:	e026      	b.n	800428a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	2bef      	cmp	r3, #239	; 0xef
 8004240:	d908      	bls.n	8004254 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2203      	movs	r2, #3
 8004246:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	70fb      	strb	r3, [r7, #3]
 8004252:	e01a      	b.n	800428a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	2bdf      	cmp	r3, #223	; 0xdf
 8004258:	d908      	bls.n	800426c <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	70fb      	strb	r3, [r7, #3]
 800426a:	e00e      	b.n	800428a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	2bbf      	cmp	r3, #191	; 0xbf
 8004270:	d908      	bls.n	8004284 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	70fb      	strb	r3, [r7, #3]
 8004282:	e002      	b.n	800428a <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	b29b      	uxth	r3, r3
 8004288:	e02a      	b.n	80042e0 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8004292:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004296:	e023      	b.n	80042e0 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800429e:	3b01      	subs	r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8c1b      	ldrh	r3, [r3, #32]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ba:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8c1a      	ldrh	r2, [r3, #32]
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80042d6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80042da:	e001      	b.n	80042e0 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8c1b      	ldrh	r3, [r3, #32]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80042ea:	b590      	push	{r4, r7, lr}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	460b      	mov	r3, r1
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691c      	ldr	r4, [r3, #16]
 80042fc:	7afa      	ldrb	r2, [r7, #11]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2117      	movs	r1, #23
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	47a0      	blx	r4
 8004306:	4603      	mov	r3, r0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	bd90      	pop	{r4, r7, pc}

08004310 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800431c:	1cfb      	adds	r3, r7, #3
 800431e:	461a      	mov	r2, r3
 8004320:	2101      	movs	r1, #1
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ffe1 	bl	80042ea <u8x8_byte_SendBytes>
 8004328:	4603      	mov	r3, r0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8004332:	b590      	push	{r4, r7, lr}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691c      	ldr	r4, [r3, #16]
 800433e:	2300      	movs	r3, #0
 8004340:	2200      	movs	r2, #0
 8004342:	2118      	movs	r1, #24
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	47a0      	blx	r4
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bd90      	pop	{r4, r7, pc}

08004352 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8004352:	b590      	push	{r4, r7, lr}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691c      	ldr	r4, [r3, #16]
 800435e:	2300      	movs	r3, #0
 8004360:	2200      	movs	r2, #0
 8004362:	2119      	movs	r1, #25
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	47a0      	blx	r4
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}

08004372 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004372:	b590      	push	{r4, r7, lr}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68dc      	ldr	r4, [r3, #12]
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	2300      	movs	r3, #0
 8004386:	2115      	movs	r1, #21
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	47a0      	blx	r4
 800438c:	4603      	mov	r3, r0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bd90      	pop	{r4, r7, pc}

08004396 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004396:	b590      	push	{r4, r7, lr}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	460b      	mov	r3, r1
 80043a0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68dc      	ldr	r4, [r3, #12]
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	2300      	movs	r3, #0
 80043aa:	2116      	movs	r1, #22
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	47a0      	blx	r4
 80043b0:	4603      	mov	r3, r0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}

080043ba <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80043ba:	b590      	push	{r4, r7, lr}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	460b      	mov	r3, r1
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68dc      	ldr	r4, [r3, #12]
 80043cc:	7afa      	ldrb	r2, [r7, #11]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2117      	movs	r1, #23
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	47a0      	blx	r4
 80043d6:	4603      	mov	r3, r0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd90      	pop	{r4, r7, pc}

080043e0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68dc      	ldr	r4, [r3, #12]
 80043ec:	2300      	movs	r3, #0
 80043ee:	2200      	movs	r2, #0
 80043f0:	2118      	movs	r1, #24
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	47a0      	blx	r4
 80043f6:	4603      	mov	r3, r0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}

08004400 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68dc      	ldr	r4, [r3, #12]
 800440c:	2300      	movs	r3, #0
 800440e:	2200      	movs	r2, #0
 8004410:	2119      	movs	r1, #25
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	47a0      	blx	r4
 8004416:	4603      	mov	r3, r0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bd90      	pop	{r4, r7, pc}

08004420 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	73fb      	strb	r3, [r7, #15]
    data++;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2bfe      	cmp	r3, #254	; 0xfe
 800443a:	d031      	beq.n	80044a0 <u8x8_cad_SendSequence+0x80>
 800443c:	2bfe      	cmp	r3, #254	; 0xfe
 800443e:	dc3d      	bgt.n	80044bc <u8x8_cad_SendSequence+0x9c>
 8004440:	2b19      	cmp	r3, #25
 8004442:	dc3b      	bgt.n	80044bc <u8x8_cad_SendSequence+0x9c>
 8004444:	2b18      	cmp	r3, #24
 8004446:	da23      	bge.n	8004490 <u8x8_cad_SendSequence+0x70>
 8004448:	2b16      	cmp	r3, #22
 800444a:	dc02      	bgt.n	8004452 <u8x8_cad_SendSequence+0x32>
 800444c:	2b15      	cmp	r3, #21
 800444e:	da03      	bge.n	8004458 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004450:	e034      	b.n	80044bc <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004452:	2b17      	cmp	r3, #23
 8004454:	d00e      	beq.n	8004474 <u8x8_cad_SendSequence+0x54>
	return;
 8004456:	e031      	b.n	80044bc <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68dc      	ldr	r4, [r3, #12]
 8004462:	7bba      	ldrb	r2, [r7, #14]
 8004464:	7bf9      	ldrb	r1, [r7, #15]
 8004466:	2300      	movs	r3, #0
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	47a0      	blx	r4
	  data++;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	603b      	str	r3, [r7, #0]
	  break;
 8004472:	e022      	b.n	80044ba <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800447a:	f107 030e 	add.w	r3, r7, #14
 800447e:	461a      	mov	r2, r3
 8004480:	2101      	movs	r1, #1
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff ff99 	bl	80043ba <u8x8_cad_SendData>
	  data++;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	3301      	adds	r3, #1
 800448c:	603b      	str	r3, [r7, #0]
	  break;
 800448e:	e014      	b.n	80044ba <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68dc      	ldr	r4, [r3, #12]
 8004494:	7bf9      	ldrb	r1, [r7, #15]
 8004496:	2300      	movs	r3, #0
 8004498:	2200      	movs	r2, #0
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	47a0      	blx	r4
	  break;
 800449e:	e00c      	b.n	80044ba <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80044a6:	7bbb      	ldrb	r3, [r7, #14]
 80044a8:	461a      	mov	r2, r3
 80044aa:	2129      	movs	r1, #41	; 0x29
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fa35 	bl	800491c <u8x8_gpio_call>
	  data++;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	603b      	str	r3, [r7, #0]
	  break;
 80044b8:	bf00      	nop
    cmd = *data;
 80044ba:	e7b6      	b.n	800442a <u8x8_cad_SendSequence+0xa>
	return;
 80044bc:	bf00      	nop
    }
  }
}
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd90      	pop	{r4, r7, pc}

080044c4 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	460b      	mov	r3, r1
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ff2d 	bl	8004332 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ff18 	bl	8004310 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691c      	ldr	r4, [r3, #16]
 80044e4:	7afa      	ldrb	r2, [r7, #11]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2117      	movs	r1, #23
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ff2f 	bl	8004352 <u8x8_byte_EndTransfer>
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}

080044fc <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80044fc:	b590      	push	{r4, r7, lr}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	72fb      	strb	r3, [r7, #11]
 800450a:	4613      	mov	r3, r2
 800450c:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800450e:	7afb      	ldrb	r3, [r7, #11]
 8004510:	3b14      	subs	r3, #20
 8004512:	2b05      	cmp	r3, #5
 8004514:	d86e      	bhi.n	80045f4 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	080045b3 	.word	0x080045b3
 8004520:	08004535 	.word	0x08004535
 8004524:	08004563 	.word	0x08004563
 8004528:	0800456f 	.word	0x0800456f
 800452c:	080045d7 	.word	0x080045d7
 8004530:	080045df 	.word	0x080045df
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8004534:	4b33      	ldr	r3, [pc, #204]	; (8004604 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff ff08 	bl	8004352 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff fef5 	bl	8004332 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8004548:	2100      	movs	r1, #0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff fee0 	bl	8004310 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004550:	7abb      	ldrb	r3, [r7, #10]
 8004552:	4619      	mov	r1, r3
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff fedb 	bl	8004310 <u8x8_byte_SendByte>
      in_transfer = 1;
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8004560:	e04a      	b.n	80045f8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8004562:	7abb      	ldrb	r3, [r7, #10]
 8004564:	4619      	mov	r1, r3
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff fed2 	bl	8004310 <u8x8_byte_SendByte>
      break;      
 800456c:	e044      	b.n	80045f8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800456e:	4b25      	ldr	r3, [pc, #148]	; (8004604 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff feeb 	bl	8004352 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004580:	e00a      	b.n	8004598 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	2118      	movs	r1, #24
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff ff9c 	bl	80044c4 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800458c:	7abb      	ldrb	r3, [r7, #10]
 800458e:	3b18      	subs	r3, #24
 8004590:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	3318      	adds	r3, #24
 8004596:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004598:	7abb      	ldrb	r3, [r7, #10]
 800459a:	2b18      	cmp	r3, #24
 800459c:	d8f1      	bhi.n	8004582 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800459e:	7abb      	ldrb	r3, [r7, #10]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4619      	mov	r1, r3
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff ff8d 	bl	80044c4 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
      break;
 80045b0:	e022      	b.n	80045f8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045b8:	2bff      	cmp	r3, #255	; 0xff
 80045ba:	d103      	bne.n	80045c4 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2278      	movs	r2, #120	; 0x78
 80045c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691c      	ldr	r4, [r3, #16]
 80045c8:	7aba      	ldrb	r2, [r7, #10]
 80045ca:	7af9      	ldrb	r1, [r7, #11]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	47a0      	blx	r4
 80045d2:	4603      	mov	r3, r0
 80045d4:	e011      	b.n	80045fa <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
      break;
 80045dc:	e00c      	b.n	80045f8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff feb3 	bl	8004352 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
      break;
 80045f2:	e001      	b.n	80045f8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80045f8:	2301      	movs	r3, #1
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd90      	pop	{r4, r7, pc}
 8004602:	bf00      	nop
 8004604:	20000920 	.word	0x20000920

08004608 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	72fb      	strb	r3, [r7, #11]
 8004616:	4613      	mov	r3, r2
 8004618:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	3b0b      	subs	r3, #11
 800461e:	2b04      	cmp	r3, #4
 8004620:	f200 808a 	bhi.w	8004738 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004641 	.word	0x08004641
 8004630:	08004739 	.word	0x08004739
 8004634:	0800465b 	.word	0x0800465b
 8004638:	0800468d 	.word	0x0800468d
 800463c:	080046ad 	.word	0x080046ad
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004640:	7abb      	ldrb	r3, [r7, #10]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8004646:	4940      	ldr	r1, [pc, #256]	; (8004748 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fee9 	bl	8004420 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800464e:	e075      	b.n	800473c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004650:	493e      	ldr	r1, [pc, #248]	; (800474c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff fee4 	bl	8004420 <u8x8_cad_SendSequence>
      break;
 8004658:	e070      	b.n	800473c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800465a:	7abb      	ldrb	r3, [r7, #10]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004660:	493b      	ldr	r1, [pc, #236]	; (8004750 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fedc 	bl	8004420 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	7c9a      	ldrb	r2, [r3, #18]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004674:	e062      	b.n	800473c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8004676:	4937      	ldr	r1, [pc, #220]	; (8004754 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff fed1 	bl	8004420 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	7cda      	ldrb	r2, [r3, #19]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800468a:	e057      	b.n	800473c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff fea7 	bl	80043e0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004692:	2181      	movs	r1, #129	; 0x81
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fe6c 	bl	8004372 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800469a:	7abb      	ldrb	r3, [r7, #10]
 800469c:	4619      	mov	r1, r3
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fe79 	bl	8004396 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff feab 	bl	8004400 <u8x8_cad_EndTransfer>
      break;
 80046aa:	e047      	b.n	800473c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fe97 	bl	80043e0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	795b      	ldrb	r3, [r3, #5]
 80046b6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	4413      	add	r3, r2
 80046c8:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80046ca:	2140      	movs	r1, #64	; 0x40
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fe50 	bl	8004372 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f043 0310 	orr.w	r3, r3, #16
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	4619      	mov	r1, r3
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fe46 	bl	8004372 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	4619      	mov	r1, r3
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fe50 	bl	8004396 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	799b      	ldrb	r3, [r3, #6]
 80046fa:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff fe47 	bl	8004396 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	791b      	ldrb	r3, [r3, #4]
 800470c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004714:	7dbb      	ldrb	r3, [r7, #22]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4619      	mov	r1, r3
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fe4b 	bl	80043ba <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004724:	7abb      	ldrb	r3, [r7, #10]
 8004726:	3b01      	subs	r3, #1
 8004728:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800472a:	7abb      	ldrb	r3, [r7, #10]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1eb      	bne.n	8004708 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fe65 	bl	8004400 <u8x8_cad_EndTransfer>
      break;
 8004736:	e001      	b.n	800473c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800473c:	2301      	movs	r3, #1
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	08009960 	.word	0x08009960
 800474c:	08009968 	.word	0x08009968
 8004750:	08009970 	.word	0x08009970
 8004754:	08009978 	.word	0x08009978

08004758 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	72fb      	strb	r3, [r7, #11]
 8004766:	4613      	mov	r3, r2
 8004768:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800476a:	7aba      	ldrb	r2, [r7, #10]
 800476c:	7af9      	ldrb	r1, [r7, #11]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ff49 	bl	8004608 <u8x8_d_ssd1306_sh1106_generic>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800477c:	2301      	movs	r3, #1
 800477e:	e014      	b.n	80047aa <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8004780:	7afb      	ldrb	r3, [r7, #11]
 8004782:	2b09      	cmp	r3, #9
 8004784:	d009      	beq.n	800479a <u8x8_d_ssd1306_128x64_noname+0x42>
 8004786:	2b0a      	cmp	r3, #10
 8004788:	d10c      	bne.n	80047a4 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f829 	bl	80047e2 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004790:	4908      	ldr	r1, [pc, #32]	; (80047b4 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fe44 	bl	8004420 <u8x8_cad_SendSequence>
      break;
 8004798:	e006      	b.n	80047a8 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800479a:	4907      	ldr	r1, [pc, #28]	; (80047b8 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f80d 	bl	80047bc <u8x8_d_helper_display_setup_memory>
      break;
 80047a2:	e001      	b.n	80047a8 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80047a8:	2301      	movs	r3, #1
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	08009928 	.word	0x08009928
 80047b8:	08009980 	.word	0x08009980

080047bc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	7c9a      	ldrb	r2, [r3, #18]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80047e2:	b590      	push	{r4, r7, lr}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695c      	ldr	r4, [r3, #20]
 80047ee:	2300      	movs	r3, #0
 80047f0:	2200      	movs	r2, #0
 80047f2:	2128      	movs	r1, #40	; 0x28
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68dc      	ldr	r4, [r3, #12]
 80047fc:	2300      	movs	r3, #0
 80047fe:	2200      	movs	r2, #0
 8004800:	2114      	movs	r1, #20
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004806:	2201      	movs	r2, #1
 8004808:	214b      	movs	r1, #75	; 0x4b
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f886 	bl	800491c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	791b      	ldrb	r3, [r3, #4]
 8004816:	461a      	mov	r2, r3
 8004818:	2129      	movs	r1, #41	; 0x29
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f87e 	bl	800491c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004820:	2200      	movs	r2, #0
 8004822:	214b      	movs	r1, #75	; 0x4b
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f879 	bl	800491c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	461a      	mov	r2, r3
 8004832:	2129      	movs	r1, #41	; 0x29
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f871 	bl	800491c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800483a:	2201      	movs	r2, #1
 800483c:	214b      	movs	r1, #75	; 0x4b
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f86c 	bl	800491c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	795b      	ldrb	r3, [r3, #5]
 800484a:	461a      	mov	r2, r3
 800484c:	2129      	movs	r1, #41	; 0x29
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f864 	bl	800491c <u8x8_gpio_call>
}    
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bd90      	pop	{r4, r7, pc}

0800485c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	4603      	mov	r3, r0
 800486c:	70fb      	strb	r3, [r7, #3]
 800486e:	460b      	mov	r3, r1
 8004870:	70bb      	strb	r3, [r7, #2]
 8004872:	4613      	mov	r3, r2
 8004874:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800487a:	78bb      	ldrb	r3, [r7, #2]
 800487c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800487e:	787b      	ldrb	r3, [r7, #1]
 8004880:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689c      	ldr	r4, [r3, #8]
 800488a:	f107 0308 	add.w	r3, r7, #8
 800488e:	2201      	movs	r2, #1
 8004890:	210f      	movs	r1, #15
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	47a0      	blx	r4
 8004896:	4603      	mov	r3, r0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bd90      	pop	{r4, r7, pc}

080048a0 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689c      	ldr	r4, [r3, #8]
 80048ac:	2300      	movs	r3, #0
 80048ae:	2200      	movs	r2, #0
 80048b0:	2109      	movs	r1, #9
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	47a0      	blx	r4
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd90      	pop	{r4, r7, pc}

080048be <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80048be:	b590      	push	{r4, r7, lr}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689c      	ldr	r4, [r3, #8]
 80048ca:	2300      	movs	r3, #0
 80048cc:	2200      	movs	r2, #0
 80048ce:	210a      	movs	r1, #10
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	47a0      	blx	r4
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd90      	pop	{r4, r7, pc}

080048dc <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689c      	ldr	r4, [r3, #8]
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	2300      	movs	r3, #0
 80048f0:	210b      	movs	r1, #11
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	47a0      	blx	r4
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}

080048fe <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80048fe:	b590      	push	{r4, r7, lr}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689c      	ldr	r4, [r3, #8]
 800490a:	2300      	movs	r3, #0
 800490c:	2200      	movs	r2, #0
 800490e:	2110      	movs	r1, #16
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	47a0      	blx	r4
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}

0800491c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
 8004928:	4613      	mov	r3, r2
 800492a:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695c      	ldr	r4, [r3, #20]
 8004930:	78ba      	ldrb	r2, [r7, #2]
 8004932:	78f9      	ldrb	r1, [r7, #3]
 8004934:	2300      	movs	r3, #0
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	47a0      	blx	r4
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bd90      	pop	{r4, r7, pc}

08004942 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	72fb      	strb	r3, [r7, #11]
 8004950:	4613      	mov	r3, r2
 8004952:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <u8x8_SetupDefaults+0x60>)
 8004972:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <u8x8_SetupDefaults+0x60>)
 8004978:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <u8x8_SetupDefaults+0x60>)
 800497e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <u8x8_SetupDefaults+0x60>)
 8004984:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	22ff      	movs	r2, #255	; 0xff
 80049b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	08004943 	.word	0x08004943

080049c4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ffc4 	bl	8004960 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7ff ff55 	bl	80048a0 <u8x8_SetupMemory>
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <u8x8_GetStringLineCnt+0x16>
    return 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e011      	b.n	8004a38 <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3301      	adds	r3, #1
 8004a24:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 8004a26:	7bbb      	ldrb	r3, [r7, #14]
 8004a28:	2b0a      	cmp	r3, #10
 8004a2a:	d1f3      	bne.n	8004a14 <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8004a32:	e7ef      	b.n	8004a14 <u8x8_GetStringLineCnt+0x16>
      break;
 8004a34:	bf00      	nop
  }
  return line_cnt;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6039      	str	r1, [r7, #0]
 8004a4c:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <u8x8_GetStringLineStart+0x1a>
    return str;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	e017      	b.n	8004a8c <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 8004a62:	7bbb      	ldrb	r3, [r7, #14]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00f      	beq.n	8004a88 <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 8004a6e:	7bbb      	ldrb	r3, [r7, #14]
 8004a70:	2b0a      	cmp	r3, #10
 8004a72:	d1f3      	bne.n	8004a5c <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d101      	bne.n	8004a80 <u8x8_GetStringLineStart+0x3e>
	return str;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	e005      	b.n	8004a8c <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	3301      	adds	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8004a86:	e7e9      	b.n	8004a5c <u8x8_GetStringLineStart+0x1a>
      break;
 8004a88:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
	...

08004a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004a98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004a9a:	e003      	b.n	8004aa4 <LoopCopyDataInit>

08004a9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004a9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004aa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004aa2:	3104      	adds	r1, #4

08004aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004aa4:	480a      	ldr	r0, [pc, #40]	; (8004ad0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004aa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004aaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004aac:	d3f6      	bcc.n	8004a9c <CopyDataInit>
  ldr r2, =_sbss
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004ab0:	e002      	b.n	8004ab8 <LoopFillZerobss>

08004ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004ab2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004ab4:	f842 3b04 	str.w	r3, [r2], #4

08004ab8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004aba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004abc:	d3f9      	bcc.n	8004ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004abe:	f7fd feff 	bl	80028c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ac2:	f004 fa69 	bl	8008f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ac6:	f7fd fa41 	bl	8001f4c <main>
  bx lr
 8004aca:	4770      	bx	lr
  ldr r3, =_sidata
 8004acc:	080099a0 	.word	0x080099a0
  ldr r0, =_sdata
 8004ad0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004ad4:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8004ad8:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8004adc:	2000093c 	.word	0x2000093c

08004ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ae0:	e7fe      	b.n	8004ae0 <ADC1_2_IRQHandler>
	...

08004ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_Init+0x28>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <HAL_Init+0x28>)
 8004aee:	f043 0310 	orr.w	r3, r3, #16
 8004af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004af4:	2003      	movs	r0, #3
 8004af6:	f000 f947 	bl	8004d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f000 f808 	bl	8004b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b00:	f7fd fc76 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40022000 	.word	0x40022000

08004b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_InitTick+0x54>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_InitTick+0x58>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	4619      	mov	r1, r3
 8004b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f95f 	bl	8004df2 <HAL_SYSTICK_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e00e      	b.n	8004b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d80a      	bhi.n	8004b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b44:	2200      	movs	r2, #0
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	f000 f927 	bl	8004d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b50:	4a06      	ldr	r2, [pc, #24]	; (8004b6c <HAL_InitTick+0x5c>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000004 	.word	0x20000004
 8004b68:	2000000c 	.word	0x2000000c
 8004b6c:	20000008 	.word	0x20000008

08004b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_IncTick+0x1c>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_IncTick+0x20>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	4a03      	ldr	r2, [pc, #12]	; (8004b90 <HAL_IncTick+0x20>)
 8004b82:	6013      	str	r3, [r2, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	20000924 	.word	0x20000924

08004b94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return uwTick;
 8004b98:	4b02      	ldr	r3, [pc, #8]	; (8004ba4 <HAL_GetTick+0x10>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	20000924 	.word	0x20000924

08004ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d005      	beq.n	8004bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_Delay+0x44>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bce:	bf00      	nop
 8004bd0:	f7ff ffe0 	bl	8004b94 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d8f7      	bhi.n	8004bd0 <HAL_Delay+0x28>
  {
  }
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <__NVIC_SetPriorityGrouping+0x44>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c22:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <__NVIC_SetPriorityGrouping+0x44>)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	60d3      	str	r3, [r2, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <__NVIC_GetPriorityGrouping+0x18>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	f003 0307 	and.w	r3, r3, #7
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	db0b      	blt.n	8004c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	f003 021f 	and.w	r2, r3, #31
 8004c6c:	4906      	ldr	r1, [pc, #24]	; (8004c88 <__NVIC_EnableIRQ+0x34>)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2001      	movs	r0, #1
 8004c76:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	e000e100 	.word	0xe000e100

08004c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	db0a      	blt.n	8004cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	490c      	ldr	r1, [pc, #48]	; (8004cd8 <__NVIC_SetPriority+0x4c>)
 8004ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	440b      	add	r3, r1
 8004cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cb4:	e00a      	b.n	8004ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4908      	ldr	r1, [pc, #32]	; (8004cdc <__NVIC_SetPriority+0x50>)
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	3b04      	subs	r3, #4
 8004cc4:	0112      	lsls	r2, r2, #4
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	440b      	add	r3, r1
 8004cca:	761a      	strb	r2, [r3, #24]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	e000e100 	.word	0xe000e100
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f1c3 0307 	rsb	r3, r3, #7
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	bf28      	it	cs
 8004cfe:	2304      	movcs	r3, #4
 8004d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3304      	adds	r3, #4
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d902      	bls.n	8004d10 <NVIC_EncodePriority+0x30>
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3b03      	subs	r3, #3
 8004d0e:	e000      	b.n	8004d12 <NVIC_EncodePriority+0x32>
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	401a      	ands	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d28:	f04f 31ff 	mov.w	r1, #4294967295
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d32:	43d9      	mvns	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d38:	4313      	orrs	r3, r2
         );
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3724      	adds	r7, #36	; 0x24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d54:	d301      	bcc.n	8004d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d56:	2301      	movs	r3, #1
 8004d58:	e00f      	b.n	8004d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <SysTick_Config+0x40>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d62:	210f      	movs	r1, #15
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	f7ff ff90 	bl	8004c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <SysTick_Config+0x40>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d72:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <SysTick_Config+0x40>)
 8004d74:	2207      	movs	r2, #7
 8004d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	e000e010 	.word	0xe000e010

08004d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff2d 	bl	8004bf0 <__NVIC_SetPriorityGrouping>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	4603      	mov	r3, r0
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004db0:	f7ff ff42 	bl	8004c38 <__NVIC_GetPriorityGrouping>
 8004db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	6978      	ldr	r0, [r7, #20]
 8004dbc:	f7ff ff90 	bl	8004ce0 <NVIC_EncodePriority>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff5f 	bl	8004c8c <__NVIC_SetPriority>
}
 8004dce:	bf00      	nop
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff35 	bl	8004c54 <__NVIC_EnableIRQ>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ffa2 	bl	8004d44 <SysTick_Config>
 8004e00:	4603      	mov	r3, r0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e043      	b.n	8004eaa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_DMA_Init+0xa8>)
 8004e2a:	4413      	add	r3, r2
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_DMA_Init+0xac>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	009a      	lsls	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_DMA_Init+0xb0>)
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	bffdfff8 	.word	0xbffdfff8
 8004eb8:	cccccccd 	.word	0xcccccccd
 8004ebc:	40020000 	.word	0x40020000

08004ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_DMA_Start_IT+0x20>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e04a      	b.n	8004f76 <HAL_DMA_Start_IT+0xb6>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d13a      	bne.n	8004f68 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f9ae 	bl	8005278 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 020e 	orr.w	r2, r2, #14
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e00f      	b.n	8004f56 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0204 	bic.w	r2, r2, #4
 8004f44:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 020a 	orr.w	r2, r2, #10
 8004f54:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e005      	b.n	8004f74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
 8004f72:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d005      	beq.n	8004fa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2204      	movs	r2, #4
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e051      	b.n	8005046 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 020e 	bic.w	r2, r2, #14
 8004fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0201 	bic.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_DMA_Abort_IT+0xd0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d029      	beq.n	8005020 <HAL_DMA_Abort_IT+0xa0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_DMA_Abort_IT+0xd4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_DMA_Abort_IT+0x9c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <HAL_DMA_Abort_IT+0xd8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d01a      	beq.n	8005016 <HAL_DMA_Abort_IT+0x96>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <HAL_DMA_Abort_IT+0xdc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d012      	beq.n	8005010 <HAL_DMA_Abort_IT+0x90>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <HAL_DMA_Abort_IT+0xe0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00a      	beq.n	800500a <HAL_DMA_Abort_IT+0x8a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <HAL_DMA_Abort_IT+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d102      	bne.n	8005004 <HAL_DMA_Abort_IT+0x84>
 8004ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005002:	e00e      	b.n	8005022 <HAL_DMA_Abort_IT+0xa2>
 8005004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005008:	e00b      	b.n	8005022 <HAL_DMA_Abort_IT+0xa2>
 800500a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800500e:	e008      	b.n	8005022 <HAL_DMA_Abort_IT+0xa2>
 8005010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005014:	e005      	b.n	8005022 <HAL_DMA_Abort_IT+0xa2>
 8005016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800501a:	e002      	b.n	8005022 <HAL_DMA_Abort_IT+0xa2>
 800501c:	2310      	movs	r3, #16
 800501e:	e000      	b.n	8005022 <HAL_DMA_Abort_IT+0xa2>
 8005020:	2301      	movs	r3, #1
 8005022:	4a11      	ldr	r2, [pc, #68]	; (8005068 <HAL_DMA_Abort_IT+0xe8>)
 8005024:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
    } 
  }
  return status;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40020008 	.word	0x40020008
 8005054:	4002001c 	.word	0x4002001c
 8005058:	40020030 	.word	0x40020030
 800505c:	40020044 	.word	0x40020044
 8005060:	40020058 	.word	0x40020058
 8005064:	4002006c 	.word	0x4002006c
 8005068:	40020000 	.word	0x40020000

0800506c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	2204      	movs	r2, #4
 800508a:	409a      	lsls	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d04f      	beq.n	8005134 <HAL_DMA_IRQHandler+0xc8>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04a      	beq.n	8005134 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d107      	bne.n	80050bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a66      	ldr	r2, [pc, #408]	; (800525c <HAL_DMA_IRQHandler+0x1f0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d029      	beq.n	800511a <HAL_DMA_IRQHandler+0xae>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a65      	ldr	r2, [pc, #404]	; (8005260 <HAL_DMA_IRQHandler+0x1f4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d022      	beq.n	8005116 <HAL_DMA_IRQHandler+0xaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a63      	ldr	r2, [pc, #396]	; (8005264 <HAL_DMA_IRQHandler+0x1f8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01a      	beq.n	8005110 <HAL_DMA_IRQHandler+0xa4>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a62      	ldr	r2, [pc, #392]	; (8005268 <HAL_DMA_IRQHandler+0x1fc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d012      	beq.n	800510a <HAL_DMA_IRQHandler+0x9e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a60      	ldr	r2, [pc, #384]	; (800526c <HAL_DMA_IRQHandler+0x200>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00a      	beq.n	8005104 <HAL_DMA_IRQHandler+0x98>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a5f      	ldr	r2, [pc, #380]	; (8005270 <HAL_DMA_IRQHandler+0x204>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d102      	bne.n	80050fe <HAL_DMA_IRQHandler+0x92>
 80050f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050fc:	e00e      	b.n	800511c <HAL_DMA_IRQHandler+0xb0>
 80050fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005102:	e00b      	b.n	800511c <HAL_DMA_IRQHandler+0xb0>
 8005104:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005108:	e008      	b.n	800511c <HAL_DMA_IRQHandler+0xb0>
 800510a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800510e:	e005      	b.n	800511c <HAL_DMA_IRQHandler+0xb0>
 8005110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005114:	e002      	b.n	800511c <HAL_DMA_IRQHandler+0xb0>
 8005116:	2340      	movs	r3, #64	; 0x40
 8005118:	e000      	b.n	800511c <HAL_DMA_IRQHandler+0xb0>
 800511a:	2304      	movs	r3, #4
 800511c:	4a55      	ldr	r2, [pc, #340]	; (8005274 <HAL_DMA_IRQHandler+0x208>)
 800511e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8094 	beq.w	8005252 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005132:	e08e      	b.n	8005252 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	2202      	movs	r2, #2
 800513a:	409a      	lsls	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d056      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x186>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d051      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 020a 	bic.w	r2, r2, #10
 800516a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a38      	ldr	r2, [pc, #224]	; (800525c <HAL_DMA_IRQHandler+0x1f0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d029      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x166>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a37      	ldr	r2, [pc, #220]	; (8005260 <HAL_DMA_IRQHandler+0x1f4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d022      	beq.n	80051ce <HAL_DMA_IRQHandler+0x162>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a35      	ldr	r2, [pc, #212]	; (8005264 <HAL_DMA_IRQHandler+0x1f8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01a      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x15c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a34      	ldr	r2, [pc, #208]	; (8005268 <HAL_DMA_IRQHandler+0x1fc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d012      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x156>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a32      	ldr	r2, [pc, #200]	; (800526c <HAL_DMA_IRQHandler+0x200>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00a      	beq.n	80051bc <HAL_DMA_IRQHandler+0x150>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a31      	ldr	r2, [pc, #196]	; (8005270 <HAL_DMA_IRQHandler+0x204>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d102      	bne.n	80051b6 <HAL_DMA_IRQHandler+0x14a>
 80051b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051b4:	e00e      	b.n	80051d4 <HAL_DMA_IRQHandler+0x168>
 80051b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ba:	e00b      	b.n	80051d4 <HAL_DMA_IRQHandler+0x168>
 80051bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051c0:	e008      	b.n	80051d4 <HAL_DMA_IRQHandler+0x168>
 80051c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051c6:	e005      	b.n	80051d4 <HAL_DMA_IRQHandler+0x168>
 80051c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051cc:	e002      	b.n	80051d4 <HAL_DMA_IRQHandler+0x168>
 80051ce:	2320      	movs	r3, #32
 80051d0:	e000      	b.n	80051d4 <HAL_DMA_IRQHandler+0x168>
 80051d2:	2302      	movs	r3, #2
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <HAL_DMA_IRQHandler+0x208>)
 80051d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d034      	beq.n	8005252 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80051f0:	e02f      	b.n	8005252 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2208      	movs	r2, #8
 80051f8:	409a      	lsls	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d028      	beq.n	8005254 <HAL_DMA_IRQHandler+0x1e8>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d023      	beq.n	8005254 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 020e 	bic.w	r2, r2, #14
 800521a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f202 	lsl.w	r2, r1, r2
 800522a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
    }
  }
  return;
 8005252:	bf00      	nop
 8005254:	bf00      	nop
}
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40020008 	.word	0x40020008
 8005260:	4002001c 	.word	0x4002001c
 8005264:	40020030 	.word	0x40020030
 8005268:	40020044 	.word	0x40020044
 800526c:	40020058 	.word	0x40020058
 8005270:	4002006c 	.word	0x4002006c
 8005274:	40020000 	.word	0x40020000

08005278 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f202 	lsl.w	r2, r1, r2
 8005294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d108      	bne.n	80052b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052b6:	e007      	b.n	80052c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b08b      	sub	sp, #44	; 0x2c
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80052e2:	2300      	movs	r3, #0
 80052e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052e6:	e169      	b.n	80055bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80052e8:	2201      	movs	r2, #1
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	429a      	cmp	r2, r3
 8005302:	f040 8158 	bne.w	80055b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4a9a      	ldr	r2, [pc, #616]	; (8005574 <HAL_GPIO_Init+0x2a0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d05e      	beq.n	80053ce <HAL_GPIO_Init+0xfa>
 8005310:	4a98      	ldr	r2, [pc, #608]	; (8005574 <HAL_GPIO_Init+0x2a0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d875      	bhi.n	8005402 <HAL_GPIO_Init+0x12e>
 8005316:	4a98      	ldr	r2, [pc, #608]	; (8005578 <HAL_GPIO_Init+0x2a4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d058      	beq.n	80053ce <HAL_GPIO_Init+0xfa>
 800531c:	4a96      	ldr	r2, [pc, #600]	; (8005578 <HAL_GPIO_Init+0x2a4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d86f      	bhi.n	8005402 <HAL_GPIO_Init+0x12e>
 8005322:	4a96      	ldr	r2, [pc, #600]	; (800557c <HAL_GPIO_Init+0x2a8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d052      	beq.n	80053ce <HAL_GPIO_Init+0xfa>
 8005328:	4a94      	ldr	r2, [pc, #592]	; (800557c <HAL_GPIO_Init+0x2a8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d869      	bhi.n	8005402 <HAL_GPIO_Init+0x12e>
 800532e:	4a94      	ldr	r2, [pc, #592]	; (8005580 <HAL_GPIO_Init+0x2ac>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d04c      	beq.n	80053ce <HAL_GPIO_Init+0xfa>
 8005334:	4a92      	ldr	r2, [pc, #584]	; (8005580 <HAL_GPIO_Init+0x2ac>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d863      	bhi.n	8005402 <HAL_GPIO_Init+0x12e>
 800533a:	4a92      	ldr	r2, [pc, #584]	; (8005584 <HAL_GPIO_Init+0x2b0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d046      	beq.n	80053ce <HAL_GPIO_Init+0xfa>
 8005340:	4a90      	ldr	r2, [pc, #576]	; (8005584 <HAL_GPIO_Init+0x2b0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d85d      	bhi.n	8005402 <HAL_GPIO_Init+0x12e>
 8005346:	2b12      	cmp	r3, #18
 8005348:	d82a      	bhi.n	80053a0 <HAL_GPIO_Init+0xcc>
 800534a:	2b12      	cmp	r3, #18
 800534c:	d859      	bhi.n	8005402 <HAL_GPIO_Init+0x12e>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_GPIO_Init+0x80>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	080053cf 	.word	0x080053cf
 8005358:	080053a9 	.word	0x080053a9
 800535c:	080053bb 	.word	0x080053bb
 8005360:	080053fd 	.word	0x080053fd
 8005364:	08005403 	.word	0x08005403
 8005368:	08005403 	.word	0x08005403
 800536c:	08005403 	.word	0x08005403
 8005370:	08005403 	.word	0x08005403
 8005374:	08005403 	.word	0x08005403
 8005378:	08005403 	.word	0x08005403
 800537c:	08005403 	.word	0x08005403
 8005380:	08005403 	.word	0x08005403
 8005384:	08005403 	.word	0x08005403
 8005388:	08005403 	.word	0x08005403
 800538c:	08005403 	.word	0x08005403
 8005390:	08005403 	.word	0x08005403
 8005394:	08005403 	.word	0x08005403
 8005398:	080053b1 	.word	0x080053b1
 800539c:	080053c5 	.word	0x080053c5
 80053a0:	4a79      	ldr	r2, [pc, #484]	; (8005588 <HAL_GPIO_Init+0x2b4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053a6:	e02c      	b.n	8005402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	623b      	str	r3, [r7, #32]
          break;
 80053ae:	e029      	b.n	8005404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	3304      	adds	r3, #4
 80053b6:	623b      	str	r3, [r7, #32]
          break;
 80053b8:	e024      	b.n	8005404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	3308      	adds	r3, #8
 80053c0:	623b      	str	r3, [r7, #32]
          break;
 80053c2:	e01f      	b.n	8005404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	330c      	adds	r3, #12
 80053ca:	623b      	str	r3, [r7, #32]
          break;
 80053cc:	e01a      	b.n	8005404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80053d6:	2304      	movs	r3, #4
 80053d8:	623b      	str	r3, [r7, #32]
          break;
 80053da:	e013      	b.n	8005404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d105      	bne.n	80053f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053e4:	2308      	movs	r3, #8
 80053e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	611a      	str	r2, [r3, #16]
          break;
 80053ee:	e009      	b.n	8005404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053f0:	2308      	movs	r3, #8
 80053f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	615a      	str	r2, [r3, #20]
          break;
 80053fa:	e003      	b.n	8005404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80053fc:	2300      	movs	r3, #0
 80053fe:	623b      	str	r3, [r7, #32]
          break;
 8005400:	e000      	b.n	8005404 <HAL_GPIO_Init+0x130>
          break;
 8005402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2bff      	cmp	r3, #255	; 0xff
 8005408:	d801      	bhi.n	800540e <HAL_GPIO_Init+0x13a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	e001      	b.n	8005412 <HAL_GPIO_Init+0x13e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2bff      	cmp	r3, #255	; 0xff
 8005418:	d802      	bhi.n	8005420 <HAL_GPIO_Init+0x14c>
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	e002      	b.n	8005426 <HAL_GPIO_Init+0x152>
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	3b08      	subs	r3, #8
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	210f      	movs	r1, #15
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	401a      	ands	r2, r3
 8005438:	6a39      	ldr	r1, [r7, #32]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	431a      	orrs	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80b1 	beq.w	80055b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005454:	4b4d      	ldr	r3, [pc, #308]	; (800558c <HAL_GPIO_Init+0x2b8>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	4a4c      	ldr	r2, [pc, #304]	; (800558c <HAL_GPIO_Init+0x2b8>)
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	6193      	str	r3, [r2, #24]
 8005460:	4b4a      	ldr	r3, [pc, #296]	; (800558c <HAL_GPIO_Init+0x2b8>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800546c:	4a48      	ldr	r2, [pc, #288]	; (8005590 <HAL_GPIO_Init+0x2bc>)
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	220f      	movs	r2, #15
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4013      	ands	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a40      	ldr	r2, [pc, #256]	; (8005594 <HAL_GPIO_Init+0x2c0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_GPIO_Init+0x1ec>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a3f      	ldr	r2, [pc, #252]	; (8005598 <HAL_GPIO_Init+0x2c4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00d      	beq.n	80054bc <HAL_GPIO_Init+0x1e8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3e      	ldr	r2, [pc, #248]	; (800559c <HAL_GPIO_Init+0x2c8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <HAL_GPIO_Init+0x1e4>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <HAL_GPIO_Init+0x2cc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_GPIO_Init+0x1e0>
 80054b0:	2303      	movs	r3, #3
 80054b2:	e006      	b.n	80054c2 <HAL_GPIO_Init+0x1ee>
 80054b4:	2304      	movs	r3, #4
 80054b6:	e004      	b.n	80054c2 <HAL_GPIO_Init+0x1ee>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e002      	b.n	80054c2 <HAL_GPIO_Init+0x1ee>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_GPIO_Init+0x1ee>
 80054c0:	2300      	movs	r3, #0
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	f002 0203 	and.w	r2, r2, #3
 80054c8:	0092      	lsls	r2, r2, #2
 80054ca:	4093      	lsls	r3, r2
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80054d2:	492f      	ldr	r1, [pc, #188]	; (8005590 <HAL_GPIO_Init+0x2bc>)
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	3302      	adds	r3, #2
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d006      	beq.n	80054fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80054ec:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	492c      	ldr	r1, [pc, #176]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	600b      	str	r3, [r1, #0]
 80054f8:	e006      	b.n	8005508 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80054fa:	4b2a      	ldr	r3, [pc, #168]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	43db      	mvns	r3, r3
 8005502:	4928      	ldr	r1, [pc, #160]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 8005504:	4013      	ands	r3, r2
 8005506:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d006      	beq.n	8005522 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005514:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4922      	ldr	r1, [pc, #136]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	4313      	orrs	r3, r2
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	e006      	b.n	8005530 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005522:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	43db      	mvns	r3, r3
 800552a:	491e      	ldr	r1, [pc, #120]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 800552c:	4013      	ands	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800553c:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4918      	ldr	r1, [pc, #96]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	4313      	orrs	r3, r2
 8005546:	608b      	str	r3, [r1, #8]
 8005548:	e006      	b.n	8005558 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800554a:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	43db      	mvns	r3, r3
 8005552:	4914      	ldr	r1, [pc, #80]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 8005554:	4013      	ands	r3, r2
 8005556:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d021      	beq.n	80055a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005564:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	490e      	ldr	r1, [pc, #56]	; (80055a4 <HAL_GPIO_Init+0x2d0>)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	4313      	orrs	r3, r2
 800556e:	60cb      	str	r3, [r1, #12]
 8005570:	e021      	b.n	80055b6 <HAL_GPIO_Init+0x2e2>
 8005572:	bf00      	nop
 8005574:	10320000 	.word	0x10320000
 8005578:	10310000 	.word	0x10310000
 800557c:	10220000 	.word	0x10220000
 8005580:	10210000 	.word	0x10210000
 8005584:	10120000 	.word	0x10120000
 8005588:	10110000 	.word	0x10110000
 800558c:	40021000 	.word	0x40021000
 8005590:	40010000 	.word	0x40010000
 8005594:	40010800 	.word	0x40010800
 8005598:	40010c00 	.word	0x40010c00
 800559c:	40011000 	.word	0x40011000
 80055a0:	40011400 	.word	0x40011400
 80055a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_GPIO_Init+0x304>)
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	4909      	ldr	r1, [pc, #36]	; (80055d8 <HAL_GPIO_Init+0x304>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	3301      	adds	r3, #1
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f47f ae8e 	bne.w	80052e8 <HAL_GPIO_Init+0x14>
  }
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	372c      	adds	r7, #44	; 0x2c
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	40010400 	.word	0x40010400

080055dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	887b      	ldrh	r3, [r7, #2]
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e001      	b.n	80055fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	807b      	strh	r3, [r7, #2]
 8005616:	4613      	mov	r3, r2
 8005618:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800561a:	787b      	ldrb	r3, [r7, #1]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005620:	887a      	ldrh	r2, [r7, #2]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005626:	e003      	b.n	8005630 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005628:	887b      	ldrh	r3, [r7, #2]
 800562a:	041a      	lsls	r2, r3, #16
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	611a      	str	r2, [r3, #16]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
	...

0800563c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d006      	beq.n	8005660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005652:	4a05      	ldr	r2, [pc, #20]	; (8005668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc fbfa 	bl	8001e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40010400 	.word	0x40010400

0800566c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e12b      	b.n	80058d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fc fede 	bl	8002454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2224      	movs	r2, #36	; 0x24
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0201 	bic.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056d0:	f000 fff6 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 80056d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4a81      	ldr	r2, [pc, #516]	; (80058e0 <HAL_I2C_Init+0x274>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d807      	bhi.n	80056f0 <HAL_I2C_Init+0x84>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a80      	ldr	r2, [pc, #512]	; (80058e4 <HAL_I2C_Init+0x278>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bf94      	ite	ls
 80056e8:	2301      	movls	r3, #1
 80056ea:	2300      	movhi	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e006      	b.n	80056fe <HAL_I2C_Init+0x92>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4a7d      	ldr	r2, [pc, #500]	; (80058e8 <HAL_I2C_Init+0x27c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	bf94      	ite	ls
 80056f8:	2301      	movls	r3, #1
 80056fa:	2300      	movhi	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e0e7      	b.n	80058d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a78      	ldr	r2, [pc, #480]	; (80058ec <HAL_I2C_Init+0x280>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	0c9b      	lsrs	r3, r3, #18
 8005710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4a6a      	ldr	r2, [pc, #424]	; (80058e0 <HAL_I2C_Init+0x274>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d802      	bhi.n	8005740 <HAL_I2C_Init+0xd4>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	3301      	adds	r3, #1
 800573e:	e009      	b.n	8005754 <HAL_I2C_Init+0xe8>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	4a69      	ldr	r2, [pc, #420]	; (80058f0 <HAL_I2C_Init+0x284>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	099b      	lsrs	r3, r3, #6
 8005752:	3301      	adds	r3, #1
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	430b      	orrs	r3, r1
 800575a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	495c      	ldr	r1, [pc, #368]	; (80058e0 <HAL_I2C_Init+0x274>)
 8005770:	428b      	cmp	r3, r1
 8005772:	d819      	bhi.n	80057a8 <HAL_I2C_Init+0x13c>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1e59      	subs	r1, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005788:	400b      	ands	r3, r1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_I2C_Init+0x138>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1e59      	subs	r1, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fbb1 f3f3 	udiv	r3, r1, r3
 800579c:	3301      	adds	r3, #1
 800579e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a2:	e051      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 80057a4:	2304      	movs	r3, #4
 80057a6:	e04f      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d111      	bne.n	80057d4 <HAL_I2C_Init+0x168>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1e58      	subs	r0, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6859      	ldr	r1, [r3, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	440b      	add	r3, r1
 80057be:	fbb0 f3f3 	udiv	r3, r0, r3
 80057c2:	3301      	adds	r3, #1
 80057c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e012      	b.n	80057fa <HAL_I2C_Init+0x18e>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1e58      	subs	r0, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	0099      	lsls	r1, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_I2C_Init+0x196>
 80057fe:	2301      	movs	r3, #1
 8005800:	e022      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10e      	bne.n	8005828 <HAL_I2C_Init+0x1bc>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1e58      	subs	r0, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	440b      	add	r3, r1
 8005818:	fbb0 f3f3 	udiv	r3, r0, r3
 800581c:	3301      	adds	r3, #1
 800581e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	e00f      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	1e58      	subs	r0, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6859      	ldr	r1, [r3, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	0099      	lsls	r1, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	fbb0 f3f3 	udiv	r3, r0, r3
 800583e:	3301      	adds	r3, #1
 8005840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	6809      	ldr	r1, [r1, #0]
 800584c:	4313      	orrs	r3, r2
 800584e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6911      	ldr	r1, [r2, #16]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68d2      	ldr	r2, [r2, #12]
 8005882:	4311      	orrs	r1, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	430b      	orrs	r3, r1
 800588a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	000186a0 	.word	0x000186a0
 80058e4:	001e847f 	.word	0x001e847f
 80058e8:	003d08ff 	.word	0x003d08ff
 80058ec:	431bde83 	.word	0x431bde83
 80058f0:	10624dd3 	.word	0x10624dd3

080058f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	461a      	mov	r2, r3
 8005900:	460b      	mov	r3, r1
 8005902:	817b      	strh	r3, [r7, #10]
 8005904:	4613      	mov	r3, r2
 8005906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005908:	f7ff f944 	bl	8004b94 <HAL_GetTick>
 800590c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b20      	cmp	r3, #32
 8005918:	f040 80e0 	bne.w	8005adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	2319      	movs	r3, #25
 8005922:	2201      	movs	r2, #1
 8005924:	4970      	ldr	r1, [pc, #448]	; (8005ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f964 	bl	8005bf4 <I2C_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
 8005934:	e0d3      	b.n	8005ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_I2C_Master_Transmit+0x50>
 8005940:	2302      	movs	r3, #2
 8005942:	e0cc      	b.n	8005ade <HAL_I2C_Master_Transmit+0x1ea>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	d007      	beq.n	800596a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2221      	movs	r2, #33	; 0x21
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2210      	movs	r2, #16
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	893a      	ldrh	r2, [r7, #8]
 800599a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a50      	ldr	r2, [pc, #320]	; (8005aec <HAL_I2C_Master_Transmit+0x1f8>)
 80059aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059ac:	8979      	ldrh	r1, [r7, #10]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f89c 	bl	8005af0 <I2C_MasterRequestWrite>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e08d      	b.n	8005ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80059d8:	e066      	b.n	8005aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	6a39      	ldr	r1, [r7, #32]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f9de 	bl	8005da0 <I2C_WaitOnTXEFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d107      	bne.n	8005a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e06b      	b.n	8005ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d11b      	bne.n	8005a7c <HAL_I2C_Master_Transmit+0x188>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d017      	beq.n	8005a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	781a      	ldrb	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	6a39      	ldr	r1, [r7, #32]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f9ce 	bl	8005e22 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00d      	beq.n	8005aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d107      	bne.n	8005aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e01a      	b.n	8005ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d194      	bne.n	80059da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e000      	b.n	8005ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	00100002 	.word	0x00100002
 8005aec:	ffff0000 	.word	0xffff0000

08005af0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	460b      	mov	r3, r1
 8005afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d006      	beq.n	8005b1a <I2C_MasterRequestWrite+0x2a>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d003      	beq.n	8005b1a <I2C_MasterRequestWrite+0x2a>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b18:	d108      	bne.n	8005b2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e00b      	b.n	8005b44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	2b12      	cmp	r3, #18
 8005b32:	d107      	bne.n	8005b44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f84f 	bl	8005bf4 <I2C_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	d103      	bne.n	8005b74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e035      	b.n	8005be4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b80:	d108      	bne.n	8005b94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b82:	897b      	ldrh	r3, [r7, #10]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b90:	611a      	str	r2, [r3, #16]
 8005b92:	e01b      	b.n	8005bcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b94:	897b      	ldrh	r3, [r7, #10]
 8005b96:	11db      	asrs	r3, r3, #7
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f003 0306 	and.w	r3, r3, #6
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f063 030f 	orn	r3, r3, #15
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	490e      	ldr	r1, [pc, #56]	; (8005bec <I2C_MasterRequestWrite+0xfc>)
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f875 	bl	8005ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e010      	b.n	8005be4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4907      	ldr	r1, [pc, #28]	; (8005bf0 <I2C_MasterRequestWrite+0x100>)
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f865 	bl	8005ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	00010008 	.word	0x00010008
 8005bf0:	00010002 	.word	0x00010002

08005bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c04:	e025      	b.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d021      	beq.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0e:	f7fe ffc1 	bl	8004b94 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d116      	bne.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f043 0220 	orr.w	r2, r3, #32
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e023      	b.n	8005c9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d10d      	bne.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	43da      	mvns	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	e00c      	b.n	8005c92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	43da      	mvns	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bf0c      	ite	eq
 8005c8a:	2301      	moveq	r3, #1
 8005c8c:	2300      	movne	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d0b6      	beq.n	8005c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cb0:	e051      	b.n	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc0:	d123      	bne.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f043 0204 	orr.w	r2, r3, #4
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e046      	b.n	8005d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d021      	beq.n	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fe ff3f 	bl	8004b94 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d116      	bne.n	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e020      	b.n	8005d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10c      	bne.n	8005d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	43da      	mvns	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf14      	ite	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	2300      	moveq	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	e00b      	b.n	8005d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	43da      	mvns	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	4013      	ands	r3, r2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bf14      	ite	ne
 8005d8c:	2301      	movne	r3, #1
 8005d8e:	2300      	moveq	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d18d      	bne.n	8005cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dac:	e02d      	b.n	8005e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f878 	bl	8005ea4 <I2C_IsAcknowledgeFailed>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e02d      	b.n	8005e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d021      	beq.n	8005e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc6:	f7fe fee5 	bl	8004b94 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d116      	bne.n	8005e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e007      	b.n	8005e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	2b80      	cmp	r3, #128	; 0x80
 8005e16:	d1ca      	bne.n	8005dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e2e:	e02d      	b.n	8005e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f837 	bl	8005ea4 <I2C_IsAcknowledgeFailed>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e02d      	b.n	8005e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d021      	beq.n	8005e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e48:	f7fe fea4 	bl	8004b94 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d302      	bcc.n	8005e5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d116      	bne.n	8005e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	f043 0220 	orr.w	r2, r3, #32
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e007      	b.n	8005e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d1ca      	bne.n	8005e30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eba:	d11b      	bne.n	8005ef4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f043 0204 	orr.w	r2, r3, #4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	420e0020 	.word	0x420e0020

08005f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e272      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8087 	beq.w	8006046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f38:	4b92      	ldr	r3, [pc, #584]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 030c 	and.w	r3, r3, #12
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d00c      	beq.n	8005f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f44:	4b8f      	ldr	r3, [pc, #572]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 030c 	and.w	r3, r3, #12
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d112      	bne.n	8005f76 <HAL_RCC_OscConfig+0x5e>
 8005f50:	4b8c      	ldr	r3, [pc, #560]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d10b      	bne.n	8005f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5e:	4b89      	ldr	r3, [pc, #548]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d06c      	beq.n	8006044 <HAL_RCC_OscConfig+0x12c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d168      	bne.n	8006044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e24c      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCC_OscConfig+0x76>
 8005f80:	4b80      	ldr	r3, [pc, #512]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a7f      	ldr	r2, [pc, #508]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	e02e      	b.n	8005fec <HAL_RCC_OscConfig+0xd4>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x98>
 8005f96:	4b7b      	ldr	r3, [pc, #492]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a7a      	ldr	r2, [pc, #488]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b78      	ldr	r3, [pc, #480]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a77      	ldr	r2, [pc, #476]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	e01d      	b.n	8005fec <HAL_RCC_OscConfig+0xd4>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fb8:	d10c      	bne.n	8005fd4 <HAL_RCC_OscConfig+0xbc>
 8005fba:	4b72      	ldr	r3, [pc, #456]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a71      	ldr	r2, [pc, #452]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	4b6f      	ldr	r3, [pc, #444]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a6e      	ldr	r2, [pc, #440]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	e00b      	b.n	8005fec <HAL_RCC_OscConfig+0xd4>
 8005fd4:	4b6b      	ldr	r3, [pc, #428]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a6a      	ldr	r2, [pc, #424]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	4b68      	ldr	r3, [pc, #416]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a67      	ldr	r2, [pc, #412]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8005fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d013      	beq.n	800601c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff4:	f7fe fdce 	bl	8004b94 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ffc:	f7fe fdca 	bl	8004b94 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b64      	cmp	r3, #100	; 0x64
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e200      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600e:	4b5d      	ldr	r3, [pc, #372]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0f0      	beq.n	8005ffc <HAL_RCC_OscConfig+0xe4>
 800601a:	e014      	b.n	8006046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601c:	f7fe fdba 	bl	8004b94 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006024:	f7fe fdb6 	bl	8004b94 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b64      	cmp	r3, #100	; 0x64
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e1ec      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006036:	4b53      	ldr	r3, [pc, #332]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x10c>
 8006042:	e000      	b.n	8006046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d063      	beq.n	800611a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006052:	4b4c      	ldr	r3, [pc, #304]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 030c 	and.w	r3, r3, #12
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800605e:	4b49      	ldr	r3, [pc, #292]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b08      	cmp	r3, #8
 8006068:	d11c      	bne.n	80060a4 <HAL_RCC_OscConfig+0x18c>
 800606a:	4b46      	ldr	r3, [pc, #280]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d116      	bne.n	80060a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006076:	4b43      	ldr	r3, [pc, #268]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_RCC_OscConfig+0x176>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d001      	beq.n	800608e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e1c0      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608e:	4b3d      	ldr	r3, [pc, #244]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4939      	ldr	r1, [pc, #228]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a2:	e03a      	b.n	800611a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ac:	4b36      	ldr	r3, [pc, #216]	; (8006188 <HAL_RCC_OscConfig+0x270>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b2:	f7fe fd6f 	bl	8004b94 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ba:	f7fe fd6b 	bl	8004b94 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e1a1      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060cc:	4b2d      	ldr	r3, [pc, #180]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d8:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4927      	ldr	r1, [pc, #156]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]
 80060ec:	e015      	b.n	800611a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ee:	4b26      	ldr	r3, [pc, #152]	; (8006188 <HAL_RCC_OscConfig+0x270>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fe fd4e 	bl	8004b94 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fc:	f7fe fd4a 	bl	8004b94 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e180      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d03a      	beq.n	800619c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d019      	beq.n	8006162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800612e:	4b17      	ldr	r3, [pc, #92]	; (800618c <HAL_RCC_OscConfig+0x274>)
 8006130:	2201      	movs	r2, #1
 8006132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006134:	f7fe fd2e 	bl	8004b94 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800613c:	f7fe fd2a 	bl	8004b94 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e160      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_RCC_OscConfig+0x26c>)
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f0      	beq.n	800613c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800615a:	2001      	movs	r0, #1
 800615c:	f000 fad8 	bl	8006710 <RCC_Delay>
 8006160:	e01c      	b.n	800619c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <HAL_RCC_OscConfig+0x274>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006168:	f7fe fd14 	bl	8004b94 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800616e:	e00f      	b.n	8006190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006170:	f7fe fd10 	bl	8004b94 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d908      	bls.n	8006190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e146      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
 8006182:	bf00      	nop
 8006184:	40021000 	.word	0x40021000
 8006188:	42420000 	.word	0x42420000
 800618c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006190:	4b92      	ldr	r3, [pc, #584]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e9      	bne.n	8006170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80a6 	beq.w	80062f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ae:	4b8b      	ldr	r3, [pc, #556]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10d      	bne.n	80061d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ba:	4b88      	ldr	r3, [pc, #544]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	4a87      	ldr	r2, [pc, #540]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80061c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c4:	61d3      	str	r3, [r2, #28]
 80061c6:	4b85      	ldr	r3, [pc, #532]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ce:	60bb      	str	r3, [r7, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d6:	4b82      	ldr	r3, [pc, #520]	; (80063e0 <HAL_RCC_OscConfig+0x4c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d118      	bne.n	8006214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061e2:	4b7f      	ldr	r3, [pc, #508]	; (80063e0 <HAL_RCC_OscConfig+0x4c8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a7e      	ldr	r2, [pc, #504]	; (80063e0 <HAL_RCC_OscConfig+0x4c8>)
 80061e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ee:	f7fe fcd1 	bl	8004b94 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f6:	f7fe fccd 	bl	8004b94 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b64      	cmp	r3, #100	; 0x64
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e103      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006208:	4b75      	ldr	r3, [pc, #468]	; (80063e0 <HAL_RCC_OscConfig+0x4c8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d106      	bne.n	800622a <HAL_RCC_OscConfig+0x312>
 800621c:	4b6f      	ldr	r3, [pc, #444]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	4a6e      	ldr	r2, [pc, #440]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6213      	str	r3, [r2, #32]
 8006228:	e02d      	b.n	8006286 <HAL_RCC_OscConfig+0x36e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0x334>
 8006232:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	4a69      	ldr	r2, [pc, #420]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006238:	f023 0301 	bic.w	r3, r3, #1
 800623c:	6213      	str	r3, [r2, #32]
 800623e:	4b67      	ldr	r3, [pc, #412]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	4a66      	ldr	r2, [pc, #408]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006244:	f023 0304 	bic.w	r3, r3, #4
 8006248:	6213      	str	r3, [r2, #32]
 800624a:	e01c      	b.n	8006286 <HAL_RCC_OscConfig+0x36e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b05      	cmp	r3, #5
 8006252:	d10c      	bne.n	800626e <HAL_RCC_OscConfig+0x356>
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	4a60      	ldr	r2, [pc, #384]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 800625a:	f043 0304 	orr.w	r3, r3, #4
 800625e:	6213      	str	r3, [r2, #32]
 8006260:	4b5e      	ldr	r3, [pc, #376]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	4a5d      	ldr	r2, [pc, #372]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	6213      	str	r3, [r2, #32]
 800626c:	e00b      	b.n	8006286 <HAL_RCC_OscConfig+0x36e>
 800626e:	4b5b      	ldr	r3, [pc, #364]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	4a5a      	ldr	r2, [pc, #360]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6213      	str	r3, [r2, #32]
 800627a:	4b58      	ldr	r3, [pc, #352]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	4a57      	ldr	r2, [pc, #348]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d015      	beq.n	80062ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800628e:	f7fe fc81 	bl	8004b94 <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006294:	e00a      	b.n	80062ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006296:	f7fe fc7d 	bl	8004b94 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e0b1      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ac:	4b4b      	ldr	r3, [pc, #300]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ee      	beq.n	8006296 <HAL_RCC_OscConfig+0x37e>
 80062b8:	e014      	b.n	80062e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ba:	f7fe fc6b 	bl	8004b94 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fe fc67 	bl	8004b94 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e09b      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d8:	4b40      	ldr	r3, [pc, #256]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1ee      	bne.n	80062c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d105      	bne.n	80062f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ea:	4b3c      	ldr	r3, [pc, #240]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	4a3b      	ldr	r2, [pc, #236]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80062f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8087 	beq.w	800640e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f003 030c 	and.w	r3, r3, #12
 8006308:	2b08      	cmp	r3, #8
 800630a:	d061      	beq.n	80063d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d146      	bne.n	80063a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006314:	4b33      	ldr	r3, [pc, #204]	; (80063e4 <HAL_RCC_OscConfig+0x4cc>)
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fe fc3b 	bl	8004b94 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006322:	f7fe fc37 	bl	8004b94 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e06d      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006334:	4b29      	ldr	r3, [pc, #164]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f0      	bne.n	8006322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006348:	d108      	bne.n	800635c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800634a:	4b24      	ldr	r3, [pc, #144]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4921      	ldr	r1, [pc, #132]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800635c:	4b1f      	ldr	r3, [pc, #124]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a19      	ldr	r1, [r3, #32]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	430b      	orrs	r3, r1
 800636e:	491b      	ldr	r1, [pc, #108]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006370:	4313      	orrs	r3, r2
 8006372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <HAL_RCC_OscConfig+0x4cc>)
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637a:	f7fe fc0b 	bl	8004b94 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006382:	f7fe fc07 	bl	8004b94 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e03d      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006394:	4b11      	ldr	r3, [pc, #68]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <HAL_RCC_OscConfig+0x46a>
 80063a0:	e035      	b.n	800640e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <HAL_RCC_OscConfig+0x4cc>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a8:	f7fe fbf4 	bl	8004b94 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b0:	f7fe fbf0 	bl	8004b94 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e026      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_RCC_OscConfig+0x4c4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x498>
 80063ce:	e01e      	b.n	800640e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d107      	bne.n	80063e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e019      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
 80063dc:	40021000 	.word	0x40021000
 80063e0:	40007000 	.word	0x40007000
 80063e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCC_OscConfig+0x500>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d106      	bne.n	800640a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006406:	429a      	cmp	r2, r3
 8006408:	d001      	beq.n	800640e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40021000 	.word	0x40021000

0800641c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0d0      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006430:	4b6a      	ldr	r3, [pc, #424]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d910      	bls.n	8006460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643e:	4b67      	ldr	r3, [pc, #412]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 0207 	bic.w	r2, r3, #7
 8006446:	4965      	ldr	r1, [pc, #404]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	4313      	orrs	r3, r2
 800644c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800644e:	4b63      	ldr	r3, [pc, #396]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0b8      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d020      	beq.n	80064ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006478:	4b59      	ldr	r3, [pc, #356]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4a58      	ldr	r2, [pc, #352]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 800647e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006490:	4b53      	ldr	r3, [pc, #332]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4a52      	ldr	r2, [pc, #328]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006496:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800649a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800649c:	4b50      	ldr	r3, [pc, #320]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	494d      	ldr	r1, [pc, #308]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d040      	beq.n	800653c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d107      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c2:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d115      	bne.n	80064fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e07f      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d107      	bne.n	80064ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064da:	4b41      	ldr	r3, [pc, #260]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e073      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ea:	4b3d      	ldr	r3, [pc, #244]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e06b      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064fa:	4b39      	ldr	r3, [pc, #228]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f023 0203 	bic.w	r2, r3, #3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4936      	ldr	r1, [pc, #216]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006508:	4313      	orrs	r3, r2
 800650a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800650c:	f7fe fb42 	bl	8004b94 <HAL_GetTick>
 8006510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006512:	e00a      	b.n	800652a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006514:	f7fe fb3e 	bl	8004b94 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006522:	4293      	cmp	r3, r2
 8006524:	d901      	bls.n	800652a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e053      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652a:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 020c 	and.w	r2, r3, #12
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	429a      	cmp	r2, r3
 800653a:	d1eb      	bne.n	8006514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800653c:	4b27      	ldr	r3, [pc, #156]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d210      	bcs.n	800656c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654a:	4b24      	ldr	r3, [pc, #144]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f023 0207 	bic.w	r2, r3, #7
 8006552:	4922      	ldr	r1, [pc, #136]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	4313      	orrs	r3, r2
 8006558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655a:	4b20      	ldr	r3, [pc, #128]	; (80065dc <HAL_RCC_ClockConfig+0x1c0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e032      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006578:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	4916      	ldr	r1, [pc, #88]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006586:	4313      	orrs	r3, r2
 8006588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	490e      	ldr	r1, [pc, #56]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065aa:	f000 f821 	bl	80065f0 <HAL_RCC_GetSysClockFreq>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <HAL_RCC_ClockConfig+0x1c4>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	091b      	lsrs	r3, r3, #4
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	490a      	ldr	r1, [pc, #40]	; (80065e4 <HAL_RCC_ClockConfig+0x1c8>)
 80065bc:	5ccb      	ldrb	r3, [r1, r3]
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	4a09      	ldr	r2, [pc, #36]	; (80065e8 <HAL_RCC_ClockConfig+0x1cc>)
 80065c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <HAL_RCC_ClockConfig+0x1d0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe faa0 	bl	8004b10 <HAL_InitTick>

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40022000 	.word	0x40022000
 80065e0:	40021000 	.word	0x40021000
 80065e4:	080090e8 	.word	0x080090e8
 80065e8:	20000004 	.word	0x20000004
 80065ec:	20000008 	.word	0x20000008

080065f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f0:	b490      	push	{r4, r7}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065f6:	4b29      	ldr	r3, [pc, #164]	; (800669c <HAL_RCC_GetSysClockFreq+0xac>)
 80065f8:	1d3c      	adds	r4, r7, #4
 80065fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006600:	f240 2301 	movw	r3, #513	; 0x201
 8006604:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	2300      	movs	r3, #0
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800661a:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 030c 	and.w	r3, r3, #12
 8006626:	2b04      	cmp	r3, #4
 8006628:	d002      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x40>
 800662a:	2b08      	cmp	r3, #8
 800662c:	d003      	beq.n	8006636 <HAL_RCC_GetSysClockFreq+0x46>
 800662e:	e02b      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006632:	623b      	str	r3, [r7, #32]
      break;
 8006634:	e02b      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	0c9b      	lsrs	r3, r3, #18
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	3328      	adds	r3, #40	; 0x28
 8006640:	443b      	add	r3, r7
 8006642:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006646:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d012      	beq.n	8006678 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006652:	4b13      	ldr	r3, [pc, #76]	; (80066a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	0c5b      	lsrs	r3, r3, #17
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	3328      	adds	r3, #40	; 0x28
 800665e:	443b      	add	r3, r7
 8006660:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006664:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800666a:	fb03 f202 	mul.w	r2, r3, r2
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
 8006676:	e004      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800667c:	fb02 f303 	mul.w	r3, r2, r3
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	623b      	str	r3, [r7, #32]
      break;
 8006686:	e002      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006688:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800668a:	623b      	str	r3, [r7, #32]
      break;
 800668c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668e:	6a3b      	ldr	r3, [r7, #32]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3728      	adds	r7, #40	; 0x28
 8006694:	46bd      	mov	sp, r7
 8006696:	bc90      	pop	{r4, r7}
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	080090c8 	.word	0x080090c8
 80066a0:	40021000 	.word	0x40021000
 80066a4:	007a1200 	.word	0x007a1200
 80066a8:	003d0900 	.word	0x003d0900

080066ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b0:	4b02      	ldr	r3, [pc, #8]	; (80066bc <HAL_RCC_GetHCLKFreq+0x10>)
 80066b2:	681b      	ldr	r3, [r3, #0]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr
 80066bc:	20000004 	.word	0x20000004

080066c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066c4:	f7ff fff2 	bl	80066ac <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4903      	ldr	r1, [pc, #12]	; (80066e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40021000 	.word	0x40021000
 80066e4:	080090f8 	.word	0x080090f8

080066e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066ec:	f7ff ffde 	bl	80066ac <HAL_RCC_GetHCLKFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	0adb      	lsrs	r3, r3, #11
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	4903      	ldr	r1, [pc, #12]	; (800670c <HAL_RCC_GetPCLK2Freq+0x24>)
 80066fe:	5ccb      	ldrb	r3, [r1, r3]
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006704:	4618      	mov	r0, r3
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40021000 	.word	0x40021000
 800670c:	080090f8 	.word	0x080090f8

08006710 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <RCC_Delay+0x34>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <RCC_Delay+0x38>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0a5b      	lsrs	r3, r3, #9
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800672c:	bf00      	nop
  }
  while (Delay --);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1e5a      	subs	r2, r3, #1
 8006732:	60fa      	str	r2, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f9      	bne.n	800672c <RCC_Delay+0x1c>
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr
 8006744:	20000004 	.word	0x20000004
 8006748:	10624dd3 	.word	0x10624dd3

0800674c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d07d      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800676c:	4b4f      	ldr	r3, [pc, #316]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10d      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006778:	4b4c      	ldr	r3, [pc, #304]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4a4b      	ldr	r2, [pc, #300]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006782:	61d3      	str	r3, [r2, #28]
 8006784:	4b49      	ldr	r3, [pc, #292]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006790:	2301      	movs	r3, #1
 8006792:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006794:	4b46      	ldr	r3, [pc, #280]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679c:	2b00      	cmp	r3, #0
 800679e:	d118      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a0:	4b43      	ldr	r3, [pc, #268]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a42      	ldr	r2, [pc, #264]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ac:	f7fe f9f2 	bl	8004b94 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b2:	e008      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067b4:	f7fe f9ee 	bl	8004b94 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b64      	cmp	r3, #100	; 0x64
 80067c0:	d901      	bls.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e06d      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c6:	4b3a      	ldr	r3, [pc, #232]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067d2:	4b36      	ldr	r3, [pc, #216]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d02e      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d027      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067f0:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067fa:	4b2e      	ldr	r3, [pc, #184]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006800:	4b2c      	ldr	r3, [pc, #176]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006806:	4a29      	ldr	r2, [pc, #164]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d014      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006816:	f7fe f9bd 	bl	8004b94 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681c:	e00a      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681e:	f7fe f9b9 	bl	8004b94 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f241 3288 	movw	r2, #5000	; 0x1388
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e036      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0ee      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4917      	ldr	r1, [pc, #92]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800684e:	4313      	orrs	r3, r2
 8006850:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d105      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006858:	4b14      	ldr	r3, [pc, #80]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	4a13      	ldr	r2, [pc, #76]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006862:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006870:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	490b      	ldr	r1, [pc, #44]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800687e:	4313      	orrs	r3, r2
 8006880:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800688e:	4b07      	ldr	r3, [pc, #28]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	4904      	ldr	r1, [pc, #16]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40007000 	.word	0x40007000
 80068b4:	42420440 	.word	0x42420440

080068b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b08d      	sub	sp, #52	; 0x34
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068c0:	4b58      	ldr	r3, [pc, #352]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80068c2:	f107 040c 	add.w	r4, r7, #12
 80068c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068cc:	f240 2301 	movw	r3, #513	; 0x201
 80068d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
 80068d6:	2300      	movs	r3, #0
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068da:	2300      	movs	r3, #0
 80068dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	2300      	movs	r3, #0
 80068e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d00a      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	f200 808e 	bhi.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d049      	beq.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d079      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006900:	e086      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006902:	4b49      	ldr	r3, [pc, #292]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006908:	4b47      	ldr	r3, [pc, #284]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d07f      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	0c9b      	lsrs	r3, r3, #18
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	3330      	adds	r3, #48	; 0x30
 800691e:	443b      	add	r3, r7
 8006920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006924:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006930:	4b3d      	ldr	r3, [pc, #244]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	0c5b      	lsrs	r3, r3, #17
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	3330      	adds	r3, #48	; 0x30
 800693c:	443b      	add	r3, r7
 800693e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00d      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800694e:	4a37      	ldr	r2, [pc, #220]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	fbb2 f2f3 	udiv	r2, r2, r3
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	fb02 f303 	mul.w	r3, r2, r3
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695e:	e004      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	4a33      	ldr	r2, [pc, #204]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800696a:	4b2f      	ldr	r3, [pc, #188]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006976:	d102      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800697c:	e04a      	b.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	4a2c      	ldr	r2, [pc, #176]	; (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006984:	fba2 2303 	umull	r2, r3, r2, r3
 8006988:	085b      	lsrs	r3, r3, #1
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800698c:	e042      	b.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800698e:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d108      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80069aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b0:	e01f      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069bc:	d109      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80069be:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80069ca:	f649 4340 	movw	r3, #40000	; 0x9c40
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d0:	e00f      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069dc:	d11c      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80069ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80069f0:	e012      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80069f2:	e011      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80069f4:	f7ff fe78 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	0b9b      	lsrs	r3, r3, #14
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	3301      	adds	r3, #1
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a0e:	e004      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006a10:	bf00      	nop
 8006a12:	e002      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006a18:	bf00      	nop
    }
  }
  return (frequency);
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3734      	adds	r7, #52	; 0x34
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}
 8006a24:	080090d8 	.word	0x080090d8
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	007a1200 	.word	0x007a1200
 8006a30:	003d0900 	.word	0x003d0900
 8006a34:	aaaaaaab 	.word	0xaaaaaaab

08006a38 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e084      	b.n	8006b58 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7c5b      	ldrb	r3, [r3, #17]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fb fd36 	bl	80024d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 faf4 	bl	8007058 <HAL_RTC_WaitForSynchro>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2204      	movs	r2, #4
 8006a7a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e06b      	b.n	8006b58 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fbad 	bl	80071e0 <RTC_EnterInitMode>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e060      	b.n	8006b58 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0207 	bic.w	r2, r2, #7
 8006aa4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006aae:	4b2c      	ldr	r3, [pc, #176]	; (8006b60 <HAL_RTC_Init+0x128>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	4a2b      	ldr	r2, [pc, #172]	; (8006b60 <HAL_RTC_Init+0x128>)
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006aba:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <HAL_RTC_Init+0x128>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4926      	ldr	r1, [pc, #152]	; (8006b60 <HAL_RTC_Init+0x128>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d003      	beq.n	8006ade <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e00e      	b.n	8006afc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f7ff feea 	bl	80068b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ae4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2204      	movs	r2, #4
 8006af0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e030      	b.n	8006b58 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f023 010f 	bic.w	r1, r3, #15
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	0c1a      	lsrs	r2, r3, #16
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	0c1b      	lsrs	r3, r3, #16
 8006b1a:	041b      	lsls	r3, r3, #16
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	b291      	uxth	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fb81 	bl	8007230 <RTC_ExitInitMode>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2204      	movs	r2, #4
 8006b38:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e00c      	b.n	8006b58 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006b56:	2300      	movs	r3, #0
  }
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40006c00 	.word	0x40006c00

08006b64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b64:	b590      	push	{r4, r7, lr}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <HAL_RTC_SetTime+0x20>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e080      	b.n	8006c8a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	7c1b      	ldrb	r3, [r3, #16]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_RTC_SetTime+0x30>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e07a      	b.n	8006c8a <HAL_RTC_SetTime+0x126>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d113      	bne.n	8006bce <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006bb0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	460b      	mov	r3, r1
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	1a5b      	subs	r3, r3, r1
 8006bc0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006bc2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006bc8:	4413      	add	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e01e      	b.n	8006c0c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fb71 	bl	80072ba <RTC_Bcd2ToByte>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006be0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fb66 	bl	80072ba <RTC_Bcd2ToByte>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006bfa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	789b      	ldrb	r3, [r3, #2]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fb5a 	bl	80072ba <RTC_Bcd2ToByte>
 8006c06:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006c08:	4423      	add	r3, r4
 8006c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fa7f 	bl	8007112 <RTC_WriteTimeCounter>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e02f      	b.n	8006c8a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0205 	bic.w	r2, r2, #5
 8006c38:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fa90 	bl	8007160 <RTC_ReadAlarmCounter>
 8006c40:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d018      	beq.n	8006c7c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d214      	bcs.n	8006c7c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006c58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006c5c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006c5e:	6939      	ldr	r1, [r7, #16]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fa96 	bl	8007192 <RTC_WriteAlarmCounter>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e006      	b.n	8006c8a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006c88:	2300      	movs	r3, #0
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd90      	pop	{r4, r7, pc}
	...

08006c94 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_RTC_GetTime+0x28>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0b5      	b.n	8006e2c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e0ac      	b.n	8006e2c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f9ed 	bl	80070b2 <RTC_ReadTimeCounter>
 8006cd8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	4a55      	ldr	r2, [pc, #340]	; (8006e34 <HAL_RTC_GetTime+0x1a0>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	0adb      	lsrs	r3, r3, #11
 8006ce4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	4b52      	ldr	r3, [pc, #328]	; (8006e34 <HAL_RTC_GetTime+0x1a0>)
 8006cea:	fba3 1302 	umull	r1, r3, r3, r2
 8006cee:	0adb      	lsrs	r3, r3, #11
 8006cf0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006cf4:	fb01 f303 	mul.w	r3, r1, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	4a4f      	ldr	r2, [pc, #316]	; (8006e38 <HAL_RTC_GetTime+0x1a4>)
 8006cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006d00:	095b      	lsrs	r3, r3, #5
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	4a4a      	ldr	r2, [pc, #296]	; (8006e34 <HAL_RTC_GetTime+0x1a0>)
 8006d0c:	fba2 1203 	umull	r1, r2, r2, r3
 8006d10:	0ad2      	lsrs	r2, r2, #11
 8006d12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006d16:	fb01 f202 	mul.w	r2, r1, r2
 8006d1a:	1a9a      	subs	r2, r3, r2
 8006d1c:	4b46      	ldr	r3, [pc, #280]	; (8006e38 <HAL_RTC_GetTime+0x1a4>)
 8006d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d22:	0959      	lsrs	r1, r3, #5
 8006d24:	460b      	mov	r3, r1
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	1a5b      	subs	r3, r3, r1
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	1ad1      	subs	r1, r2, r3
 8006d2e:	b2ca      	uxtb	r2, r1
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b17      	cmp	r3, #23
 8006d38:	d955      	bls.n	8006de6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4a3f      	ldr	r2, [pc, #252]	; (8006e3c <HAL_RTC_GetTime+0x1a8>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006d46:	6939      	ldr	r1, [r7, #16]
 8006d48:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <HAL_RTC_GetTime+0x1a8>)
 8006d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d4e:	091a      	lsrs	r2, r3, #4
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	1aca      	subs	r2, r1, r3
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f9fd 	bl	8007160 <RTC_ReadAlarmCounter>
 8006d66:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d008      	beq.n	8006d82 <HAL_RTC_GetTime+0xee>
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d904      	bls.n	8006d82 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e002      	b.n	8006d88 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4a2d      	ldr	r2, [pc, #180]	; (8006e40 <HAL_RTC_GetTime+0x1ac>)
 8006d8c:	fb02 f303 	mul.w	r3, r2, r3
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006d96:	69b9      	ldr	r1, [r7, #24]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f9ba 	bl	8007112 <RTC_WriteTimeCounter>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e041      	b.n	8006e2c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d00c      	beq.n	8006dca <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	4413      	add	r3, r2
 8006db6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f9e9 	bl	8007192 <RTC_WriteAlarmCounter>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e030      	b.n	8006e2c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006dca:	69f9      	ldr	r1, [r7, #28]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f9e0 	bl	8007192 <RTC_WriteAlarmCounter>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e027      	b.n	8006e2c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006ddc:	6979      	ldr	r1, [r7, #20]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fa88 	bl	80072f4 <RTC_DateUpdate>
 8006de4:	e003      	b.n	8006dee <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01a      	beq.n	8006e2a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fa41 	bl	8007280 <RTC_ByteToBcd2>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fa38 	bl	8007280 <RTC_ByteToBcd2>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	789b      	ldrb	r3, [r3, #2]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fa2f 	bl	8007280 <RTC_ByteToBcd2>
 8006e22:	4603      	mov	r3, r0
 8006e24:	461a      	mov	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	91a2b3c5 	.word	0x91a2b3c5
 8006e38:	88888889 	.word	0x88888889
 8006e3c:	aaaaaaab 	.word	0xaaaaaaab
 8006e40:	00015180 	.word	0x00015180

08006e44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	2300      	movs	r3, #0
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_RTC_SetDate+0x24>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e097      	b.n	8006f9c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	7c1b      	ldrb	r3, [r3, #16]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_RTC_SetDate+0x34>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e091      	b.n	8006f9c <HAL_RTC_SetDate+0x158>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10c      	bne.n	8006ea4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	78da      	ldrb	r2, [r3, #3]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	785a      	ldrb	r2, [r3, #1]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	789a      	ldrb	r2, [r3, #2]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	739a      	strb	r2, [r3, #14]
 8006ea2:	e01a      	b.n	8006eda <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	78db      	ldrb	r3, [r3, #3]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fa06 	bl	80072ba <RTC_Bcd2ToByte>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f9fd 	bl	80072ba <RTC_Bcd2ToByte>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	789b      	ldrb	r3, [r3, #2]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 f9f4 	bl	80072ba <RTC_Bcd2ToByte>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	7bdb      	ldrb	r3, [r3, #15]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	7b59      	ldrb	r1, [r3, #13]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	7b9b      	ldrb	r3, [r3, #14]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f000 fadf 	bl	80074ac <RTC_WeekDayNum>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7b1a      	ldrb	r2, [r3, #12]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f8d7 	bl	80070b2 <RTC_ReadTimeCounter>
 8006f04:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4a26      	ldr	r2, [pc, #152]	; (8006fa4 <HAL_RTC_SetDate+0x160>)
 8006f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0e:	0adb      	lsrs	r3, r3, #11
 8006f10:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b18      	cmp	r3, #24
 8006f16:	d93a      	bls.n	8006f8e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	4a23      	ldr	r2, [pc, #140]	; (8006fa8 <HAL_RTC_SetDate+0x164>)
 8006f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f20:	091b      	lsrs	r3, r3, #4
 8006f22:	4a22      	ldr	r2, [pc, #136]	; (8006fac <HAL_RTC_SetDate+0x168>)
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006f2e:	69f9      	ldr	r1, [r7, #28]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f8ee 	bl	8007112 <RTC_WriteTimeCounter>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e027      	b.n	8006f9c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 f907 	bl	8007160 <RTC_ReadAlarmCounter>
 8006f52:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5a:	d018      	beq.n	8006f8e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d214      	bcs.n	8006f8e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006f6a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006f6e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006f70:	69b9      	ldr	r1, [r7, #24]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f90d 	bl	8007192 <RTC_WriteAlarmCounter>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2204      	movs	r2, #4
 8006f82:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e006      	b.n	8006f9c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	91a2b3c5 	.word	0x91a2b3c5
 8006fa8:	aaaaaaab 	.word	0xaaaaaaab
 8006fac:	00015180 	.word	0x00015180

08006fb0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8006fbc:	f107 0314 	add.w	r3, r7, #20
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_RTC_GetDate+0x26>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e03a      	b.n	8007050 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006fda:	f107 0314 	add.w	r3, r7, #20
 8006fde:	2200      	movs	r2, #0
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fe56 	bl	8006c94 <HAL_RTC_GetTime>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e02e      	b.n	8007050 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	7b1a      	ldrb	r2, [r3, #12]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	7bda      	ldrb	r2, [r3, #15]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7b5a      	ldrb	r2, [r3, #13]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	7b9a      	ldrb	r2, [r3, #14]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01a      	beq.n	800704e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	78db      	ldrb	r3, [r3, #3]
 800701c:	4618      	mov	r0, r3
 800701e:	f000 f92f 	bl	8007280 <RTC_ByteToBcd2>
 8007022:	4603      	mov	r3, r0
 8007024:	461a      	mov	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f926 	bl	8007280 <RTC_ByteToBcd2>
 8007034:	4603      	mov	r3, r0
 8007036:	461a      	mov	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	789b      	ldrb	r3, [r3, #2]
 8007040:	4618      	mov	r0, r3
 8007042:	f000 f91d 	bl	8007280 <RTC_ByteToBcd2>
 8007046:	4603      	mov	r3, r0
 8007048:	461a      	mov	r2, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e01d      	b.n	80070aa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0208 	bic.w	r2, r2, #8
 800707c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800707e:	f7fd fd89 	bl	8004b94 <HAL_GetTick>
 8007082:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007084:	e009      	b.n	800709a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007086:	f7fd fd85 	bl	8004b94 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007094:	d901      	bls.n	800709a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e007      	b.n	80070aa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0ee      	beq.n	8007086 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	827b      	strh	r3, [r7, #18]
 80070be:	2300      	movs	r3, #0
 80070c0:	823b      	strh	r3, [r7, #16]
 80070c2:	2300      	movs	r3, #0
 80070c4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80070e2:	8a7a      	ldrh	r2, [r7, #18]
 80070e4:	8a3b      	ldrh	r3, [r7, #16]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d008      	beq.n	80070fc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80070ea:	8a3b      	ldrh	r3, [r7, #16]
 80070ec:	041a      	lsls	r2, r3, #16
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e004      	b.n	8007106 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80070fc:	8a7b      	ldrh	r3, [r7, #18]
 80070fe:	041a      	lsls	r2, r3, #16
 8007100:	89fb      	ldrh	r3, [r7, #14]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007106:	697b      	ldr	r3, [r7, #20]
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f85d 	bl	80071e0 <RTC_EnterInitMode>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	e011      	b.n	8007156 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	0c12      	lsrs	r2, r2, #16
 800713a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	b292      	uxth	r2, r2
 8007144:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f872 	bl	8007230 <RTC_ExitInitMode>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	81fb      	strh	r3, [r7, #14]
 800716c:	2300      	movs	r3, #0
 800716e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007180:	89fb      	ldrh	r3, [r7, #14]
 8007182:	041a      	lsls	r2, r3, #16
 8007184:	89bb      	ldrh	r3, [r7, #12]
 8007186:	4313      	orrs	r3, r2
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr

08007192 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f81d 	bl	80071e0 <RTC_EnterInitMode>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
 80071b0:	e011      	b.n	80071d6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	0c12      	lsrs	r2, r2, #16
 80071ba:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	b292      	uxth	r2, r2
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f832 	bl	8007230 <RTC_ExitInitMode>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80071ec:	f7fd fcd2 	bl	8004b94 <HAL_GetTick>
 80071f0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80071f2:	e009      	b.n	8007208 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80071f4:	f7fd fcce 	bl	8004b94 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007202:	d901      	bls.n	8007208 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e00f      	b.n	8007228 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0ee      	beq.n	80071f4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0210 	orr.w	r2, r2, #16
 8007224:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0210 	bic.w	r2, r2, #16
 800724a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800724c:	f7fd fca2 	bl	8004b94 <HAL_GetTick>
 8007250:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007252:	e009      	b.n	8007268 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007254:	f7fd fc9e 	bl	8004b94 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007262:	d901      	bls.n	8007268 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e007      	b.n	8007278 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0ee      	beq.n	8007254 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800728e:	e005      	b.n	800729c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3301      	adds	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	3b0a      	subs	r3, #10
 800729a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b09      	cmp	r3, #9
 80072a0:	d8f6      	bhi.n	8007290 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	b2db      	uxtb	r3, r3
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr

080072ba <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	4603      	mov	r3, r0
 80072c2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	091b      	lsrs	r3, r3, #4
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	b2db      	uxtb	r3, r3
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7bdb      	ldrb	r3, [r3, #15]
 8007312:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7b5b      	ldrb	r3, [r3, #13]
 8007318:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7b9b      	ldrb	r3, [r3, #14]
 800731e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007320:	2300      	movs	r3, #0
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	e06f      	b.n	8007406 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d011      	beq.n	8007350 <RTC_DateUpdate+0x5c>
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2b03      	cmp	r3, #3
 8007330:	d00e      	beq.n	8007350 <RTC_DateUpdate+0x5c>
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b05      	cmp	r3, #5
 8007336:	d00b      	beq.n	8007350 <RTC_DateUpdate+0x5c>
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b07      	cmp	r3, #7
 800733c:	d008      	beq.n	8007350 <RTC_DateUpdate+0x5c>
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d005      	beq.n	8007350 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b0a      	cmp	r3, #10
 8007348:	d002      	beq.n	8007350 <RTC_DateUpdate+0x5c>
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b0c      	cmp	r3, #12
 800734e:	d117      	bne.n	8007380 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b1e      	cmp	r3, #30
 8007354:	d803      	bhi.n	800735e <RTC_DateUpdate+0x6a>
      {
        day++;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800735c:	e050      	b.n	8007400 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b0c      	cmp	r3, #12
 8007362:	d005      	beq.n	8007370 <RTC_DateUpdate+0x7c>
        {
          month++;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3301      	adds	r3, #1
 8007368:	613b      	str	r3, [r7, #16]
          day = 1U;
 800736a:	2301      	movs	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800736e:	e047      	b.n	8007400 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007370:	2301      	movs	r3, #1
 8007372:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007374:	2301      	movs	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
          year++;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3301      	adds	r3, #1
 800737c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800737e:	e03f      	b.n	8007400 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b04      	cmp	r3, #4
 8007384:	d008      	beq.n	8007398 <RTC_DateUpdate+0xa4>
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b06      	cmp	r3, #6
 800738a:	d005      	beq.n	8007398 <RTC_DateUpdate+0xa4>
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2b09      	cmp	r3, #9
 8007390:	d002      	beq.n	8007398 <RTC_DateUpdate+0xa4>
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b0b      	cmp	r3, #11
 8007396:	d10c      	bne.n	80073b2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b1d      	cmp	r3, #29
 800739c:	d803      	bhi.n	80073a6 <RTC_DateUpdate+0xb2>
      {
        day++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80073a4:	e02c      	b.n	8007400 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3301      	adds	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80073ac:	2301      	movs	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80073b0:	e026      	b.n	8007400 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d123      	bne.n	8007400 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b1b      	cmp	r3, #27
 80073bc:	d803      	bhi.n	80073c6 <RTC_DateUpdate+0xd2>
      {
        day++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e01c      	b.n	8007400 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b1c      	cmp	r3, #28
 80073ca:	d111      	bne.n	80073f0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 f839 	bl	8007448 <RTC_IsLeapYear>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <RTC_DateUpdate+0xf0>
        {
          day++;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e00d      	b.n	8007400 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	3301      	adds	r3, #1
 80073e8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80073ea:	2301      	movs	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e007      	b.n	8007400 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b1d      	cmp	r3, #29
 80073f4:	d104      	bne.n	8007400 <RTC_DateUpdate+0x10c>
      {
        month++;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80073fc:	2301      	movs	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3301      	adds	r3, #1
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d38b      	bcc.n	8007326 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	4619      	mov	r1, r3
 8007430:	6978      	ldr	r0, [r7, #20]
 8007432:	f000 f83b 	bl	80074ac <RTC_WeekDayNum>
 8007436:	4603      	mov	r3, r0
 8007438:	461a      	mov	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	731a      	strb	r2, [r3, #12]
}
 800743e:	bf00      	nop
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	e01d      	b.n	800749e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8007462:	88fb      	ldrh	r3, [r7, #6]
 8007464:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <RTC_IsLeapYear+0x60>)
 8007466:	fba2 1203 	umull	r1, r2, r2, r3
 800746a:	0952      	lsrs	r2, r2, #5
 800746c:	2164      	movs	r1, #100	; 0x64
 800746e:	fb01 f202 	mul.w	r2, r1, r2
 8007472:	1a9b      	subs	r3, r3, r2
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800747a:	2301      	movs	r3, #1
 800747c:	e00f      	b.n	800749e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <RTC_IsLeapYear+0x60>)
 8007482:	fba2 1203 	umull	r1, r2, r2, r3
 8007486:	09d2      	lsrs	r2, r2, #7
 8007488:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800748c:	fb01 f202 	mul.w	r2, r1, r2
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	b29b      	uxth	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800749c:	2300      	movs	r3, #0
  }
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	51eb851f 	.word	0x51eb851f

080074ac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
 80074b8:	4613      	mov	r3, r2
 80074ba:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80074ca:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d82d      	bhi.n	800752e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	4613      	mov	r3, r2
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	4a2c      	ldr	r2, [pc, #176]	; (8007590 <RTC_WeekDayNum+0xe4>)
 80074e0:	fba2 2303 	umull	r2, r3, r2, r3
 80074e4:	085a      	lsrs	r2, r3, #1
 80074e6:	78bb      	ldrb	r3, [r7, #2]
 80074e8:	441a      	add	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	441a      	add	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	089b      	lsrs	r3, r3, #2
 80074f4:	441a      	add	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	4926      	ldr	r1, [pc, #152]	; (8007594 <RTC_WeekDayNum+0xe8>)
 80074fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	1ad2      	subs	r2, r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3b01      	subs	r3, #1
 8007508:	4922      	ldr	r1, [pc, #136]	; (8007594 <RTC_WeekDayNum+0xe8>)
 800750a:	fba1 1303 	umull	r1, r3, r1, r3
 800750e:	09db      	lsrs	r3, r3, #7
 8007510:	4413      	add	r3, r2
 8007512:	1d1a      	adds	r2, r3, #4
 8007514:	4b20      	ldr	r3, [pc, #128]	; (8007598 <RTC_WeekDayNum+0xec>)
 8007516:	fba3 1302 	umull	r1, r3, r3, r2
 800751a:	1ad1      	subs	r1, r2, r3
 800751c:	0849      	lsrs	r1, r1, #1
 800751e:	440b      	add	r3, r1
 8007520:	0899      	lsrs	r1, r3, #2
 8007522:	460b      	mov	r3, r1
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	1a5b      	subs	r3, r3, r1
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e029      	b.n	8007582 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800752e:	78fa      	ldrb	r2, [r7, #3]
 8007530:	4613      	mov	r3, r2
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	4413      	add	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <RTC_WeekDayNum+0xe4>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	085a      	lsrs	r2, r3, #1
 8007542:	78bb      	ldrb	r3, [r7, #2]
 8007544:	441a      	add	r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	441a      	add	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	089b      	lsrs	r3, r3, #2
 800754e:	441a      	add	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4910      	ldr	r1, [pc, #64]	; (8007594 <RTC_WeekDayNum+0xe8>)
 8007554:	fba1 1303 	umull	r1, r3, r1, r3
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	1ad2      	subs	r2, r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	490d      	ldr	r1, [pc, #52]	; (8007594 <RTC_WeekDayNum+0xe8>)
 8007560:	fba1 1303 	umull	r1, r3, r1, r3
 8007564:	09db      	lsrs	r3, r3, #7
 8007566:	4413      	add	r3, r2
 8007568:	1c9a      	adds	r2, r3, #2
 800756a:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <RTC_WeekDayNum+0xec>)
 800756c:	fba3 1302 	umull	r1, r3, r3, r2
 8007570:	1ad1      	subs	r1, r2, r3
 8007572:	0849      	lsrs	r1, r1, #1
 8007574:	440b      	add	r3, r1
 8007576:	0899      	lsrs	r1, r3, #2
 8007578:	460b      	mov	r3, r1
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	1a5b      	subs	r3, r3, r1
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	b2db      	uxtb	r3, r3
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr
 8007590:	38e38e39 	.word	0x38e38e39
 8007594:	51eb851f 	.word	0x51eb851f
 8007598:	24924925 	.word	0x24924925

0800759c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e076      	b.n	800769c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d108      	bne.n	80075c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075be:	d009      	beq.n	80075d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	61da      	str	r2, [r3, #28]
 80075c6:	e005      	b.n	80075d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fa ff92 	bl	8002518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007658:	ea42 0103 	orr.w	r1, r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	0c1a      	lsrs	r2, r3, #16
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f002 0204 	and.w	r2, r2, #4
 800767a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800768a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_SPI_Transmit+0x22>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e126      	b.n	8007914 <HAL_SPI_Transmit+0x270>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ce:	f7fd fa61 	bl	8004b94 <HAL_GetTick>
 80076d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d002      	beq.n	80076ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076e4:	2302      	movs	r3, #2
 80076e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076e8:	e10b      	b.n	8007902 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_SPI_Transmit+0x52>
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076fa:	e102      	b.n	8007902 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2203      	movs	r2, #3
 8007700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007742:	d10f      	bne.n	8007764 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007752:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007762:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d007      	beq.n	8007782 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800778a:	d14b      	bne.n	8007824 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SPI_Transmit+0xf6>
 8007794:	8afb      	ldrh	r3, [r7, #22]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d13e      	bne.n	8007818 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	881a      	ldrh	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	1c9a      	adds	r2, r3, #2
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077be:	e02b      	b.n	8007818 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d112      	bne.n	80077f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	881a      	ldrh	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	1c9a      	adds	r2, r3, #2
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80077f2:	e011      	b.n	8007818 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f4:	f7fd f9ce 	bl	8004b94 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d803      	bhi.n	800780c <HAL_SPI_Transmit+0x168>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d102      	bne.n	8007812 <HAL_SPI_Transmit+0x16e>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007816:	e074      	b.n	8007902 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1ce      	bne.n	80077c0 <HAL_SPI_Transmit+0x11c>
 8007822:	e04c      	b.n	80078be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SPI_Transmit+0x18e>
 800782c:	8afb      	ldrh	r3, [r7, #22]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d140      	bne.n	80078b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	330c      	adds	r3, #12
 800783c:	7812      	ldrb	r2, [r2, #0]
 800783e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007858:	e02c      	b.n	80078b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b02      	cmp	r3, #2
 8007866:	d113      	bne.n	8007890 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	86da      	strh	r2, [r3, #54]	; 0x36
 800788e:	e011      	b.n	80078b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007890:	f7fd f980 	bl	8004b94 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d803      	bhi.n	80078a8 <HAL_SPI_Transmit+0x204>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d102      	bne.n	80078ae <HAL_SPI_Transmit+0x20a>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078b2:	e026      	b.n	8007902 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1cd      	bne.n	800785a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fa54 	bl	8007d70 <SPI_EndRxTxTransaction>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e000      	b.n	8007902 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007900:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007912:	7ffb      	ldrb	r3, [r7, #31]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3720      	adds	r7, #32
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08c      	sub	sp, #48	; 0x30
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800792a:	2301      	movs	r3, #1
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_SPI_TransmitReceive+0x26>
 800793e:	2302      	movs	r3, #2
 8007940:	e18a      	b.n	8007c58 <HAL_SPI_TransmitReceive+0x33c>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794a:	f7fd f923 	bl	8004b94 <HAL_GetTick>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007960:	887b      	ldrh	r3, [r7, #2]
 8007962:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007968:	2b01      	cmp	r3, #1
 800796a:	d00f      	beq.n	800798c <HAL_SPI_TransmitReceive+0x70>
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007972:	d107      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x68>
 800797c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007980:	2b04      	cmp	r3, #4
 8007982:	d003      	beq.n	800798c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007984:	2302      	movs	r3, #2
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800798a:	e15b      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <HAL_SPI_TransmitReceive+0x82>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_SPI_TransmitReceive+0x82>
 8007998:	887b      	ldrh	r3, [r7, #2]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079a4:	e14e      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d003      	beq.n	80079ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2205      	movs	r2, #5
 80079b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	887a      	ldrh	r2, [r7, #2]
 80079ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	887a      	ldrh	r2, [r7, #2]
 80079d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	887a      	ldrh	r2, [r7, #2]
 80079dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	887a      	ldrh	r2, [r7, #2]
 80079e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d007      	beq.n	8007a0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a16:	d178      	bne.n	8007b0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_SPI_TransmitReceive+0x10a>
 8007a20:	8b7b      	ldrh	r3, [r7, #26]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d166      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	881a      	ldrh	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	1c9a      	adds	r2, r3, #2
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4a:	e053      	b.n	8007af4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d11b      	bne.n	8007a92 <HAL_SPI_TransmitReceive+0x176>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d016      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x176>
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d113      	bne.n	8007a92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	881a      	ldrh	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	1c9a      	adds	r2, r3, #2
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d119      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x1b8>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d014      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	b292      	uxth	r2, r2
 8007ab6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	1c9a      	adds	r2, r3, #2
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ad4:	f7fd f85e 	bl	8004b94 <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d807      	bhi.n	8007af4 <HAL_SPI_TransmitReceive+0x1d8>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d003      	beq.n	8007af4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007af2:	e0a7      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1a6      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x130>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1a1      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x130>
 8007b08:	e07c      	b.n	8007c04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x1fc>
 8007b12:	8b7b      	ldrh	r3, [r7, #26]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d16b      	bne.n	8007bf0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	7812      	ldrb	r2, [r2, #0]
 8007b24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b3e:	e057      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d11c      	bne.n	8007b88 <HAL_SPI_TransmitReceive+0x26c>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d017      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x26c>
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d114      	bne.n	8007b88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d119      	bne.n	8007bca <HAL_SPI_TransmitReceive+0x2ae>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d014      	beq.n	8007bca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bca:	f7fc ffe3 	bl	8004b94 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d803      	bhi.n	8007be2 <HAL_SPI_TransmitReceive+0x2c6>
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d102      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x2cc>
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d103      	bne.n	8007bf0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bee:	e029      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1a2      	bne.n	8007b40 <HAL_SPI_TransmitReceive+0x224>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d19d      	bne.n	8007b40 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 f8b1 	bl	8007d70 <SPI_EndRxTxTransaction>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d006      	beq.n	8007c22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c20:	e010      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	e000      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3730      	adds	r7, #48	; 0x30
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c70:	f7fc ff90 	bl	8004b94 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	1a9b      	subs	r3, r3, r2
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c80:	f7fc ff88 	bl	8004b94 <HAL_GetTick>
 8007c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c86:	4b39      	ldr	r3, [pc, #228]	; (8007d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	015b      	lsls	r3, r3, #5
 8007c8c:	0d1b      	lsrs	r3, r3, #20
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
 8007c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c96:	e054      	b.n	8007d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d050      	beq.n	8007d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ca0:	f7fc ff78 	bl	8004b94 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d902      	bls.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d13d      	bne.n	8007d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cce:	d111      	bne.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd8:	d004      	beq.n	8007ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce2:	d107      	bne.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cfc:	d10f      	bne.n	8007d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e017      	b.n	8007d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	bf0c      	ite	eq
 8007d52:	2301      	moveq	r3, #1
 8007d54:	2300      	movne	r3, #0
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d19b      	bne.n	8007c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3720      	adds	r7, #32
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000004 	.word	0x20000004

08007d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	2180      	movs	r1, #128	; 0x80
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff ff6a 	bl	8007c60 <SPI_WaitFlagStateUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d96:	f043 0220 	orr.w	r2, r3, #32
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e000      	b.n	8007da4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e041      	b.n	8007e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fa fbea 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f000 fa70 	bl	80082d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d001      	beq.n	8007e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e03a      	b.n	8007eda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a18      	ldr	r2, [pc, #96]	; (8007ee4 <HAL_TIM_Base_Start_IT+0x98>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00e      	beq.n	8007ea4 <HAL_TIM_Base_Start_IT+0x58>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8e:	d009      	beq.n	8007ea4 <HAL_TIM_Base_Start_IT+0x58>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a14      	ldr	r2, [pc, #80]	; (8007ee8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d004      	beq.n	8007ea4 <HAL_TIM_Base_Start_IT+0x58>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a13      	ldr	r2, [pc, #76]	; (8007eec <HAL_TIM_Base_Start_IT+0xa0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d111      	bne.n	8007ec8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b06      	cmp	r3, #6
 8007eb4:	d010      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0201 	orr.w	r2, r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec6:	e007      	b.n	8007ed8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800

08007ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d122      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d11b      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0202 	mvn.w	r2, #2
 8007f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9b1 	bl	800829a <HAL_TIM_IC_CaptureCallback>
 8007f38:	e005      	b.n	8007f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9a4 	bl	8008288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9b3 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d122      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d11b      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0204 	mvn.w	r2, #4
 8007f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f987 	bl	800829a <HAL_TIM_IC_CaptureCallback>
 8007f8c:	e005      	b.n	8007f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f97a 	bl	8008288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f989 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d122      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d11b      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f06f 0208 	mvn.w	r2, #8
 8007fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2204      	movs	r2, #4
 8007fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f95d 	bl	800829a <HAL_TIM_IC_CaptureCallback>
 8007fe0:	e005      	b.n	8007fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f950 	bl	8008288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f95f 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d122      	bne.n	8008048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b10      	cmp	r3, #16
 800800e:	d11b      	bne.n	8008048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0210 	mvn.w	r2, #16
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2208      	movs	r2, #8
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f933 	bl	800829a <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f926 	bl	8008288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f935 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b01      	cmp	r3, #1
 8008054:	d10e      	bne.n	8008074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	d107      	bne.n	8008074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0201 	mvn.w	r2, #1
 800806c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7f9 feca 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807e:	2b80      	cmp	r3, #128	; 0x80
 8008080:	d10e      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808c:	2b80      	cmp	r3, #128	; 0x80
 800808e:	d107      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa77 	bl	800858e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d10e      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d107      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8f9 	bl	80082be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0220 	mvn.w	r2, #32
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa42 	bl	800857c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_TIM_ConfigClockSource+0x18>
 8008114:	2302      	movs	r3, #2
 8008116:	e0b3      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x180>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008136:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800813e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008150:	d03e      	beq.n	80081d0 <HAL_TIM_ConfigClockSource+0xd0>
 8008152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008156:	f200 8087 	bhi.w	8008268 <HAL_TIM_ConfigClockSource+0x168>
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	f000 8085 	beq.w	800826c <HAL_TIM_ConfigClockSource+0x16c>
 8008162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008166:	d87f      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
 8008168:	2b70      	cmp	r3, #112	; 0x70
 800816a:	d01a      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0xa2>
 800816c:	2b70      	cmp	r3, #112	; 0x70
 800816e:	d87b      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
 8008170:	2b60      	cmp	r3, #96	; 0x60
 8008172:	d050      	beq.n	8008216 <HAL_TIM_ConfigClockSource+0x116>
 8008174:	2b60      	cmp	r3, #96	; 0x60
 8008176:	d877      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
 8008178:	2b50      	cmp	r3, #80	; 0x50
 800817a:	d03c      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0xf6>
 800817c:	2b50      	cmp	r3, #80	; 0x50
 800817e:	d873      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
 8008180:	2b40      	cmp	r3, #64	; 0x40
 8008182:	d058      	beq.n	8008236 <HAL_TIM_ConfigClockSource+0x136>
 8008184:	2b40      	cmp	r3, #64	; 0x40
 8008186:	d86f      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
 8008188:	2b30      	cmp	r3, #48	; 0x30
 800818a:	d064      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x156>
 800818c:	2b30      	cmp	r3, #48	; 0x30
 800818e:	d86b      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
 8008190:	2b20      	cmp	r3, #32
 8008192:	d060      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x156>
 8008194:	2b20      	cmp	r3, #32
 8008196:	d867      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
 8008198:	2b00      	cmp	r3, #0
 800819a:	d05c      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x156>
 800819c:	2b10      	cmp	r3, #16
 800819e:	d05a      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80081a0:	e062      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6818      	ldr	r0, [r3, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6899      	ldr	r1, [r3, #8]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f000 f966 	bl	8008482 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	609a      	str	r2, [r3, #8]
      break;
 80081ce:	e04e      	b.n	800826e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	6899      	ldr	r1, [r3, #8]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f000 f94f 	bl	8008482 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081f2:	609a      	str	r2, [r3, #8]
      break;
 80081f4:	e03b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6859      	ldr	r1, [r3, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	461a      	mov	r2, r3
 8008204:	f000 f8c6 	bl	8008394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2150      	movs	r1, #80	; 0x50
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f91d 	bl	800844e <TIM_ITRx_SetConfig>
      break;
 8008214:	e02b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	6859      	ldr	r1, [r3, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	461a      	mov	r2, r3
 8008224:	f000 f8e4 	bl	80083f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2160      	movs	r1, #96	; 0x60
 800822e:	4618      	mov	r0, r3
 8008230:	f000 f90d 	bl	800844e <TIM_ITRx_SetConfig>
      break;
 8008234:	e01b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	6859      	ldr	r1, [r3, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	461a      	mov	r2, r3
 8008244:	f000 f8a6 	bl	8008394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2140      	movs	r1, #64	; 0x40
 800824e:	4618      	mov	r0, r3
 8008250:	f000 f8fd 	bl	800844e <TIM_ITRx_SetConfig>
      break;
 8008254:	e00b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	4610      	mov	r0, r2
 8008262:	f000 f8f4 	bl	800844e <TIM_ITRx_SetConfig>
        break;
 8008266:	e002      	b.n	800826e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008268:	bf00      	nop
 800826a:	e000      	b.n	800826e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800826c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr

0800829a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr

080082be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a29      	ldr	r2, [pc, #164]	; (8008388 <TIM_Base_SetConfig+0xb8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00b      	beq.n	8008300 <TIM_Base_SetConfig+0x30>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ee:	d007      	beq.n	8008300 <TIM_Base_SetConfig+0x30>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a26      	ldr	r2, [pc, #152]	; (800838c <TIM_Base_SetConfig+0xbc>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_Base_SetConfig+0x30>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a25      	ldr	r2, [pc, #148]	; (8008390 <TIM_Base_SetConfig+0xc0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d108      	bne.n	8008312 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1c      	ldr	r2, [pc, #112]	; (8008388 <TIM_Base_SetConfig+0xb8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00b      	beq.n	8008332 <TIM_Base_SetConfig+0x62>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008320:	d007      	beq.n	8008332 <TIM_Base_SetConfig+0x62>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a19      	ldr	r2, [pc, #100]	; (800838c <TIM_Base_SetConfig+0xbc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d003      	beq.n	8008332 <TIM_Base_SetConfig+0x62>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a18      	ldr	r2, [pc, #96]	; (8008390 <TIM_Base_SetConfig+0xc0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d108      	bne.n	8008344 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a07      	ldr	r2, [pc, #28]	; (8008388 <TIM_Base_SetConfig+0xb8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d103      	bne.n	8008378 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	615a      	str	r2, [r3, #20]
}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr
 8008388:	40012c00 	.word	0x40012c00
 800838c:	40000400 	.word	0x40000400
 8008390:	40000800 	.word	0x40000800

08008394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	f023 0201 	bic.w	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 030a 	bic.w	r3, r3, #10
 80083d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	f023 0210 	bic.w	r2, r3, #16
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	031b      	lsls	r3, r3, #12
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800842c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	621a      	str	r2, [r3, #32]
}
 8008444:	bf00      	nop
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	f043 0307 	orr.w	r3, r3, #7
 8008470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	609a      	str	r2, [r3, #8]
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr

08008482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008482:	b480      	push	{r7}
 8008484:	b087      	sub	sp, #28
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
 800848e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800849c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	021a      	lsls	r2, r3, #8
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	609a      	str	r2, [r3, #8]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr

080084c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e046      	b.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a16      	ldr	r2, [pc, #88]	; (8008570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008524:	d009      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a12      	ldr	r2, [pc, #72]	; (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a10      	ldr	r2, [pc, #64]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d10c      	bne.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	4313      	orrs	r3, r2
 800854a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr
 8008570:	40012c00 	.word	0x40012c00
 8008574:	40000400 	.word	0x40000400
 8008578:	40000800 	.word	0x40000800

0800857c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr

0800858e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e03f      	b.n	8008632 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fa f816 	bl	80025f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2224      	movs	r2, #36	; 0x24
 80085d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fb87 	bl	8008cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695a      	ldr	r2, [r3, #20]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b20      	cmp	r3, #32
 8008654:	d166      	bne.n	8008724 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <HAL_UART_Receive_DMA+0x26>
 800865c:	88fb      	ldrh	r3, [r7, #6]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e05f      	b.n	8008726 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_UART_Receive_DMA+0x38>
 8008670:	2302      	movs	r3, #2
 8008672:	e058      	b.n	8008726 <HAL_UART_Receive_DMA+0xea>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	88fa      	ldrh	r2, [r7, #6]
 8008686:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2222      	movs	r2, #34	; 0x22
 8008692:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	4a25      	ldr	r2, [pc, #148]	; (8008730 <HAL_UART_Receive_DMA+0xf4>)
 800869c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a2:	4a24      	ldr	r2, [pc, #144]	; (8008734 <HAL_UART_Receive_DMA+0xf8>)
 80086a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086aa:	4a23      	ldr	r2, [pc, #140]	; (8008738 <HAL_UART_Receive_DMA+0xfc>)
 80086ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b2:	2200      	movs	r2, #0
 80086b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80086b6:	f107 0308 	add.w	r3, r7, #8
 80086ba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4619      	mov	r1, r3
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	f7fc fbf7 	bl	8004ec0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	613b      	str	r3, [r7, #16]
 80086e6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695a      	ldr	r2, [r3, #20]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	695a      	ldr	r2, [r3, #20]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800871e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e000      	b.n	8008726 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008724:	2302      	movs	r3, #2
  }
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	08008985 	.word	0x08008985
 8008734:	080089ed 	.word	0x080089ed
 8008738:	08008a09 	.word	0x08008a09

0800873c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800875c:	2300      	movs	r3, #0
 800875e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10d      	bne.n	800878e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_UART_IRQHandler+0x52>
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa35 	bl	8008bf6 <UART_Receive_IT>
      return;
 800878c:	e0d0      	b.n	8008930 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 80b0 	beq.w	80088f6 <HAL_UART_IRQHandler+0x1ba>
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d105      	bne.n	80087ac <HAL_UART_IRQHandler+0x70>
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80a5 	beq.w	80088f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <HAL_UART_IRQHandler+0x90>
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c4:	f043 0201 	orr.w	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <HAL_UART_IRQHandler+0xb0>
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e4:	f043 0202 	orr.w	r2, r3, #2
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <HAL_UART_IRQHandler+0xd0>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008804:	f043 0204 	orr.w	r2, r3, #4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f003 0308 	and.w	r3, r3, #8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00f      	beq.n	8008836 <HAL_UART_IRQHandler+0xfa>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <HAL_UART_IRQHandler+0xee>
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882e:	f043 0208 	orr.w	r2, r3, #8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d077      	beq.n	800892e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b00      	cmp	r3, #0
 8008846:	d007      	beq.n	8008858 <HAL_UART_IRQHandler+0x11c>
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9cf 	bl	8008bf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	bf14      	ite	ne
 8008866:	2301      	movne	r3, #1
 8008868:	2300      	moveq	r3, #0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <HAL_UART_IRQHandler+0x144>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d031      	beq.n	80088e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f920 	bl	8008ac6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d023      	beq.n	80088dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d013      	beq.n	80088d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	4a21      	ldr	r2, [pc, #132]	; (8008938 <HAL_UART_IRQHandler+0x1fc>)
 80088b2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fc fb61 	bl	8004f80 <HAL_DMA_Abort_IT>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d016      	beq.n	80088f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80088ce:	4610      	mov	r0, r2
 80088d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d2:	e00e      	b.n	80088f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f84c 	bl	8008972 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088da:	e00a      	b.n	80088f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f848 	bl	8008972 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e2:	e006      	b.n	80088f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f844 	bl	8008972 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80088f0:	e01d      	b.n	800892e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f2:	bf00      	nop
    return;
 80088f4:	e01b      	b.n	800892e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d008      	beq.n	8008912 <HAL_UART_IRQHandler+0x1d6>
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f90c 	bl	8008b28 <UART_Transmit_IT>
    return;
 8008910:	e00e      	b.n	8008930 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <HAL_UART_IRQHandler+0x1f4>
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f94d 	bl	8008bc6 <UART_EndTransmit_IT>
    return;
 800892c:	e000      	b.n	8008930 <HAL_UART_IRQHandler+0x1f4>
    return;
 800892e:	bf00      	nop
  }
}
 8008930:	3720      	adds	r7, #32
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	08008b01 	.word	0x08008b01

0800893c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr

0800894e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr

08008972 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr

08008984 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d11e      	bne.n	80089de <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0201 	bic.w	r2, r2, #1
 80089c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695a      	ldr	r2, [r3, #20]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff ffb5 	bl	800894e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff ffb0 	bl	8008960 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a00:	bf00      	nop
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bf14      	ite	ne
 8008a28:	2301      	movne	r3, #1
 8008a2a:	2300      	moveq	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b21      	cmp	r3, #33	; 0x21
 8008a3a:	d108      	bne.n	8008a4e <UART_DMAError+0x46>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2200      	movs	r2, #0
 8008a46:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008a48:	68b8      	ldr	r0, [r7, #8]
 8008a4a:	f000 f827 	bl	8008a9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bf14      	ite	ne
 8008a5c:	2301      	movne	r3, #1
 8008a5e:	2300      	moveq	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b22      	cmp	r3, #34	; 0x22
 8008a6e:	d108      	bne.n	8008a82 <UART_DMAError+0x7a>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008a7c:	68b8      	ldr	r0, [r7, #8]
 8008a7e:	f000 f822 	bl	8008ac6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	f043 0210 	orr.w	r2, r3, #16
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a8e:	68b8      	ldr	r0, [r7, #8]
 8008a90:	f7ff ff6f 	bl	8008972 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008ab2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008adc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	695a      	ldr	r2, [r3, #20]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7ff ff29 	bl	8008972 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b21      	cmp	r3, #33	; 0x21
 8008b3a:	d13e      	bne.n	8008bba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b44:	d114      	bne.n	8008b70 <UART_Transmit_IT+0x48>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d110      	bne.n	8008b70 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	1c9a      	adds	r2, r3, #2
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	621a      	str	r2, [r3, #32]
 8008b6e:	e008      	b.n	8008b82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	1c59      	adds	r1, r3, #1
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6211      	str	r1, [r2, #32]
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10f      	bne.n	8008bb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e000      	b.n	8008bbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bba:	2302      	movs	r3, #2
  }
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fea8 	bl	800893c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b22      	cmp	r3, #34	; 0x22
 8008c08:	d170      	bne.n	8008cec <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c12:	d117      	bne.n	8008c44 <UART_Receive_IT+0x4e>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d113      	bne.n	8008c44 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	1c9a      	adds	r2, r3, #2
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	629a      	str	r2, [r3, #40]	; 0x28
 8008c42:	e026      	b.n	8008c92 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c48:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c56:	d007      	beq.n	8008c68 <UART_Receive_IT+0x72>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <UART_Receive_IT+0x80>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	701a      	strb	r2, [r3, #0]
 8008c74:	e008      	b.n	8008c88 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d120      	bne.n	8008ce8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0220 	bic.w	r2, r2, #32
 8008cb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 0201 	bic.w	r2, r2, #1
 8008cd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff fe35 	bl	800894e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e002      	b.n	8008cee <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e000      	b.n	8008cee <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8008cec:	2302      	movs	r3, #2
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008d32:	f023 030c 	bic.w	r3, r3, #12
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a2c      	ldr	r2, [pc, #176]	; (8008e0c <UART_SetConfig+0x114>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d103      	bne.n	8008d68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008d60:	f7fd fcc2 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	e002      	b.n	8008d6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008d68:	f7fd fcaa 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 8008d6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	009a      	lsls	r2, r3, #2
 8008d78:	441a      	add	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d84:	4a22      	ldr	r2, [pc, #136]	; (8008e10 <UART_SetConfig+0x118>)
 8008d86:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	0119      	lsls	r1, r3, #4
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009a      	lsls	r2, r3, #2
 8008d98:	441a      	add	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008da4:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <UART_SetConfig+0x118>)
 8008da6:	fba3 0302 	umull	r0, r3, r3, r2
 8008daa:	095b      	lsrs	r3, r3, #5
 8008dac:	2064      	movs	r0, #100	; 0x64
 8008dae:	fb00 f303 	mul.w	r3, r0, r3
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	3332      	adds	r3, #50	; 0x32
 8008db8:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <UART_SetConfig+0x118>)
 8008dba:	fba2 2303 	umull	r2, r3, r2, r3
 8008dbe:	095b      	lsrs	r3, r3, #5
 8008dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dc4:	4419      	add	r1, r3
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	009a      	lsls	r2, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <UART_SetConfig+0x118>)
 8008dde:	fba3 0302 	umull	r0, r3, r3, r2
 8008de2:	095b      	lsrs	r3, r3, #5
 8008de4:	2064      	movs	r0, #100	; 0x64
 8008de6:	fb00 f303 	mul.w	r3, r0, r3
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	3332      	adds	r3, #50	; 0x32
 8008df0:	4a07      	ldr	r2, [pc, #28]	; (8008e10 <UART_SetConfig+0x118>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	f003 020f 	and.w	r2, r3, #15
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	440a      	add	r2, r1
 8008e02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008e04:	bf00      	nop
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	40013800 	.word	0x40013800
 8008e10:	51eb851f 	.word	0x51eb851f

08008e14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008e18:	4904      	ldr	r1, [pc, #16]	; (8008e2c <MX_FATFS_Init+0x18>)
 8008e1a:	4805      	ldr	r0, [pc, #20]	; (8008e30 <MX_FATFS_Init+0x1c>)
 8008e1c:	f000 f8ac 	bl	8008f78 <FATFS_LinkDriver>
 8008e20:	4603      	mov	r3, r0
 8008e22:	461a      	mov	r2, r3
 8008e24:	4b03      	ldr	r3, [pc, #12]	; (8008e34 <MX_FATFS_Init+0x20>)
 8008e26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e28:	bf00      	nop
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	2000092c 	.word	0x2000092c
 8008e30:	20000010 	.word	0x20000010
 8008e34:	20000928 	.word	0x20000928

08008e38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f8 fcc5 	bl	80017d4 <SD_disk_initialize>
 8008e4a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f8 fda3 	bl	80019ac <SD_disk_status>
 8008e66:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8008e80:	7bf8      	ldrb	r0, [r7, #15]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	f7f8 fda4 	bl	80019d4 <SD_disk_read>
 8008e8c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8008ea6:	7bf8      	ldrb	r0, [r7, #15]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	f7f8 fdfb 	bl	8001aa8 <SD_disk_write>
 8008eb2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	603a      	str	r2, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8008ecc:	79b9      	ldrb	r1, [r7, #6]
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f8 fe6c 	bl	8001bb0 <SD_disk_ioctl>
 8008ed8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008efa:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008efc:	7a5b      	ldrb	r3, [r3, #9]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d831      	bhi.n	8008f68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f04:	4b1b      	ldr	r3, [pc, #108]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f06:	7a5b      	ldrb	r3, [r3, #9]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4b19      	ldr	r3, [pc, #100]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f0e:	2100      	movs	r1, #0
 8008f10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008f12:	4b18      	ldr	r3, [pc, #96]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f14:	7a5b      	ldrb	r3, [r3, #9]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	4a16      	ldr	r2, [pc, #88]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008f22:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f24:	7a5b      	ldrb	r3, [r3, #9]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f2c:	4413      	add	r3, r2
 8008f2e:	79fa      	ldrb	r2, [r7, #7]
 8008f30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008f32:	4b10      	ldr	r3, [pc, #64]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f34:	7a5b      	ldrb	r3, [r3, #9]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	b2d1      	uxtb	r1, r2
 8008f3c:	4a0d      	ldr	r2, [pc, #52]	; (8008f74 <FATFS_LinkDriverEx+0x90>)
 8008f3e:	7251      	strb	r1, [r2, #9]
 8008f40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008f42:	7dbb      	ldrb	r3, [r7, #22]
 8008f44:	3330      	adds	r3, #48	; 0x30
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	223a      	movs	r2, #58	; 0x3a
 8008f52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	3302      	adds	r3, #2
 8008f58:	222f      	movs	r2, #47	; 0x2f
 8008f5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	3303      	adds	r3, #3
 8008f60:	2200      	movs	r2, #0
 8008f62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc80      	pop	{r7}
 8008f72:	4770      	bx	lr
 8008f74:	20000930 	.word	0x20000930

08008f78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f82:	2200      	movs	r2, #0
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff ffac 	bl	8008ee4 <FATFS_LinkDriverEx>
 8008f8c:	4603      	mov	r3, r0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <__libc_init_array>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	4d0c      	ldr	r5, [pc, #48]	; (8008fd0 <__libc_init_array+0x38>)
 8008f9e:	4c0d      	ldr	r4, [pc, #52]	; (8008fd4 <__libc_init_array+0x3c>)
 8008fa0:	1b64      	subs	r4, r4, r5
 8008fa2:	10a4      	asrs	r4, r4, #2
 8008fa4:	42a6      	cmp	r6, r4
 8008fa6:	d109      	bne.n	8008fbc <__libc_init_array+0x24>
 8008fa8:	f000 f830 	bl	800900c <_init>
 8008fac:	2600      	movs	r6, #0
 8008fae:	4d0a      	ldr	r5, [pc, #40]	; (8008fd8 <__libc_init_array+0x40>)
 8008fb0:	4c0a      	ldr	r4, [pc, #40]	; (8008fdc <__libc_init_array+0x44>)
 8008fb2:	1b64      	subs	r4, r4, r5
 8008fb4:	10a4      	asrs	r4, r4, #2
 8008fb6:	42a6      	cmp	r6, r4
 8008fb8:	d105      	bne.n	8008fc6 <__libc_init_array+0x2e>
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc0:	4798      	blx	r3
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	e7ee      	b.n	8008fa4 <__libc_init_array+0xc>
 8008fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fca:	4798      	blx	r3
 8008fcc:	3601      	adds	r6, #1
 8008fce:	e7f2      	b.n	8008fb6 <__libc_init_array+0x1e>
 8008fd0:	08009998 	.word	0x08009998
 8008fd4:	08009998 	.word	0x08009998
 8008fd8:	08009998 	.word	0x08009998
 8008fdc:	0800999c 	.word	0x0800999c

08008fe0 <memcpy>:
 8008fe0:	440a      	add	r2, r1
 8008fe2:	4291      	cmp	r1, r2
 8008fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fe8:	d100      	bne.n	8008fec <memcpy+0xc>
 8008fea:	4770      	bx	lr
 8008fec:	b510      	push	{r4, lr}
 8008fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff8:	d1f9      	bne.n	8008fee <memcpy+0xe>
 8008ffa:	bd10      	pop	{r4, pc}

08008ffc <memset>:
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	4402      	add	r2, r0
 8009000:	4293      	cmp	r3, r2
 8009002:	d100      	bne.n	8009006 <memset+0xa>
 8009004:	4770      	bx	lr
 8009006:	f803 1b01 	strb.w	r1, [r3], #1
 800900a:	e7f9      	b.n	8009000 <memset+0x4>

0800900c <_init>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr

08009018 <_fini>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr
