
GPSTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f48  0800d074  0800d074  0001d074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfbc  0800dfbc  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800dfbc  0800dfbc  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dfbc  0800dfbc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfbc  0800dfbc  0001dfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfc0  0800dfc0  0001dfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800dfc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  20000024  0800dfe8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  0800dfe8  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b149  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c87  00000000  00000000  0006b196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035c0  00000000  00000000  00070e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000032e0  00000000  00000000  000743e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d87c  00000000  00000000  000776c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cd26  00000000  00000000  00094f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a508f  00000000  00000000  000c1c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166cf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e800  00000000  00000000  00166d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d05c 	.word	0x0800d05c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800d05c 	.word	0x0800d05c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <initGPS>:
extern uint8_t time_updated;
extern uint8_t date_updated;


void initGPS(GPSdata * _gps)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	initGPSmodel(_gps);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f8b7 	bl	80008bc <initGPSmodel>



	configGPS();	// Sends directives for selected NMEA talkers
 800074e:	f000 f83f 	bl	80007d0 <configGPS>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <updateGPS>:

/**
  * @brief
  */
void updateGPS()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000762:	af00      	add	r7, sp, #0
	uint8_t* ptrSentence;
	extern uint8_t usart_rx_dma_buffer[];
	uint8_t copy_buffer[MAX_NMEA_LEN];

	uint8_t fields[FIELD_BUFF][FIELD_BUFF];
	for(uint8_t i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000764:	2300      	movs	r3, #0
 8000766:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
 800076a:	e011      	b.n	8000790 <updateGPS+0x34>
			        memset(fields[i], END_OF_STRING, FIELD_BUFF);
 800076c:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 8000770:	1d39      	adds	r1, r7, #4
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	2214      	movs	r2, #20
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f00c fc63 	bl	800d04c <memset>
	for(uint8_t i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000786:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800078a:	3301      	adds	r3, #1
 800078c:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
 8000790:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8000794:	2b13      	cmp	r3, #19
 8000796:	d9e9      	bls.n	800076c <updateGPS+0x10>

	memcpy(copy_buffer, usart_rx_dma_buffer, MAX_NMEA_LEN);
 8000798:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800079c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80007a0:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <updateGPS+0x6c>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	4611      	mov	r1, r2
 80007a6:	f240 238a 	movw	r3, #650	; 0x28a
 80007aa:	461a      	mov	r2, r3
 80007ac:	f00c fc40 	bl	800d030 <memcpy>

	getMessageFields( copy_buffer, "GPGGA", fields );
 80007b0:	1d3a      	adds	r2, r7, #4
 80007b2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80007b6:	4905      	ldr	r1, [pc, #20]	; (80007cc <updateGPS+0x70>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f916 	bl	80009ea <getMessageFields>
	/*
	if(!(time_updated && date_updated))
	{
		updateTime(copy_buffer);
	}*/
}
 80007be:	bf00      	nop
 80007c0:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001d0 	.word	0x200001d0
 80007cc:	0800d074 	.word	0x0800d074

080007d0 <configGPS>:
/**
  * @brief  Config NMEA talkers
  * @retval -
  */
void configGPS()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b092      	sub	sp, #72	; 0x48
 80007d4:	af00      	add	r7, sp, #0
	uint8_t const enable_ZDA [ZDA_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x08, 0x01, 0x03, 0x20};
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <configGPS+0xd0>)
 80007d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007de:	c303      	stmia	r3!, {r0, r1}
 80007e0:	801a      	strh	r2, [r3, #0]
 80007e2:	3302      	adds	r3, #2
 80007e4:	0c12      	lsrs	r2, r2, #16
 80007e6:	701a      	strb	r2, [r3, #0]
	const uint8_t enable_GGA [GGA_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x01, 0xFB, 0x10};
 80007e8:	4a2e      	ldr	r2, [pc, #184]	; (80008a4 <configGPS+0xd4>)
 80007ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f0:	c303      	stmia	r3!, {r0, r1}
 80007f2:	801a      	strh	r2, [r3, #0]
 80007f4:	3302      	adds	r3, #2
 80007f6:	0c12      	lsrs	r2, r2, #16
 80007f8:	701a      	strb	r2, [r3, #0]
	const uint8_t enable_GBS [GBS_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x01, 0x04, 0x22};
 80007fa:	4a2b      	ldr	r2, [pc, #172]	; (80008a8 <configGPS+0xd8>)
 80007fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000800:	ca07      	ldmia	r2, {r0, r1, r2}
 8000802:	c303      	stmia	r3!, {r0, r1}
 8000804:	801a      	strh	r2, [r3, #0]
 8000806:	3302      	adds	r3, #2
 8000808:	0c12      	lsrs	r2, r2, #16
 800080a:	701a      	strb	r2, [r3, #0]
	const uint8_t disable_RMC[RMC_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17};
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <configGPS+0xdc>)
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	ca07      	ldmia	r2, {r0, r1, r2}
 8000814:	c303      	stmia	r3!, {r0, r1}
 8000816:	801a      	strh	r2, [r3, #0]
 8000818:	3302      	adds	r3, #2
 800081a:	0c12      	lsrs	r2, r2, #16
 800081c:	701a      	strb	r2, [r3, #0]
	const uint8_t disable_GLL[GLL_PAYLOAD] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x01, 0x00, 0xFB, 0x11};
 800081e:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <configGPS+0xe0>)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	ca07      	ldmia	r2, {r0, r1, r2}
 8000826:	c303      	stmia	r3!, {r0, r1}
 8000828:	801a      	strh	r2, [r3, #0]
 800082a:	3302      	adds	r3, #2
 800082c:	0c12      	lsrs	r2, r2, #16
 800082e:	701a      	strb	r2, [r3, #0]
	const uint8_t power_save [RXM_PAYLOAD] = {0xB5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x08, 0x01, 0x22, 0x92};
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <configGPS+0xe4>)
 8000832:	463b      	mov	r3, r7
 8000834:	ca07      	ldmia	r2, {r0, r1, r2}
 8000836:	c303      	stmia	r3!, {r0, r1}
 8000838:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, enable_ZDA, ZDA_PAYLOAD,1000);
 800083a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	220b      	movs	r2, #11
 8000844:	481c      	ldr	r0, [pc, #112]	; (80008b8 <configGPS+0xe8>)
 8000846:	f007 fd9a 	bl	800837e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, enable_GGA, GGA_PAYLOAD,1000);
 800084a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	220b      	movs	r2, #11
 8000854:	4818      	ldr	r0, [pc, #96]	; (80008b8 <configGPS+0xe8>)
 8000856:	f007 fd92 	bl	800837e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, enable_GBS, GBS_PAYLOAD,1000);
 800085a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	220b      	movs	r2, #11
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <configGPS+0xe8>)
 8000866:	f007 fd8a 	bl	800837e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, disable_RMC, RMC_PAYLOAD,1000);
 800086a:	f107 0118 	add.w	r1, r7, #24
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	220b      	movs	r2, #11
 8000874:	4810      	ldr	r0, [pc, #64]	; (80008b8 <configGPS+0xe8>)
 8000876:	f007 fd82 	bl	800837e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, disable_GLL, GLL_PAYLOAD,1000);
 800087a:	f107 010c 	add.w	r1, r7, #12
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	220b      	movs	r2, #11
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <configGPS+0xe8>)
 8000886:	f007 fd7a 	bl	800837e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, power_save, RXM_PAYLOAD,1000);
 800088a:	4639      	mov	r1, r7
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	220a      	movs	r2, #10
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <configGPS+0xe8>)
 8000894:	f007 fd73 	bl	800837e <HAL_UART_Transmit>
}
 8000898:	bf00      	nop
 800089a:	3748      	adds	r7, #72	; 0x48
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	0800d07c 	.word	0x0800d07c
 80008a4:	0800d088 	.word	0x0800d088
 80008a8:	0800d094 	.word	0x0800d094
 80008ac:	0800d0a0 	.word	0x0800d0a0
 80008b0:	0800d0ac 	.word	0x0800d0ac
 80008b4:	0800d0b8 	.word	0x0800d0b8
 80008b8:	2000014c 	.word	0x2000014c

080008bc <initGPSmodel>:
/**
  * @brief  Init GPS attributes.
  * @retval -
  */
void initGPSmodel(GPSdata * self)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	  self->latitude = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
	  self->longitude = 0;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f04f 0200 	mov.w	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
	  self->GPS_fix = 0;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	721a      	strb	r2, [r3, #8]
	  self->satellites_in_view = 0;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	725a      	strb	r2, [r3, #9]
	  self->HDOP = 0;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	729a      	strb	r2, [r3, #10]
	  self->altitude = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	72da      	strb	r2, [r3, #11]
	  //self->sat_list = NULL;
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <copyValues>:
 *  @param field_count count o fields to copy
 *  @param dest matrix to copy the values
 *  @return -
 */
void copyValues(uint8_t** fields, uint8_t field_count , uint8_t dest[FIELD_BUFF][FIELD_BUFF])
{
 80008f6:	b590      	push	{r4, r7, lr}
 80008f8:	b087      	sub	sp, #28
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	460b      	mov	r3, r1
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	72fb      	strb	r3, [r7, #11]
	for(uint8_t index = 0; index<field_count;index++)
 8000904:	2300      	movs	r3, #0
 8000906:	75fb      	strb	r3, [r7, #23]
 8000908:	e066      	b.n	80009d8 <copyValues+0xe2>
	{
		if( fields[index] == NULL) return;
 800090a:	7dfb      	ldrb	r3, [r7, #23]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d064      	beq.n	80009e2 <copyValues+0xec>

		/* if the next char in fields[index] string is a comma
		 * it means the field is empty */
		if (COMA == *(fields[index] + NEXT) ||
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b2c      	cmp	r3, #44	; 0x2c
 8000928:	d053      	beq.n	80009d2 <copyValues+0xdc>
			END_STAR == *(fields[index] + NEXT)) 
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	781b      	ldrb	r3, [r3, #0]
		if (COMA == *(fields[index] + NEXT) ||
 8000938:	2b2a      	cmp	r3, #42	; 0x2a
 800093a:	d04a      	beq.n	80009d2 <copyValues+0xdc>
			;
		}
		else
		{
			/* checks if it's the last pointer with data*/
			if (fields[index + NEXT])
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	3301      	adds	r3, #1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d01f      	beq.n	800098c <copyValues+0x96>
			{
				memcpy( dest[index], fields[index] + NEXT, fields[NEXT + index] - fields[index] - 1);
 800094c:	7dfa      	ldrb	r2, [r7, #23]
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1898      	adds	r0, r3, r2
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	1c5c      	adds	r4, r3, #1
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	3301      	adds	r3, #1
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	68f9      	ldr	r1, [r7, #12]
 800097a:	440b      	add	r3, r1
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	3b01      	subs	r3, #1
 8000982:	461a      	mov	r2, r3
 8000984:	4621      	mov	r1, r4
 8000986:	f00c fb53 	bl	800d030 <memcpy>
 800098a:	e022      	b.n	80009d2 <copyValues+0xdc>
			}
			/* if it's the last pointer, copies char by char until * */
			else
			{
				uint8_t subIndex = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	75bb      	strb	r3, [r7, #22]
				do
				{
					/* copy until * */
					dest[index][subIndex] = fields[index][subIndex + NEXT];
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	7dbb      	ldrb	r3, [r7, #22]
 800099c:	3301      	adds	r3, #1
 800099e:	18d1      	adds	r1, r2, r3
 80009a0:	7dfa      	ldrb	r2, [r7, #23]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	441a      	add	r2, r3
 80009b0:	7dbb      	ldrb	r3, [r7, #22]
 80009b2:	7809      	ldrb	r1, [r1, #0]
 80009b4:	54d1      	strb	r1, [r2, r3]
				} while ( fields[index][++subIndex + NEXT] != END_STAR);
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4413      	add	r3, r2
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	7dbb      	ldrb	r3, [r7, #22]
 80009c2:	3301      	adds	r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
 80009c6:	7dbb      	ldrb	r3, [r7, #22]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b2a      	cmp	r3, #42	; 0x2a
 80009d0:	d1de      	bne.n	8000990 <copyValues+0x9a>
	for(uint8_t index = 0; index<field_count;index++)
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
 80009d4:	3301      	adds	r3, #1
 80009d6:	75fb      	strb	r3, [r7, #23]
 80009d8:	7dfa      	ldrb	r2, [r7, #23]
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d394      	bcc.n	800090a <copyValues+0x14>
 80009e0:	e000      	b.n	80009e4 <copyValues+0xee>
		if( fields[index] == NULL) return;
 80009e2:	bf00      	nop
			}
		}		
	}
}
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}

080009ea <getMessageFields>:
 *  @param ptrTalker pointer to the talker from wich get the message.
 *  @param fieldsArray matrix to copy the values
 *  @return -
 */
void  getMessageFields(uint8_t* ptrMessage, uint8_t* ptrTalker, uint8_t** fields_array )
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b09c      	sub	sp, #112	; 0x70
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	/* define an array of pointer to reference where each value 
	* is allocated in the message */
	uint8_t* fields[FIELD_BUFF];
	uint8_t* auxPtrMessage;

	for(i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80009fc:	e00c      	b.n	8000a18 <getMessageFields+0x2e>
		fields[i] = NULL;
 80009fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	3370      	adds	r3, #112	; 0x70
 8000a06:	443b      	add	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f843 2c5c 	str.w	r2, [r3, #-92]
	for(i = 0; i<FIELD_BUFF; i++) // initializes all the pinters
 8000a0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a12:	3301      	adds	r3, #1
 8000a14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000a18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a1c:	2b13      	cmp	r3, #19
 8000a1e:	d9ee      	bls.n	80009fe <getMessageFields+0x14>

	auxPtrMessage = getMessageptr( ptrMessage, ptrTalker, NULL );
 8000a20:	2200      	movs	r2, #0
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f000 f8bf 	bl	8000ba8 <getMessageptr>
 8000a2a:	66b8      	str	r0, [r7, #104]	; 0x68
	if (NULL == auxPtrMessage) return; // if the talkers is not found, return
 8000a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d042      	beq.n	8000ab8 <getMessageFields+0xce>

	if ( ! isSentenceComplete( ptrMessage, auxPtrMessage ) ) return;
 8000a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f000 f845 	bl	8000ac4 <isSentenceComplete>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d03d      	beq.n	8000abc <getMessageFields+0xd2>
	

	uint8_t field_count = coma_count(auxPtrMessage);
 8000a40:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000a42:	f000 f86b 	bl	8000b1c <coma_count>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	for(i = 0; i< field_count; i++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000a52:	e01a      	b.n	8000a8a <getMessageFields+0xa0>
	{
		for(auxPtrMessage; !( (*auxPtrMessage) == COMA || (*auxPtrMessage) == END_STAR); auxPtrMessage++);
 8000a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a56:	3301      	adds	r3, #1
 8000a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b2c      	cmp	r3, #44	; 0x2c
 8000a60:	d003      	beq.n	8000a6a <getMessageFields+0x80>
 8000a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b2a      	cmp	r3, #42	; 0x2a
 8000a68:	d1f4      	bne.n	8000a54 <getMessageFields+0x6a>
		fields[i] = auxPtrMessage;
 8000a6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	3370      	adds	r3, #112	; 0x70
 8000a72:	443b      	add	r3, r7
 8000a74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a76:	f843 2c5c 	str.w	r2, [r3, #-92]
		auxPtrMessage++;
 8000a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	66bb      	str	r3, [r7, #104]	; 0x68
	for(i = 0; i< field_count; i++)
 8000a80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a84:	3301      	adds	r3, #1
 8000a86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000a8a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3e1      	bcc.n	8000a5a <getMessageFields+0x70>
	}
	fields[i] = NULL;
 8000a96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	3370      	adds	r3, #112	; 0x70
 8000a9e:	443b      	add	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f843 2c5c 	str.w	r2, [r3, #-92]

	copyValues(fields, field_count , fields_array);
 8000aa6:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff20 	bl	80008f6 <copyValues>
 8000ab6:	e002      	b.n	8000abe <getMessageFields+0xd4>
	if (NULL == auxPtrMessage) return; // if the talkers is not found, return
 8000ab8:	bf00      	nop
 8000aba:	e000      	b.n	8000abe <getMessageFields+0xd4>
	if ( ! isSentenceComplete( ptrMessage, auxPtrMessage ) ) return;
 8000abc:	bf00      	nop
}
 8000abe:	3770      	adds	r7, #112	; 0x70
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <isSentenceComplete>:
 *  @param ptrStart pointer to look where to start from
 *  @param ptrMessage pointer to the start of the message.
 *  @return True or False.
 */
uint8_t isSentenceComplete(uint8_t *ptrMessage, uint8_t *ptrStart)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	uint8_t* ptrAux;
	//checkea que la frase este completa
	for(ptrAux = ptrStart;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e002      	b.n	8000ada <isSentenceComplete+0x16>
			*ptrAux != '\r' && *ptrAux != END_OF_STRING && (ptrAux-ptrMessage) < DMA_BUFF_SIZE;
			ptrAux++);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
			*ptrAux != '\r' && *ptrAux != END_OF_STRING && (ptrAux-ptrMessage) < DMA_BUFF_SIZE;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	781b      	ldrb	r3, [r3, #0]
	for(ptrAux = ptrStart;
 8000ade:	2b0d      	cmp	r3, #13
 8000ae0:	d009      	beq.n	8000af6 <isSentenceComplete+0x32>
			*ptrAux != '\r' && *ptrAux != END_OF_STRING && (ptrAux-ptrMessage) < DMA_BUFF_SIZE;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d005      	beq.n	8000af6 <isSentenceComplete+0x32>
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000af4:	ddee      	ble.n	8000ad4 <isSentenceComplete+0x10>
	//si llego al final, devuelve NULL
	if((ptrAux-ptrMessage) == DMA_BUFF_SIZE || *ptrAux == END_OF_STRING)
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	f240 120b 	movw	r2, #267	; 0x10b
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d003      	beq.n	8000b0c <isSentenceComplete+0x48>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <isSentenceComplete+0x4c>
		return FALSE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e000      	b.n	8000b12 <isSentenceComplete+0x4e>
	else return TRUE;
 8000b10:	2301      	movs	r3, #1

}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <coma_count>:
 *
 *  @param string pointer that refers to where is expected tu start looking for.
 *  @return Number of commas.
 */
uint8_t coma_count(uint8_t* ptrMessage)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	uint8_t count=0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
	//aumenta el puntero hasta que encuentra una coma. Cuando la encuetra avanza
	//count y se va separando del inicio del puntero. Cuando no encuentra la coma
	//sigue aumentando el puntero hasta llegar al final.
	for (count=0U; ptrMessage[count] != END_STAR; 
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e00c      	b.n	8000b48 <coma_count+0x2c>
		 ptrMessage[count]==COMA ? count++ : *ptrMessage++);
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b2c      	cmp	r3, #44	; 0x2c
 8000b38:	d103      	bne.n	8000b42 <coma_count+0x26>
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e002      	b.n	8000b48 <coma_count+0x2c>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
	for (count=0U; ptrMessage[count] != END_STAR; 
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b2a      	cmp	r3, #42	; 0x2a
 8000b52:	d1ec      	bne.n	8000b2e <coma_count+0x12>
	return count;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <findStartChar>:
 *
 *  @param ptrStartBuff pointer that refers to where is expected tu start looking for.
 *  @return ptrAux. NULL if there is no match.
 */
uint8_t* findStartChar( uint8_t* ptrMessage, uint8_t *ptrStart )
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	uint8_t* ptrAux ;	// aux pointer for moving through the string
	for( ptrAux = ptrStart ;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	e002      	b.n	8000b76 <findStartChar+0x16>
		( '$' != *ptrAux ) && ( DMA_BUFF_SIZE > (ptrAux - ptrMessage) );
		ptrAux++);	//starts at the begining. Ends if it matches "$" or end of buffer
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
		( '$' != *ptrAux ) && ( DMA_BUFF_SIZE > (ptrAux - ptrMessage) );
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	781b      	ldrb	r3, [r3, #0]
	for( ptrAux = ptrStart ;
 8000b7a:	2b24      	cmp	r3, #36	; 0x24
 8000b7c:	d005      	beq.n	8000b8a <findStartChar+0x2a>
		( '$' != *ptrAux ) && ( DMA_BUFF_SIZE > (ptrAux - ptrMessage) );
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000b88:	ddf2      	ble.n	8000b70 <findStartChar+0x10>
	
	if( DMA_BUFF_SIZE == ( ptrAux - ptrMessage ) )
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	f240 120b 	movw	r2, #267	; 0x10b
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <findStartChar+0x3c>
		ptrAux= NULL;	// returns NULL if it didn't find a match
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
	
	return ptrAux;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <getMessageptr>:
 *  @param message pointer that refers to where is expected tu start looking for.
 *  @param type string to find. NMEA Talker
 *  @return token to start of message. NULL if there is no match.
 */
uint8_t* getMessageptr(uint8_t *message, const char *type,  uint8_t *init_ptr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	uint8_t* tok;
	const char * type_offset;
	uint8_t* tok_offset;

	/* assign aux pointers */
	if ( NULL == init_ptr ) tok = message;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <getMessageptr+0x18>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	e001      	b.n	8000bc4 <getMessageptr+0x1c>
	else tok = init_ptr;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	61fb      	str	r3, [r7, #28]


	do
	{
		if( !(tok = findStartChar(message, tok) ) ) return NULL; //looks for next $ ocurrence
 8000bc4:	69f9      	ldr	r1, [r7, #28]
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff ffca 	bl	8000b60 <findStartChar>
 8000bcc:	61f8      	str	r0, [r7, #28]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <getMessageptr+0x30>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e028      	b.n	8000c2a <getMessageptr+0x82>
		tok++;	// findStartChar return a pointer to $. moves one more 
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
		#ifdef WINDOWS
		printTalker(tok);
		#endif

		type_offset= type;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	61bb      	str	r3, [r7, #24]
		tok_offset = tok;
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	617b      	str	r3, [r7, #20]

		/* compares the chars in type string
		 * until the end or a failed match
		 */
		while( ( *tok_offset ) == ( *type_offset )
 8000be6:	e005      	b.n	8000bf4 <getMessageptr+0x4c>
				&& END_OF_STRING != ( *type_offset ) )
		{
			tok_offset++;	// moves the pointer
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3301      	adds	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
			type_offset++;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
		while( ( *tok_offset ) == ( *type_offset )
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d103      	bne.n	8000c08 <getMessageptr+0x60>
				&& END_OF_STRING != ( *type_offset ) )
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ef      	bne.n	8000be8 <getMessageptr+0x40>
		}
	/* loop until reach the end of the buffer or 
	 * type_offset point to '\0', which means the type matched
	 * in the message
	 */ 
	}while ( END_OF_STRING != (*type_offset) &&
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
			DMA_BUFF_SIZE > (tok-message) );
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <getMessageptr+0x74>
 8000c10:	69fa      	ldr	r2, [r7, #28]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
	}while ( END_OF_STRING != (*type_offset) &&
 8000c16:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000c1a:	ddd3      	ble.n	8000bc4 <getMessageptr+0x1c>

	//checkea que haya cortado por coincidencia y no por fin del buffer
	if((*type_offset) != END_OF_STRING) return NULL;
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <getMessageptr+0x80>
 8000c24:	2300      	movs	r3, #0
 8000c26:	e000      	b.n	8000c2a <getMessageptr+0x82>

	return tok;
 8000c28:	69fb      	ldr	r3, [r7, #28]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <pow_10>:
 */
#include "GPS/tools.h"
#include <string.h>

int pow_10(uint8_t n)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
    if(!n) return 1;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <pow_10+0x14>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e012      	b.n	8000c6c <pow_10+0x3a>
    n--;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	71fb      	strb	r3, [r7, #7]
    int power = 10;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	60fb      	str	r3, [r7, #12]
    while(n)
 8000c50:	e008      	b.n	8000c64 <pow_10+0x32>
    {
        power*=10;
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
        n--;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	71fb      	strb	r3, [r7, #7]
    while(n)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f3      	bne.n	8000c52 <pow_10+0x20>
    }
    return power;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <int_to_ascii>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
__uint8_t int_to_ascii(int x, char dest[], __uint8_t d)
{
 8000c76:	b590      	push	{r4, r7, lr}
 8000c78:	b089      	sub	sp, #36	; 0x24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71fb      	strb	r3, [r7, #7]
    __uint8_t digit;
    __uint8_t negative = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	77bb      	strb	r3, [r7, #30]
    char * str;

    if(x == 0)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d11f      	bne.n	8000cce <int_to_ascii+0x58>
    {
        if(d)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <int_to_ascii+0x46>
        {
          __uint8_t d_aux = d;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	75bb      	strb	r3, [r7, #22]
          dest[d] = '\0';
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
          do
          {
            d--;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	71fb      	strb	r3, [r7, #7]
            dest[d] = '0';
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	2230      	movs	r2, #48	; 0x30
 8000cb0:	701a      	strb	r2, [r3, #0]
          }while(d);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f4      	bne.n	8000ca2 <int_to_ascii+0x2c>

          return d_aux;
 8000cb8:	7dbb      	ldrb	r3, [r7, #22]
 8000cba:	e069      	b.n	8000d90 <int_to_ascii+0x11a>
        }
        else
        {
            dest[0] = '0';
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2230      	movs	r2, #48	; 0x30
 8000cc0:	701a      	strb	r2, [r3, #0]
          dest[1] = '\0';
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
          return 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e060      	b.n	8000d90 <int_to_ascii+0x11a>
        }
    }

    if(x<0)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da08      	bge.n	8000ce6 <int_to_ascii+0x70>
    {
        negative = 1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	77bb      	strb	r3, [r7, #30]
        x = -x;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	425b      	negs	r3, r3
 8000cdc:	60fb      	str	r3, [r7, #12]
        str = dest +1;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	e001      	b.n	8000cea <int_to_ascii+0x74>
    }
    else str = dest;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	61bb      	str	r3, [r7, #24]

    for(digit = 0 ; x/pow_10(digit); digit++);
 8000cea:	2300      	movs	r3, #0
 8000cec:	77fb      	strb	r3, [r7, #31]
 8000cee:	e002      	b.n	8000cf6 <int_to_ascii+0x80>
 8000cf0:	7ffb      	ldrb	r3, [r7, #31]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	77fb      	strb	r3, [r7, #31]
 8000cf6:	7ffb      	ldrb	r3, [r7, #31]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff9a 	bl	8000c32 <pow_10>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f2      	bne.n	8000cf0 <int_to_ascii+0x7a>

    if(d>digit)
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	7ffb      	ldrb	r3, [r7, #31]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d90d      	bls.n	8000d2e <int_to_ascii+0xb8>
    {
       while(d>digit )
 8000d12:	e008      	b.n	8000d26 <int_to_ascii+0xb0>
       {
        *str = '0';
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2230      	movs	r2, #48	; 0x30
 8000d18:	701a      	strb	r2, [r3, #0]
        str++;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
        d--;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
       while(d>digit )
 8000d26:	79fa      	ldrb	r2, [r7, #7]
 8000d28:	7ffb      	ldrb	r3, [r7, #31]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d8f2      	bhi.n	8000d14 <int_to_ascii+0x9e>
       }

    }
    str[digit] = '\0';
 8000d2e:	7ffb      	ldrb	r3, [r7, #31]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4413      	add	r3, r2
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]

    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	75fb      	strb	r3, [r7, #23]
 8000d3c:	e01d      	b.n	8000d7a <int_to_ascii+0x104>
        str[digit - decimal -1 ] = (x/pow_10(decimal))%pow_10(1) +'0';
 8000d3e:	7dfb      	ldrb	r3, [r7, #23]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff76 	bl	8000c32 <pow_10>
 8000d46:	4602      	mov	r2, r0
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	fb93 f4f2 	sdiv	r4, r3, r2
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff ff6f 	bl	8000c32 <pow_10>
 8000d54:	4603      	mov	r3, r0
 8000d56:	fb94 f2f3 	sdiv	r2, r4, r3
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	1ae3      	subs	r3, r4, r3
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	7ff9      	ldrb	r1, [r7, #31]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	69b9      	ldr	r1, [r7, #24]
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3230      	adds	r2, #48	; 0x30
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]
    for( __uint8_t decimal = 0; decimal < digit; decimal++)
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	3301      	adds	r3, #1
 8000d78:	75fb      	strb	r3, [r7, #23]
 8000d7a:	7dfa      	ldrb	r2, [r7, #23]
 8000d7c:	7ffb      	ldrb	r3, [r7, #31]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3dd      	bcc.n	8000d3e <int_to_ascii+0xc8>

    if(negative)
 8000d82:	7fbb      	ldrb	r3, [r7, #30]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <int_to_ascii+0x118>
        dest[0] = '-';
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	222d      	movs	r2, #45	; 0x2d
 8000d8c:	701a      	strb	r2, [r3, #0]

    return digit;
 8000d8e:	7ffb      	ldrb	r3, [r7, #31]

}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3724      	adds	r7, #36	; 0x24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}

08000d98 <float_to_ascii>:

// Converts a floating-point/double number to a string.
void float_to_ascii(float n, uint8_t* res, uint8_t afterpoint)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	4613      	mov	r3, r2
 8000da4:	71fb      	strb	r3, [r7, #7]
    if(n<0)
 8000da6:	f04f 0100 	mov.w	r1, #0
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff fc7a 	bl	80006a4 <__aeabi_fcmplt>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d009      	beq.n	8000dca <float_to_ascii+0x32>
    {
        *res = '-';
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	222d      	movs	r2, #45	; 0x2d
 8000dba:	701a      	strb	r2, [r3, #0]
        res++;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
        n = -n;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000dc8:	60fb      	str	r3, [r7, #12]
    }
    // Extract integer part
    int ipart = (int)n;
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fc92 	bl	80006f4 <__aeabi_f2iz>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8000dd4:	69f8      	ldr	r0, [r7, #28]
 8000dd6:	f7ff fa73 	bl	80002c0 <__aeabi_i2f>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff f9b8 	bl	8000154 <__aeabi_fsub>
 8000de4:	4603      	mov	r3, r0
 8000de6:	61bb      	str	r3, [r7, #24]

    //if(fpart<0) fpart = -fpart;

    // convert integer part to string
    int i = int_to_ascii(ipart, res, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	69f8      	ldr	r0, [r7, #28]
 8000dee:	f7ff ff42 	bl	8000c76 <int_to_ascii>
 8000df2:	4603      	mov	r3, r0
 8000df4:	617b      	str	r3, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d020      	beq.n	8000e3e <float_to_ascii+0xa6>
        res[i++] = '.'; // add dot
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	617a      	str	r2, [r7, #20]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4413      	add	r3, r2
 8000e08:	222e      	movs	r2, #46	; 0x2e
 8000e0a:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow_10(afterpoint);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff0f 	bl	8000c32 <pow_10>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fa52 	bl	80002c0 <__aeabi_i2f>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	69b8      	ldr	r0, [r7, #24]
 8000e22:	f7ff faa1 	bl	8000368 <__aeabi_fmul>
 8000e26:	4603      	mov	r3, r0
 8000e28:	61bb      	str	r3, [r7, #24]

        int_to_ascii((int)fpart, res + i, afterpoint);
 8000e2a:	69b8      	ldr	r0, [r7, #24]
 8000e2c:	f7ff fc62 	bl	80006f4 <__aeabi_f2iz>
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	4413      	add	r3, r2
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff ff1c 	bl	8000c76 <int_to_ascii>
    }

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <insert_chars>:

void insert_chars(uint8_t *dest, uint8_t *src, uint8_t d)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b087      	sub	sp, #28
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	4613      	mov	r3, r2
 8000e52:	71fb      	strb	r3, [r7, #7]
	if(!dest || !src || *src == '\0' || !d) return;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d01c      	beq.n	8000e94 <insert_chars+0x4e>
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d019      	beq.n	8000e94 <insert_chars+0x4e>
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d015      	beq.n	8000e94 <insert_chars+0x4e>
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d012      	beq.n	8000e94 <insert_chars+0x4e>
    for(uint8_t i = 0; i<d; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
 8000e72:	e00a      	b.n	8000e8a <insert_chars+0x44>
        dest[i] = src[i];
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	441a      	add	r2, r3
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	68f9      	ldr	r1, [r7, #12]
 8000e7e:	440b      	add	r3, r1
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i<d; i++)
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	3301      	adds	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
 8000e8a:	7dfa      	ldrb	r2, [r7, #23]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3f0      	bcc.n	8000e74 <insert_chars+0x2e>
 8000e92:	e000      	b.n	8000e96 <insert_chars+0x50>
	if(!dest || !src || *src == '\0' || !d) return;
 8000e94:	bf00      	nop
}
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <get_time_string>:

void get_time_string(RTC_TimeTypeDef *Time, uint8_t *time_string)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	uint8_t few_chars[3] = "";
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <get_time_string+0x84>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	733b      	strb	r3, [r7, #12]
 8000eb0:	f107 030d 	add.w	r3, r7, #13
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
	int_to_ascii( (int) Time->Hours , few_chars, 2);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fed6 	bl	8000c76 <int_to_ascii>
	insert_chars(time_string, few_chars, 2);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f7ff ffb7 	bl	8000e46 <insert_chars>
	int_to_ascii( (int) Time->Minutes , few_chars, 2);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fec6 	bl	8000c76 <int_to_ascii>
	insert_chars(time_string+3, few_chars, 2);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3303      	adds	r3, #3
 8000eee:	f107 010c 	add.w	r1, r7, #12
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ffa6 	bl	8000e46 <insert_chars>
	int_to_ascii( (int) Time->Seconds , few_chars, 2);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2202      	movs	r2, #2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff feb5 	bl	8000c76 <int_to_ascii>
	insert_chars(time_string+6, few_chars, 2);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	3306      	adds	r3, #6
 8000f10:	f107 010c 	add.w	r1, r7, #12
 8000f14:	2202      	movs	r2, #2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff95 	bl	8000e46 <insert_chars>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800d0d4 	.word	0x0800d0d4

08000f28 <get_date_string>:

void get_date_string(RTC_DateTypeDef *Date, uint8_t *date_string)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	uint8_t few_chars[3] = "";
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <get_date_string+0x84>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	733b      	strb	r3, [r7, #12]
 8000f38:	f107 030d 	add.w	r3, r7, #13
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	801a      	strh	r2, [r3, #0]
	int_to_ascii( (int) Date->Date , few_chars, 2);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	789b      	ldrb	r3, [r3, #2]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fe92 	bl	8000c76 <int_to_ascii>
	insert_chars(date_string, few_chars, 2);
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2202      	movs	r2, #2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6838      	ldr	r0, [r7, #0]
 8000f5c:	f7ff ff73 	bl	8000e46 <insert_chars>
	int_to_ascii( (int) Date->Month , few_chars, 2);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fe82 	bl	8000c76 <int_to_ascii>
	insert_chars(date_string+3, few_chars, 2);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3303      	adds	r3, #3
 8000f76:	f107 010c 	add.w	r1, r7, #12
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff62 	bl	8000e46 <insert_chars>
	int_to_ascii( (int) Date->Year, few_chars, 2);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe71 	bl	8000c76 <int_to_ascii>
	insert_chars(date_string+6, few_chars, 2);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3306      	adds	r3, #6
 8000f98:	f107 010c 	add.w	r1, r7, #12
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff51 	bl	8000e46 <insert_chars>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0800d0d4 	.word	0x0800d0d4

08000fb0 <open_append>:

FRESULT open_append (
    FIL* fp,            /* [OUT] File object to create */
    const char* path    /* [IN]  File name to be opened */
)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 8000fba:	2212      	movs	r2, #18
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f00a fbc0 	bl	800b744 <f_open>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
    if (fr == FR_OK) {
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10f      	bne.n	8000fee <open_append+0x3e>
        /* Seek to end of the file to append data */
        fr = f_lseek(fp, f_size(fp));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f00b f9fd 	bl	800c3d8 <f_lseek>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
        if (fr != FR_OK)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <open_append+0x3e>
            f_close(fp);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f00b f9ca 	bl	800c382 <f_close>
    }
    return fr;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <log_data>:
	uint8_t len = strlen (string);
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
}

FRESULT log_data()
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
  FRESULT fr;
  FATFS fs;
  FIL fil;
  uint8_t time_string[11] = "  :  :   ,";
 8001002:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001006:	4a65      	ldr	r2, [pc, #404]	; (800119c <log_data+0x1a4>)
 8001008:	3b6c      	subs	r3, #108	; 0x6c
 800100a:	ca07      	ldmia	r2, {r0, r1, r2}
 800100c:	c303      	stmia	r3!, {r0, r1}
 800100e:	801a      	strh	r2, [r3, #0]
 8001010:	3302      	adds	r3, #2
 8001012:	0c12      	lsrs	r2, r2, #16
 8001014:	701a      	strb	r2, [r3, #0]
  uint8_t date_string[10] = "  /  /  ";
 8001016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800101a:	461c      	mov	r4, r3
 800101c:	4a60      	ldr	r2, [pc, #384]	; (80011a0 <log_data+0x1a8>)
 800101e:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8001022:	ca07      	ldmia	r2, {r0, r1, r2}
 8001024:	c303      	stmia	r3!, {r0, r1}
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	f804 3c6f 	strb.w	r3, [r4, #-111]
  uint8_t aux[10] = ",        ";
 800102e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001032:	4a5c      	ldr	r2, [pc, #368]	; (80011a4 <log_data+0x1ac>)
 8001034:	3b84      	subs	r3, #132	; 0x84
 8001036:	ca07      	ldmia	r2, {r0, r1, r2}
 8001038:	c303      	stmia	r3!, {r0, r1}
 800103a:	801a      	strh	r2, [r3, #0]
  uint8_t aux1[13] = ",          \n";
 800103c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001040:	4a59      	ldr	r2, [pc, #356]	; (80011a8 <log_data+0x1b0>)
 8001042:	f1a3 0494 	sub.w	r4, r3, #148	; 0x94
 8001046:	4613      	mov	r3, r2
 8001048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104a:	c407      	stmia	r4!, {r0, r1, r2}
 800104c:	7023      	strb	r3, [r4, #0]
  RTC_DateTypeDef Date;
  extern RTC_HandleTypeDef hrtc;
  extern GPSdata gps;

	/* Open or create a log file and ready to append */
  fr = f_mount(&fs, "", 0);
 800104e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001052:	3b14      	subs	r3, #20
 8001054:	2200      	movs	r2, #0
 8001056:	4955      	ldr	r1, [pc, #340]	; (80011ac <log_data+0x1b4>)
 8001058:	4618      	mov	r0, r3
 800105a:	f00a fb29 	bl	800b6b0 <f_mount>
 800105e:	4603      	mov	r3, r0
 8001060:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8001064:	f102 021f 	add.w	r2, r2, #31
 8001068:	7013      	strb	r3, [r2, #0]
  if ( fr != FR_OK )
 800106a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800106e:	f103 031f 	add.w	r3, r3, #31
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <log_data+0x8c>
  {
		//send_uart ("ERROR!!! in mounting SD CARD...\r\n");
		return fr;
 8001078:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800107c:	f103 031f 	add.w	r3, r3, #31
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	e085      	b.n	8001190 <log_data+0x198>
  }
  //else send_uart("SD CARD mounted successfully...\r\n");

  fr = open_append(&fil, "logfile.txt");
 8001084:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001088:	3b20      	subs	r3, #32
 800108a:	4949      	ldr	r1, [pc, #292]	; (80011b0 <log_data+0x1b8>)
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff8f 	bl	8000fb0 <open_append>
 8001092:	4603      	mov	r3, r0
 8001094:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8001098:	f102 021f 	add.w	r2, r2, #31
 800109c:	7013      	strb	r3, [r2, #0]
  if (fr != FR_OK)
 800109e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80010a2:	f103 031f 	add.w	r3, r3, #31
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <log_data+0xc0>
  {
		 // send_uart ("ERROR!!! openning file...\r\n");
		  return fr;
 80010ac:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80010b0:	f103 031f 	add.w	r3, r3, #31
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	e06b      	b.n	8001190 <log_data+0x198>
  }

	//send_uart ("logfile.txt opened\r\n");

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	3b18      	subs	r3, #24
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	483c      	ldr	r0, [pc, #240]	; (80011b4 <log_data+0x1bc>)
 80010c4:	f005 fc88 	bl	80069d8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	3b1c      	subs	r3, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4838      	ldr	r0, [pc, #224]	; (80011b4 <log_data+0x1bc>)
 80010d4:	f005 fe0e 	bl	8006cf4 <HAL_RTC_GetDate>

	get_time_string(&Time, time_string);
 80010d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010dc:	3a2c      	subs	r2, #44	; 0x2c
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	3b18      	subs	r3, #24
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff feda 	bl	8000ea0 <get_time_string>
	get_date_string(&Date, date_string);
 80010ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010f0:	3a38      	subs	r2, #56	; 0x38
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	3b1c      	subs	r3, #28
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff14 	bl	8000f28 <get_date_string>
	/* Append a line */
	f_printf(&fil, time_string);
 8001100:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001104:	3a2c      	subs	r2, #44	; 0x2c
 8001106:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800110a:	3b20      	subs	r3, #32
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f00b fc90 	bl	800ca34 <f_printf>
	f_printf(&fil, date_string);
 8001114:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001118:	3a38      	subs	r2, #56	; 0x38
 800111a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800111e:	3b20      	subs	r3, #32
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f00b fc86 	bl	800ca34 <f_printf>
	float_to_ascii(gps.latitude , aux+1, 6) ;
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <log_data+0x1c0>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	3b04      	subs	r3, #4
 8001132:	3301      	adds	r3, #1
 8001134:	2206      	movs	r2, #6
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fe2e 	bl	8000d98 <float_to_ascii>
	f_printf(&fil, aux);
 800113c:	f107 0220 	add.w	r2, r7, #32
 8001140:	3a04      	subs	r2, #4
 8001142:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001146:	3b20      	subs	r3, #32
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f00b fc72 	bl	800ca34 <f_printf>
	float_to_ascii(gps.longitude , aux1+1, 6) ;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <log_data+0x1c0>)
 8001152:	6858      	ldr	r0, [r3, #4]
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	3b14      	subs	r3, #20
 800115a:	3301      	adds	r3, #1
 800115c:	2206      	movs	r2, #6
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fe1a 	bl	8000d98 <float_to_ascii>
	aux1[11] = '\n';
 8001164:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001168:	220a      	movs	r2, #10
 800116a:	f803 2c89 	strb.w	r2, [r3, #-137]
	f_printf(&fil, aux1);
 800116e:	f107 0220 	add.w	r2, r7, #32
 8001172:	3a14      	subs	r2, #20
 8001174:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001178:	3b20      	subs	r3, #32
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f00b fc59 	bl	800ca34 <f_printf>
	/* Close the file */
	f_close(&fil);
 8001182:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001186:	3b20      	subs	r3, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f00b f8fa 	bl	800c382 <f_close>
	return FR_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8001196:	3724      	adds	r7, #36	; 0x24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	0800d0e8 	.word	0x0800d0e8
 80011a0:	0800d0f4 	.word	0x0800d0f4
 80011a4:	0800d100 	.word	0x0800d100
 80011a8:	0800d10c 	.word	0x0800d10c
 80011ac:	0800d0d8 	.word	0x0800d0d8
 80011b0:	0800d0dc 	.word	0x0800d0dc
 80011b4:	20000098 	.word	0x20000098
 80011b8:	200004e8 	.word	0x200004e8

080011bc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2110      	movs	r1, #16
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <SELECT+0x18>)
 80011c6:	f004 f8c2 	bl	800534e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f003 fb8e 	bl	80048ec <HAL_Delay>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010800 	.word	0x40010800

080011d8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2110      	movs	r1, #16
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <DESELECT+0x18>)
 80011e2:	f004 f8b4 	bl	800534e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f003 fb80 	bl	80048ec <HAL_Delay>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010800 	.word	0x40010800

080011f4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011fe:	bf00      	nop
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <SPI_TxByte+0x30>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b02      	cmp	r3, #2
 800120c:	d1f8      	bne.n	8001200 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800120e:	1df9      	adds	r1, r7, #7
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	2201      	movs	r2, #1
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <SPI_TxByte+0x30>)
 8001216:	f006 f8e7 	bl	80073e8 <HAL_SPI_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000ac 	.word	0x200000ac

08001228 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001234:	bf00      	nop
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <SPI_TxBuffer+0x30>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b02      	cmp	r3, #2
 8001242:	d1f8      	bne.n	8001236 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	2364      	movs	r3, #100	; 0x64
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <SPI_TxBuffer+0x30>)
 800124c:	f006 f8cc 	bl	80073e8 <HAL_SPI_Transmit>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000ac 	.word	0x200000ac

0800125c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001266:	bf00      	nop
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <SPI_RxByte+0x34>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b02      	cmp	r3, #2
 8001274:	d1f8      	bne.n	8001268 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001276:	1dba      	adds	r2, r7, #6
 8001278:	1df9      	adds	r1, r7, #7
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <SPI_RxByte+0x34>)
 8001282:	f006 f9ed 	bl	8007660 <HAL_SPI_TransmitReceive>

	return data;
 8001286:	79bb      	ldrb	r3, [r7, #6]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200000ac 	.word	0x200000ac

08001294 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800129c:	f7ff ffde 	bl	800125c <SPI_RxByte>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <SD_ReadyWait+0x30>)
 80012b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012bc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80012be:	f7ff ffcd 	bl	800125c <SPI_RxByte>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2bff      	cmp	r3, #255	; 0xff
 80012ca:	d004      	beq.n	80012d6 <SD_ReadyWait+0x26>
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SD_ReadyWait+0x30>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f3      	bne.n	80012be <SD_ReadyWait+0xe>

	return res;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200004f8 	.word	0x200004f8

080012e4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80012ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80012ee:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80012f0:	f7ff ff72 	bl	80011d8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	e005      	b.n	8001306 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80012fa:	20ff      	movs	r0, #255	; 0xff
 80012fc:	f7ff ff7a 	bl	80011f4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b09      	cmp	r3, #9
 800130a:	ddf6      	ble.n	80012fa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800130c:	f7ff ff56 	bl	80011bc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001324:	2395      	movs	r3, #149	; 0x95
 8001326:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001328:	463b      	mov	r3, r7
 800132a:	2106      	movs	r1, #6
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff7b 	bl	8001228 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001332:	e002      	b.n	800133a <SD_PowerOn+0x56>
	{
		cnt--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b01      	subs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800133a:	f7ff ff8f 	bl	800125c <SPI_RxByte>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d002      	beq.n	800134a <SD_PowerOn+0x66>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f4      	bne.n	8001334 <SD_PowerOn+0x50>
	}

	DESELECT();
 800134a:	f7ff ff45 	bl	80011d8 <DESELECT>
	SPI_TxByte(0XFF);
 800134e:	20ff      	movs	r0, #255	; 0xff
 8001350:	f7ff ff50 	bl	80011f4 <SPI_TxByte>

	PowerFlag = 1;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <SD_PowerOn+0x80>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000041 	.word	0x20000041

08001368 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <SD_PowerOff+0x14>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000041 	.word	0x20000041

08001380 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <SD_CheckPower+0x10>)
 8001386:	781b      	ldrb	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000041 	.word	0x20000041

08001394 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <SD_RxDataBlock+0x5c>)
 80013a0:	22c8      	movs	r2, #200	; 0xc8
 80013a2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80013a4:	f7ff ff5a 	bl	800125c <SPI_RxByte>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2bff      	cmp	r3, #255	; 0xff
 80013b0:	d104      	bne.n	80013bc <SD_RxDataBlock+0x28>
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <SD_RxDataBlock+0x5c>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f3      	bne.n	80013a4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2bfe      	cmp	r3, #254	; 0xfe
 80013c0:	d001      	beq.n	80013c6 <SD_RxDataBlock+0x32>
 80013c2:	2300      	movs	r3, #0
 80013c4:	e00f      	b.n	80013e6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff61 	bl	8001294 <SPI_RxBytePtr>
	} while(len--);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	603a      	str	r2, [r7, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f4      	bne.n	80013c6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80013dc:	f7ff ff3e 	bl	800125c <SPI_RxByte>
	SPI_RxByte();
 80013e0:	f7ff ff3c 	bl	800125c <SPI_RxByte>

	return TRUE;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200004f6 	.word	0x200004f6

080013f4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001404:	f7ff ff54 	bl	80012b0 <SD_ReadyWait>
 8001408:	4603      	mov	r3, r0
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d001      	beq.n	8001412 <SD_TxDataBlock+0x1e>
 800140e:	2300      	movs	r3, #0
 8001410:	e02f      	b.n	8001472 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff feed 	bl	80011f4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	2bfd      	cmp	r3, #253	; 0xfd
 800141e:	d020      	beq.n	8001462 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff feff 	bl	8001228 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800142a:	f7ff ff17 	bl	800125c <SPI_RxByte>
		SPI_RxByte();
 800142e:	f7ff ff15 	bl	800125c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001432:	e00b      	b.n	800144c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001434:	f7ff ff12 	bl	800125c <SPI_RxByte>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2b05      	cmp	r3, #5
 8001444:	d006      	beq.n	8001454 <SD_TxDataBlock+0x60>
			i++;
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	3301      	adds	r3, #1
 800144a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	2b40      	cmp	r3, #64	; 0x40
 8001450:	d9f0      	bls.n	8001434 <SD_TxDataBlock+0x40>
 8001452:	e000      	b.n	8001456 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001454:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001456:	bf00      	nop
 8001458:	f7ff ff00 	bl	800125c <SPI_RxByte>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0fa      	beq.n	8001458 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	2b05      	cmp	r3, #5
 800146a:	d101      	bne.n	8001470 <SD_TxDataBlock+0x7c>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	6039      	str	r1, [r7, #0]
 8001484:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001486:	f7ff ff13 	bl	80012b0 <SD_ReadyWait>
 800148a:	4603      	mov	r3, r0
 800148c:	2bff      	cmp	r3, #255	; 0xff
 800148e:	d001      	beq.n	8001494 <SD_SendCmd+0x1a>
 8001490:	23ff      	movs	r3, #255	; 0xff
 8001492:	e042      	b.n	800151a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff feac 	bl	80011f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	0e1b      	lsrs	r3, r3, #24
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fea6 	bl	80011f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fea0 	bl	80011f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe9a 	bl	80011f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe95 	bl	80011f4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b40      	cmp	r3, #64	; 0x40
 80014ce:	d102      	bne.n	80014d6 <SD_SendCmd+0x5c>
 80014d0:	2395      	movs	r3, #149	; 0x95
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e007      	b.n	80014e6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b48      	cmp	r3, #72	; 0x48
 80014da:	d102      	bne.n	80014e2 <SD_SendCmd+0x68>
 80014dc:	2387      	movs	r3, #135	; 0x87
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e001      	b.n	80014e6 <SD_SendCmd+0x6c>
	else crc = 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fe83 	bl	80011f4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b4c      	cmp	r3, #76	; 0x4c
 80014f2:	d101      	bne.n	80014f8 <SD_SendCmd+0x7e>
 80014f4:	f7ff feb2 	bl	800125c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80014f8:	230a      	movs	r3, #10
 80014fa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80014fc:	f7ff feae 	bl	800125c <SPI_RxByte>
 8001500:	4603      	mov	r3, r0
 8001502:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001504:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001508:	2b00      	cmp	r3, #0
 800150a:	da05      	bge.n	8001518 <SD_SendCmd+0x9e>
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	3b01      	subs	r3, #1
 8001510:	73bb      	strb	r3, [r7, #14]
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f1      	bne.n	80014fc <SD_SendCmd+0x82>

	return res;
 8001518:	7b7b      	ldrb	r3, [r7, #13]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SD_disk_initialize+0x14>
 8001534:	2301      	movs	r3, #1
 8001536:	e0d6      	b.n	80016e6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001538:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <SD_disk_initialize+0x1cc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <SD_disk_initialize+0x2a>
 8001546:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <SD_disk_initialize+0x1cc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	e0cb      	b.n	80016e6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800154e:	f7ff fec9 	bl	80012e4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001552:	f7ff fe33 	bl	80011bc <SELECT>

	/* check disk type */
	type = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800155a:	2100      	movs	r1, #0
 800155c:	2040      	movs	r0, #64	; 0x40
 800155e:	f7ff ff8c 	bl	800147a <SD_SendCmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 80a6 	bne.w	80016b6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800156a:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <SD_disk_initialize+0x1d0>)
 800156c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001570:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001572:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001576:	2048      	movs	r0, #72	; 0x48
 8001578:	f7ff ff7f 	bl	800147a <SD_SendCmd>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d158      	bne.n	8001634 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e00c      	b.n	80015a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001588:	7bfc      	ldrb	r4, [r7, #15]
 800158a:	f7ff fe67 	bl	800125c <SPI_RxByte>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	f104 0310 	add.w	r3, r4, #16
 8001596:	443b      	add	r3, r7
 8001598:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d9ef      	bls.n	8001588 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015a8:	7abb      	ldrb	r3, [r7, #10]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	f040 8083 	bne.w	80016b6 <SD_disk_initialize+0x192>
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	2baa      	cmp	r3, #170	; 0xaa
 80015b4:	d17f      	bne.n	80016b6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015b6:	2100      	movs	r1, #0
 80015b8:	2077      	movs	r0, #119	; 0x77
 80015ba:	f7ff ff5e 	bl	800147a <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d807      	bhi.n	80015d4 <SD_disk_initialize+0xb0>
 80015c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015c8:	2069      	movs	r0, #105	; 0x69
 80015ca:	f7ff ff56 	bl	800147a <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80015d4:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <SD_disk_initialize+0x1d0>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1eb      	bne.n	80015b6 <SD_disk_initialize+0x92>
 80015de:	e000      	b.n	80015e2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015e0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <SD_disk_initialize+0x1d0>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d064      	beq.n	80016b6 <SD_disk_initialize+0x192>
 80015ec:	2100      	movs	r1, #0
 80015ee:	207a      	movs	r0, #122	; 0x7a
 80015f0:	f7ff ff43 	bl	800147a <SD_SendCmd>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d15d      	bne.n	80016b6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e00c      	b.n	800161a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001600:	7bfc      	ldrb	r4, [r7, #15]
 8001602:	f7ff fe2b 	bl	800125c <SPI_RxByte>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	f104 0310 	add.w	r3, r4, #16
 800160e:	443b      	add	r3, r7
 8001610:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	3301      	adds	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d9ef      	bls.n	8001600 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001620:	7a3b      	ldrb	r3, [r7, #8]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SD_disk_initialize+0x10a>
 800162a:	230c      	movs	r3, #12
 800162c:	e000      	b.n	8001630 <SD_disk_initialize+0x10c>
 800162e:	2304      	movs	r3, #4
 8001630:	73bb      	strb	r3, [r7, #14]
 8001632:	e040      	b.n	80016b6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001634:	2100      	movs	r1, #0
 8001636:	2077      	movs	r0, #119	; 0x77
 8001638:	f7ff ff1f 	bl	800147a <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	d808      	bhi.n	8001654 <SD_disk_initialize+0x130>
 8001642:	2100      	movs	r1, #0
 8001644:	2069      	movs	r0, #105	; 0x69
 8001646:	f7ff ff18 	bl	800147a <SD_SendCmd>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d801      	bhi.n	8001654 <SD_disk_initialize+0x130>
 8001650:	2302      	movs	r3, #2
 8001652:	e000      	b.n	8001656 <SD_disk_initialize+0x132>
 8001654:	2301      	movs	r3, #1
 8001656:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d10e      	bne.n	800167c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800165e:	2100      	movs	r1, #0
 8001660:	2077      	movs	r0, #119	; 0x77
 8001662:	f7ff ff0a 	bl	800147a <SD_SendCmd>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	d80e      	bhi.n	800168a <SD_disk_initialize+0x166>
 800166c:	2100      	movs	r1, #0
 800166e:	2069      	movs	r0, #105	; 0x69
 8001670:	f7ff ff03 	bl	800147a <SD_SendCmd>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d107      	bne.n	800168a <SD_disk_initialize+0x166>
 800167a:	e00d      	b.n	8001698 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800167c:	2100      	movs	r1, #0
 800167e:	2041      	movs	r0, #65	; 0x41
 8001680:	f7ff fefb 	bl	800147a <SD_SendCmd>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <SD_disk_initialize+0x1d0>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e1      	bne.n	8001658 <SD_disk_initialize+0x134>
 8001694:	e000      	b.n	8001698 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001696:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <SD_disk_initialize+0x1d0>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <SD_disk_initialize+0x18e>
 80016a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a6:	2050      	movs	r0, #80	; 0x50
 80016a8:	f7ff fee7 	bl	800147a <SD_SendCmd>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SD_disk_initialize+0x192>
 80016b2:	2300      	movs	r3, #0
 80016b4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <SD_disk_initialize+0x1d4>)
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80016bc:	f7ff fd8c 	bl	80011d8 <DESELECT>
	SPI_RxByte();
 80016c0:	f7ff fdcc 	bl	800125c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d008      	beq.n	80016dc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <SD_disk_initialize+0x1cc>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SD_disk_initialize+0x1cc>)
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e001      	b.n	80016e0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80016dc:	f7ff fe44 	bl	8001368 <SD_PowerOff>
	}

	return Stat;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <SD_disk_initialize+0x1cc>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000000 	.word	0x20000000
 80016f4:	200004f6 	.word	0x200004f6
 80016f8:	20000040 	.word	0x20000040

080016fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SD_disk_status+0x14>
 800170c:	2301      	movs	r3, #1
 800170e:	e002      	b.n	8001716 <SD_disk_status+0x1a>
	return Stat;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <SD_disk_status+0x24>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000

08001724 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <SD_disk_read+0x1c>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <SD_disk_read+0x20>
 8001740:	2304      	movs	r3, #4
 8001742:	e051      	b.n	80017e8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <SD_disk_read+0xcc>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SD_disk_read+0x32>
 8001752:	2303      	movs	r3, #3
 8001754:	e048      	b.n	80017e8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <SD_disk_read+0xd0>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <SD_disk_read+0x44>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	607b      	str	r3, [r7, #4]

	SELECT();
 8001768:	f7ff fd28 	bl	80011bc <SELECT>

	if (count == 1)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d111      	bne.n	8001796 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	2051      	movs	r0, #81	; 0x51
 8001776:	f7ff fe80 	bl	800147a <SD_SendCmd>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d129      	bne.n	80017d4 <SD_disk_read+0xb0>
 8001780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001784:	68b8      	ldr	r0, [r7, #8]
 8001786:	f7ff fe05 	bl	8001394 <SD_RxDataBlock>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d021      	beq.n	80017d4 <SD_disk_read+0xb0>
 8001790:	2300      	movs	r3, #0
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	e01e      	b.n	80017d4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	2052      	movs	r0, #82	; 0x52
 800179a:	f7ff fe6e 	bl	800147a <SD_SendCmd>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d117      	bne.n	80017d4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80017a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f7ff fdf3 	bl	8001394 <SD_RxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00a      	beq.n	80017ca <SD_disk_read+0xa6>
				buff += 512;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017ba:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3b01      	subs	r3, #1
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ed      	bne.n	80017a4 <SD_disk_read+0x80>
 80017c8:	e000      	b.n	80017cc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80017ca:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80017cc:	2100      	movs	r1, #0
 80017ce:	204c      	movs	r0, #76	; 0x4c
 80017d0:	f7ff fe53 	bl	800147a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80017d4:	f7ff fd00 	bl	80011d8 <DESELECT>
	SPI_RxByte();
 80017d8:	f7ff fd40 	bl	800125c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000040 	.word	0x20000040

080017f8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <SD_disk_write+0x1c>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <SD_disk_write+0x20>
 8001814:	2304      	movs	r3, #4
 8001816:	e06b      	b.n	80018f0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <SD_disk_write+0x100>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SD_disk_write+0x32>
 8001826:	2303      	movs	r3, #3
 8001828:	e062      	b.n	80018f0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <SD_disk_write+0x100>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SD_disk_write+0x44>
 8001838:	2302      	movs	r3, #2
 800183a:	e059      	b.n	80018f0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <SD_disk_write+0x104>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <SD_disk_write+0x56>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	607b      	str	r3, [r7, #4]

	SELECT();
 800184e:	f7ff fcb5 	bl	80011bc <SELECT>

	if (count == 1)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d110      	bne.n	800187a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	2058      	movs	r0, #88	; 0x58
 800185c:	f7ff fe0d 	bl	800147a <SD_SendCmd>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d13a      	bne.n	80018dc <SD_disk_write+0xe4>
 8001866:	21fe      	movs	r1, #254	; 0xfe
 8001868:	68b8      	ldr	r0, [r7, #8]
 800186a:	f7ff fdc3 	bl	80013f4 <SD_TxDataBlock>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d033      	beq.n	80018dc <SD_disk_write+0xe4>
			count = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	e030      	b.n	80018dc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <SD_disk_write+0x104>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001886:	2100      	movs	r1, #0
 8001888:	2077      	movs	r0, #119	; 0x77
 800188a:	f7ff fdf6 	bl	800147a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	2057      	movs	r0, #87	; 0x57
 8001892:	f7ff fdf2 	bl	800147a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	2059      	movs	r0, #89	; 0x59
 800189a:	f7ff fdee 	bl	800147a <SD_SendCmd>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11b      	bne.n	80018dc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018a4:	21fc      	movs	r1, #252	; 0xfc
 80018a6:	68b8      	ldr	r0, [r7, #8]
 80018a8:	f7ff fda4 	bl	80013f4 <SD_TxDataBlock>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <SD_disk_write+0xd0>
				buff += 512;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018b8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ee      	bne.n	80018a4 <SD_disk_write+0xac>
 80018c6:	e000      	b.n	80018ca <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018c8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80018ca:	21fd      	movs	r1, #253	; 0xfd
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fd91 	bl	80013f4 <SD_TxDataBlock>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <SD_disk_write+0xe4>
			{
				count = 1;
 80018d8:	2301      	movs	r3, #1
 80018da:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80018dc:	f7ff fc7c 	bl	80011d8 <DESELECT>
	SPI_RxByte();
 80018e0:	f7ff fcbc 	bl	800125c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000040 	.word	0x20000040

08001900 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08b      	sub	sp, #44	; 0x2c
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	603a      	str	r2, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	460b      	mov	r3, r1
 800190e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SD_disk_ioctl+0x1e>
 800191a:	2304      	movs	r3, #4
 800191c:	e115      	b.n	8001b4a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d124      	bne.n	8001974 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d012      	beq.n	8001958 <SD_disk_ioctl+0x58>
 8001932:	2b02      	cmp	r3, #2
 8001934:	dc1a      	bgt.n	800196c <SD_disk_ioctl+0x6c>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <SD_disk_ioctl+0x40>
 800193a:	2b01      	cmp	r3, #1
 800193c:	d006      	beq.n	800194c <SD_disk_ioctl+0x4c>
 800193e:	e015      	b.n	800196c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001940:	f7ff fd12 	bl	8001368 <SD_PowerOff>
			res = RES_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800194a:	e0fc      	b.n	8001b46 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800194c:	f7ff fcca 	bl	80012e4 <SD_PowerOn>
			res = RES_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001956:	e0f6      	b.n	8001b46 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	1c5c      	adds	r4, r3, #1
 800195c:	f7ff fd10 	bl	8001380 <SD_CheckPower>
 8001960:	4603      	mov	r3, r0
 8001962:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800196a:	e0ec      	b.n	8001b46 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800196c:	2304      	movs	r3, #4
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001972:	e0e8      	b.n	8001b46 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001974:	4b77      	ldr	r3, [pc, #476]	; (8001b54 <SD_disk_ioctl+0x254>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SD_disk_ioctl+0x86>
 8001982:	2303      	movs	r3, #3
 8001984:	e0e1      	b.n	8001b4a <SD_disk_ioctl+0x24a>

		SELECT();
 8001986:	f7ff fc19 	bl	80011bc <SELECT>

		switch (ctrl)
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	2b0d      	cmp	r3, #13
 800198e:	f200 80cb 	bhi.w	8001b28 <SD_disk_ioctl+0x228>
 8001992:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <SD_disk_ioctl+0x98>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	08001a93 	.word	0x08001a93
 800199c:	080019d1 	.word	0x080019d1
 80019a0:	08001a83 	.word	0x08001a83
 80019a4:	08001b29 	.word	0x08001b29
 80019a8:	08001b29 	.word	0x08001b29
 80019ac:	08001b29 	.word	0x08001b29
 80019b0:	08001b29 	.word	0x08001b29
 80019b4:	08001b29 	.word	0x08001b29
 80019b8:	08001b29 	.word	0x08001b29
 80019bc:	08001b29 	.word	0x08001b29
 80019c0:	08001b29 	.word	0x08001b29
 80019c4:	08001aa5 	.word	0x08001aa5
 80019c8:	08001ac9 	.word	0x08001ac9
 80019cc:	08001aed 	.word	0x08001aed
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019d0:	2100      	movs	r1, #0
 80019d2:	2049      	movs	r0, #73	; 0x49
 80019d4:	f7ff fd51 	bl	800147a <SD_SendCmd>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 80a8 	bne.w	8001b30 <SD_disk_ioctl+0x230>
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2110      	movs	r1, #16
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fcd4 	bl	8001394 <SD_RxDataBlock>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 809e 	beq.w	8001b30 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80019f4:	7b3b      	ldrb	r3, [r7, #12]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10e      	bne.n	8001a1c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80019fe:	7d7b      	ldrb	r3, [r7, #21]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	7d3b      	ldrb	r3, [r7, #20]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001a12:	8bfb      	ldrh	r3, [r7, #30]
 8001a14:	029a      	lsls	r2, r3, #10
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e02e      	b.n	8001a7a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a1c:	7c7b      	ldrb	r3, [r7, #17]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	7dbb      	ldrb	r3, [r7, #22]
 8001a26:	09db      	lsrs	r3, r3, #7
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	7d7b      	ldrb	r3, [r7, #21]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f003 0306 	and.w	r3, r3, #6
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a44:	7d3b      	ldrb	r3, [r7, #20]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	7cfb      	ldrb	r3, [r7, #19]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	7cbb      	ldrb	r3, [r7, #18]
 8001a5a:	029b      	lsls	r3, r3, #10
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a6c:	8bfa      	ldrh	r2, [r7, #30]
 8001a6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a72:	3b09      	subs	r3, #9
 8001a74:	409a      	lsls	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001a80:	e056      	b.n	8001b30 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a88:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a90:	e055      	b.n	8001b3e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001a92:	f7ff fc0d 	bl	80012b0 <SD_ReadyWait>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d14b      	bne.n	8001b34 <SD_disk_ioctl+0x234>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aa2:	e047      	b.n	8001b34 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2049      	movs	r0, #73	; 0x49
 8001aa8:	f7ff fce7 	bl	800147a <SD_SendCmd>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d142      	bne.n	8001b38 <SD_disk_ioctl+0x238>
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	6a38      	ldr	r0, [r7, #32]
 8001ab6:	f7ff fc6d 	bl	8001394 <SD_RxDataBlock>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d03b      	beq.n	8001b38 <SD_disk_ioctl+0x238>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ac6:	e037      	b.n	8001b38 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ac8:	2100      	movs	r1, #0
 8001aca:	204a      	movs	r0, #74	; 0x4a
 8001acc:	f7ff fcd5 	bl	800147a <SD_SendCmd>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d132      	bne.n	8001b3c <SD_disk_ioctl+0x23c>
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	6a38      	ldr	r0, [r7, #32]
 8001ada:	f7ff fc5b 	bl	8001394 <SD_RxDataBlock>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d02b      	beq.n	8001b3c <SD_disk_ioctl+0x23c>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aea:	e027      	b.n	8001b3c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001aec:	2100      	movs	r1, #0
 8001aee:	207a      	movs	r0, #122	; 0x7a
 8001af0:	f7ff fcc3 	bl	800147a <SD_SendCmd>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b00:	e00b      	b.n	8001b1a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001b02:	6a3c      	ldr	r4, [r7, #32]
 8001b04:	1c63      	adds	r3, r4, #1
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	f7ff fba8 	bl	800125c <SPI_RxByte>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b14:	3301      	adds	r3, #1
 8001b16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d9ef      	bls.n	8001b02 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b2e:	e006      	b.n	8001b3e <SD_disk_ioctl+0x23e>
			break;
 8001b30:	bf00      	nop
 8001b32:	e004      	b.n	8001b3e <SD_disk_ioctl+0x23e>
			break;
 8001b34:	bf00      	nop
 8001b36:	e002      	b.n	8001b3e <SD_disk_ioctl+0x23e>
			break;
 8001b38:	bf00      	nop
 8001b3a:	e000      	b.n	8001b3e <SD_disk_ioctl+0x23e>
			break;
 8001b3c:	bf00      	nop
		}

		DESELECT();
 8001b3e:	f7ff fb4b 	bl	80011d8 <DESELECT>
		SPI_RxByte();
 8001b42:	f7ff fb8b 	bl	800125c <SPI_RxByte>
	}

	return res;
 8001b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	372c      	adds	r7, #44	; 0x2c
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* TIM IT handler*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER TIM\r\n", strlen("ENTER TIM\r\n"),1000);
#endif

	updateScreen();	// Screen update
 8001b60:	f000 fee8 	bl	8002934 <updateScreen>

#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"EXIT TIM\r\n", strlen("EXIT TIM\r\n"),1000);
#endif
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_UART_RxIdleCallback>:

void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER IT_RXIDLE\r\n", strlen("ENTER IT_RXIDLE\r\n"),1000);
	HAL_UART_Transmit(&huart3, usart_rx_dma_buffer, strlen(usart_rx_dma_buffer),1000);
#endif

	updateGPS();
 8001b74:	f7fe fdf2 	bl	800075c <updateGPS>
	GPSupdated = 1;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_UART_RxIdleCallback+0x1c>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
#endif

	/*
	sprintf(tiempo, "%lu",HAL_GetTick()-mili);
	HAL_UART_Transmit(huart, (uint8_t *)tiempo, strlen(tiempo),1000);*/
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000045b 	.word	0x2000045b

08001b8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER EXTI\r\n", strlen("ENTER EXTI\r\n"),1000);
#endif
	longPress = HAL_GetTick();
 8001b96:	f002 fe9f 	bl	80048d8 <HAL_GetTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b9e:	6013      	str	r3, [r2, #0]
	switch(GPIO_Pin)
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d002      	beq.n	8001bac <HAL_GPIO_EXTI_Callback+0x20>
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d004      	beq.n	8001bb4 <HAL_GPIO_EXTI_Callback+0x28>
			break;
	}
#ifdef DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)"EXIT EXTI\r\n", strlen("EXIT EXTI\r\n"),1000);
#endif
}
 8001baa:	e007      	b.n	8001bbc <HAL_GPIO_EXTI_Callback+0x30>
			button_pressed = SIG_BUTTON;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
			break;
 8001bb2:	e003      	b.n	8001bbc <HAL_GPIO_EXTI_Callback+0x30>
			button_pressed = SEL_BUTTON;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	701a      	strb	r2, [r3, #0]
			break;
 8001bba:	bf00      	nop
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000460 	.word	0x20000460
 8001bc8:	2000045d 	.word	0x2000045d

08001bcc <check_buttons>:

void check_buttons()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	switch(button_pressed)
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <check_buttons+0x84>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d002      	beq.n	8001bde <check_buttons+0x12>
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d02f      	beq.n	8001c3c <check_buttons+0x70>
 8001bdc:	e032      	b.n	8001c44 <check_buttons+0x78>
	{
		case SIG_BUTTON:
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET );
 8001bde:	bf00      	nop
 8001be0:	2102      	movs	r1, #2
 8001be2:	481c      	ldr	r0, [pc, #112]	; (8001c54 <check_buttons+0x88>)
 8001be4:	f003 fb9c 	bl	8005320 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f8      	beq.n	8001be0 <check_buttons+0x14>
			if( ( HAL_GetTick() - longPress < LONG_TIME_PRESS) )
 8001bee:	f002 fe73 	bl	80048d8 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <check_buttons+0x8c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d80e      	bhi.n	8001c20 <check_buttons+0x54>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <check_buttons+0x90>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d103      	bne.n	8001c12 <check_buttons+0x46>
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <check_buttons+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
			else
				{
					screen_power ^= 1 << 1;
					u8g2_SetPowerSave(&u8g2, screen_power);
				}
			break;
 8001c10:	e018      	b.n	8001c44 <check_buttons+0x78>
				screen_number == 1 ? screen_number = 0 : screen_number++;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <check_buttons+0x90>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <check_buttons+0x90>)
 8001c1c:	701a      	strb	r2, [r3, #0]
			break;
 8001c1e:	e011      	b.n	8001c44 <check_buttons+0x78>
					screen_power ^= 1 << 1;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <check_buttons+0x94>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f083 0302 	eor.w	r3, r3, #2
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <check_buttons+0x94>)
 8001c2c:	701a      	strb	r2, [r3, #0]
					u8g2_SetPowerSave(&u8g2, screen_power);
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <check_buttons+0x94>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	480b      	ldr	r0, [pc, #44]	; (8001c64 <check_buttons+0x98>)
 8001c36:	f002 fcf3 	bl	8004620 <u8x8_SetPowerSave>
			break;
 8001c3a:	e003      	b.n	8001c44 <check_buttons+0x78>

		case SEL_BUTTON:
			button_pressed = SEL_BUTTON;
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <check_buttons+0x84>)
 8001c3e:	2202      	movs	r2, #2
 8001c40:	701a      	strb	r2, [r3, #0]
			break;
 8001c42:	bf00      	nop
	}
	button_pressed = 0;
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <check_buttons+0x84>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000045d 	.word	0x2000045d
 8001c54:	40010800 	.word	0x40010800
 8001c58:	20000460 	.word	0x20000460
 8001c5c:	2000045a 	.word	0x2000045a
 8001c60:	2000045c 	.word	0x2000045c
 8001c64:	20000464 	.word	0x20000464

08001c68 <Setup>:
/**
  * @brief  Init and setup Sreen, GPS, SD.
  * @retval int
  */
void Setup()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	initScreen(&u8g2); // Screen init, clear, home screen set
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <Setup+0x1c>)
 8001c6e:	f000 fe39 	bl	80028e4 <initScreen>

	HAL_Delay(1000);
 8001c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c76:	f002 fe39 	bl	80048ec <HAL_Delay>

	initGPS(&gps);	// Initialize default values for gps object
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <Setup+0x20>)
 8001c7c:	f7fe fd60 	bl	8000740 <initGPS>
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000464 	.word	0x20000464
 8001c88:	200004e8 	.word	0x200004e8

08001c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c90:	f002 fdca 	bl	8004828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c94:	f000 f848 	bl	8001d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c98:	f000 f9e6 	bl	8002068 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c9c:	f000 f9c6 	bl	800202c <MX_DMA_Init>
  MX_I2C1_Init();
 8001ca0:	f000 f89e 	bl	8001de0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ca4:	f000 f998 	bl	8001fd8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001ca8:	f000 f8c8 	bl	8001e3c <MX_RTC_Init>
  MX_FATFS_Init();
 8001cac:	f007 f830 	bl	8008d10 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001cb0:	f000 f90e 	bl	8001ed0 <MX_SPI1_Init>
#ifdef DEBUG
  MX_USART3_UART_Init();
#endif DEBUG
  MX_TIM3_Init();
 8001cb4:	f000 f942 	bl	8001f3c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /*Setup GPS model, OLED and SD*/
  Setup();
 8001cb8:	f7ff ffd6 	bl	8001c68 <Setup>

  /*Manual peripherial config*/
  HAL_UART_Receive_DMA(&huart1, usart_rx_dma_buffer, MAX_NMEA_LEN);	//Configure DMA
 8001cbc:	f240 228a 	movw	r2, #650	; 0x28a
 8001cc0:	4915      	ldr	r1, [pc, #84]	; (8001d18 <main+0x8c>)
 8001cc2:	4816      	ldr	r0, [pc, #88]	; (8001d1c <main+0x90>)
 8001cc4:	f006 fbee 	bl	80084a4 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim3);	//Configure TIM3 for OLED update
 8001cc8:	4815      	ldr	r0, [pc, #84]	; (8001d20 <main+0x94>)
 8001cca:	f005 ff61 	bl	8007b90 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);	// enable idle line interrupt
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <main+0x90>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <main+0x90>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0210 	orr.w	r2, r2, #16
 8001cdc:	60da      	str	r2, [r3, #12]

  while (1)
  {

	  /* Is there new position info?*/
	  if(GPSupdated)
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <main+0x98>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d014      	beq.n	8001d10 <main+0x84>
	  {
		  __HAL_UART_DISABLE_IT(UART1, UART_IT_IDLE);	//disables IT util data is updated
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <main+0x90>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <main+0x90>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0210 	bic.w	r2, r2, #16
 8001cf4:	60da      	str	r2, [r3, #12]
		  log_data();	// Saves data in SD
 8001cf6:	f7ff f97f 	bl	8000ff8 <log_data>
		  GPSupdated = 0;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <main+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_ENABLE_IT(UART1, UART_IT_IDLE);	// Enables IT again
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <main+0x90>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <main+0x90>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0210 	orr.w	r2, r2, #16
 8001d0e:	60da      	str	r2, [r3, #12]
	  }
	  check_buttons();
 8001d10:	f7ff ff5c 	bl	8001bcc <check_buttons>
	  if(GPSupdated)
 8001d14:	e7e3      	b.n	8001cde <main+0x52>
 8001d16:	bf00      	nop
 8001d18:	200001d0 	.word	0x200001d0
 8001d1c:	2000014c 	.word	0x2000014c
 8001d20:	20000104 	.word	0x20000104
 8001d24:	2000045b 	.word	0x2000045b

08001d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b094      	sub	sp, #80	; 0x50
 8001d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	2228      	movs	r2, #40	; 0x28
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00b f988 	bl	800d04c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d66:	2301      	movs	r3, #1
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 ff6c 	bl	8005c5c <HAL_RCC_OscConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d8a:	f000 f9cd 	bl	8002128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8e:	230f      	movs	r3, #15
 8001d90:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2102      	movs	r1, #2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 f9d8 	bl	8006160 <HAL_RCC_ClockConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001db6:	f000 f9b7 	bl	8002128 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001dbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fb62 	bl	8006490 <HAL_RCCEx_PeriphCLKConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001dd2:	f000 f9a9 	bl	8002128 <Error_Handler>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3750      	adds	r7, #80	; 0x50
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <MX_I2C1_Init+0x54>)
 8001de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001dec:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_I2C1_Init+0x58>)
 8001dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e1e:	f003 fac7 	bl	80053b0 <HAL_I2C_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e28:	f000 f97e 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000044 	.word	0x20000044
 8001e34:	40005400 	.word	0x40005400
 8001e38:	00061a80 	.word	0x00061a80

08001e3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2100      	movs	r1, #0
 8001e46:	460a      	mov	r2, r1
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <MX_RTC_Init+0x8c>)
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <MX_RTC_Init+0x90>)
 8001e56:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <MX_RTC_Init+0x8c>)
 8001e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_RTC_Init+0x8c>)
 8001e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e66:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e68:	4817      	ldr	r0, [pc, #92]	; (8001ec8 <MX_RTC_Init+0x8c>)
 8001e6a:	f004 fc87 	bl	800677c <HAL_RTC_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001e74:	f000 f958 	bl	8002128 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480f      	ldr	r0, [pc, #60]	; (8001ec8 <MX_RTC_Init+0x8c>)
 8001e8c:	f004 fd0c 	bl	80068a8 <HAL_RTC_SetTime>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001e96:	f000 f947 	bl	8002128 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 21;
 8001ea6:	2315      	movs	r3, #21
 8001ea8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001eaa:	463b      	mov	r3, r7
 8001eac:	2200      	movs	r2, #0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_RTC_Init+0x8c>)
 8001eb2:	f004 fe69 	bl	8006b88 <HAL_RTC_SetDate>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001ebc:	f000 f934 	bl	8002128 <Error_Handler>
	HAL_RTC_SetAlarm_IT (&hrtc, &Alarm, RTC_FORMAT_BIN);
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc,RTC_IT_ALRA);*/
  /* USER CODE END RTC_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000098 	.word	0x20000098
 8001ecc:	40002800 	.word	0x40002800

08001ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <MX_SPI1_Init+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001efc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f04:	2220      	movs	r2, #32
 8001f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f22:	f005 f9dd 	bl	80072e0 <HAL_SPI_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f2c:	f000 f8fc 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200000ac 	.word	0x200000ac
 8001f38:	40013000 	.word	0x40013000

08001f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	463b      	mov	r3, r7
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <MX_TIM3_Init+0x98>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f6e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001f72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f80:	4813      	ldr	r0, [pc, #76]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f82:	f005 fdb5 	bl	8007af0 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f8c:	f000 f8cc 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f9e:	f005 ff51 	bl	8007e44 <HAL_TIM_ConfigClockSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001fa8:	f000 f8be 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001fba:	f006 f923 	bl	8008204 <HAL_TIMEx_MasterConfigSynchronization>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001fc4:	f000 f8b0 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000104 	.word	0x20000104
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <MX_USART1_UART_Init+0x50>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8001fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_USART1_UART_Init+0x4c>)
 8002010:	f006 f968 	bl	80082e4 <HAL_UART_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800201a:	f000 f885 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000014c 	.word	0x2000014c
 8002028:	40013800 	.word	0x40013800

0800202c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_DMA_Init+0x38>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <MX_DMA_Init+0x38>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6153      	str	r3, [r2, #20]
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_DMA_Init+0x38>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	200f      	movs	r0, #15
 8002050:	f002 fd47 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002054:	200f      	movs	r0, #15
 8002056:	f002 fd60 	bl	8004b1a <HAL_NVIC_EnableIRQ>

}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000

08002068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <MX_GPIO_Init+0xb4>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <MX_GPIO_Init+0xb4>)
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <MX_GPIO_Init+0xb4>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <MX_GPIO_Init+0xb4>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a20      	ldr	r2, [pc, #128]	; (800211c <MX_GPIO_Init+0xb4>)
 800209a:	f043 0320 	orr.w	r3, r3, #32
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_GPIO_Init+0xb4>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <MX_GPIO_Init+0xb4>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <MX_GPIO_Init+0xb4>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <MX_GPIO_Init+0xb4>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_GPIO_Init+0xb4>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <MX_GPIO_Init+0xb4>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <MX_GPIO_Init+0xb4>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80020dc:	2306      	movs	r3, #6
 80020de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_GPIO_Init+0xb8>)
 80020e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4619      	mov	r1, r3
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <MX_GPIO_Init+0xbc>)
 80020f0:	f002 ff92 	bl	8005018 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2102      	movs	r1, #2
 80020f8:	2007      	movs	r0, #7
 80020fa:	f002 fcf2 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020fe:	2007      	movs	r0, #7
 8002100:	f002 fd0b 	bl	8004b1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2102      	movs	r1, #2
 8002108:	2008      	movs	r0, #8
 800210a:	f002 fcea 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800210e:	2008      	movs	r0, #8
 8002110:	f002 fd03 	bl	8004b1a <HAL_NVIC_EnableIRQ>

}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	10210000 	.word	0x10210000
 8002124:	40010800 	.word	0x40010800

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	e7fe      	b.n	8002130 <Error_Handler+0x8>
	...

08002134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_MspInit+0x5c>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_MspInit+0x5c>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6193      	str	r3, [r2, #24]
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_MspInit+0x5c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_MspInit+0x5c>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_MspInit+0x5c>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_MspInit+0x5c>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_MspInit+0x60>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_MspInit+0x60>)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000
 8002194:	40010000 	.word	0x40010000

08002198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <HAL_I2C_MspInit+0x70>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d123      	bne.n	8002200 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_I2C_MspInit+0x74>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a13      	ldr	r2, [pc, #76]	; (800220c <HAL_I2C_MspInit+0x74>)
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_I2C_MspInit+0x74>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d4:	2312      	movs	r3, #18
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	480b      	ldr	r0, [pc, #44]	; (8002210 <HAL_I2C_MspInit+0x78>)
 80021e4:	f002 ff18 	bl	8005018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_I2C_MspInit+0x74>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_I2C_MspInit+0x74>)
 80021ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f2:	61d3      	str	r3, [r2, #28]
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_I2C_MspInit+0x74>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40005400 	.word	0x40005400
 800220c:	40021000 	.word	0x40021000
 8002210:	40010c00 	.word	0x40010c00

08002214 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_RTC_MspInit+0x3c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d110      	bne.n	8002248 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002226:	f003 fd0d 	bl	8005c44 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RTC_MspInit+0x40>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_RTC_MspInit+0x40>)
 8002230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RTC_MspInit+0x40>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RTC_MspInit+0x44>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40002800 	.word	0x40002800
 8002254:	40021000 	.word	0x40021000
 8002258:	4242043c 	.word	0x4242043c

0800225c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_SPI_MspInit+0x88>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d12f      	bne.n	80022dc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_SPI_MspInit+0x8c>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_SPI_MspInit+0x8c>)
 8002282:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_SPI_MspInit+0x8c>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_SPI_MspInit+0x8c>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <HAL_SPI_MspInit+0x8c>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6193      	str	r3, [r2, #24]
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_SPI_MspInit+0x8c>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80022ac:	23b0      	movs	r3, #176	; 0xb0
 80022ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	480b      	ldr	r0, [pc, #44]	; (80022ec <HAL_SPI_MspInit+0x90>)
 80022c0:	f002 feaa 	bl	8005018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022c4:	2340      	movs	r3, #64	; 0x40
 80022c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	4619      	mov	r1, r3
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_SPI_MspInit+0x90>)
 80022d8:	f002 fe9e 	bl	8005018 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40013000 	.word	0x40013000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010800 	.word	0x40010800

080022f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_TIM_Base_MspInit+0x44>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d113      	bne.n	800232a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_TIM_Base_MspInit+0x48>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <HAL_TIM_Base_MspInit+0x48>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	61d3      	str	r3, [r2, #28]
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_TIM_Base_MspInit+0x48>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	201d      	movs	r0, #29
 8002320:	f002 fbdf 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002324:	201d      	movs	r0, #29
 8002326:	f002 fbf8 	bl	8004b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40000400 	.word	0x40000400
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a50      	ldr	r2, [pc, #320]	; (8002498 <HAL_UART_MspInit+0x15c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d161      	bne.n	8002420 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <HAL_UART_MspInit+0x160>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a4e      	ldr	r2, [pc, #312]	; (800249c <HAL_UART_MspInit+0x160>)
 8002362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_UART_MspInit+0x160>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b49      	ldr	r3, [pc, #292]	; (800249c <HAL_UART_MspInit+0x160>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a48      	ldr	r2, [pc, #288]	; (800249c <HAL_UART_MspInit+0x160>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b46      	ldr	r3, [pc, #280]	; (800249c <HAL_UART_MspInit+0x160>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800238c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	4619      	mov	r1, r3
 80023a0:	483f      	ldr	r0, [pc, #252]	; (80024a0 <HAL_UART_MspInit+0x164>)
 80023a2:	f002 fe39 	bl	8005018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 0318 	add.w	r3, r7, #24
 80023b8:	4619      	mov	r1, r3
 80023ba:	4839      	ldr	r0, [pc, #228]	; (80024a0 <HAL_UART_MspInit+0x164>)
 80023bc:	f002 fe2c 	bl	8005018 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023c2:	4a39      	ldr	r2, [pc, #228]	; (80024a8 <HAL_UART_MspInit+0x16c>)
 80023c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d8:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023e4:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023e6:	2220      	movs	r2, #32
 80023e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023f2:	482c      	ldr	r0, [pc, #176]	; (80024a4 <HAL_UART_MspInit+0x168>)
 80023f4:	f002 fbac 	bl	8004b50 <HAL_DMA_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80023fe:	f7ff fe93 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_UART_MspInit+0x168>)
 8002406:	635a      	str	r2, [r3, #52]	; 0x34
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_UART_MspInit+0x168>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	2025      	movs	r0, #37	; 0x25
 8002414:	f002 fb65 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002418:	2025      	movs	r0, #37	; 0x25
 800241a:	f002 fb7e 	bl	8004b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800241e:	e036      	b.n	800248e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a21      	ldr	r2, [pc, #132]	; (80024ac <HAL_UART_MspInit+0x170>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d131      	bne.n	800248e <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_UART_MspInit+0x160>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_UART_MspInit+0x160>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_UART_MspInit+0x160>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_UART_MspInit+0x160>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4a15      	ldr	r2, [pc, #84]	; (800249c <HAL_UART_MspInit+0x160>)
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6193      	str	r3, [r2, #24]
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_UART_MspInit+0x160>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800245a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002468:	f107 0318 	add.w	r3, r7, #24
 800246c:	4619      	mov	r1, r3
 800246e:	4810      	ldr	r0, [pc, #64]	; (80024b0 <HAL_UART_MspInit+0x174>)
 8002470:	f002 fdd2 	bl	8005018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 0318 	add.w	r3, r7, #24
 8002486:	4619      	mov	r1, r3
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <HAL_UART_MspInit+0x174>)
 800248a:	f002 fdc5 	bl	8005018 <HAL_GPIO_Init>
}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40013800 	.word	0x40013800
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	2000018c 	.word	0x2000018c
 80024a8:	40020058 	.word	0x40020058
 80024ac:	40004800 	.word	0x40004800
 80024b0:	40010c00 	.word	0x40010c00

080024b4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <SDTimer_Handler+0x3c>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <SDTimer_Handler+0x1c>
    Timer1--;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <SDTimer_Handler+0x3c>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <SDTimer_Handler+0x3c>)
 80024ce:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <SDTimer_Handler+0x40>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <SDTimer_Handler+0x34>
    Timer2--;
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <SDTimer_Handler+0x40>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <SDTimer_Handler+0x40>)
 80024e6:	801a      	strh	r2, [r3, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	200004f6 	.word	0x200004f6
 80024f4:	200004f8 	.word	0x200004f8

080024f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <NMI_Handler+0x4>

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <SysTick_Handler+0x30>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	3301      	adds	r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <SysTick_Handler+0x30>)
 800254c:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <SysTick_Handler+0x30>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b09      	cmp	r3, #9
 8002556:	d904      	bls.n	8002562 <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <SysTick_Handler+0x30>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 800255e:	f7ff ffa9 	bl	80024b4 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002562:	f002 f9a7 	bl	80048b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200004f4 	.word	0x200004f4

08002570 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002574:	2002      	movs	r0, #2
 8002576:	f002 ff03 	bl	8005380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}

0800257e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002582:	2004      	movs	r0, #4
 8002584:	f002 fefc 	bl	8005380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <DMA1_Channel5_IRQHandler+0x10>)
 8002592:	f002 fc0d 	bl	8004db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000018c 	.word	0x2000018c

080025a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM3_IRQHandler+0x10>)
 80025a6:	f005 fb45 	bl	8007c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000104 	.word	0x20000104

080025b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025ba:	4811      	ldr	r0, [pc, #68]	; (8002600 <USART1_IRQHandler+0x4c>)
 80025bc:	f005 fff2 	bl	80085a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) != RESET))
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <USART1_IRQHandler+0x4c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d114      	bne.n	80025f8 <USART1_IRQHandler+0x44>
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <USART1_IRQHandler+0x4c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <USART1_IRQHandler+0x44>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80025dc:	2300      	movs	r3, #0
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <USART1_IRQHandler+0x4c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <USART1_IRQHandler+0x4c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
	  HAL_UART_RxIdleCallback(&huart1);
 80025f2:	4803      	ldr	r0, [pc, #12]	; (8002600 <USART1_IRQHandler+0x4c>)
 80025f4:	f7ff faba 	bl	8001b6c <HAL_UART_RxIdleCallback>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000014c 	.word	0x2000014c

08002604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <u8x8_byte_stm32hal_hw_i2c>:
extern u8g2_t u8g2;
extern RTC_HandleTypeDef hrtc;
extern uint8_t screen_number;

uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	72fb      	strb	r3, [r7, #11]
 800261e:	4613      	mov	r3, r2
 8002620:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;


  switch(msg)
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	3b14      	subs	r3, #20
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d852      	bhi.n	80026d0 <u8x8_byte_stm32hal_hw_i2c+0xc0>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <u8x8_byte_stm32hal_hw_i2c+0x20>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	080026d5 	.word	0x080026d5
 8002634:	080026d1 	.word	0x080026d1
 8002638:	080026d1 	.word	0x080026d1
 800263c:	08002665 	.word	0x08002665
 8002640:	08002695 	.word	0x08002695
 8002644:	0800269d 	.word	0x0800269d
 8002648:	080026d1 	.word	0x080026d1
 800264c:	080026d1 	.word	0x080026d1
 8002650:	080026d1 	.word	0x080026d1
 8002654:	080026d1 	.word	0x080026d1
 8002658:	080026d1 	.word	0x080026d1
 800265c:	080026d1 	.word	0x080026d1
 8002660:	080026d5 	.word	0x080026d5
  {
    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	61fb      	str	r3, [r7, #28]
        while( arg_int > 0 )
 8002668:	e010      	b.n	800268c <u8x8_byte_stm32hal_hw_i2c+0x7c>
        {
			buffer[buf_idx++] = *data;
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	b2d1      	uxtb	r1, r2
 8002672:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002674:	7011      	strb	r1, [r2, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	7819      	ldrb	r1, [r3, #0]
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 800267e:	5499      	strb	r1, [r3, r2]
			data++;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
			arg_int--;
 8002686:	7abb      	ldrb	r3, [r7, #10]
 8002688:	3b01      	subs	r3, #1
 800268a:	72bb      	strb	r3, [r7, #10]
        while( arg_int > 0 )
 800268c:	7abb      	ldrb	r3, [r7, #10]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1eb      	bne.n	800266a <u8x8_byte_stm32hal_hw_i2c+0x5a>
        }
    }
    	break;
 8002692:	e020      	b.n	80026d6 <u8x8_byte_stm32hal_hw_i2c+0xc6>
    	break;
    case U8X8_MSG_BYTE_SET_DC:
    	break;
    case U8X8_MSG_BYTE_START_TRANSFER:
		{
			buf_idx = 0;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
		}
		break;
 800269a:	e01c      	b.n	80026d6 <u8x8_byte_stm32hal_hw_i2c+0xc6>
    case U8X8_MSG_BYTE_END_TRANSFER:
	{
		uint8_t iaddress = I2C_ADDRESS;
 800269c:	233c      	movs	r3, #60	; 0x3c
 800269e:	76fb      	strb	r3, [r7, #27]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iaddress<<1, &buffer[0], buf_idx, 20u);
 80026a0:	7efb      	ldrb	r3, [r7, #27]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	b299      	uxth	r1, r3
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2214      	movs	r2, #20
 80026b0:	9200      	str	r2, [sp, #0]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <u8x8_byte_stm32hal_hw_i2c+0xd8>)
 80026b6:	f002 ffbf 	bl	8005638 <HAL_I2C_Master_Transmit>
		volatile uint32_t i;
		for (i = 1; i <= 500; i++);
 80026ba:	2301      	movs	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e002      	b.n	80026c6 <u8x8_byte_stm32hal_hw_i2c+0xb6>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026cc:	d9f8      	bls.n	80026c0 <u8x8_byte_stm32hal_hw_i2c+0xb0>
	}
    	break;
 80026ce:	e002      	b.n	80026d6 <u8x8_byte_stm32hal_hw_i2c+0xc6>
    default:
      return 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e001      	b.n	80026d8 <u8x8_byte_stm32hal_hw_i2c+0xc8>
    	break;
 80026d4:	bf00      	nop
  }
  return 1;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200004fa 	.word	0x200004fa
 80026e4:	200004fc 	.word	0x200004fc
 80026e8:	20000044 	.word	0x20000044

080026ec <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	72fb      	strb	r3, [r7, #11]
 80026fa:	4613      	mov	r3, r2
 80026fc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	3b28      	subs	r3, #40	; 0x28
 8002702:	2b24      	cmp	r3, #36	; 0x24
 8002704:	d861      	bhi.n	80027ca <psoc_gpio_and_delay_cb+0xde>
 8002706:	a201      	add	r2, pc, #4	; (adr r2, 800270c <psoc_gpio_and_delay_cb+0x20>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	080027d5 	.word	0x080027d5
 8002710:	080027c1 	.word	0x080027c1
 8002714:	080027d5 	.word	0x080027d5
 8002718:	080027d5 	.word	0x080027d5
 800271c:	080027a1 	.word	0x080027a1
 8002720:	080027d5 	.word	0x080027d5
 8002724:	080027cb 	.word	0x080027cb
 8002728:	080027cb 	.word	0x080027cb
 800272c:	080027cb 	.word	0x080027cb
 8002730:	080027cb 	.word	0x080027cb
 8002734:	080027cb 	.word	0x080027cb
 8002738:	080027cb 	.word	0x080027cb
 800273c:	080027cb 	.word	0x080027cb
 8002740:	080027cb 	.word	0x080027cb
 8002744:	080027cb 	.word	0x080027cb
 8002748:	080027cb 	.word	0x080027cb
 800274c:	080027cb 	.word	0x080027cb
 8002750:	080027cb 	.word	0x080027cb
 8002754:	080027cb 	.word	0x080027cb
 8002758:	080027cb 	.word	0x080027cb
 800275c:	080027cb 	.word	0x080027cb
 8002760:	080027cb 	.word	0x080027cb
 8002764:	080027cb 	.word	0x080027cb
 8002768:	080027cb 	.word	0x080027cb
 800276c:	080027cb 	.word	0x080027cb
 8002770:	080027cb 	.word	0x080027cb
 8002774:	080027cb 	.word	0x080027cb
 8002778:	080027cb 	.word	0x080027cb
 800277c:	080027cb 	.word	0x080027cb
 8002780:	080027cb 	.word	0x080027cb
 8002784:	080027cb 	.word	0x080027cb
 8002788:	080027cb 	.word	0x080027cb
 800278c:	080027cb 	.word	0x080027cb
 8002790:	080027cb 	.word	0x080027cb
 8002794:	080027cb 	.word	0x080027cb
 8002798:	080027cb 	.word	0x080027cb
 800279c:	080027d5 	.word	0x080027d5
      break;
    case U8X8_MSG_DELAY_NANO:
      /* not required for SW I2C */
    {
		volatile uint32_t i;
		for (i = 1; i <= arg_int*10; i++);
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e002      	b.n	80027ac <psoc_gpio_and_delay_cb+0xc0>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	7aba      	ldrb	r2, [r7, #10]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	461a      	mov	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d2f3      	bcs.n	80027a6 <psoc_gpio_and_delay_cb+0xba>
    }
      break;
 80027be:	e00a      	b.n	80027d6 <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;

    case U8X8_MSG_DELAY_MILLI:
      HAL_Delay(arg_int);
 80027c0:	7abb      	ldrb	r3, [r7, #10]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 f892 	bl	80048ec <HAL_Delay>
      break;
 80027c8:	e005      	b.n	80027d6 <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_GPIO_MENU_HOME:
      u8x8_SetGPIOResult(u8x8, Chip_GPIO_GetPinState(LPC_GPIO, KEY_HOME_PORT, KEY_HOME_PIN));
      break;
*/
    default:
      u8x8_SetGPIOResult(u8x8, 1);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      break;
 80027d2:	e000      	b.n	80027d6 <psoc_gpio_and_delay_cb+0xea>
      break;
 80027d4:	bf00      	nop
  }
  return 1;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <draw_button_line>:


uint8_t draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	70fb      	strb	r3, [r7, #3]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70bb      	strb	r3, [r7, #2]
 80027f6:	4613      	mov	r3, r2
 80027f8:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;

  u8g2_uint_t d;
  u8g2_uint_t x;

  cnt = u8x8_GetStringLineCnt(s);
 80027fa:	69b8      	ldr	r0, [r7, #24]
 80027fc:	f001 ffa1 	bl	8004742 <u8x8_GetStringLineCnt>
 8002800:	4603      	mov	r3, r0
 8002802:	72bb      	strb	r3, [r7, #10]


  /* calculate the width of the button line */
  button_line_width = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8002808:	2300      	movs	r3, #0
 800280a:	73bb      	strb	r3, [r7, #14]
 800280c:	e011      	b.n	8002832 <draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 800280e:	7bbb      	ldrb	r3, [r7, #14]
 8002810:	69b9      	ldr	r1, [r7, #24]
 8002812:	4618      	mov	r0, r3
 8002814:	f001 ffb7 	bl	8004786 <u8x8_GetStringLineStart>
 8002818:	4603      	mov	r3, r0
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 f81b 	bl	8003858 <u8g2_GetUTF8Width>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	4413      	add	r3, r2
 800282a:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	3301      	adds	r3, #1
 8002830:	73bb      	strb	r3, [r7, #14]
 8002832:	7bba      	ldrb	r2, [r7, #14]
 8002834:	7abb      	ldrb	r3, [r7, #10]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3e9      	bcc.n	800280e <draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 800283a:	7abb      	ldrb	r3, [r7, #10]
 800283c:	461a      	mov	r2, r3
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	4413      	add	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3b06      	subs	r3, #6
 800284e:	73fb      	strb	r3, [r7, #15]

  /* calculate the left offset */
  d = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	78bb      	ldrb	r3, [r7, #2]
 8002858:	429a      	cmp	r2, r3
 800285a:	d208      	bcs.n	800286e <draw_button_line+0x8e>
  {
    d = w;
 800285c:	78bb      	ldrb	r3, [r7, #2]
 800285e:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 8002860:	7b3a      	ldrb	r2, [r7, #12]
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	733b      	strb	r3, [r7, #12]
    d /= 2;
 8002868:	7b3b      	ldrb	r3, [r7, #12]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	733b      	strb	r3, [r7, #12]
  }

  /* draw the buttons */
  x = d;
 800286e:	7b3b      	ldrb	r3, [r7, #12]
 8002870:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8002872:	2300      	movs	r3, #0
 8002874:	73bb      	strb	r3, [r7, #14]
 8002876:	e02c      	b.n	80028d2 <draw_button_line+0xf2>
  {
    is_invert = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 800287c:	7bba      	ldrb	r2, [r7, #14]
 800287e:	787b      	ldrb	r3, [r7, #1]
 8002880:	429a      	cmp	r2, r3
 8002882:	d101      	bne.n	8002888 <draw_button_line+0xa8>
      is_invert = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	4618      	mov	r0, r3
 800288e:	f001 ff7a 	bl	8004786 <u8x8_GetStringLineStart>
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	7af9      	ldrb	r1, [r7, #11]
 8002896:	7b7b      	ldrb	r3, [r7, #13]
 8002898:	9302      	str	r3, [sp, #8]
 800289a:	2301      	movs	r3, #1
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	9000      	str	r0, [sp, #0]
 80028a0:	2300      	movs	r3, #0
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f001 f999 	bl	8003bda <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 ff6a 	bl	8004786 <u8x8_GetStringLineStart>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 ffce 	bl	8003858 <u8g2_GetUTF8Width>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	4413      	add	r3, r2
 80028c4:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 80028c6:	7afb      	ldrb	r3, [r7, #11]
 80028c8:	3306      	adds	r3, #6
 80028ca:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	3301      	adds	r3, #1
 80028d0:	73bb      	strb	r3, [r7, #14]
 80028d2:	7bba      	ldrb	r2, [r7, #14]
 80028d4:	7abb      	ldrb	r3, [r7, #10]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3ce      	bcc.n	8002878 <draw_button_line+0x98>
  }

  /* return the number of buttons */
  return cnt;
 80028da:	7abb      	ldrb	r3, [r7, #10]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <initScreen>:
/**
  * @brief  Init and setup Sreen
  * @retval -
  */
void initScreen(u8g2_t* u8g2)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	  u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2,
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <initScreen+0x40>)
 80028ee:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <initScreen+0x44>)
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <initScreen+0x48>)
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa8e 	bl	8002e14 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			  U8G2_R0,
			  u8x8_byte_stm32hal_hw_i2c,
			  psoc_gpio_and_delay_cb);	// Configure u8g2 type
	  u8g2_SetI2CAddress(u8g2, I2C_ADDRESS*2);	// Configure i2c address
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2278      	movs	r2, #120	; 0x78
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  u8g2_InitDisplay(u8g2);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f001 fe7e 	bl	8004602 <u8x8_InitDisplay>
	  u8g2_ClearDisplay(u8g2);	// Clean screen for fist use
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa5e 	bl	8002dc8 <u8g2_ClearDisplay>
	  u8g2_SetPowerSave(u8g2, 0U);	// Disables Energy save
 800290c:	2100      	movs	r1, #0
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f001 fe86 	bl	8004620 <u8x8_SetPowerSave>

	  screen_number = 0;	// set home screen
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <initScreen+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	080026ed 	.word	0x080026ed
 8002928:	08002611 	.word	0x08002611
 800292c:	0800d9f0 	.word	0x0800d9f0
 8002930:	2000045a 	.word	0x2000045a

08002934 <updateScreen>:
/**
  * @brief  Updates the screen according the actual screen
  * @retval -
  */
void updateScreen()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af02      	add	r7, sp, #8
	switch(screen_number)
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <updateScreen+0x58>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d810      	bhi.n	8002964 <updateScreen+0x30>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <updateScreen+0x14>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002959 	.word	0x08002959
 800294c:	0800295f 	.word	0x0800295f
 8002950:	08002965 	.word	0x08002965
 8002954:	08002965 	.word	0x08002965
	{
	  case SCREEN_TIME:
		  draw_screen_time();
 8002958:	f000 f81e 	bl	8002998 <draw_screen_time>
		  break;
 800295c:	e002      	b.n	8002964 <updateScreen+0x30>
	  case SCREEN_UBIC:
		  draw_screen_ubic();
 800295e:	f000 f885 	bl	8002a6c <draw_screen_ubic>
		  break;
 8002962:	bf00      	nop
		  break;
	  case SCREEN_ODOMETER:
		  //draw_screen_odometer();
		  break;
	}
	draw_button_line(&u8g2, u8g2_GetDisplayHeight(&u8g2)-BUTTON_OFFSET, u8g2_GetDisplayWidth(&u8g2), 3, BUTTONS);
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <updateScreen+0x5c>)
 8002966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800296a:	3b02      	subs	r3, #2
 800296c:	b2d9      	uxtb	r1, r3
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <updateScreen+0x5c>)
 8002970:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <updateScreen+0x60>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2303      	movs	r3, #3
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <updateScreen+0x5c>)
 800297c:	f7ff ff30 	bl	80027e0 <draw_button_line>

	u8g2_SendBuffer(&u8g2);
 8002980:	4803      	ldr	r0, [pc, #12]	; (8002990 <updateScreen+0x5c>)
 8002982:	f000 f9b9 	bl	8002cf8 <u8g2_SendBuffer>
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000045a 	.word	0x2000045a
 8002990:	20000464 	.word	0x20000464
 8002994:	0800d11c 	.word	0x0800d11c

08002998 <draw_screen_time>:
void draw_screen_time()
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef Time;
	RTC_DateTypeDef Date;
	uint8_t time_string[9] = "  :  :  ";
 800299e:	4a2e      	ldr	r2, [pc, #184]	; (8002a58 <draw_screen_time+0xc0>)
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029a6:	c303      	stmia	r3!, {r0, r1}
 80029a8:	701a      	strb	r2, [r3, #0]
	uint8_t date_string[9] = "  /  /  ";
 80029aa:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <draw_screen_time+0xc4>)
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80029b0:	c303      	stmia	r3!, {r0, r1}
 80029b2:	701a      	strb	r2, [r3, #0]
	uint8_t y=11;
 80029b4:	230b      	movs	r3, #11
 80029b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t x=0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8g2_ClearBuffer(&u8g2);
 80029c0:	4827      	ldr	r0, [pc, #156]	; (8002a60 <draw_screen_time+0xc8>)
 80029c2:	f000 f926 	bl	8002c12 <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 80029c6:	2101      	movs	r1, #1
 80029c8:	4825      	ldr	r0, [pc, #148]	; (8002a60 <draw_screen_time+0xc8>)
 80029ca:	f000 fda4 	bl	8003516 <u8g2_SetFontMode>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 80029ce:	4925      	ldr	r1, [pc, #148]	; (8002a64 <draw_screen_time+0xcc>)
 80029d0:	4823      	ldr	r0, [pc, #140]	; (8002a60 <draw_screen_time+0xc8>)
 80029d2:	f000 fec3 	bl	800375c <u8g2_SetFont>

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	2200      	movs	r2, #0
 80029dc:	4619      	mov	r1, r3
 80029de:	4822      	ldr	r0, [pc, #136]	; (8002a68 <draw_screen_time+0xd0>)
 80029e0:	f003 fffa 	bl	80069d8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	2200      	movs	r2, #0
 80029ea:	4619      	mov	r1, r3
 80029ec:	481e      	ldr	r0, [pc, #120]	; (8002a68 <draw_screen_time+0xd0>)
 80029ee:	f004 f981 	bl	8006cf4 <HAL_RTC_GetDate>

	get_time_string(&Time, time_string);
 80029f2:	f107 0210 	add.w	r2, r7, #16
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fa4f 	bl	8000ea0 <get_time_string>

	u8g2_DrawStr(&u8g2, x, y, time_string);
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a0a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002a0e:	4814      	ldr	r0, [pc, #80]	; (8002a60 <draw_screen_time+0xc8>)
 8002a10:	f000 fdec 	bl	80035ec <u8g2_DrawStr>

	get_date_string(&Date, date_string);
 8002a14:	1d3a      	adds	r2, r7, #4
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fa83 	bl	8000f28 <get_date_string>
	x+=u8g2_GetStrWidth(&u8g2,time_string) + 5 ;
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	4619      	mov	r1, r3
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <draw_screen_time+0xc8>)
 8002a2a:	f000 ff01 	bl	8003830 <u8g2_GetStrWidth>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	3305      	adds	r3, #5
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a38:	4413      	add	r3, r2
 8002a3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	u8g2_DrawStr(&u8g2, x, y, date_string);
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a44:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002a48:	4805      	ldr	r0, [pc, #20]	; (8002a60 <draw_screen_time+0xc8>)
 8002a4a:	f000 fdcf 	bl	80035ec <u8g2_DrawStr>
}
 8002a4e:	bf00      	nop
 8002a50:	3728      	adds	r7, #40	; 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	0800d12c 	.word	0x0800d12c
 8002a5c:	0800d138 	.word	0x0800d138
 8002a60:	20000464 	.word	0x20000464
 8002a64:	0800d1d4 	.word	0x0800d1d4
 8002a68:	20000098 	.word	0x20000098

08002a6c <draw_screen_ubic>:

void draw_screen_ubic()
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
	extern GPSdata gps;
	uint8_t f_to_char[10];
	uint8_t y=11;
 8002a72:	230b      	movs	r3, #11
 8002a74:	73fb      	strb	r3, [r7, #15]
	uint8_t x=0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73bb      	strb	r3, [r7, #14]

	memset(f_to_char, '\0',10);
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	220a      	movs	r2, #10
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00a fae3 	bl	800d04c <memset>

	u8g2_ClearBuffer(&u8g2);
 8002a86:	482b      	ldr	r0, [pc, #172]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002a88:	f000 f8c3 	bl	8002c12 <u8g2_ClearBuffer>
	u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4829      	ldr	r0, [pc, #164]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002a90:	f000 fd41 	bl	8003516 <u8g2_SetFontMode>
	u8g2_SetFontDirection(&u8g2, 0);
 8002a94:	2100      	movs	r1, #0
 8002a96:	4827      	ldr	r0, [pc, #156]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002a98:	f000 fef2 	bl	8003880 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tf );
 8002a9c:	4926      	ldr	r1, [pc, #152]	; (8002b38 <draw_screen_ubic+0xcc>)
 8002a9e:	4825      	ldr	r0, [pc, #148]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002aa0:	f000 fe5c 	bl	800375c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, x, y, "Lat: ");
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	7bb9      	ldrb	r1, [r7, #14]
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <draw_screen_ubic+0xd0>)
 8002aaa:	4822      	ldr	r0, [pc, #136]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002aac:	f000 fd9e 	bl	80035ec <u8g2_DrawStr>
    x+=u8g2_GetStrWidth(&u8g2,"Lat: ");
 8002ab0:	4922      	ldr	r1, [pc, #136]	; (8002b3c <draw_screen_ubic+0xd0>)
 8002ab2:	4820      	ldr	r0, [pc, #128]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002ab4:	f000 febc 	bl	8003830 <u8g2_GetStrWidth>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	4413      	add	r3, r2
 8002ac0:	73bb      	strb	r3, [r7, #14]
    float_to_ascii(gps.latitude , f_to_char, 6) ;
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <draw_screen_ubic+0xd4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	1d39      	adds	r1, r7, #4
 8002ac8:	2206      	movs	r2, #6
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f964 	bl	8000d98 <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	7bb9      	ldrb	r1, [r7, #14]
 8002ad6:	4817      	ldr	r0, [pc, #92]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002ad8:	f000 fd88 	bl	80035ec <u8g2_DrawStr>

    memset(f_to_char, '\0',10);
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	220a      	movs	r2, #10
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f00a fab2 	bl	800d04c <memset>
    x=0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73bb      	strb	r3, [r7, #14]
    y=2*y;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
    u8g2_DrawStr(&u8g2, x, y, "Lon: ");
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	7bb9      	ldrb	r1, [r7, #14]
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <draw_screen_ubic+0xd8>)
 8002af8:	480e      	ldr	r0, [pc, #56]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002afa:	f000 fd77 	bl	80035ec <u8g2_DrawStr>
	x+=u8g2_GetStrWidth(&u8g2,"Lon: ");
 8002afe:	4911      	ldr	r1, [pc, #68]	; (8002b44 <draw_screen_ubic+0xd8>)
 8002b00:	480c      	ldr	r0, [pc, #48]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002b02:	f000 fe95 	bl	8003830 <u8g2_GetStrWidth>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	73bb      	strb	r3, [r7, #14]
	float_to_ascii(gps.longitude , f_to_char, 6) ;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <draw_screen_ubic+0xd4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	1d39      	adds	r1, r7, #4
 8002b16:	2206      	movs	r2, #6
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe f93d 	bl	8000d98 <float_to_ascii>
    u8g2_DrawStr(&u8g2, x, y, f_to_char);
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	7bb9      	ldrb	r1, [r7, #14]
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <draw_screen_ubic+0xc8>)
 8002b26:	f000 fd61 	bl	80035ec <u8g2_DrawStr>
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000464 	.word	0x20000464
 8002b38:	0800d1d4 	.word	0x0800d1d4
 8002b3c:	0800d144 	.word	0x0800d144
 8002b40:	200004e8 	.word	0x200004e8
 8002b44:	0800d14c 	.word	0x0800d14c

08002b48 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	70fb      	strb	r3, [r7, #3]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70bb      	strb	r3, [r7, #2]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8002b62:	e00d      	b.n	8002b80 <u8g2_DrawBox+0x38>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	78ba      	ldrb	r2, [r7, #2]
 8002b68:	78f9      	ldrb	r1, [r7, #3]
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	9000      	str	r0, [sp, #0]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 feff 	bl	8003972 <u8g2_DrawHVLine>
    y++;    
 8002b74:	78bb      	ldrb	r3, [r7, #2]
 8002b76:	3301      	adds	r3, #1
 8002b78:	70bb      	strb	r3, [r7, #2]
    h--;
 8002b7a:	7c3b      	ldrb	r3, [r7, #16]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8002b80:	7c3b      	ldrb	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ee      	bne.n	8002b64 <u8g2_DrawBox+0x1c>
  }
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	70fb      	strb	r3, [r7, #3]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70bb      	strb	r3, [r7, #2]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002bae:	787b      	ldrb	r3, [r7, #1]
 8002bb0:	78ba      	ldrb	r2, [r7, #2]
 8002bb2:	78f9      	ldrb	r1, [r7, #3]
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	9000      	str	r0, [sp, #0]
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 feda 	bl	8003972 <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8002bbe:	7e3b      	ldrb	r3, [r7, #24]
 8002bc0:	78ba      	ldrb	r2, [r7, #2]
 8002bc2:	78f9      	ldrb	r1, [r7, #3]
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	9000      	str	r0, [sp, #0]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fed2 	bl	8003972 <u8g2_DrawHVLine>
  x+=w;
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	70fb      	strb	r3, [r7, #3]
  x--;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8002bdc:	7e3b      	ldrb	r3, [r7, #24]
 8002bde:	78ba      	ldrb	r2, [r7, #2]
 8002be0:	78f9      	ldrb	r1, [r7, #3]
 8002be2:	2001      	movs	r0, #1
 8002be4:	9000      	str	r0, [sp, #0]
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fec3 	bl	8003972 <u8g2_DrawHVLine>
  y+=h;
 8002bec:	78ba      	ldrb	r2, [r7, #2]
 8002bee:	7e3b      	ldrb	r3, [r7, #24]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	70bb      	strb	r3, [r7, #2]
  y--;
 8002bf4:	78bb      	ldrb	r3, [r7, #2]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8002bfa:	787b      	ldrb	r3, [r7, #1]
 8002bfc:	78ba      	ldrb	r2, [r7, #2]
 8002bfe:	7bf9      	ldrb	r1, [r7, #15]
 8002c00:	2000      	movs	r0, #0
 8002c02:	9000      	str	r0, [sp, #0]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 feb4 	bl	8003972 <u8g2_DrawHVLine>
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <u8g2_ClearBuffer>:
#include <string.h>
#include "u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	7c1b      	ldrb	r3, [r3, #16]
 8002c20:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f00a fa03 	bl	800d04c <memset>
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	70fb      	strb	r3, [r7, #3]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	7c1b      	ldrb	r3, [r3, #16]
 8002c64:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	89ba      	ldrh	r2, [r7, #12]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8002c7c:	89bb      	ldrh	r3, [r7, #12]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002c82:	89bb      	ldrh	r3, [r7, #12]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	4413      	add	r3, r2
 8002c88:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002c8a:	7bf9      	ldrb	r1, [r7, #15]
 8002c8c:	78ba      	ldrb	r2, [r7, #2]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	460b      	mov	r3, r1
 8002c94:	2100      	movs	r1, #0
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f001 fc82 	bl	80045a0 <u8x8_DrawTile>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbe:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	7c5b      	ldrb	r3, [r3, #17]
 8002cc6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8002cc8:	7bba      	ldrb	r2, [r7, #14]
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffbd 	bl	8002c4e <u8g2_send_tile_row>
    src_row++;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8002cda:	7bbb      	ldrb	r3, [r7, #14]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	7b7b      	ldrb	r3, [r7, #13]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d203      	bcs.n	8002cf0 <u8g2_send_buffer+0x4c>
 8002ce8:	7bba      	ldrb	r2, [r7, #14]
 8002cea:	7b3b      	ldrb	r3, [r7, #12]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3eb      	bcc.n	8002cc8 <u8g2_send_buffer+0x24>
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ffcf 	bl	8002ca4 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f001 fc9b 	bl	8004642 <u8x8_RefreshDisplay>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff5b 	bl	8002c12 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffd8 	bl	8002d14 <u8g2_SetBufferCurrTileRow>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff95 	bl	8002ca4 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	7c5b      	ldrb	r3, [r3, #17]
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d304      	bcc.n	8002da4 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f001 fc51 	bl	8004642 <u8x8_RefreshDisplay>
    return 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e00d      	b.n	8002dc0 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ff2f 	bl	8002c12 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ffab 	bl	8002d14 <u8g2_SetBufferCurrTileRow>
  return 1;
 8002dbe:	2301      	movs	r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffb7 	bl	8002d44 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffc8 	bl	8002d6c <u8g2_NextPage>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002de2:	2100      	movs	r1, #0
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff95 	bl	8002d14 <u8g2_SetBufferCurrTileRow>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2208      	movs	r2, #8
 8002e00:	701a      	strb	r2, [r3, #0]
  return buf;
 8002e02:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	2000051c 	.word	0x2000051c

08002e14 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8002e2a:	490c      	ldr	r1, [pc, #48]	; (8002e5c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f001 fc6b 	bl	8004708 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002e32:	f107 0313 	add.w	r3, r7, #19
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ffdc 	bl	8002df4 <u8g2_m_16_8_f>
 8002e3c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002e3e:	7cfa      	ldrb	r2, [r7, #19]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8002e46:	6979      	ldr	r1, [r7, #20]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 ff58 	bl	8003cfe <u8g2_SetupBuffer>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	08004241 	.word	0x08004241
 8002e5c:	0800449d 	.word	0x0800449d
 8002e60:	08003a9b 	.word	0x08003a9b

08002e64 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	81fb      	strh	r3, [r7, #14]
    font++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002ea6:	89fb      	ldrh	r3, [r7, #14]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	81fb      	strh	r3, [r7, #14]
    return pos;
 8002eb8:	89fb      	ldrh	r3, [r7, #14]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6838      	ldr	r0, [r7, #0]
 8002ed2:	f7ff ffc7 	bl	8002e64 <u8g2_font_get_byte>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002ede:	2101      	movs	r1, #1
 8002ee0:	6838      	ldr	r0, [r7, #0]
 8002ee2:	f7ff ffbf 	bl	8002e64 <u8g2_font_get_byte>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002eee:	2102      	movs	r1, #2
 8002ef0:	6838      	ldr	r0, [r7, #0]
 8002ef2:	f7ff ffb7 	bl	8002e64 <u8g2_font_get_byte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002efe:	2103      	movs	r1, #3
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f7ff ffaf 	bl	8002e64 <u8g2_font_get_byte>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002f0e:	2104      	movs	r1, #4
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	f7ff ffa7 	bl	8002e64 <u8g2_font_get_byte>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8002f1e:	2105      	movs	r1, #5
 8002f20:	6838      	ldr	r0, [r7, #0]
 8002f22:	f7ff ff9f 	bl	8002e64 <u8g2_font_get_byte>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002f2e:	2106      	movs	r1, #6
 8002f30:	6838      	ldr	r0, [r7, #0]
 8002f32:	f7ff ff97 	bl	8002e64 <u8g2_font_get_byte>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002f3e:	2107      	movs	r1, #7
 8002f40:	6838      	ldr	r0, [r7, #0]
 8002f42:	f7ff ff8f 	bl	8002e64 <u8g2_font_get_byte>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002f4e:	2108      	movs	r1, #8
 8002f50:	6838      	ldr	r0, [r7, #0]
 8002f52:	f7ff ff87 	bl	8002e64 <u8g2_font_get_byte>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002f5e:	2109      	movs	r1, #9
 8002f60:	6838      	ldr	r0, [r7, #0]
 8002f62:	f7ff ff7f 	bl	8002e64 <u8g2_font_get_byte>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b25a      	sxtb	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002f6e:	210a      	movs	r1, #10
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f7ff ff77 	bl	8002e64 <u8g2_font_get_byte>
 8002f76:	4603      	mov	r3, r0
 8002f78:	b25a      	sxtb	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002f7e:	210b      	movs	r1, #11
 8002f80:	6838      	ldr	r0, [r7, #0]
 8002f82:	f7ff ff6f 	bl	8002e64 <u8g2_font_get_byte>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b25a      	sxtb	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002f8e:	210c      	movs	r1, #12
 8002f90:	6838      	ldr	r0, [r7, #0]
 8002f92:	f7ff ff67 	bl	8002e64 <u8g2_font_get_byte>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b25a      	sxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002f9e:	210d      	movs	r1, #13
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f7ff ff5f 	bl	8002e64 <u8g2_font_get_byte>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b25a      	sxtb	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002fae:	210e      	movs	r1, #14
 8002fb0:	6838      	ldr	r0, [r7, #0]
 8002fb2:	f7ff ff57 	bl	8002e64 <u8g2_font_get_byte>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	b25a      	sxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	6838      	ldr	r0, [r7, #0]
 8002fc2:	f7ff ff4f 	bl	8002e64 <u8g2_font_get_byte>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	b25a      	sxtb	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002fce:	2110      	movs	r1, #16
 8002fd0:	6838      	ldr	r0, [r7, #0]
 8002fd2:	f7ff ff47 	bl	8002e64 <u8g2_font_get_byte>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	b25a      	sxtb	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002fde:	2111      	movs	r1, #17
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	f7ff ff50 	bl	8002e86 <u8g2_font_get_word>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002fee:	2113      	movs	r1, #19
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f7ff ff48 	bl	8002e86 <u8g2_font_get_word>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002ffe:	2115      	movs	r1, #21
 8003000:	6838      	ldr	r0, [r7, #0]
 8003002:	f7ff ff40 	bl	8002e86 <u8g2_font_get_word>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	82da      	strh	r2, [r3, #22]
#endif
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7a9b      	ldrb	r3, [r3, #10]
 8003026:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	7b7b      	ldrb	r3, [r7, #13]
 8003034:	fa42 f303 	asr.w	r3, r2, r3
 8003038:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800303a:	7b7b      	ldrb	r3, [r7, #13]
 800303c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800303e:	7bba      	ldrb	r2, [r7, #14]
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	4413      	add	r3, r2
 8003044:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003046:	7bbb      	ldrb	r3, [r7, #14]
 8003048:	2b07      	cmp	r3, #7
 800304a:	d91a      	bls.n	8003082 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800304c:	2308      	movs	r3, #8
 800304e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003050:	7b3a      	ldrb	r2, [r7, #12]
 8003052:	7b7b      	ldrb	r3, [r7, #13]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	7b3b      	ldrb	r3, [r7, #12]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	b25a      	sxtb	r2, r3
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	4313      	orrs	r3, r2
 8003078:	b25b      	sxtb	r3, r3
 800307a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800307c:	7bbb      	ldrb	r3, [r7, #14]
 800307e:	3b08      	subs	r3, #8
 8003080:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	b2da      	uxtb	r2, r3
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	4013      	ands	r3, r2
 8003096:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7bba      	ldrb	r2, [r7, #14]
 800309c:	729a      	strb	r2, [r3, #10]
  return val;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffab 	bl	8003016 <u8g2_font_decode_get_unsigned_bits>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80030ce:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	73fb      	strb	r3, [r7, #15]
  return v;
 80030e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
 80030fc:	4613      	mov	r3, r2
 80030fe:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3354      	adds	r3, #84	; 0x54
 8003104:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003110:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003118:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003120:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	7d7b      	ldrb	r3, [r7, #21]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800312e:	7dfa      	ldrb	r2, [r7, #23]
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	429a      	cmp	r2, r3
 8003134:	d201      	bcs.n	800313a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	795b      	ldrb	r3, [r3, #5]
 8003144:	737b      	strb	r3, [r7, #13]
    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
#else
    x += lx;
 8003146:	7bba      	ldrb	r2, [r7, #14]
 8003148:	7d7b      	ldrb	r3, [r7, #21]
 800314a:	4413      	add	r3, r2
 800314c:	73bb      	strb	r3, [r7, #14]
    y += ly;
 800314e:	7b7a      	ldrb	r2, [r7, #13]
 8003150:	7d3b      	ldrb	r3, [r7, #20]
 8003152:	4413      	add	r3, r2
 8003154:	737b      	strb	r3, [r7, #13]
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003156:	78bb      	ldrb	r3, [r7, #2]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00d      	beq.n	8003178 <u8g2_font_decode_len+0x88>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	7b1a      	ldrb	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 8003166:	7dbb      	ldrb	r3, [r7, #22]
 8003168:	7b7a      	ldrb	r2, [r7, #13]
 800316a:	7bb9      	ldrb	r1, [r7, #14]
 800316c:	2000      	movs	r0, #0
 800316e:	9000      	str	r0, [sp, #0]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fbfe 	bl	8003972 <u8g2_DrawHVLine>
 8003176:	e010      	b.n	800319a <u8g2_font_decode_len+0xaa>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	7adb      	ldrb	r3, [r3, #11]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10c      	bne.n	800319a <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	7b5a      	ldrb	r2, [r3, #13]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      u8g2_DrawHVLine(u8g2, 
 800318a:	7dbb      	ldrb	r3, [r7, #22]
 800318c:	7b7a      	ldrb	r2, [r7, #13]
 800318e:	7bb9      	ldrb	r1, [r7, #14]
 8003190:	2000      	movs	r0, #0
 8003192:	9000      	str	r0, [sp, #0]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fbec 	bl	8003972 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800319a:	7dfa      	ldrb	r2, [r7, #23]
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d309      	bcc.n	80031b6 <u8g2_font_decode_len+0xc6>
      break;
    cnt -= rem;
 80031a2:	7dfa      	ldrb	r2, [r7, #23]
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	757b      	strb	r3, [r7, #21]
    ly++;
 80031ae:	7d3b      	ldrb	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80031b4:	e7b1      	b.n	800311a <u8g2_font_decode_len+0x2a>
      break;
 80031b6:	bf00      	nop
  }
  lx += cnt;
 80031b8:	7d7a      	ldrb	r2, [r7, #21]
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	4413      	add	r3, r2
 80031be:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80031c0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 80031c8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	71da      	strb	r2, [r3, #7]
  
}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3354      	adds	r3, #84	; 0x54
 80031e6:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80031fa:	4619      	mov	r1, r3
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ff0a 	bl	8003016 <u8g2_font_decode_get_unsigned_bits>
 8003202:	4603      	mov	r3, r0
 8003204:	b25a      	sxtb	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003210:	4619      	mov	r1, r3
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7ff feff 	bl	8003016 <u8g2_font_decode_get_unsigned_bits>
 8003218:	4603      	mov	r3, r0
 800321a:	b25a      	sxtb	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	7b1b      	ldrb	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	735a      	strb	r2, [r3, #13]
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3354      	adds	r3, #84	; 0x54
 8003254:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ffbd 	bl	80031d8 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003264:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800326c:	4619      	mov	r1, r3
 800326e:	6978      	ldr	r0, [r7, #20]
 8003270:	f7ff ff1b 	bl	80030aa <u8g2_font_decode_get_signed_bits>
 8003274:	4603      	mov	r3, r0
 8003276:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800327e:	4619      	mov	r1, r3
 8003280:	6978      	ldr	r0, [r7, #20]
 8003282:	f7ff ff12 	bl	80030aa <u8g2_font_decode_get_signed_bits>
 8003286:	4603      	mov	r3, r0
 8003288:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003290:	4619      	mov	r1, r3
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7ff ff09 	bl	80030aa <u8g2_font_decode_get_signed_bits>
 8003298:	4603      	mov	r3, r0
 800329a:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dd49      	ble.n	800333a <u8g2_font_decode_glyph+0xf4>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
#else
    decode->target_x += x;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	791a      	ldrb	r2, [r3, #4]
 80032aa:	7cbb      	ldrb	r3, [r7, #18]
 80032ac:	4413      	add	r3, r2
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	711a      	strb	r2, [r3, #4]
    decode->target_y -= h+y;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	795a      	ldrb	r2, [r3, #5]
 80032b8:	7cf9      	ldrb	r1, [r7, #19]
 80032ba:	7c7b      	ldrb	r3, [r7, #17]
 80032bc:	440b      	add	r3, r1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	715a      	strb	r2, [r3, #5]
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2200      	movs	r2, #0
 80032cc:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2200      	movs	r2, #0
 80032d2:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80032da:	4619      	mov	r1, r3
 80032dc:	6978      	ldr	r0, [r7, #20]
 80032de:	f7ff fe9a 	bl	8003016 <u8g2_font_decode_get_unsigned_bits>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80032ec:	4619      	mov	r1, r3
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f7ff fe91 	bl	8003016 <u8g2_font_decode_get_unsigned_bits>
 80032f4:	4603      	mov	r3, r0
 80032f6:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2200      	movs	r2, #0
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fef6 	bl	80030f0 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003304:	7bbb      	ldrb	r3, [r7, #14]
 8003306:	2201      	movs	r2, #1
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fef0 	bl	80030f0 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003310:	2101      	movs	r1, #1
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f7ff fe7f 	bl	8003016 <u8g2_font_decode_get_unsigned_bits>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ec      	bne.n	80032f8 <u8g2_font_decode_glyph+0xb2>

      if ( decode->y >= h )
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003324:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003328:	429a      	cmp	r2, r3
 800332a:	dd00      	ble.n	800332e <u8g2_font_decode_glyph+0xe8>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800332c:	e7d2      	b.n	80032d4 <u8g2_font_decode_glyph+0x8e>
	break;
 800332e:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	7b1a      	ldrb	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
  return d;
 800333a:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3317      	adds	r3, #23
 800335c:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	2bff      	cmp	r3, #255	; 0xff
 8003362:	d82a      	bhi.n	80033ba <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	2b60      	cmp	r3, #96	; 0x60
 8003368:	d907      	bls.n	800337a <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8003370:	461a      	mov	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e009      	b.n	800338e <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d906      	bls.n	800338e <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8003386:	461a      	mov	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4413      	add	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3301      	adds	r3, #1
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d04e      	beq.n	8003436 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d102      	bne.n	80033aa <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3302      	adds	r3, #2
 80033a8:	e049      	b.n	800343e <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4413      	add	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80033b8:	e7e9      	b.n	800338e <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80033c0:	461a      	mov	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4413      	add	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80033cc:	2100      	movs	r1, #0
 80033ce:	6938      	ldr	r0, [r7, #16]
 80033d0:	f7ff fd59 	bl	8002e86 <u8g2_font_get_word>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4413      	add	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80033de:	2102      	movs	r1, #2
 80033e0:	6938      	ldr	r0, [r7, #16]
 80033e2:	f7ff fd50 	bl	8002e86 <u8g2_font_get_word>
 80033e6:	4603      	mov	r3, r0
 80033e8:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	3304      	adds	r3, #4
 80033ee:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80033f0:	89fa      	ldrh	r2, [r7, #14]
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3e9      	bcc.n	80033cc <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80033fe:	89fb      	ldrh	r3, [r7, #14]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3301      	adds	r3, #1
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b29a      	uxth	r2, r3
 800340c:	89fb      	ldrh	r3, [r7, #14]
 800340e:	4313      	orrs	r3, r2
 8003410:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003412:	89fb      	ldrh	r3, [r7, #14]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003418:	89fa      	ldrh	r2, [r7, #14]
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	429a      	cmp	r2, r3
 800341e:	d102      	bne.n	8003426 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3303      	adds	r3, #3
 8003424:	e00b      	b.n	800343e <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3302      	adds	r3, #2
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4413      	add	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003434:	e7e0      	b.n	80033f8 <u8g2_font_get_glyph_data+0xb2>
	break;
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <u8g2_font_get_glyph_data+0xf6>
	break;
 800343a:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	4608      	mov	r0, r1
 8003450:	4611      	mov	r1, r2
 8003452:	461a      	mov	r2, r3
 8003454:	4603      	mov	r3, r0
 8003456:	70fb      	strb	r3, [r7, #3]
 8003458:	460b      	mov	r3, r1
 800345a:	70bb      	strb	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	78ba      	ldrb	r2, [r7, #2]
 8003470:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003474:	883b      	ldrh	r3, [r7, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff64 	bl	8003346 <u8g2_font_get_glyph_data>
 800347e:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fedc 	bl	8003246 <u8g2_font_decode_glyph>
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff4a 	bl	8003346 <u8g2_font_get_glyph_data>
 80034b2:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <u8g2_GetGlyphWidth+0x22>
    return 0; 
 80034ba:	2300      	movs	r3, #0
 80034bc:	e027      	b.n	800350e <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff fe89 	bl	80031d8 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f7ff fde8 	bl	80030aa <u8g2_font_decode_get_signed_bits>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7ff fdd9 	bl	80030aa <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f7ff fdcf 	bl	80030aa <u8g2_font_decode_get_signed_bits>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4603      	mov	r3, r0
 8003544:	70fb      	strb	r3, [r7, #3]
 8003546:	460b      	mov	r3, r1
 8003548:	70bb      	strb	r3, [r7, #2]
 800354a:	4613      	mov	r3, r2
 800354c:	803b      	strh	r3, [r7, #0]
    case 3:
      x += u8g2->font_calc_vref(u8g2);
      break;
  }
#else
  y += u8g2->font_calc_vref(u8g2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	78bb      	ldrb	r3, [r7, #2]
 800355c:	4413      	add	r3, r2
 800355e:	70bb      	strb	r3, [r7, #2]
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003560:	883b      	ldrh	r3, [r7, #0]
 8003562:	78ba      	ldrb	r2, [r7, #2]
 8003564:	78f9      	ldrb	r1, [r7, #3]
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff6d 	bl	8003446 <u8g2_font_draw_glyph>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	72fb      	strb	r3, [r7, #11]
 8003584:	4613      	mov	r3, r2
 8003586:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fcaa 	bl	8003ee2 <u8x8_utf8_init>
  sum = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	4611      	mov	r1, r2
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	4798      	blx	r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80035a4:	8abb      	ldrh	r3, [r7, #20]
 80035a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d018      	beq.n	80035e0 <u8g2_draw_string+0x6a>
      break;
    str++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3301      	adds	r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80035b4:	8abb      	ldrh	r3, [r7, #20]
 80035b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d0e9      	beq.n	8003592 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80035be:	8abb      	ldrh	r3, [r7, #20]
 80035c0:	7aba      	ldrb	r2, [r7, #10]
 80035c2:	7af9      	ldrb	r1, [r7, #11]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff ffb5 	bl	8003534 <u8g2_DrawGlyph>
 80035ca:	4603      	mov	r3, r0
 80035cc:	74fb      	strb	r3, [r7, #19]
	case 3:
	  y -= delta;
	  break;
      }
#else
      x += delta;
 80035ce:	7afa      	ldrb	r2, [r7, #11]
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	4413      	add	r3, r2
 80035d4:	72fb      	strb	r3, [r7, #11]
#endif

      sum += delta;    
 80035d6:	7dfa      	ldrb	r2, [r7, #23]
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	4413      	add	r3, r2
 80035dc:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80035de:	e7d8      	b.n	8003592 <u8g2_draw_string+0x1c>
      break;
 80035e0:	bf00      	nop
    }
  }
  return sum;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	72fb      	strb	r3, [r7, #11]
 80035fa:	4613      	mov	r3, r2
 80035fc:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a06      	ldr	r2, [pc, #24]	; (800361c <u8g2_DrawStr+0x30>)
 8003602:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8003604:	7aba      	ldrb	r2, [r7, #10]
 8003606:	7af9      	ldrb	r1, [r7, #11]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff ffb3 	bl	8003576 <u8g2_draw_string>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	08003efd 	.word	0x08003efd

08003620 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	72fb      	strb	r3, [r7, #11]
 800362e:	4613      	mov	r3, r2
 8003630:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a06      	ldr	r2, [pc, #24]	; (8003650 <u8g2_DrawUTF8+0x30>)
 8003636:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8003638:	7aba      	ldrb	r2, [r7, #10]
 800363a:	7af9      	ldrb	r1, [r7, #11]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff ff99 	bl	8003576 <u8g2_draw_string>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	08003f29 	.word	0x08003f29

08003654 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05d      	beq.n	8003720 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d04d      	beq.n	8003722 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d11c      	bne.n	80036ca <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f993 207d 	ldrsb.w	r2, [r3, #125]	; 0x7d
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 800369c:	429a      	cmp	r2, r3
 800369e:	da05      	bge.n	80036ac <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80036b8:	429a      	cmp	r2, r3
 80036ba:	dd32      	ble.n	8003722 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80036c8:	e02b      	b.n	8003722 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80036d8:	4619      	mov	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80036e0:	440b      	add	r3, r1
 80036e2:	429a      	cmp	r2, r3
 80036e4:	da0d      	bge.n	8003702 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	b25a      	sxtb	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800370e:	429a      	cmp	r2, r3
 8003710:	dd07      	ble.n	8003722 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800371e:	e000      	b.n	8003722 <u8g2_UpdateRefHeight+0xce>
    return;
 8003720:	bf00      	nop
  }  
}
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  return 0;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a03      	ldr	r2, [pc, #12]	; (8003758 <u8g2_SetFontPosBaseline+0x18>)
 800374c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	0800372b 	.word	0x0800372b

0800375c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d00b      	beq.n	8003788 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3364      	adds	r3, #100	; 0x64
 800377a:	6839      	ldr	r1, [r7, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fba1 	bl	8002ec4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff66 	bl	8003654 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fb9d 	bl	8003ee2 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	4611      	mov	r1, r2
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
 80037be:	4603      	mov	r3, r0
 80037c0:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80037c2:	89bb      	ldrh	r3, [r7, #12]
 80037c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <u8g2_string_width+0x64>
      break;
    str++;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 80037d2:	89bb      	ldrh	r3, [r7, #12]
 80037d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037d8:	4293      	cmp	r3, r2
 80037da:	d0e9      	beq.n	80037b0 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 80037dc:	89bb      	ldrh	r3, [r7, #12]
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fe5b 	bl	800349c <u8g2_GetGlyphWidth>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73bb      	strb	r3, [r7, #14]
      w += dx;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	4413      	add	r3, r2
 80037f0:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80037f2:	e7dd      	b.n	80037b0 <u8g2_string_width+0x20>
      break;
 80037f4:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d011      	beq.n	8003824 <u8g2_string_width+0x94>
  {
    w -= dx;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	7bbb      	ldrb	r3, [r7, #14]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 800380e:	b2da      	uxtb	r2, r3
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	4413      	add	r3, r2
 8003814:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 800381c:	b2da      	uxtb	r2, r3
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	4413      	add	r3, r2
 8003822:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a05      	ldr	r2, [pc, #20]	; (8003854 <u8g2_GetStrWidth+0x24>)
 800383e:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ffa4 	bl	8003790 <u8g2_string_width>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	08003efd 	.word	0x08003efd

08003858 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a05      	ldr	r2, [pc, #20]	; (800387c <u8g2_GetUTF8Width+0x24>)
 8003866:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff90 	bl	8003790 <u8g2_string_width>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	08003f29 	.word	0x08003f29

08003880 <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
#endif
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	4611      	mov	r1, r2
 80038a2:	461a      	mov	r2, r3
 80038a4:	460b      	mov	r3, r1
 80038a6:	71fb      	strb	r3, [r7, #7]
 80038a8:	4613      	mov	r3, r2
 80038aa:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	7dbb      	ldrb	r3, [r7, #22]
 80038bc:	4413      	add	r3, r2
 80038be:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80038c0:	7dfa      	ldrb	r2, [r7, #23]
 80038c2:	7dbb      	ldrb	r3, [r7, #22]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d90b      	bls.n	80038e0 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80038c8:	7dfa      	ldrb	r2, [r7, #23]
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d205      	bcs.n	80038dc <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80038d0:	79bb      	ldrb	r3, [r7, #6]
 80038d2:	75bb      	strb	r3, [r7, #22]
      b--;
 80038d4:	7dbb      	ldrb	r3, [r7, #22]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	75bb      	strb	r3, [r7, #22]
 80038da:	e001      	b.n	80038e0 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80038e0:	7dfa      	ldrb	r2, [r7, #23]
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d301      	bcc.n	80038ec <u8g2_clip_intersection2+0x56>
    return 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e01c      	b.n	8003926 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80038ec:	7dba      	ldrb	r2, [r7, #22]
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d801      	bhi.n	80038f8 <u8g2_clip_intersection2+0x62>
    return 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e016      	b.n	8003926 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80038f8:	7dfa      	ldrb	r2, [r7, #23]
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d201      	bcs.n	8003904 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8003904:	7dba      	ldrb	r2, [r7, #22]
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	429a      	cmp	r2, r3
 800390a:	d901      	bls.n	8003910 <u8g2_clip_intersection2+0x7a>
    b = d;
 800390c:	79bb      	ldrb	r3, [r7, #6]
 800390e:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	7dfa      	ldrb	r2, [r7, #23]
 8003914:	701a      	strb	r2, [r3, #0]
  b -= a;
 8003916:	7dba      	ldrb	r2, [r7, #22]
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	7dba      	ldrb	r2, [r7, #22]
 8003922:	701a      	strb	r2, [r3, #0]
  return 1;
 8003924:	2301      	movs	r3, #1
}
 8003926:	4618      	mov	r0, r3
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b085      	sub	sp, #20
 8003934:	af02      	add	r7, sp, #8
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	70fb      	strb	r3, [r7, #3]
 8003942:	460b      	mov	r3, r1
 8003944:	70bb      	strb	r3, [r7, #2]
 8003946:	4613      	mov	r3, r2
 8003948:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003950:	78ba      	ldrb	r2, [r7, #2]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800395a:	7878      	ldrb	r0, [r7, #1]
 800395c:	78ba      	ldrb	r2, [r7, #2]
 800395e:	78f9      	ldrb	r1, [r7, #3]
 8003960:	7e3b      	ldrb	r3, [r7, #24]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4603      	mov	r3, r0
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	47a0      	blx	r4
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003972:	b590      	push	{r4, r7, lr}
 8003974:	b085      	sub	sp, #20
 8003976:	af02      	add	r7, sp, #8
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	4608      	mov	r0, r1
 800397c:	4611      	mov	r1, r2
 800397e:	461a      	mov	r2, r3
 8003980:	4603      	mov	r3, r0
 8003982:	70fb      	strb	r3, [r7, #3]
 8003984:	460b      	mov	r3, r1
 8003986:	70bb      	strb	r3, [r7, #2]
 8003988:	4613      	mov	r3, r2
 800398a:	707b      	strb	r3, [r7, #1]
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800398c:	787b      	ldrb	r3, [r7, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d06a      	beq.n	8003a68 <u8g2_DrawHVLine+0xf6>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003992:	787b      	ldrb	r3, [r7, #1]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d918      	bls.n	80039ca <u8g2_DrawHVLine+0x58>
      {
	if ( dir == 2 )
 8003998:	7e3b      	ldrb	r3, [r7, #24]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d109      	bne.n	80039b2 <u8g2_DrawHVLine+0x40>
	{
	  x -= len;
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	70fb      	strb	r3, [r7, #3]
	  x++;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	3301      	adds	r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	70fb      	strb	r3, [r7, #3]
 80039b0:	e00b      	b.n	80039ca <u8g2_DrawHVLine+0x58>
	}
	else if ( dir == 3 )
 80039b2:	7e3b      	ldrb	r3, [r7, #24]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d108      	bne.n	80039ca <u8g2_DrawHVLine+0x58>
	{
	  y -= len;
 80039b8:	78ba      	ldrb	r2, [r7, #2]
 80039ba:	787b      	ldrb	r3, [r7, #1]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	70bb      	strb	r3, [r7, #2]
	  y++;
 80039c2:	78bb      	ldrb	r3, [r7, #2]
 80039c4:	3301      	adds	r3, #1
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80039ca:	7e3b      	ldrb	r3, [r7, #24]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80039d2:	7e3b      	ldrb	r3, [r7, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d119      	bne.n	8003a0c <u8g2_DrawHVLine+0x9a>
      {
	if ( y < u8g2->user_y0 )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80039de:	78bb      	ldrb	r3, [r7, #2]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d838      	bhi.n	8003a56 <u8g2_DrawHVLine+0xe4>
	  return;
	if ( y >= u8g2->user_y1 )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80039ea:	78bb      	ldrb	r3, [r7, #2]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d934      	bls.n	8003a5a <u8g2_DrawHVLine+0xe8>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80039fc:	1c79      	adds	r1, r7, #1
 80039fe:	1cf8      	adds	r0, r7, #3
 8003a00:	f7ff ff49 	bl	8003896 <u8g2_clip_intersection2>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d119      	bne.n	8003a3e <u8g2_DrawHVLine+0xcc>
	  return;
 8003a0a:	e02d      	b.n	8003a68 <u8g2_DrawHVLine+0xf6>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d822      	bhi.n	8003a5e <u8g2_DrawHVLine+0xec>
	  return;
	if ( x >= u8g2->user_x1 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d91e      	bls.n	8003a62 <u8g2_DrawHVLine+0xf0>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003a30:	1c79      	adds	r1, r7, #1
 8003a32:	1cb8      	adds	r0, r7, #2
 8003a34:	f7ff ff2f 	bl	8003896 <u8g2_clip_intersection2>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d013      	beq.n	8003a66 <u8g2_DrawHVLine+0xf4>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	689c      	ldr	r4, [r3, #8]
 8003a44:	78f9      	ldrb	r1, [r7, #3]
 8003a46:	78ba      	ldrb	r2, [r7, #2]
 8003a48:	7878      	ldrb	r0, [r7, #1]
 8003a4a:	7e3b      	ldrb	r3, [r7, #24]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	47a0      	blx	r4
 8003a54:	e008      	b.n	8003a68 <u8g2_DrawHVLine+0xf6>
	  return;
 8003a56:	bf00      	nop
 8003a58:	e006      	b.n	8003a68 <u8g2_DrawHVLine+0xf6>
	  return;
 8003a5a:	bf00      	nop
 8003a5c:	e004      	b.n	8003a68 <u8g2_DrawHVLine+0xf6>
	  return;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <u8g2_DrawHVLine+0xf6>
	  return;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <u8g2_DrawHVLine+0xf6>
	  return;
 8003a66:	bf00      	nop
    }
}
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}

08003a6e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  if ( color >= 3 )
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d903      	bls.n	8003a90 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b087      	sub	sp, #28
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	4608      	mov	r0, r1
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	70fb      	strb	r3, [r7, #3]
 8003aac:	460b      	mov	r3, r1
 8003aae:	70bb      	strb	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8003ab4:	78bb      	ldrb	r3, [r7, #2]
 8003ab6:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8003ac4:	7c3a      	ldrb	r2, [r7, #16]
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d801      	bhi.n	8003ae4 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003ae0:	7c3b      	ldrb	r3, [r7, #16]
 8003ae2:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003aee:	7c3b      	ldrb	r3, [r7, #16]
 8003af0:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003af2:	78bb      	ldrb	r3, [r7, #2]
 8003af4:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8003af6:	89fb      	ldrh	r3, [r7, #14]
 8003af8:	f023 0307 	bic.w	r3, r3, #7
 8003afc:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	7c1b      	ldrb	r3, [r3, #16]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	89fa      	ldrh	r2, [r7, #14]
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8003b14:	89fb      	ldrh	r3, [r7, #14]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  ptr += x;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4413      	add	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8003b24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d117      	bne.n	8003b5c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	7cbb      	ldrb	r3, [r7, #18]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	7c7b      	ldrb	r3, [r7, #17]
 8003b40:	4053      	eors	r3, r2
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
	len--;
 8003b4e:	787b      	ldrb	r3, [r7, #1]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8003b54:	787b      	ldrb	r3, [r7, #1]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e8      	bne.n	8003b2c <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003b5a:	e039      	b.n	8003bd0 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	7cbb      	ldrb	r3, [r7, #18]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	7c7b      	ldrb	r3, [r7, #17]
 8003b70:	4053      	eors	r3, r2
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	74fb      	strb	r3, [r7, #19]
      len--;
 8003b86:	787b      	ldrb	r3, [r7, #1]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d115      	bne.n	8003bbe <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b98:	461a      	mov	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d801      	bhi.n	8003bae <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d008      	beq.n	8003bca <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	747b      	strb	r3, [r7, #17]
 8003bbc:	e005      	b.n	8003bca <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8003bbe:	7cbb      	ldrb	r3, [r7, #18]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8003bc4:	7c7b      	ldrb	r3, [r7, #17]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8003bca:	787b      	ldrb	r3, [r7, #1]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1c5      	bne.n	8003b5c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af02      	add	r7, sp, #8
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	4608      	mov	r0, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	461a      	mov	r2, r3
 8003be8:	4603      	mov	r3, r0
 8003bea:	70fb      	strb	r3, [r7, #3]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70bb      	strb	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff fe42 	bl	8003880 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	78bb      	ldrb	r3, [r7, #2]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fe21 	bl	8003858 <u8g2_GetUTF8Width>
 8003c16:	4603      	mov	r3, r0
 8003c18:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 8003c1e:	7aba      	ldrb	r2, [r7, #10]
 8003c20:	787b      	ldrb	r3, [r7, #1]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d209      	bcs.n	8003c3a <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 8003c26:	787b      	ldrb	r3, [r7, #1]
 8003c28:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	7abb      	ldrb	r3, [r7, #10]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	e001      	b.n	8003c3e <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 8003c3a:	7abb      	ldrb	r3, [r7, #10]
 8003c3c:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	78ba      	ldrb	r2, [r7, #2]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	737b      	strb	r3, [r7, #13]
  fw = w;
 8003c50:	787b      	ldrb	r3, [r7, #1]
 8003c52:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8003c68:	2101      	movs	r1, #1
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff feff 	bl	8003a6e <u8g2_SetDrawColor>
  if ( is_invert )
 8003c70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d021      	beq.n	8003cbc <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8003c78:	7b38      	ldrb	r0, [r7, #12]
 8003c7a:	7b7a      	ldrb	r2, [r7, #13]
 8003c7c:	7bb9      	ldrb	r1, [r7, #14]
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	4603      	mov	r3, r0
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fe ff5f 	bl	8002b48 <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8003c8a:	e017      	b.n	8003cbc <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 8003c8c:	7bbb      	ldrb	r3, [r7, #14]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	73bb      	strb	r3, [r7, #14]
    fy--;
 8003c92:	7b7b      	ldrb	r3, [r7, #13]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	737b      	strb	r3, [r7, #13]
    fw +=2;
 8003c98:	7b3b      	ldrb	r3, [r7, #12]
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	733b      	strb	r3, [r7, #12]
    fh +=2;
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 8003ca4:	7b38      	ldrb	r0, [r7, #12]
 8003ca6:	7b7a      	ldrb	r2, [r7, #13]
 8003ca8:	7bb9      	ldrb	r1, [r7, #14]
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	4603      	mov	r3, r0
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe ff6d 	bl	8002b90 <u8g2_DrawFrame>
    border_size--;
 8003cb6:	7f3b      	ldrb	r3, [r7, #28]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 8003cbc:	7f3b      	ldrb	r3, [r7, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e4      	bne.n	8003c8c <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 8003cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fece 	bl	8003a6e <u8g2_SetDrawColor>
 8003cd2:	e003      	b.n	8003cdc <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fec9 	bl	8003a6e <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	b2d9      	uxtb	r1, r3
 8003ce4:	78ba      	ldrb	r2, [r7, #2]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fc99 	bl	8003620 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff febc 	bl	8003a6e <u8g2_SetDrawColor>

}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	79fa      	ldrb	r2, [r7, #7]
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  
  u8g2->draw_color = 1;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  u8g2->is_auto_page_clear = 1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  
  u8g2->cb = u8g2_cb;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
#else
  u8g2->cb->update_page_win(u8g2);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	4798      	blx	r3
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff fce8 	bl	8003740 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
#endif
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	7c1b      	ldrb	r3, [r3, #16]
 8003da0:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b1f      	cmp	r3, #31
 8003da6:	d901      	bls.n	8003dac <u8g2_update_dimension_common+0x34>
    t = 31;
 8003da8:	231f      	movs	r3, #31
 8003daa:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd6:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8003de0:	4413      	add	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	7c52      	ldrb	r2, [r2, #17]
 8003de6:	4293      	cmp	r3, r2
 8003de8:	dd06      	ble.n	8003df8 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	7c5a      	ldrb	r2, [r3, #17]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	4413      	add	r3, r2
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	22f0      	movs	r2, #240	; 0xf0
 8003e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	8a9b      	ldrh	r3, [r3, #20]
 8003e34:	2bf0      	cmp	r3, #240	; 0xf0
 8003e36:	d805      	bhi.n	8003e44 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	8a9b      	ldrh	r3, [r3, #20]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	8adb      	ldrh	r3, [r3, #22]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ff88 	bl	8003d78 <u8g2_update_dimension_common>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	4611      	mov	r1, r2
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	70fb      	strb	r3, [r7, #3]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70bb      	strb	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003ec8:	7878      	ldrb	r0, [r7, #1]
 8003eca:	78ba      	ldrb	r2, [r7, #2]
 8003ecc:	78f9      	ldrb	r1, [r7, #3]
 8003ece:	7c3b      	ldrb	r3, [r7, #16]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fd2b 	bl	8003930 <u8g2_draw_hv_line_2dir>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <u8x8_ascii_next+0x18>
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	2b0a      	cmp	r3, #10
 8003f12:	d102      	bne.n	8003f1a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f18:	e001      	b.n	8003f1e <u8x8_ascii_next+0x22>
  return b;
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	b29b      	uxth	r3, r3
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <u8x8_utf8_next+0x18>
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	2b0a      	cmp	r3, #10
 8003f3e:	d102      	bne.n	8003f46 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8003f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f44:	e06e      	b.n	8004024 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d145      	bne.n	8003fdc <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	2bfb      	cmp	r3, #251	; 0xfb
 8003f54:	d908      	bls.n	8003f68 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2205      	movs	r2, #5
 8003f5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	70fb      	strb	r3, [r7, #3]
 8003f66:	e032      	b.n	8003fce <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	2bf7      	cmp	r3, #247	; 0xf7
 8003f6c:	d908      	bls.n	8003f80 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2204      	movs	r2, #4
 8003f72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	70fb      	strb	r3, [r7, #3]
 8003f7e:	e026      	b.n	8003fce <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	2bef      	cmp	r3, #239	; 0xef
 8003f84:	d908      	bls.n	8003f98 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	70fb      	strb	r3, [r7, #3]
 8003f96:	e01a      	b.n	8003fce <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	2bdf      	cmp	r3, #223	; 0xdf
 8003f9c:	d908      	bls.n	8003fb0 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	70fb      	strb	r3, [r7, #3]
 8003fae:	e00e      	b.n	8003fce <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2bbf      	cmp	r3, #191	; 0xbf
 8003fb4:	d908      	bls.n	8003fc8 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	70fb      	strb	r3, [r7, #3]
 8003fc6:	e002      	b.n	8003fce <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	e02a      	b.n	8004024 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003fd6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003fda:	e023      	b.n	8004024 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8c1b      	ldrh	r3, [r3, #32]
 8003ff0:	019b      	lsls	r3, r3, #6
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ffe:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8c1a      	ldrh	r2, [r3, #32]
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	b29b      	uxth	r3, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 800401a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800401e:	e001      	b.n	8004024 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8c1b      	ldrh	r3, [r3, #32]
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800402e:	b590      	push	{r4, r7, lr}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	460b      	mov	r3, r1
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691c      	ldr	r4, [r3, #16]
 8004040:	7afa      	ldrb	r2, [r7, #11]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2117      	movs	r1, #23
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	47a0      	blx	r4
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bd90      	pop	{r4, r7, pc}

08004054 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004060:	1cfb      	adds	r3, r7, #3
 8004062:	461a      	mov	r2, r3
 8004064:	2101      	movs	r1, #1
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ffe1 	bl	800402e <u8x8_byte_SendBytes>
 800406c:	4603      	mov	r3, r0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8004076:	b590      	push	{r4, r7, lr}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691c      	ldr	r4, [r3, #16]
 8004082:	2300      	movs	r3, #0
 8004084:	2200      	movs	r2, #0
 8004086:	2118      	movs	r1, #24
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	47a0      	blx	r4
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bd90      	pop	{r4, r7, pc}

08004096 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8004096:	b590      	push	{r4, r7, lr}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691c      	ldr	r4, [r3, #16]
 80040a2:	2300      	movs	r3, #0
 80040a4:	2200      	movs	r2, #0
 80040a6:	2119      	movs	r1, #25
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	47a0      	blx	r4
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}

080040b6 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80040b6:	b590      	push	{r4, r7, lr}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68dc      	ldr	r4, [r3, #12]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	2300      	movs	r3, #0
 80040ca:	2115      	movs	r1, #21
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	47a0      	blx	r4
 80040d0:	4603      	mov	r3, r0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}

080040da <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80040da:	b590      	push	{r4, r7, lr}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	460b      	mov	r3, r1
 80040e4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68dc      	ldr	r4, [r3, #12]
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	2300      	movs	r3, #0
 80040ee:	2116      	movs	r1, #22
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	47a0      	blx	r4
 80040f4:	4603      	mov	r3, r0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}

080040fe <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80040fe:	b590      	push	{r4, r7, lr}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	460b      	mov	r3, r1
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68dc      	ldr	r4, [r3, #12]
 8004110:	7afa      	ldrb	r2, [r7, #11]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2117      	movs	r1, #23
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	47a0      	blx	r4
 800411a:	4603      	mov	r3, r0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bd90      	pop	{r4, r7, pc}

08004124 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68dc      	ldr	r4, [r3, #12]
 8004130:	2300      	movs	r3, #0
 8004132:	2200      	movs	r2, #0
 8004134:	2118      	movs	r1, #24
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	47a0      	blx	r4
 800413a:	4603      	mov	r3, r0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}

08004144 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68dc      	ldr	r4, [r3, #12]
 8004150:	2300      	movs	r3, #0
 8004152:	2200      	movs	r2, #0
 8004154:	2119      	movs	r1, #25
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	47a0      	blx	r4
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bd90      	pop	{r4, r7, pc}

08004164 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	73fb      	strb	r3, [r7, #15]
    data++;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2bfe      	cmp	r3, #254	; 0xfe
 800417e:	d031      	beq.n	80041e4 <u8x8_cad_SendSequence+0x80>
 8004180:	2bfe      	cmp	r3, #254	; 0xfe
 8004182:	dc3d      	bgt.n	8004200 <u8x8_cad_SendSequence+0x9c>
 8004184:	2b19      	cmp	r3, #25
 8004186:	dc3b      	bgt.n	8004200 <u8x8_cad_SendSequence+0x9c>
 8004188:	2b18      	cmp	r3, #24
 800418a:	da23      	bge.n	80041d4 <u8x8_cad_SendSequence+0x70>
 800418c:	2b16      	cmp	r3, #22
 800418e:	dc02      	bgt.n	8004196 <u8x8_cad_SendSequence+0x32>
 8004190:	2b15      	cmp	r3, #21
 8004192:	da03      	bge.n	800419c <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004194:	e034      	b.n	8004200 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004196:	2b17      	cmp	r3, #23
 8004198:	d00e      	beq.n	80041b8 <u8x8_cad_SendSequence+0x54>
	return;
 800419a:	e031      	b.n	8004200 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68dc      	ldr	r4, [r3, #12]
 80041a6:	7bba      	ldrb	r2, [r7, #14]
 80041a8:	7bf9      	ldrb	r1, [r7, #15]
 80041aa:	2300      	movs	r3, #0
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	47a0      	blx	r4
	  data++;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	603b      	str	r3, [r7, #0]
	  break;
 80041b6:	e022      	b.n	80041fe <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80041be:	f107 030e 	add.w	r3, r7, #14
 80041c2:	461a      	mov	r2, r3
 80041c4:	2101      	movs	r1, #1
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff ff99 	bl	80040fe <u8x8_cad_SendData>
	  data++;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	603b      	str	r3, [r7, #0]
	  break;
 80041d2:	e014      	b.n	80041fe <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68dc      	ldr	r4, [r3, #12]
 80041d8:	7bf9      	ldrb	r1, [r7, #15]
 80041da:	2300      	movs	r3, #0
 80041dc:	2200      	movs	r2, #0
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	47a0      	blx	r4
	  break;
 80041e2:	e00c      	b.n	80041fe <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80041ea:	7bbb      	ldrb	r3, [r7, #14]
 80041ec:	461a      	mov	r2, r3
 80041ee:	2129      	movs	r1, #41	; 0x29
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa35 	bl	8004660 <u8x8_gpio_call>
	  data++;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	603b      	str	r3, [r7, #0]
	  break;
 80041fc:	bf00      	nop
    cmd = *data;
 80041fe:	e7b6      	b.n	800416e <u8x8_cad_SendSequence+0xa>
	return;
 8004200:	bf00      	nop
    }
  }
}
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bd90      	pop	{r4, r7, pc}

08004208 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	460b      	mov	r3, r1
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff ff2d 	bl	8004076 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ff18 	bl	8004054 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691c      	ldr	r4, [r3, #16]
 8004228:	7afa      	ldrb	r2, [r7, #11]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2117      	movs	r1, #23
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff ff2f 	bl	8004096 <u8x8_byte_EndTransfer>
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}

08004240 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	72fb      	strb	r3, [r7, #11]
 800424e:	4613      	mov	r3, r2
 8004250:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	3b14      	subs	r3, #20
 8004256:	2b05      	cmp	r3, #5
 8004258:	d86e      	bhi.n	8004338 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800425a:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	080042f7 	.word	0x080042f7
 8004264:	08004279 	.word	0x08004279
 8004268:	080042a7 	.word	0x080042a7
 800426c:	080042b3 	.word	0x080042b3
 8004270:	0800431b 	.word	0x0800431b
 8004274:	08004323 	.word	0x08004323
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8004278:	4b33      	ldr	r3, [pc, #204]	; (8004348 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff ff08 	bl	8004096 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fef5 	bl	8004076 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800428c:	2100      	movs	r1, #0
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fee0 	bl	8004054 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004294:	7abb      	ldrb	r3, [r7, #10]
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff fedb 	bl	8004054 <u8x8_byte_SendByte>
      in_transfer = 1;
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80042a4:	e04a      	b.n	800433c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80042a6:	7abb      	ldrb	r3, [r7, #10]
 80042a8:	4619      	mov	r1, r3
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fed2 	bl	8004054 <u8x8_byte_SendByte>
      break;      
 80042b0:	e044      	b.n	800433c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80042b2:	4b25      	ldr	r3, [pc, #148]	; (8004348 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff feeb 	bl	8004096 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80042c4:	e00a      	b.n	80042dc <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	2118      	movs	r1, #24
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff ff9c 	bl	8004208 <u8x8_i2c_data_transfer>
	arg_int-=24;
 80042d0:	7abb      	ldrb	r3, [r7, #10]
 80042d2:	3b18      	subs	r3, #24
 80042d4:	72bb      	strb	r3, [r7, #10]
	p+=24;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3318      	adds	r3, #24
 80042da:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80042dc:	7abb      	ldrb	r3, [r7, #10]
 80042de:	2b18      	cmp	r3, #24
 80042e0:	d8f1      	bhi.n	80042c6 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80042e2:	7abb      	ldrb	r3, [r7, #10]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4619      	mov	r1, r3
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff ff8d 	bl	8004208 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80042ee:	4b16      	ldr	r3, [pc, #88]	; (8004348 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
      break;
 80042f4:	e022      	b.n	800433c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042fc:	2bff      	cmp	r3, #255	; 0xff
 80042fe:	d103      	bne.n	8004308 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2278      	movs	r2, #120	; 0x78
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691c      	ldr	r4, [r3, #16]
 800430c:	7aba      	ldrb	r2, [r7, #10]
 800430e:	7af9      	ldrb	r1, [r7, #11]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	47a0      	blx	r4
 8004316:	4603      	mov	r3, r0
 8004318:	e011      	b.n	800433e <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
      break;
 8004320:	e00c      	b.n	800433c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff feb3 	bl	8004096 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
      break;
 8004336:	e001      	b.n	800433c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 800433c:	2301      	movs	r3, #1
}
 800433e:	4618      	mov	r0, r3
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	bd90      	pop	{r4, r7, pc}
 8004346:	bf00      	nop
 8004348:	2000091c 	.word	0x2000091c

0800434c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	72fb      	strb	r3, [r7, #11]
 800435a:	4613      	mov	r3, r2
 800435c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800435e:	7afb      	ldrb	r3, [r7, #11]
 8004360:	3b0b      	subs	r3, #11
 8004362:	2b04      	cmp	r3, #4
 8004364:	f200 808a 	bhi.w	800447c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004385 	.word	0x08004385
 8004374:	0800447d 	.word	0x0800447d
 8004378:	0800439f 	.word	0x0800439f
 800437c:	080043d1 	.word	0x080043d1
 8004380:	080043f1 	.word	0x080043f1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004384:	7abb      	ldrb	r3, [r7, #10]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800438a:	4940      	ldr	r1, [pc, #256]	; (800448c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff fee9 	bl	8004164 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004392:	e075      	b.n	8004480 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004394:	493e      	ldr	r1, [pc, #248]	; (8004490 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff fee4 	bl	8004164 <u8x8_cad_SendSequence>
      break;
 800439c:	e070      	b.n	8004480 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800439e:	7abb      	ldrb	r3, [r7, #10]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80043a4:	493b      	ldr	r1, [pc, #236]	; (8004494 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fedc 	bl	8004164 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	7c9a      	ldrb	r2, [r3, #18]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80043b8:	e062      	b.n	8004480 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80043ba:	4937      	ldr	r1, [pc, #220]	; (8004498 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff fed1 	bl	8004164 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	7cda      	ldrb	r2, [r3, #19]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80043ce:	e057      	b.n	8004480 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff fea7 	bl	8004124 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80043d6:	2181      	movs	r1, #129	; 0x81
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff fe6c 	bl	80040b6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80043de:	7abb      	ldrb	r3, [r7, #10]
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fe79 	bl	80040da <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff feab 	bl	8004144 <u8x8_cad_EndTransfer>
      break;
 80043ee:	e047      	b.n	8004480 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff fe97 	bl	8004124 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	795b      	ldrb	r3, [r3, #5]
 80043fa:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	4413      	add	r3, r2
 800440c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800440e:	2140      	movs	r1, #64	; 0x40
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fe50 	bl	80040b6 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f043 0310 	orr.w	r3, r3, #16
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4619      	mov	r1, r3
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fe46 	bl	80040b6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fe50 	bl	80040da <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	799b      	ldrb	r3, [r3, #6]
 800443e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff fe47 	bl	80040da <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	791b      	ldrb	r3, [r3, #4]
 8004450:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004458:	7dbb      	ldrb	r3, [r7, #22]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4619      	mov	r1, r3
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fe4b 	bl	80040fe <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004468:	7abb      	ldrb	r3, [r7, #10]
 800446a:	3b01      	subs	r3, #1
 800446c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800446e:	7abb      	ldrb	r3, [r7, #10]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1eb      	bne.n	800444c <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fe65 	bl	8004144 <u8x8_cad_EndTransfer>
      break;
 800447a:	e001      	b.n	8004480 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004480:	2301      	movs	r3, #1
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	0800da34 	.word	0x0800da34
 8004490:	0800da3c 	.word	0x0800da3c
 8004494:	0800da44 	.word	0x0800da44
 8004498:	0800da4c 	.word	0x0800da4c

0800449c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	72fb      	strb	r3, [r7, #11]
 80044aa:	4613      	mov	r3, r2
 80044ac:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80044ae:	7aba      	ldrb	r2, [r7, #10]
 80044b0:	7af9      	ldrb	r1, [r7, #11]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff ff49 	bl	800434c <u8x8_d_ssd1306_sh1106_generic>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e014      	b.n	80044ee <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80044c4:	7afb      	ldrb	r3, [r7, #11]
 80044c6:	2b09      	cmp	r3, #9
 80044c8:	d009      	beq.n	80044de <u8x8_d_ssd1306_128x64_noname+0x42>
 80044ca:	2b0a      	cmp	r3, #10
 80044cc:	d10c      	bne.n	80044e8 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f829 	bl	8004526 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80044d4:	4908      	ldr	r1, [pc, #32]	; (80044f8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff fe44 	bl	8004164 <u8x8_cad_SendSequence>
      break;
 80044dc:	e006      	b.n	80044ec <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80044de:	4907      	ldr	r1, [pc, #28]	; (80044fc <u8x8_d_ssd1306_128x64_noname+0x60>)
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f80d 	bl	8004500 <u8x8_d_helper_display_setup_memory>
      break;
 80044e6:	e001      	b.n	80044ec <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80044ec:	2301      	movs	r3, #1
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	0800d9fc 	.word	0x0800d9fc
 80044fc:	0800da54 	.word	0x0800da54

08004500 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	7c9a      	ldrb	r2, [r3, #18]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004526:	b590      	push	{r4, r7, lr}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695c      	ldr	r4, [r3, #20]
 8004532:	2300      	movs	r3, #0
 8004534:	2200      	movs	r2, #0
 8004536:	2128      	movs	r1, #40	; 0x28
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68dc      	ldr	r4, [r3, #12]
 8004540:	2300      	movs	r3, #0
 8004542:	2200      	movs	r2, #0
 8004544:	2114      	movs	r1, #20
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800454a:	2201      	movs	r2, #1
 800454c:	214b      	movs	r1, #75	; 0x4b
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f886 	bl	8004660 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	791b      	ldrb	r3, [r3, #4]
 800455a:	461a      	mov	r2, r3
 800455c:	2129      	movs	r1, #41	; 0x29
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f87e 	bl	8004660 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	214b      	movs	r1, #75	; 0x4b
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f879 	bl	8004660 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	791b      	ldrb	r3, [r3, #4]
 8004574:	461a      	mov	r2, r3
 8004576:	2129      	movs	r1, #41	; 0x29
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f871 	bl	8004660 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800457e:	2201      	movs	r2, #1
 8004580:	214b      	movs	r1, #75	; 0x4b
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f86c 	bl	8004660 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	795b      	ldrb	r3, [r3, #5]
 800458e:	461a      	mov	r2, r3
 8004590:	2129      	movs	r1, #41	; 0x29
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f864 	bl	8004660 <u8x8_gpio_call>
}    
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bd90      	pop	{r4, r7, pc}

080045a0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	4608      	mov	r0, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	461a      	mov	r2, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	70fb      	strb	r3, [r7, #3]
 80045b2:	460b      	mov	r3, r1
 80045b4:	70bb      	strb	r3, [r7, #2]
 80045b6:	4613      	mov	r3, r2
 80045b8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80045be:	78bb      	ldrb	r3, [r7, #2]
 80045c0:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80045c2:	787b      	ldrb	r3, [r7, #1]
 80045c4:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689c      	ldr	r4, [r3, #8]
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	2201      	movs	r2, #1
 80045d4:	210f      	movs	r1, #15
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	47a0      	blx	r4
 80045da:	4603      	mov	r3, r0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd90      	pop	{r4, r7, pc}

080045e4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689c      	ldr	r4, [r3, #8]
 80045f0:	2300      	movs	r3, #0
 80045f2:	2200      	movs	r2, #0
 80045f4:	2109      	movs	r1, #9
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	47a0      	blx	r4
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd90      	pop	{r4, r7, pc}

08004602 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004602:	b590      	push	{r4, r7, lr}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689c      	ldr	r4, [r3, #8]
 800460e:	2300      	movs	r3, #0
 8004610:	2200      	movs	r2, #0
 8004612:	210a      	movs	r1, #10
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	47a0      	blx	r4
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}

08004620 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689c      	ldr	r4, [r3, #8]
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	2300      	movs	r3, #0
 8004634:	210b      	movs	r1, #11
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	47a0      	blx	r4
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bd90      	pop	{r4, r7, pc}

08004642 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004642:	b590      	push	{r4, r7, lr}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689c      	ldr	r4, [r3, #8]
 800464e:	2300      	movs	r3, #0
 8004650:	2200      	movs	r2, #0
 8004652:	2110      	movs	r1, #16
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	47a0      	blx	r4
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bd90      	pop	{r4, r7, pc}

08004660 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004660:	b590      	push	{r4, r7, lr}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	70fb      	strb	r3, [r7, #3]
 800466c:	4613      	mov	r3, r2
 800466e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695c      	ldr	r4, [r3, #20]
 8004674:	78ba      	ldrb	r2, [r7, #2]
 8004676:	78f9      	ldrb	r1, [r7, #3]
 8004678:	2300      	movs	r3, #0
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	47a0      	blx	r4
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}

08004686 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	72fb      	strb	r3, [r7, #11]
 8004694:	4613      	mov	r3, r2
 8004696:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a13      	ldr	r2, [pc, #76]	; (8004704 <u8x8_SetupDefaults+0x60>)
 80046b6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <u8x8_SetupDefaults+0x60>)
 80046bc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a10      	ldr	r2, [pc, #64]	; (8004704 <u8x8_SetupDefaults+0x60>)
 80046c2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <u8x8_SetupDefaults+0x60>)
 80046c8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	22ff      	movs	r2, #255	; 0xff
 80046ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	22ff      	movs	r2, #255	; 0xff
 80046f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	08004687 	.word	0x08004687

08004708 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ffc4 	bl	80046a4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff55 	bl	80045e4 <u8x8_SetupMemory>
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <u8x8_GetStringLineCnt+0x16>
    return 0;
 8004754:	2300      	movs	r3, #0
 8004756:	e011      	b.n	800477c <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 800475e:	7bbb      	ldrb	r3, [r7, #14]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 800476a:	7bbb      	ldrb	r3, [r7, #14]
 800476c:	2b0a      	cmp	r3, #10
 800476e:	d1f3      	bne.n	8004758 <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	3301      	adds	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8004776:	e7ef      	b.n	8004758 <u8x8_GetStringLineCnt+0x16>
      break;
 8004778:	bf00      	nop
  }
  return line_cnt;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	4603      	mov	r3, r0
 800478e:	6039      	str	r1, [r7, #0]
 8004790:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <u8x8_GetStringLineStart+0x1a>
    return str;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	e017      	b.n	80047d0 <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 80047a6:	7bbb      	ldrb	r3, [r7, #14]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00f      	beq.n	80047cc <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 80047b2:	7bbb      	ldrb	r3, [r7, #14]
 80047b4:	2b0a      	cmp	r3, #10
 80047b6:	d1f3      	bne.n	80047a0 <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 80047b8:	7bfa      	ldrb	r2, [r7, #15]
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d101      	bne.n	80047c4 <u8x8_GetStringLineStart+0x3e>
	return str;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	e005      	b.n	80047d0 <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	3301      	adds	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
    e = *str;
 80047ca:	e7e9      	b.n	80047a0 <u8x8_GetStringLineStart+0x1a>
      break;
 80047cc:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
	...

080047dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80047dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80047de:	e003      	b.n	80047e8 <LoopCopyDataInit>

080047e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80047e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80047e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80047e6:	3104      	adds	r1, #4

080047e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80047e8:	480a      	ldr	r0, [pc, #40]	; (8004814 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80047ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80047ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80047f0:	d3f6      	bcc.n	80047e0 <CopyDataInit>
  ldr r2, =_sbss
 80047f2:	4a0a      	ldr	r2, [pc, #40]	; (800481c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80047f4:	e002      	b.n	80047fc <LoopFillZerobss>

080047f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80047f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80047f8:	f842 3b04 	str.w	r3, [r2], #4

080047fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80047fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004800:	d3f9      	bcc.n	80047f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004802:	f7fd feff 	bl	8002604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004806:	f008 fbef 	bl	800cfe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800480a:	f7fd fa3f 	bl	8001c8c <main>
  bx lr
 800480e:	4770      	bx	lr
  ldr r3, =_sidata
 8004810:	0800dfc4 	.word	0x0800dfc4
  ldr r0, =_sdata
 8004814:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004818:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 800481c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8004820:	20000b58 	.word	0x20000b58

08004824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004824:	e7fe      	b.n	8004824 <ADC1_2_IRQHandler>
	...

08004828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_Init+0x28>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a07      	ldr	r2, [pc, #28]	; (8004850 <HAL_Init+0x28>)
 8004832:	f043 0310 	orr.w	r3, r3, #16
 8004836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004838:	2003      	movs	r0, #3
 800483a:	f000 f947 	bl	8004acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800483e:	2000      	movs	r0, #0
 8004840:	f000 f808 	bl	8004854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004844:	f7fd fc76 	bl	8002134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40022000 	.word	0x40022000

08004854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_InitTick+0x54>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <HAL_InitTick+0x58>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800486a:	fbb3 f3f1 	udiv	r3, r3, r1
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f95f 	bl	8004b36 <HAL_SYSTICK_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e00e      	b.n	80048a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d80a      	bhi.n	800489e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004888:	2200      	movs	r2, #0
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	f000 f927 	bl	8004ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004894:	4a06      	ldr	r2, [pc, #24]	; (80048b0 <HAL_InitTick+0x5c>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000004 	.word	0x20000004
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	20000008 	.word	0x20000008

080048b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_IncTick+0x1c>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_IncTick+0x20>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4413      	add	r3, r2
 80048c4:	4a03      	ldr	r2, [pc, #12]	; (80048d4 <HAL_IncTick+0x20>)
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	2000000c 	.word	0x2000000c
 80048d4:	20000920 	.word	0x20000920

080048d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return uwTick;
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <HAL_GetTick+0x10>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	20000920 	.word	0x20000920

080048ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048f4:	f7ff fff0 	bl	80048d8 <HAL_GetTick>
 80048f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d005      	beq.n	8004912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_Delay+0x44>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004912:	bf00      	nop
 8004914:	f7ff ffe0 	bl	80048d8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	429a      	cmp	r2, r3
 8004922:	d8f7      	bhi.n	8004914 <HAL_Delay+0x28>
  {
  }
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	2000000c 	.word	0x2000000c

08004934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004944:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <__NVIC_SetPriorityGrouping+0x44>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004950:	4013      	ands	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800495c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004966:	4a04      	ldr	r2, [pc, #16]	; (8004978 <__NVIC_SetPriorityGrouping+0x44>)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	60d3      	str	r3, [r2, #12]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	e000ed00 	.word	0xe000ed00

0800497c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <__NVIC_GetPriorityGrouping+0x18>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	f003 0307 	and.w	r3, r3, #7
}
 800498a:	4618      	mov	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	e000ed00 	.word	0xe000ed00

08004998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	db0b      	blt.n	80049c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	4906      	ldr	r1, [pc, #24]	; (80049cc <__NVIC_EnableIRQ+0x34>)
 80049b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2001      	movs	r0, #1
 80049ba:	fa00 f202 	lsl.w	r2, r0, r2
 80049be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	e000e100 	.word	0xe000e100

080049d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db0a      	blt.n	80049fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	490c      	ldr	r1, [pc, #48]	; (8004a1c <__NVIC_SetPriority+0x4c>)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	440b      	add	r3, r1
 80049f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f8:	e00a      	b.n	8004a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4908      	ldr	r1, [pc, #32]	; (8004a20 <__NVIC_SetPriority+0x50>)
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	3b04      	subs	r3, #4
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	761a      	strb	r2, [r3, #24]
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f1c3 0307 	rsb	r3, r3, #7
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	bf28      	it	cs
 8004a42:	2304      	movcs	r3, #4
 8004a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	d902      	bls.n	8004a54 <NVIC_EncodePriority+0x30>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3b03      	subs	r3, #3
 8004a52:	e000      	b.n	8004a56 <NVIC_EncodePriority+0x32>
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a58:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43da      	mvns	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	401a      	ands	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	43d9      	mvns	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a7c:	4313      	orrs	r3, r2
         );
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a98:	d301      	bcc.n	8004a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e00f      	b.n	8004abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <SysTick_Config+0x40>)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aa6:	210f      	movs	r1, #15
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	f7ff ff90 	bl	80049d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <SysTick_Config+0x40>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ab6:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <SysTick_Config+0x40>)
 8004ab8:	2207      	movs	r2, #7
 8004aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	e000e010 	.word	0xe000e010

08004acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ff2d 	bl	8004934 <__NVIC_SetPriorityGrouping>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	4603      	mov	r3, r0
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004af4:	f7ff ff42 	bl	800497c <__NVIC_GetPriorityGrouping>
 8004af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	6978      	ldr	r0, [r7, #20]
 8004b00:	f7ff ff90 	bl	8004a24 <NVIC_EncodePriority>
 8004b04:	4602      	mov	r2, r0
 8004b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff5f 	bl	80049d0 <__NVIC_SetPriority>
}
 8004b12:	bf00      	nop
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	4603      	mov	r3, r0
 8004b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff35 	bl	8004998 <__NVIC_EnableIRQ>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ffa2 	bl	8004a88 <SysTick_Config>
 8004b44:	4603      	mov	r3, r0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e043      	b.n	8004bee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <HAL_DMA_Init+0xa8>)
 8004b6e:	4413      	add	r3, r2
 8004b70:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <HAL_DMA_Init+0xac>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	009a      	lsls	r2, r3, #2
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_DMA_Init+0xb0>)
 8004b82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	bffdfff8 	.word	0xbffdfff8
 8004bfc:	cccccccd 	.word	0xcccccccd
 8004c00:	40020000 	.word	0x40020000

08004c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_DMA_Start_IT+0x20>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e04a      	b.n	8004cba <HAL_DMA_Start_IT+0xb6>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d13a      	bne.n	8004cac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f9ae 	bl	8004fbc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 020e 	orr.w	r2, r2, #14
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e00f      	b.n	8004c9a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0204 	bic.w	r2, r2, #4
 8004c88:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 020a 	orr.w	r2, r2, #10
 8004c98:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e005      	b.n	8004cb8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d005      	beq.n	8004ce6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e051      	b.n	8004d8a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 020e 	bic.w	r2, r2, #14
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <HAL_DMA_Abort_IT+0xd0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d029      	beq.n	8004d64 <HAL_DMA_Abort_IT+0xa0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <HAL_DMA_Abort_IT+0xd4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d022      	beq.n	8004d60 <HAL_DMA_Abort_IT+0x9c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <HAL_DMA_Abort_IT+0xd8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01a      	beq.n	8004d5a <HAL_DMA_Abort_IT+0x96>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <HAL_DMA_Abort_IT+0xdc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d012      	beq.n	8004d54 <HAL_DMA_Abort_IT+0x90>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <HAL_DMA_Abort_IT+0xe0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00a      	beq.n	8004d4e <HAL_DMA_Abort_IT+0x8a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_DMA_Abort_IT+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d102      	bne.n	8004d48 <HAL_DMA_Abort_IT+0x84>
 8004d42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d46:	e00e      	b.n	8004d66 <HAL_DMA_Abort_IT+0xa2>
 8004d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d4c:	e00b      	b.n	8004d66 <HAL_DMA_Abort_IT+0xa2>
 8004d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d52:	e008      	b.n	8004d66 <HAL_DMA_Abort_IT+0xa2>
 8004d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d58:	e005      	b.n	8004d66 <HAL_DMA_Abort_IT+0xa2>
 8004d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5e:	e002      	b.n	8004d66 <HAL_DMA_Abort_IT+0xa2>
 8004d60:	2310      	movs	r3, #16
 8004d62:	e000      	b.n	8004d66 <HAL_DMA_Abort_IT+0xa2>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4a11      	ldr	r2, [pc, #68]	; (8004dac <HAL_DMA_Abort_IT+0xe8>)
 8004d68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
    } 
  }
  return status;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40020008 	.word	0x40020008
 8004d98:	4002001c 	.word	0x4002001c
 8004d9c:	40020030 	.word	0x40020030
 8004da0:	40020044 	.word	0x40020044
 8004da4:	40020058 	.word	0x40020058
 8004da8:	4002006c 	.word	0x4002006c
 8004dac:	40020000 	.word	0x40020000

08004db0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	2204      	movs	r2, #4
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d04f      	beq.n	8004e78 <HAL_DMA_IRQHandler+0xc8>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d04a      	beq.n	8004e78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0204 	bic.w	r2, r2, #4
 8004dfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a66      	ldr	r2, [pc, #408]	; (8004fa0 <HAL_DMA_IRQHandler+0x1f0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d029      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xae>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a65      	ldr	r2, [pc, #404]	; (8004fa4 <HAL_DMA_IRQHandler+0x1f4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xaa>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a63      	ldr	r2, [pc, #396]	; (8004fa8 <HAL_DMA_IRQHandler+0x1f8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01a      	beq.n	8004e54 <HAL_DMA_IRQHandler+0xa4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a62      	ldr	r2, [pc, #392]	; (8004fac <HAL_DMA_IRQHandler+0x1fc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d012      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x9e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a60      	ldr	r2, [pc, #384]	; (8004fb0 <HAL_DMA_IRQHandler+0x200>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00a      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x98>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a5f      	ldr	r2, [pc, #380]	; (8004fb4 <HAL_DMA_IRQHandler+0x204>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d102      	bne.n	8004e42 <HAL_DMA_IRQHandler+0x92>
 8004e3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e40:	e00e      	b.n	8004e60 <HAL_DMA_IRQHandler+0xb0>
 8004e42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e46:	e00b      	b.n	8004e60 <HAL_DMA_IRQHandler+0xb0>
 8004e48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e4c:	e008      	b.n	8004e60 <HAL_DMA_IRQHandler+0xb0>
 8004e4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e52:	e005      	b.n	8004e60 <HAL_DMA_IRQHandler+0xb0>
 8004e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e58:	e002      	b.n	8004e60 <HAL_DMA_IRQHandler+0xb0>
 8004e5a:	2340      	movs	r3, #64	; 0x40
 8004e5c:	e000      	b.n	8004e60 <HAL_DMA_IRQHandler+0xb0>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	4a55      	ldr	r2, [pc, #340]	; (8004fb8 <HAL_DMA_IRQHandler+0x208>)
 8004e62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8094 	beq.w	8004f96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004e76:	e08e      	b.n	8004f96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d056      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x186>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d051      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 020a 	bic.w	r2, r2, #10
 8004eae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <HAL_DMA_IRQHandler+0x1f0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d029      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x166>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a37      	ldr	r2, [pc, #220]	; (8004fa4 <HAL_DMA_IRQHandler+0x1f4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x162>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a35      	ldr	r2, [pc, #212]	; (8004fa8 <HAL_DMA_IRQHandler+0x1f8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01a      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x15c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a34      	ldr	r2, [pc, #208]	; (8004fac <HAL_DMA_IRQHandler+0x1fc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d012      	beq.n	8004f06 <HAL_DMA_IRQHandler+0x156>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a32      	ldr	r2, [pc, #200]	; (8004fb0 <HAL_DMA_IRQHandler+0x200>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00a      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x150>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a31      	ldr	r2, [pc, #196]	; (8004fb4 <HAL_DMA_IRQHandler+0x204>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d102      	bne.n	8004efa <HAL_DMA_IRQHandler+0x14a>
 8004ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ef8:	e00e      	b.n	8004f18 <HAL_DMA_IRQHandler+0x168>
 8004efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004efe:	e00b      	b.n	8004f18 <HAL_DMA_IRQHandler+0x168>
 8004f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f04:	e008      	b.n	8004f18 <HAL_DMA_IRQHandler+0x168>
 8004f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f0a:	e005      	b.n	8004f18 <HAL_DMA_IRQHandler+0x168>
 8004f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f10:	e002      	b.n	8004f18 <HAL_DMA_IRQHandler+0x168>
 8004f12:	2320      	movs	r3, #32
 8004f14:	e000      	b.n	8004f18 <HAL_DMA_IRQHandler+0x168>
 8004f16:	2302      	movs	r3, #2
 8004f18:	4a27      	ldr	r2, [pc, #156]	; (8004fb8 <HAL_DMA_IRQHandler+0x208>)
 8004f1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d034      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f34:	e02f      	b.n	8004f96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d028      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x1e8>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 020e 	bic.w	r2, r2, #14
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f68:	2101      	movs	r1, #1
 8004f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
    }
  }
  return;
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
}
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40020008 	.word	0x40020008
 8004fa4:	4002001c 	.word	0x4002001c
 8004fa8:	40020030 	.word	0x40020030
 8004fac:	40020044 	.word	0x40020044
 8004fb0:	40020058 	.word	0x40020058
 8004fb4:	4002006c 	.word	0x4002006c
 8004fb8:	40020000 	.word	0x40020000

08004fbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d108      	bne.n	8004ffc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ffa:	e007      	b.n	800500c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
	...

08005018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005018:	b480      	push	{r7}
 800501a:	b08b      	sub	sp, #44	; 0x2c
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005026:	2300      	movs	r3, #0
 8005028:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800502a:	e169      	b.n	8005300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800502c:	2201      	movs	r2, #1
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	4013      	ands	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	429a      	cmp	r2, r3
 8005046:	f040 8158 	bne.w	80052fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4a9a      	ldr	r2, [pc, #616]	; (80052b8 <HAL_GPIO_Init+0x2a0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d05e      	beq.n	8005112 <HAL_GPIO_Init+0xfa>
 8005054:	4a98      	ldr	r2, [pc, #608]	; (80052b8 <HAL_GPIO_Init+0x2a0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d875      	bhi.n	8005146 <HAL_GPIO_Init+0x12e>
 800505a:	4a98      	ldr	r2, [pc, #608]	; (80052bc <HAL_GPIO_Init+0x2a4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d058      	beq.n	8005112 <HAL_GPIO_Init+0xfa>
 8005060:	4a96      	ldr	r2, [pc, #600]	; (80052bc <HAL_GPIO_Init+0x2a4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d86f      	bhi.n	8005146 <HAL_GPIO_Init+0x12e>
 8005066:	4a96      	ldr	r2, [pc, #600]	; (80052c0 <HAL_GPIO_Init+0x2a8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d052      	beq.n	8005112 <HAL_GPIO_Init+0xfa>
 800506c:	4a94      	ldr	r2, [pc, #592]	; (80052c0 <HAL_GPIO_Init+0x2a8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d869      	bhi.n	8005146 <HAL_GPIO_Init+0x12e>
 8005072:	4a94      	ldr	r2, [pc, #592]	; (80052c4 <HAL_GPIO_Init+0x2ac>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d04c      	beq.n	8005112 <HAL_GPIO_Init+0xfa>
 8005078:	4a92      	ldr	r2, [pc, #584]	; (80052c4 <HAL_GPIO_Init+0x2ac>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d863      	bhi.n	8005146 <HAL_GPIO_Init+0x12e>
 800507e:	4a92      	ldr	r2, [pc, #584]	; (80052c8 <HAL_GPIO_Init+0x2b0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d046      	beq.n	8005112 <HAL_GPIO_Init+0xfa>
 8005084:	4a90      	ldr	r2, [pc, #576]	; (80052c8 <HAL_GPIO_Init+0x2b0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d85d      	bhi.n	8005146 <HAL_GPIO_Init+0x12e>
 800508a:	2b12      	cmp	r3, #18
 800508c:	d82a      	bhi.n	80050e4 <HAL_GPIO_Init+0xcc>
 800508e:	2b12      	cmp	r3, #18
 8005090:	d859      	bhi.n	8005146 <HAL_GPIO_Init+0x12e>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_GPIO_Init+0x80>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	08005113 	.word	0x08005113
 800509c:	080050ed 	.word	0x080050ed
 80050a0:	080050ff 	.word	0x080050ff
 80050a4:	08005141 	.word	0x08005141
 80050a8:	08005147 	.word	0x08005147
 80050ac:	08005147 	.word	0x08005147
 80050b0:	08005147 	.word	0x08005147
 80050b4:	08005147 	.word	0x08005147
 80050b8:	08005147 	.word	0x08005147
 80050bc:	08005147 	.word	0x08005147
 80050c0:	08005147 	.word	0x08005147
 80050c4:	08005147 	.word	0x08005147
 80050c8:	08005147 	.word	0x08005147
 80050cc:	08005147 	.word	0x08005147
 80050d0:	08005147 	.word	0x08005147
 80050d4:	08005147 	.word	0x08005147
 80050d8:	08005147 	.word	0x08005147
 80050dc:	080050f5 	.word	0x080050f5
 80050e0:	08005109 	.word	0x08005109
 80050e4:	4a79      	ldr	r2, [pc, #484]	; (80052cc <HAL_GPIO_Init+0x2b4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80050ea:	e02c      	b.n	8005146 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	623b      	str	r3, [r7, #32]
          break;
 80050f2:	e029      	b.n	8005148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	623b      	str	r3, [r7, #32]
          break;
 80050fc:	e024      	b.n	8005148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	3308      	adds	r3, #8
 8005104:	623b      	str	r3, [r7, #32]
          break;
 8005106:	e01f      	b.n	8005148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	330c      	adds	r3, #12
 800510e:	623b      	str	r3, [r7, #32]
          break;
 8005110:	e01a      	b.n	8005148 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800511a:	2304      	movs	r3, #4
 800511c:	623b      	str	r3, [r7, #32]
          break;
 800511e:	e013      	b.n	8005148 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005128:	2308      	movs	r3, #8
 800512a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	611a      	str	r2, [r3, #16]
          break;
 8005132:	e009      	b.n	8005148 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005134:	2308      	movs	r3, #8
 8005136:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	615a      	str	r2, [r3, #20]
          break;
 800513e:	e003      	b.n	8005148 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005140:	2300      	movs	r3, #0
 8005142:	623b      	str	r3, [r7, #32]
          break;
 8005144:	e000      	b.n	8005148 <HAL_GPIO_Init+0x130>
          break;
 8005146:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2bff      	cmp	r3, #255	; 0xff
 800514c:	d801      	bhi.n	8005152 <HAL_GPIO_Init+0x13a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	e001      	b.n	8005156 <HAL_GPIO_Init+0x13e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2bff      	cmp	r3, #255	; 0xff
 800515c:	d802      	bhi.n	8005164 <HAL_GPIO_Init+0x14c>
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	e002      	b.n	800516a <HAL_GPIO_Init+0x152>
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	3b08      	subs	r3, #8
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	210f      	movs	r1, #15
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	401a      	ands	r2, r3
 800517c:	6a39      	ldr	r1, [r7, #32]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	431a      	orrs	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80b1 	beq.w	80052fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005198:	4b4d      	ldr	r3, [pc, #308]	; (80052d0 <HAL_GPIO_Init+0x2b8>)
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	4a4c      	ldr	r2, [pc, #304]	; (80052d0 <HAL_GPIO_Init+0x2b8>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	6193      	str	r3, [r2, #24]
 80051a4:	4b4a      	ldr	r3, [pc, #296]	; (80052d0 <HAL_GPIO_Init+0x2b8>)
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80051b0:	4a48      	ldr	r2, [pc, #288]	; (80052d4 <HAL_GPIO_Init+0x2bc>)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	3302      	adds	r3, #2
 80051b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	220f      	movs	r2, #15
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4013      	ands	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a40      	ldr	r2, [pc, #256]	; (80052d8 <HAL_GPIO_Init+0x2c0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <HAL_GPIO_Init+0x1ec>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3f      	ldr	r2, [pc, #252]	; (80052dc <HAL_GPIO_Init+0x2c4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00d      	beq.n	8005200 <HAL_GPIO_Init+0x1e8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3e      	ldr	r2, [pc, #248]	; (80052e0 <HAL_GPIO_Init+0x2c8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <HAL_GPIO_Init+0x1e4>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3d      	ldr	r2, [pc, #244]	; (80052e4 <HAL_GPIO_Init+0x2cc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d101      	bne.n	80051f8 <HAL_GPIO_Init+0x1e0>
 80051f4:	2303      	movs	r3, #3
 80051f6:	e006      	b.n	8005206 <HAL_GPIO_Init+0x1ee>
 80051f8:	2304      	movs	r3, #4
 80051fa:	e004      	b.n	8005206 <HAL_GPIO_Init+0x1ee>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e002      	b.n	8005206 <HAL_GPIO_Init+0x1ee>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <HAL_GPIO_Init+0x1ee>
 8005204:	2300      	movs	r3, #0
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	f002 0203 	and.w	r2, r2, #3
 800520c:	0092      	lsls	r2, r2, #2
 800520e:	4093      	lsls	r3, r2
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005216:	492f      	ldr	r1, [pc, #188]	; (80052d4 <HAL_GPIO_Init+0x2bc>)
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	3302      	adds	r3, #2
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005230:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	492c      	ldr	r1, [pc, #176]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	e006      	b.n	800524c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800523e:	4b2a      	ldr	r3, [pc, #168]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	43db      	mvns	r3, r3
 8005246:	4928      	ldr	r1, [pc, #160]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005248:	4013      	ands	r3, r2
 800524a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005258:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4922      	ldr	r1, [pc, #136]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	e006      	b.n	8005274 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005266:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	43db      	mvns	r3, r3
 800526e:	491e      	ldr	r1, [pc, #120]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005270:	4013      	ands	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4918      	ldr	r1, [pc, #96]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]
 800528c:	e006      	b.n	800529c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800528e:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	43db      	mvns	r3, r3
 8005296:	4914      	ldr	r1, [pc, #80]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005298:	4013      	ands	r3, r2
 800529a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d021      	beq.n	80052ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80052a8:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	490e      	ldr	r1, [pc, #56]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60cb      	str	r3, [r1, #12]
 80052b4:	e021      	b.n	80052fa <HAL_GPIO_Init+0x2e2>
 80052b6:	bf00      	nop
 80052b8:	10320000 	.word	0x10320000
 80052bc:	10310000 	.word	0x10310000
 80052c0:	10220000 	.word	0x10220000
 80052c4:	10210000 	.word	0x10210000
 80052c8:	10120000 	.word	0x10120000
 80052cc:	10110000 	.word	0x10110000
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40010800 	.word	0x40010800
 80052dc:	40010c00 	.word	0x40010c00
 80052e0:	40011000 	.word	0x40011000
 80052e4:	40011400 	.word	0x40011400
 80052e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_GPIO_Init+0x304>)
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	4909      	ldr	r1, [pc, #36]	; (800531c <HAL_GPIO_Init+0x304>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	3301      	adds	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	fa22 f303 	lsr.w	r3, r2, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	f47f ae8e 	bne.w	800502c <HAL_GPIO_Init+0x14>
  }
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	372c      	adds	r7, #44	; 0x2c
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	40010400 	.word	0x40010400

08005320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e001      	b.n	8005342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	807b      	strh	r3, [r7, #2]
 800535a:	4613      	mov	r3, r2
 800535c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800535e:	787b      	ldrb	r3, [r7, #1]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005364:	887a      	ldrh	r2, [r7, #2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800536a:	e003      	b.n	8005374 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	041a      	lsls	r2, r3, #16
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	611a      	str	r2, [r3, #16]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
	...

08005380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800538a:	4b08      	ldr	r3, [pc, #32]	; (80053ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d006      	beq.n	80053a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fc fbf4 	bl	8001b8c <HAL_GPIO_EXTI_Callback>
  }
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40010400 	.word	0x40010400

080053b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e12b      	b.n	800561a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fc fede 	bl	8002198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2224      	movs	r2, #36	; 0x24
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005414:	f000 fff6 	bl	8006404 <HAL_RCC_GetPCLK1Freq>
 8005418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4a81      	ldr	r2, [pc, #516]	; (8005624 <HAL_I2C_Init+0x274>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d807      	bhi.n	8005434 <HAL_I2C_Init+0x84>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4a80      	ldr	r2, [pc, #512]	; (8005628 <HAL_I2C_Init+0x278>)
 8005428:	4293      	cmp	r3, r2
 800542a:	bf94      	ite	ls
 800542c:	2301      	movls	r3, #1
 800542e:	2300      	movhi	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e006      	b.n	8005442 <HAL_I2C_Init+0x92>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a7d      	ldr	r2, [pc, #500]	; (800562c <HAL_I2C_Init+0x27c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	bf94      	ite	ls
 800543c:	2301      	movls	r3, #1
 800543e:	2300      	movhi	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e0e7      	b.n	800561a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a78      	ldr	r2, [pc, #480]	; (8005630 <HAL_I2C_Init+0x280>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0c9b      	lsrs	r3, r3, #18
 8005454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a6a      	ldr	r2, [pc, #424]	; (8005624 <HAL_I2C_Init+0x274>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d802      	bhi.n	8005484 <HAL_I2C_Init+0xd4>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3301      	adds	r3, #1
 8005482:	e009      	b.n	8005498 <HAL_I2C_Init+0xe8>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	4a69      	ldr	r2, [pc, #420]	; (8005634 <HAL_I2C_Init+0x284>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	3301      	adds	r3, #1
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	430b      	orrs	r3, r1
 800549e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	495c      	ldr	r1, [pc, #368]	; (8005624 <HAL_I2C_Init+0x274>)
 80054b4:	428b      	cmp	r3, r1
 80054b6:	d819      	bhi.n	80054ec <HAL_I2C_Init+0x13c>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1e59      	subs	r1, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c6:	1c59      	adds	r1, r3, #1
 80054c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054cc:	400b      	ands	r3, r1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_I2C_Init+0x138>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1e59      	subs	r1, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e0:	3301      	adds	r3, #1
 80054e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e6:	e051      	b.n	800558c <HAL_I2C_Init+0x1dc>
 80054e8:	2304      	movs	r3, #4
 80054ea:	e04f      	b.n	800558c <HAL_I2C_Init+0x1dc>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d111      	bne.n	8005518 <HAL_I2C_Init+0x168>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1e58      	subs	r0, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	440b      	add	r3, r1
 8005502:	fbb0 f3f3 	udiv	r3, r0, r3
 8005506:	3301      	adds	r3, #1
 8005508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e012      	b.n	800553e <HAL_I2C_Init+0x18e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1e58      	subs	r0, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	0099      	lsls	r1, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	fbb0 f3f3 	udiv	r3, r0, r3
 800552e:	3301      	adds	r3, #1
 8005530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Init+0x196>
 8005542:	2301      	movs	r3, #1
 8005544:	e022      	b.n	800558c <HAL_I2C_Init+0x1dc>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10e      	bne.n	800556c <HAL_I2C_Init+0x1bc>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1e58      	subs	r0, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	440b      	add	r3, r1
 800555c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005560:	3301      	adds	r3, #1
 8005562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	e00f      	b.n	800558c <HAL_I2C_Init+0x1dc>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1e58      	subs	r0, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	0099      	lsls	r1, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005582:	3301      	adds	r3, #1
 8005584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	6809      	ldr	r1, [r1, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6911      	ldr	r1, [r2, #16]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68d2      	ldr	r2, [r2, #12]
 80055c6:	4311      	orrs	r1, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	000186a0 	.word	0x000186a0
 8005628:	001e847f 	.word	0x001e847f
 800562c:	003d08ff 	.word	0x003d08ff
 8005630:	431bde83 	.word	0x431bde83
 8005634:	10624dd3 	.word	0x10624dd3

08005638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	460b      	mov	r3, r1
 8005646:	817b      	strh	r3, [r7, #10]
 8005648:	4613      	mov	r3, r2
 800564a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800564c:	f7ff f944 	bl	80048d8 <HAL_GetTick>
 8005650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b20      	cmp	r3, #32
 800565c:	f040 80e0 	bne.w	8005820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	2319      	movs	r3, #25
 8005666:	2201      	movs	r2, #1
 8005668:	4970      	ldr	r1, [pc, #448]	; (800582c <HAL_I2C_Master_Transmit+0x1f4>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f964 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005676:	2302      	movs	r3, #2
 8005678:	e0d3      	b.n	8005822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_I2C_Master_Transmit+0x50>
 8005684:	2302      	movs	r3, #2
 8005686:	e0cc      	b.n	8005822 <HAL_I2C_Master_Transmit+0x1ea>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b01      	cmp	r3, #1
 800569c:	d007      	beq.n	80056ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2221      	movs	r2, #33	; 0x21
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2210      	movs	r2, #16
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	893a      	ldrh	r2, [r7, #8]
 80056de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a50      	ldr	r2, [pc, #320]	; (8005830 <HAL_I2C_Master_Transmit+0x1f8>)
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056f0:	8979      	ldrh	r1, [r7, #10]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f89c 	bl	8005834 <I2C_MasterRequestWrite>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e08d      	b.n	8005822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800571c:	e066      	b.n	80057ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	6a39      	ldr	r1, [r7, #32]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f9de 	bl	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00d      	beq.n	800574a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b04      	cmp	r3, #4
 8005734:	d107      	bne.n	8005746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e06b      	b.n	8005822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	781a      	ldrb	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b04      	cmp	r3, #4
 8005786:	d11b      	bne.n	80057c0 <HAL_I2C_Master_Transmit+0x188>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	d017      	beq.n	80057c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	6a39      	ldr	r1, [r7, #32]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f9ce 	bl	8005b66 <I2C_WaitOnBTFFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d107      	bne.n	80057e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e01a      	b.n	8005822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d194      	bne.n	800571e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	00100002 	.word	0x00100002
 8005830:	ffff0000 	.word	0xffff0000

08005834 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	460b      	mov	r3, r1
 8005842:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d006      	beq.n	800585e <I2C_MasterRequestWrite+0x2a>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d003      	beq.n	800585e <I2C_MasterRequestWrite+0x2a>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800585c:	d108      	bne.n	8005870 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e00b      	b.n	8005888 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	2b12      	cmp	r3, #18
 8005876:	d107      	bne.n	8005888 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005886:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f84f 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ae:	d103      	bne.n	80058b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e035      	b.n	8005928 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c4:	d108      	bne.n	80058d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058c6:	897b      	ldrh	r3, [r7, #10]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	e01b      	b.n	8005910 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058d8:	897b      	ldrh	r3, [r7, #10]
 80058da:	11db      	asrs	r3, r3, #7
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0306 	and.w	r3, r3, #6
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f063 030f 	orn	r3, r3, #15
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	490e      	ldr	r1, [pc, #56]	; (8005930 <I2C_MasterRequestWrite+0xfc>)
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f875 	bl	80059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e010      	b.n	8005928 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4907      	ldr	r1, [pc, #28]	; (8005934 <I2C_MasterRequestWrite+0x100>)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f865 	bl	80059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	00010008 	.word	0x00010008
 8005934:	00010002 	.word	0x00010002

08005938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005948:	e025      	b.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d021      	beq.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005952:	f7fe ffc1 	bl	80048d8 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d302      	bcc.n	8005968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d116      	bne.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e023      	b.n	80059de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d10d      	bne.n	80059bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	43da      	mvns	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4013      	ands	r3, r2
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf0c      	ite	eq
 80059b2:	2301      	moveq	r3, #1
 80059b4:	2300      	movne	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	e00c      	b.n	80059d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	43da      	mvns	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d0b6      	beq.n	800594a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f4:	e051      	b.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a04:	d123      	bne.n	8005a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e046      	b.n	8005adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d021      	beq.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a56:	f7fe ff3f 	bl	80048d8 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d116      	bne.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f043 0220 	orr.w	r2, r3, #32
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e020      	b.n	8005adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d10c      	bne.n	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	43da      	mvns	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bf14      	ite	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	2300      	moveq	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	e00b      	b.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	43da      	mvns	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d18d      	bne.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af0:	e02d      	b.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f878 	bl	8005be8 <I2C_IsAcknowledgeFailed>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e02d      	b.n	8005b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d021      	beq.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fe fee5 	bl	80048d8 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d116      	bne.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e007      	b.n	8005b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d1ca      	bne.n	8005af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b72:	e02d      	b.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f837 	bl	8005be8 <I2C_IsAcknowledgeFailed>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e02d      	b.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d021      	beq.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8c:	f7fe fea4 	bl	80048d8 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d116      	bne.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e007      	b.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d1ca      	bne.n	8005b74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfe:	d11b      	bne.n	8005c38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	f043 0204 	orr.w	r2, r3, #4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	420e0020 	.word	0x420e0020

08005c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e272      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 8087 	beq.w	8005d8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c7c:	4b92      	ldr	r3, [pc, #584]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f003 030c 	and.w	r3, r3, #12
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d00c      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c88:	4b8f      	ldr	r3, [pc, #572]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d112      	bne.n	8005cba <HAL_RCC_OscConfig+0x5e>
 8005c94:	4b8c      	ldr	r3, [pc, #560]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca0:	d10b      	bne.n	8005cba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca2:	4b89      	ldr	r3, [pc, #548]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d06c      	beq.n	8005d88 <HAL_RCC_OscConfig+0x12c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d168      	bne.n	8005d88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e24c      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc2:	d106      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x76>
 8005cc4:	4b80      	ldr	r3, [pc, #512]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a7f      	ldr	r2, [pc, #508]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	e02e      	b.n	8005d30 <HAL_RCC_OscConfig+0xd4>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x98>
 8005cda:	4b7b      	ldr	r3, [pc, #492]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7a      	ldr	r2, [pc, #488]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4b78      	ldr	r3, [pc, #480]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a77      	ldr	r2, [pc, #476]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e01d      	b.n	8005d30 <HAL_RCC_OscConfig+0xd4>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cfc:	d10c      	bne.n	8005d18 <HAL_RCC_OscConfig+0xbc>
 8005cfe:	4b72      	ldr	r3, [pc, #456]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a71      	ldr	r2, [pc, #452]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	4b6f      	ldr	r3, [pc, #444]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a6e      	ldr	r2, [pc, #440]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e00b      	b.n	8005d30 <HAL_RCC_OscConfig+0xd4>
 8005d18:	4b6b      	ldr	r3, [pc, #428]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6a      	ldr	r2, [pc, #424]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	4b68      	ldr	r3, [pc, #416]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a67      	ldr	r2, [pc, #412]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7fe fdce 	bl	80048d8 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d40:	f7fe fdca 	bl	80048d8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b64      	cmp	r3, #100	; 0x64
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e200      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d52:	4b5d      	ldr	r3, [pc, #372]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0xe4>
 8005d5e:	e014      	b.n	8005d8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d60:	f7fe fdba 	bl	80048d8 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d68:	f7fe fdb6 	bl	80048d8 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	; 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e1ec      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7a:	4b53      	ldr	r3, [pc, #332]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0x10c>
 8005d86:	e000      	b.n	8005d8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d063      	beq.n	8005e5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d96:	4b4c      	ldr	r3, [pc, #304]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005da2:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d11c      	bne.n	8005de8 <HAL_RCC_OscConfig+0x18c>
 8005dae:	4b46      	ldr	r3, [pc, #280]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d116      	bne.n	8005de8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dba:	4b43      	ldr	r3, [pc, #268]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x176>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d001      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e1c0      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd2:	4b3d      	ldr	r3, [pc, #244]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4939      	ldr	r1, [pc, #228]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005de6:	e03a      	b.n	8005e5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df0:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <HAL_RCC_OscConfig+0x270>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df6:	f7fe fd6f 	bl	80048d8 <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dfe:	f7fe fd6b 	bl	80048d8 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e1a1      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e10:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1c:	4b2a      	ldr	r3, [pc, #168]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4927      	ldr	r1, [pc, #156]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	600b      	str	r3, [r1, #0]
 8005e30:	e015      	b.n	8005e5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e32:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <HAL_RCC_OscConfig+0x270>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e38:	f7fe fd4e 	bl	80048d8 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e40:	f7fe fd4a 	bl	80048d8 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e180      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f0      	bne.n	8005e40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d03a      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d019      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <HAL_RCC_OscConfig+0x274>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e78:	f7fe fd2e 	bl	80048d8 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e80:	f7fe fd2a 	bl	80048d8 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e160      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <HAL_RCC_OscConfig+0x26c>)
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f000 fad8 	bl	8006454 <RCC_Delay>
 8005ea4:	e01c      	b.n	8005ee0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <HAL_RCC_OscConfig+0x274>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eac:	f7fe fd14 	bl	80048d8 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb2:	e00f      	b.n	8005ed4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb4:	f7fe fd10 	bl	80048d8 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d908      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e146      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
 8005ec6:	bf00      	nop
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	42420000 	.word	0x42420000
 8005ed0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed4:	4b92      	ldr	r3, [pc, #584]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e9      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80a6 	beq.w	800603a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef2:	4b8b      	ldr	r3, [pc, #556]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	4b88      	ldr	r3, [pc, #544]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	4a87      	ldr	r2, [pc, #540]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f08:	61d3      	str	r3, [r2, #28]
 8005f0a:	4b85      	ldr	r3, [pc, #532]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1a:	4b82      	ldr	r3, [pc, #520]	; (8006124 <HAL_RCC_OscConfig+0x4c8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d118      	bne.n	8005f58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f26:	4b7f      	ldr	r3, [pc, #508]	; (8006124 <HAL_RCC_OscConfig+0x4c8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7e      	ldr	r2, [pc, #504]	; (8006124 <HAL_RCC_OscConfig+0x4c8>)
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f32:	f7fe fcd1 	bl	80048d8 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3a:	f7fe fccd 	bl	80048d8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b64      	cmp	r3, #100	; 0x64
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e103      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4c:	4b75      	ldr	r3, [pc, #468]	; (8006124 <HAL_RCC_OscConfig+0x4c8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCC_OscConfig+0x312>
 8005f60:	4b6f      	ldr	r3, [pc, #444]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4a6e      	ldr	r2, [pc, #440]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	6213      	str	r3, [r2, #32]
 8005f6c:	e02d      	b.n	8005fca <HAL_RCC_OscConfig+0x36e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x334>
 8005f76:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	4a69      	ldr	r2, [pc, #420]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	6213      	str	r3, [r2, #32]
 8005f82:	4b67      	ldr	r3, [pc, #412]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	4a66      	ldr	r2, [pc, #408]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f88:	f023 0304 	bic.w	r3, r3, #4
 8005f8c:	6213      	str	r3, [r2, #32]
 8005f8e:	e01c      	b.n	8005fca <HAL_RCC_OscConfig+0x36e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b05      	cmp	r3, #5
 8005f96:	d10c      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x356>
 8005f98:	4b61      	ldr	r3, [pc, #388]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	4a60      	ldr	r2, [pc, #384]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	6213      	str	r3, [r2, #32]
 8005fa4:	4b5e      	ldr	r3, [pc, #376]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	6213      	str	r3, [r2, #32]
 8005fb0:	e00b      	b.n	8005fca <HAL_RCC_OscConfig+0x36e>
 8005fb2:	4b5b      	ldr	r3, [pc, #364]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	4a5a      	ldr	r2, [pc, #360]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	6213      	str	r3, [r2, #32]
 8005fbe:	4b58      	ldr	r3, [pc, #352]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	4a57      	ldr	r2, [pc, #348]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d015      	beq.n	8005ffe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd2:	f7fe fc81 	bl	80048d8 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd8:	e00a      	b.n	8005ff0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fda:	f7fe fc7d 	bl	80048d8 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e0b1      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff0:	4b4b      	ldr	r3, [pc, #300]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0ee      	beq.n	8005fda <HAL_RCC_OscConfig+0x37e>
 8005ffc:	e014      	b.n	8006028 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffe:	f7fe fc6b 	bl	80048d8 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006004:	e00a      	b.n	800601c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006006:	f7fe fc67 	bl	80048d8 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f241 3288 	movw	r2, #5000	; 0x1388
 8006014:	4293      	cmp	r3, r2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e09b      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800601c:	4b40      	ldr	r3, [pc, #256]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ee      	bne.n	8006006 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006028:	7dfb      	ldrb	r3, [r7, #23]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d105      	bne.n	800603a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800602e:	4b3c      	ldr	r3, [pc, #240]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	4a3b      	ldr	r2, [pc, #236]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8006034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006038:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 8087 	beq.w	8006152 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006044:	4b36      	ldr	r3, [pc, #216]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 030c 	and.w	r3, r3, #12
 800604c:	2b08      	cmp	r3, #8
 800604e:	d061      	beq.n	8006114 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d146      	bne.n	80060e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006058:	4b33      	ldr	r3, [pc, #204]	; (8006128 <HAL_RCC_OscConfig+0x4cc>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605e:	f7fe fc3b 	bl	80048d8 <HAL_GetTick>
 8006062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006066:	f7fe fc37 	bl	80048d8 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e06d      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006078:	4b29      	ldr	r3, [pc, #164]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f0      	bne.n	8006066 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608c:	d108      	bne.n	80060a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	4921      	ldr	r1, [pc, #132]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060a0:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a19      	ldr	r1, [r3, #32]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	430b      	orrs	r3, r1
 80060b2:	491b      	ldr	r1, [pc, #108]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b8:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <HAL_RCC_OscConfig+0x4cc>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060be:	f7fe fc0b 	bl	80048d8 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c6:	f7fe fc07 	bl	80048d8 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e03d      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060d8:	4b11      	ldr	r3, [pc, #68]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0f0      	beq.n	80060c6 <HAL_RCC_OscConfig+0x46a>
 80060e4:	e035      	b.n	8006152 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <HAL_RCC_OscConfig+0x4cc>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ec:	f7fe fbf4 	bl	80048d8 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fe fbf0 	bl	80048d8 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e026      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x498>
 8006112:	e01e      	b.n	8006152 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d107      	bne.n	800612c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e019      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
 8006120:	40021000 	.word	0x40021000
 8006124:	40007000 	.word	0x40007000
 8006128:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <HAL_RCC_OscConfig+0x500>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	429a      	cmp	r2, r3
 800613e:	d106      	bne.n	800614e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614a:	429a      	cmp	r2, r3
 800614c:	d001      	beq.n	8006152 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40021000 	.word	0x40021000

08006160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0d0      	b.n	8006316 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006174:	4b6a      	ldr	r3, [pc, #424]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d910      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006182:	4b67      	ldr	r3, [pc, #412]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 0207 	bic.w	r2, r3, #7
 800618a:	4965      	ldr	r1, [pc, #404]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	4313      	orrs	r3, r2
 8006190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b63      	ldr	r3, [pc, #396]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0b8      	b.n	8006316 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061bc:	4b59      	ldr	r3, [pc, #356]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	4a58      	ldr	r2, [pc, #352]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80061c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d4:	4b53      	ldr	r3, [pc, #332]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4a52      	ldr	r2, [pc, #328]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80061da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e0:	4b50      	ldr	r3, [pc, #320]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	494d      	ldr	r1, [pc, #308]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d040      	beq.n	8006280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b47      	ldr	r3, [pc, #284]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d115      	bne.n	800623e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e07f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d107      	bne.n	800622e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621e:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e073      	b.n	8006316 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622e:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e06b      	b.n	8006316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800623e:	4b39      	ldr	r3, [pc, #228]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f023 0203 	bic.w	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4936      	ldr	r1, [pc, #216]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 800624c:	4313      	orrs	r3, r2
 800624e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006250:	f7fe fb42 	bl	80048d8 <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006256:	e00a      	b.n	800626e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006258:	f7fe fb3e 	bl	80048d8 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	; 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e053      	b.n	8006316 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626e:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f003 020c 	and.w	r2, r3, #12
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	429a      	cmp	r2, r3
 800627e:	d1eb      	bne.n	8006258 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006280:	4b27      	ldr	r3, [pc, #156]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d210      	bcs.n	80062b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 0207 	bic.w	r2, r3, #7
 8006296:	4922      	ldr	r1, [pc, #136]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b20      	ldr	r3, [pc, #128]	; (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e032      	b.n	8006316 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4916      	ldr	r1, [pc, #88]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	490e      	ldr	r1, [pc, #56]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062ee:	f000 f821 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 80062f2:	4602      	mov	r2, r0
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	490a      	ldr	r1, [pc, #40]	; (8006328 <HAL_RCC_ClockConfig+0x1c8>)
 8006300:	5ccb      	ldrb	r3, [r1, r3]
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	4a09      	ldr	r2, [pc, #36]	; (800632c <HAL_RCC_ClockConfig+0x1cc>)
 8006308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_RCC_ClockConfig+0x1d0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe faa0 	bl	8004854 <HAL_InitTick>

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40022000 	.word	0x40022000
 8006324:	40021000 	.word	0x40021000
 8006328:	0800d1bc 	.word	0x0800d1bc
 800632c:	20000004 	.word	0x20000004
 8006330:	20000008 	.word	0x20000008

08006334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006334:	b490      	push	{r4, r7}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800633c:	1d3c      	adds	r4, r7, #4
 800633e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006344:	f240 2301 	movw	r3, #513	; 0x201
 8006348:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	2300      	movs	r3, #0
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800635e:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f003 030c 	and.w	r3, r3, #12
 800636a:	2b04      	cmp	r3, #4
 800636c:	d002      	beq.n	8006374 <HAL_RCC_GetSysClockFreq+0x40>
 800636e:	2b08      	cmp	r3, #8
 8006370:	d003      	beq.n	800637a <HAL_RCC_GetSysClockFreq+0x46>
 8006372:	e02b      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006374:	4b1c      	ldr	r3, [pc, #112]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006376:	623b      	str	r3, [r7, #32]
      break;
 8006378:	e02b      	b.n	80063d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	0c9b      	lsrs	r3, r3, #18
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	3328      	adds	r3, #40	; 0x28
 8006384:	443b      	add	r3, r7
 8006386:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800638a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d012      	beq.n	80063bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	0c5b      	lsrs	r3, r3, #17
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	3328      	adds	r3, #40	; 0x28
 80063a2:	443b      	add	r3, r7
 80063a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80063a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063ae:	fb03 f202 	mul.w	r2, r3, r2
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ba:	e004      	b.n	80063c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4a0b      	ldr	r2, [pc, #44]	; (80063ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80063c0:	fb02 f303 	mul.w	r3, r2, r3
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	623b      	str	r3, [r7, #32]
      break;
 80063ca:	e002      	b.n	80063d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063cc:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063ce:	623b      	str	r3, [r7, #32]
      break;
 80063d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063d2:	6a3b      	ldr	r3, [r7, #32]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	; 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc90      	pop	{r4, r7}
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	0800d154 	.word	0x0800d154
 80063e4:	40021000 	.word	0x40021000
 80063e8:	007a1200 	.word	0x007a1200
 80063ec:	003d0900 	.word	0x003d0900

080063f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f4:	4b02      	ldr	r3, [pc, #8]	; (8006400 <HAL_RCC_GetHCLKFreq+0x10>)
 80063f6:	681b      	ldr	r3, [r3, #0]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr
 8006400:	20000004 	.word	0x20000004

08006404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006408:	f7ff fff2 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 800640c:	4602      	mov	r2, r0
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	4903      	ldr	r1, [pc, #12]	; (8006428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800641a:	5ccb      	ldrb	r3, [r1, r3]
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40021000 	.word	0x40021000
 8006428:	0800d1cc 	.word	0x0800d1cc

0800642c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006430:	f7ff ffde 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 8006434:	4602      	mov	r2, r0
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	0adb      	lsrs	r3, r3, #11
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	4903      	ldr	r1, [pc, #12]	; (8006450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006442:	5ccb      	ldrb	r3, [r1, r3]
 8006444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006448:	4618      	mov	r0, r3
 800644a:	bd80      	pop	{r7, pc}
 800644c:	40021000 	.word	0x40021000
 8006450:	0800d1cc 	.word	0x0800d1cc

08006454 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <RCC_Delay+0x34>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0a      	ldr	r2, [pc, #40]	; (800648c <RCC_Delay+0x38>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	0a5b      	lsrs	r3, r3, #9
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	fb02 f303 	mul.w	r3, r2, r3
 800646e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006470:	bf00      	nop
  }
  while (Delay --);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1e5a      	subs	r2, r3, #1
 8006476:	60fa      	str	r2, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f9      	bne.n	8006470 <RCC_Delay+0x1c>
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	20000004 	.word	0x20000004
 800648c:	10624dd3 	.word	0x10624dd3

08006490 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d07d      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80064ac:	2300      	movs	r3, #0
 80064ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b0:	4b4f      	ldr	r3, [pc, #316]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064bc:	4b4c      	ldr	r3, [pc, #304]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	4a4b      	ldr	r2, [pc, #300]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c6:	61d3      	str	r3, [r2, #28]
 80064c8:	4b49      	ldr	r3, [pc, #292]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d0:	60bb      	str	r3, [r7, #8]
 80064d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d8:	4b46      	ldr	r3, [pc, #280]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d118      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064e4:	4b43      	ldr	r3, [pc, #268]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a42      	ldr	r2, [pc, #264]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f0:	f7fe f9f2 	bl	80048d8 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f6:	e008      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f8:	f7fe f9ee 	bl	80048d8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	; 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e06d      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800650a:	4b3a      	ldr	r3, [pc, #232]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006516:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02e      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	429a      	cmp	r2, r3
 8006532:	d027      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006534:	4b2e      	ldr	r3, [pc, #184]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800653e:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006544:	4b2c      	ldr	r3, [pc, #176]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800654a:	4a29      	ldr	r2, [pc, #164]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d014      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800655a:	f7fe f9bd 	bl	80048d8 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006560:	e00a      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006562:	f7fe f9b9 	bl	80048d8 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006570:	4293      	cmp	r3, r2
 8006572:	d901      	bls.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e036      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006578:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0ee      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006584:	4b1a      	ldr	r3, [pc, #104]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4917      	ldr	r1, [pc, #92]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006592:	4313      	orrs	r3, r2
 8006594:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d105      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800659c:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	4a13      	ldr	r2, [pc, #76]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065b4:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	490b      	ldr	r1, [pc, #44]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	4904      	ldr	r1, [pc, #16]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000
 80065f4:	40007000 	.word	0x40007000
 80065f8:	42420440 	.word	0x42420440

080065fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b08d      	sub	sp, #52	; 0x34
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006604:	4b58      	ldr	r3, [pc, #352]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006606:	f107 040c 	add.w	r4, r7, #12
 800660a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800660c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006610:	f240 2301 	movw	r3, #513	; 0x201
 8006614:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
 800661a:	2300      	movs	r3, #0
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661e:	2300      	movs	r3, #0
 8006620:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	2300      	movs	r3, #0
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b10      	cmp	r3, #16
 800662e:	d00a      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b10      	cmp	r3, #16
 8006634:	f200 808e 	bhi.w	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d049      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d079      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006644:	e086      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006646:	4b49      	ldr	r3, [pc, #292]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800664c:	4b47      	ldr	r3, [pc, #284]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d07f      	beq.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	0c9b      	lsrs	r3, r3, #18
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	3330      	adds	r3, #48	; 0x30
 8006662:	443b      	add	r3, r7
 8006664:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006668:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d017      	beq.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006674:	4b3d      	ldr	r3, [pc, #244]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	0c5b      	lsrs	r3, r3, #17
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	3330      	adds	r3, #48	; 0x30
 8006680:	443b      	add	r3, r7
 8006682:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00d      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006692:	4a37      	ldr	r2, [pc, #220]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	fbb2 f2f3 	udiv	r2, r2, r3
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	fb02 f303 	mul.w	r3, r2, r3
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a2:	e004      	b.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	4a33      	ldr	r2, [pc, #204]	; (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80066ae:	4b2f      	ldr	r3, [pc, #188]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ba:	d102      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80066c0:	e04a      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80066d0:	e042      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80066d2:	4b26      	ldr	r3, [pc, #152]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e2:	d108      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80066ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f4:	e01f      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006700:	d109      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006702:	4b1a      	ldr	r3, [pc, #104]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800670e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
 8006714:	e00f      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006720:	d11c      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006722:	4b12      	ldr	r3, [pc, #72]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d016      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800672e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006734:	e012      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006736:	e011      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006738:	f7ff fe78 	bl	800642c <HAL_RCC_GetPCLK2Freq>
 800673c:	4602      	mov	r2, r0
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	0b9b      	lsrs	r3, r3, #14
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	3301      	adds	r3, #1
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006752:	e004      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006754:	bf00      	nop
 8006756:	e002      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006758:	bf00      	nop
 800675a:	e000      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800675c:	bf00      	nop
    }
  }
  return (frequency);
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006760:	4618      	mov	r0, r3
 8006762:	3734      	adds	r7, #52	; 0x34
 8006764:	46bd      	mov	sp, r7
 8006766:	bd90      	pop	{r4, r7, pc}
 8006768:	0800d164 	.word	0x0800d164
 800676c:	40021000 	.word	0x40021000
 8006770:	007a1200 	.word	0x007a1200
 8006774:	003d0900 	.word	0x003d0900
 8006778:	aaaaaaab 	.word	0xaaaaaaab

0800677c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e084      	b.n	800689c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	7c5b      	ldrb	r3, [r3, #17]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fb fd36 	bl	8002214 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 faf4 	bl	8006d9c <HAL_RTC_WaitForSynchro>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2204      	movs	r2, #4
 80067be:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e06b      	b.n	800689c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fbad 	bl	8006f24 <RTC_EnterInitMode>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2204      	movs	r2, #4
 80067d4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e060      	b.n	800689c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0207 	bic.w	r2, r2, #7
 80067e8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <HAL_RTC_Init+0x128>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	4a2b      	ldr	r2, [pc, #172]	; (80068a4 <HAL_RTC_Init+0x128>)
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80067fe:	4b29      	ldr	r3, [pc, #164]	; (80068a4 <HAL_RTC_Init+0x128>)
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	4926      	ldr	r1, [pc, #152]	; (80068a4 <HAL_RTC_Init+0x128>)
 800680c:	4313      	orrs	r3, r2
 800680e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d003      	beq.n	8006822 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e00e      	b.n	8006840 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006822:	2001      	movs	r0, #1
 8006824:	f7ff feea 	bl	80065fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006828:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2204      	movs	r2, #4
 8006834:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e030      	b.n	800689c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b01      	subs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f023 010f 	bic.w	r1, r3, #15
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	0c1a      	lsrs	r2, r3, #16
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	041b      	lsls	r3, r3, #16
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	b291      	uxth	r1, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	430b      	orrs	r3, r1
 800686a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb81 	bl	8006f74 <RTC_ExitInitMode>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e00c      	b.n	800689c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800689a:	2300      	movs	r3, #0
  }
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40006c00 	.word	0x40006c00

080068a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	2300      	movs	r3, #0
 80068ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_RTC_SetTime+0x20>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e080      	b.n	80069ce <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	7c1b      	ldrb	r3, [r3, #16]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_RTC_SetTime+0x30>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e07a      	b.n	80069ce <HAL_RTC_SetTime+0x126>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2202      	movs	r2, #2
 80068e2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d113      	bne.n	8006912 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80068f4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	4619      	mov	r1, r3
 80068fe:	460b      	mov	r3, r1
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	1a5b      	subs	r3, r3, r1
 8006904:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006906:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800690c:	4413      	add	r3, r2
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e01e      	b.n	8006950 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fb71 	bl	8006ffe <RTC_Bcd2ToByte>
 800691c:	4603      	mov	r3, r0
 800691e:	461a      	mov	r2, r3
 8006920:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006924:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fb66 	bl	8006ffe <RTC_Bcd2ToByte>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	4613      	mov	r3, r2
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800693e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	789b      	ldrb	r3, [r3, #2]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fb5a 	bl	8006ffe <RTC_Bcd2ToByte>
 800694a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800694c:	4423      	add	r3, r4
 800694e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006950:	6979      	ldr	r1, [r7, #20]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fa7f 	bl	8006e56 <RTC_WriteTimeCounter>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2204      	movs	r2, #4
 8006962:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e02f      	b.n	80069ce <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0205 	bic.w	r2, r2, #5
 800697c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fa90 	bl	8006ea4 <RTC_ReadAlarmCounter>
 8006984:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d018      	beq.n	80069c0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	429a      	cmp	r2, r3
 8006994:	d214      	bcs.n	80069c0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800699c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80069a0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80069a2:	6939      	ldr	r1, [r7, #16]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fa96 	bl	8006ed6 <RTC_WriteAlarmCounter>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2204      	movs	r2, #4
 80069b4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e006      	b.n	80069ce <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80069cc:	2300      	movs	r3, #0
  }
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd90      	pop	{r4, r7, pc}
	...

080069d8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_RTC_GetTime+0x28>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0b5      	b.n	8006b70 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e0ac      	b.n	8006b70 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f9ed 	bl	8006df6 <RTC_ReadTimeCounter>
 8006a1c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	4a55      	ldr	r2, [pc, #340]	; (8006b78 <HAL_RTC_GetTime+0x1a0>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	0adb      	lsrs	r3, r3, #11
 8006a28:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4b52      	ldr	r3, [pc, #328]	; (8006b78 <HAL_RTC_GetTime+0x1a0>)
 8006a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a32:	0adb      	lsrs	r3, r3, #11
 8006a34:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	4a4f      	ldr	r2, [pc, #316]	; (8006b7c <HAL_RTC_GetTime+0x1a4>)
 8006a40:	fba2 2303 	umull	r2, r3, r2, r3
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	4a4a      	ldr	r2, [pc, #296]	; (8006b78 <HAL_RTC_GetTime+0x1a0>)
 8006a50:	fba2 1203 	umull	r1, r2, r2, r3
 8006a54:	0ad2      	lsrs	r2, r2, #11
 8006a56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006a5a:	fb01 f202 	mul.w	r2, r1, r2
 8006a5e:	1a9a      	subs	r2, r3, r2
 8006a60:	4b46      	ldr	r3, [pc, #280]	; (8006b7c <HAL_RTC_GetTime+0x1a4>)
 8006a62:	fba3 1302 	umull	r1, r3, r3, r2
 8006a66:	0959      	lsrs	r1, r3, #5
 8006a68:	460b      	mov	r3, r1
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	1a5b      	subs	r3, r3, r1
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	1ad1      	subs	r1, r2, r3
 8006a72:	b2ca      	uxtb	r2, r1
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b17      	cmp	r3, #23
 8006a7c:	d955      	bls.n	8006b2a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4a3f      	ldr	r2, [pc, #252]	; (8006b80 <HAL_RTC_GetTime+0x1a8>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006a8a:	6939      	ldr	r1, [r7, #16]
 8006a8c:	4b3c      	ldr	r3, [pc, #240]	; (8006b80 <HAL_RTC_GetTime+0x1a8>)
 8006a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a92:	091a      	lsrs	r2, r3, #4
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1aca      	subs	r2, r1, r3
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f9fd 	bl	8006ea4 <RTC_ReadAlarmCounter>
 8006aaa:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d008      	beq.n	8006ac6 <HAL_RTC_GetTime+0xee>
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d904      	bls.n	8006ac6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	e002      	b.n	8006acc <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aca:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4a2d      	ldr	r2, [pc, #180]	; (8006b84 <HAL_RTC_GetTime+0x1ac>)
 8006ad0:	fb02 f303 	mul.w	r3, r2, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f9ba 	bl	8006e56 <RTC_WriteTimeCounter>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e041      	b.n	8006b70 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d00c      	beq.n	8006b0e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	4413      	add	r3, r2
 8006afa:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006afc:	69f9      	ldr	r1, [r7, #28]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f9e9 	bl	8006ed6 <RTC_WriteAlarmCounter>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e030      	b.n	8006b70 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006b0e:	69f9      	ldr	r1, [r7, #28]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f9e0 	bl	8006ed6 <RTC_WriteAlarmCounter>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e027      	b.n	8006b70 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006b20:	6979      	ldr	r1, [r7, #20]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fa88 	bl	8007038 <RTC_DateUpdate>
 8006b28:	e003      	b.n	8006b32 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01a      	beq.n	8006b6e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fa41 	bl	8006fc4 <RTC_ByteToBcd2>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fa38 	bl	8006fc4 <RTC_ByteToBcd2>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	789b      	ldrb	r3, [r3, #2]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fa2f 	bl	8006fc4 <RTC_ByteToBcd2>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	91a2b3c5 	.word	0x91a2b3c5
 8006b7c:	88888889 	.word	0x88888889
 8006b80:	aaaaaaab 	.word	0xaaaaaaab
 8006b84:	00015180 	.word	0x00015180

08006b88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61bb      	str	r3, [r7, #24]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_RTC_SetDate+0x24>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e097      	b.n	8006ce0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	7c1b      	ldrb	r3, [r3, #16]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_RTC_SetDate+0x34>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e091      	b.n	8006ce0 <HAL_RTC_SetDate+0x158>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	78da      	ldrb	r2, [r3, #3]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	785a      	ldrb	r2, [r3, #1]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	789a      	ldrb	r2, [r3, #2]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	739a      	strb	r2, [r3, #14]
 8006be6:	e01a      	b.n	8006c1e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	78db      	ldrb	r3, [r3, #3]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fa06 	bl	8006ffe <RTC_Bcd2ToByte>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f9fd 	bl	8006ffe <RTC_Bcd2ToByte>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	789b      	ldrb	r3, [r3, #2]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 f9f4 	bl	8006ffe <RTC_Bcd2ToByte>
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	7bdb      	ldrb	r3, [r3, #15]
 8006c22:	4618      	mov	r0, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	7b59      	ldrb	r1, [r3, #13]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	7b9b      	ldrb	r3, [r3, #14]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f000 fadf 	bl	80071f0 <RTC_WeekDayNum>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	7b1a      	ldrb	r2, [r3, #12]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f8d7 	bl	8006df6 <RTC_ReadTimeCounter>
 8006c48:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	4a26      	ldr	r2, [pc, #152]	; (8006ce8 <HAL_RTC_SetDate+0x160>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0adb      	lsrs	r3, r3, #11
 8006c54:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b18      	cmp	r3, #24
 8006c5a:	d93a      	bls.n	8006cd2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	4a23      	ldr	r2, [pc, #140]	; (8006cec <HAL_RTC_SetDate+0x164>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	091b      	lsrs	r3, r3, #4
 8006c66:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <HAL_RTC_SetDate+0x168>)
 8006c68:	fb02 f303 	mul.w	r3, r2, r3
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006c72:	69f9      	ldr	r1, [r7, #28]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f8ee 	bl	8006e56 <RTC_WriteTimeCounter>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2204      	movs	r2, #4
 8006c84:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e027      	b.n	8006ce0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f907 	bl	8006ea4 <RTC_ReadAlarmCounter>
 8006c96:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d018      	beq.n	8006cd2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d214      	bcs.n	8006cd2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006cae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006cb2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006cb4:	69b9      	ldr	r1, [r7, #24]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 f90d 	bl	8006ed6 <RTC_WriteAlarmCounter>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e006      	b.n	8006ce0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	91a2b3c5 	.word	0x91a2b3c5
 8006cec:	aaaaaaab 	.word	0xaaaaaaab
 8006cf0:	00015180 	.word	0x00015180

08006cf4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	2100      	movs	r1, #0
 8006d06:	460a      	mov	r2, r1
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_RTC_GetDate+0x26>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e03a      	b.n	8006d94 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006d1e:	f107 0314 	add.w	r3, r7, #20
 8006d22:	2200      	movs	r2, #0
 8006d24:	4619      	mov	r1, r3
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff fe56 	bl	80069d8 <HAL_RTC_GetTime>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e02e      	b.n	8006d94 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	7b1a      	ldrb	r2, [r3, #12]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	7bda      	ldrb	r2, [r3, #15]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	7b5a      	ldrb	r2, [r3, #13]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	7b9a      	ldrb	r2, [r3, #14]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01a      	beq.n	8006d92 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	78db      	ldrb	r3, [r3, #3]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f92f 	bl	8006fc4 <RTC_ByteToBcd2>
 8006d66:	4603      	mov	r3, r0
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f926 	bl	8006fc4 <RTC_ByteToBcd2>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	789b      	ldrb	r3, [r3, #2]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f91d 	bl	8006fc4 <RTC_ByteToBcd2>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e01d      	b.n	8006dee <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0208 	bic.w	r2, r2, #8
 8006dc0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006dc2:	f7fd fd89 	bl	80048d8 <HAL_GetTick>
 8006dc6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006dc8:	e009      	b.n	8006dde <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006dca:	f7fd fd85 	bl	80048d8 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dd8:	d901      	bls.n	8006dde <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e007      	b.n	8006dee <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0ee      	beq.n	8006dca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b087      	sub	sp, #28
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	827b      	strh	r3, [r7, #18]
 8006e02:	2300      	movs	r3, #0
 8006e04:	823b      	strh	r3, [r7, #16]
 8006e06:	2300      	movs	r3, #0
 8006e08:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006e26:	8a7a      	ldrh	r2, [r7, #18]
 8006e28:	8a3b      	ldrh	r3, [r7, #16]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d008      	beq.n	8006e40 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006e2e:	8a3b      	ldrh	r3, [r7, #16]
 8006e30:	041a      	lsls	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	e004      	b.n	8006e4a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006e40:	8a7b      	ldrh	r3, [r7, #18]
 8006e42:	041a      	lsls	r2, r3, #16
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006e4a:	697b      	ldr	r3, [r7, #20]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f85d 	bl	8006f24 <RTC_EnterInitMode>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e011      	b.n	8006e9a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	0c12      	lsrs	r2, r2, #16
 8006e7e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	b292      	uxth	r2, r2
 8006e88:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f872 	bl	8006f74 <RTC_ExitInitMode>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	81fb      	strh	r3, [r7, #14]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	041a      	lsls	r2, r3, #16
 8006ec8:	89bb      	ldrh	r3, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f81d 	bl	8006f24 <RTC_EnterInitMode>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
 8006ef4:	e011      	b.n	8006f1a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	0c12      	lsrs	r2, r2, #16
 8006efe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	b292      	uxth	r2, r2
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f832 	bl	8006f74 <RTC_ExitInitMode>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006f30:	f7fd fcd2 	bl	80048d8 <HAL_GetTick>
 8006f34:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f36:	e009      	b.n	8006f4c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f38:	f7fd fcce 	bl	80048d8 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f46:	d901      	bls.n	8006f4c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e00f      	b.n	8006f6c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0ee      	beq.n	8006f38 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0210 	orr.w	r2, r2, #16
 8006f68:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0210 	bic.w	r2, r2, #16
 8006f8e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006f90:	f7fd fca2 	bl	80048d8 <HAL_GetTick>
 8006f94:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f96:	e009      	b.n	8006fac <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f98:	f7fd fc9e 	bl	80048d8 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fa6:	d901      	bls.n	8006fac <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e007      	b.n	8006fbc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ee      	beq.n	8006f98 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006fd2:	e005      	b.n	8006fe0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	3b0a      	subs	r3, #10
 8006fde:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d8f6      	bhi.n	8006fd4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	b2db      	uxtb	r3, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	4603      	mov	r3, r0
 8007006:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	091b      	lsrs	r3, r3, #4
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	b2da      	uxtb	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	4413      	add	r3, r2
 800702c:	b2db      	uxtb	r3, r3
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	7bdb      	ldrb	r3, [r3, #15]
 8007056:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7b5b      	ldrb	r3, [r3, #13]
 800705c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7b9b      	ldrb	r3, [r3, #14]
 8007062:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	e06f      	b.n	800714a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d011      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b03      	cmp	r3, #3
 8007074:	d00e      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b05      	cmp	r3, #5
 800707a:	d00b      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b07      	cmp	r3, #7
 8007080:	d008      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d005      	beq.n	8007094 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b0a      	cmp	r3, #10
 800708c:	d002      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d117      	bne.n	80070c4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b1e      	cmp	r3, #30
 8007098:	d803      	bhi.n	80070a2 <RTC_DateUpdate+0x6a>
      {
        day++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80070a0:	e050      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b0c      	cmp	r3, #12
 80070a6:	d005      	beq.n	80070b4 <RTC_DateUpdate+0x7c>
        {
          month++;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	3301      	adds	r3, #1
 80070ac:	613b      	str	r3, [r7, #16]
          day = 1U;
 80070ae:	2301      	movs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80070b2:	e047      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80070b4:	2301      	movs	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80070b8:	2301      	movs	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
          year++;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3301      	adds	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80070c2:	e03f      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d008      	beq.n	80070dc <RTC_DateUpdate+0xa4>
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b06      	cmp	r3, #6
 80070ce:	d005      	beq.n	80070dc <RTC_DateUpdate+0xa4>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d002      	beq.n	80070dc <RTC_DateUpdate+0xa4>
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b0b      	cmp	r3, #11
 80070da:	d10c      	bne.n	80070f6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b1d      	cmp	r3, #29
 80070e0:	d803      	bhi.n	80070ea <RTC_DateUpdate+0xb2>
      {
        day++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80070e8:	e02c      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3301      	adds	r3, #1
 80070ee:	613b      	str	r3, [r7, #16]
        day = 1U;
 80070f0:	2301      	movs	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80070f4:	e026      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d123      	bne.n	8007144 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b1b      	cmp	r3, #27
 8007100:	d803      	bhi.n	800710a <RTC_DateUpdate+0xd2>
      {
        day++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e01c      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b1c      	cmp	r3, #28
 800710e:	d111      	bne.n	8007134 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	b29b      	uxth	r3, r3
 8007114:	4618      	mov	r0, r3
 8007116:	f000 f839 	bl	800718c <RTC_IsLeapYear>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <RTC_DateUpdate+0xf0>
        {
          day++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e00d      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3301      	adds	r3, #1
 800712c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800712e:	2301      	movs	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	e007      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b1d      	cmp	r3, #29
 8007138:	d104      	bne.n	8007144 <RTC_DateUpdate+0x10c>
      {
        month++;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3301      	adds	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007140:	2301      	movs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3301      	adds	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d38b      	bcc.n	800706a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	4619      	mov	r1, r3
 8007174:	6978      	ldr	r0, [r7, #20]
 8007176:	f000 f83b 	bl	80071f0 <RTC_WeekDayNum>
 800717a:	4603      	mov	r3, r0
 800717c:	461a      	mov	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	731a      	strb	r2, [r3, #12]
}
 8007182:	bf00      	nop
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e01d      	b.n	80071e2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	4a10      	ldr	r2, [pc, #64]	; (80071ec <RTC_IsLeapYear+0x60>)
 80071aa:	fba2 1203 	umull	r1, r2, r2, r3
 80071ae:	0952      	lsrs	r2, r2, #5
 80071b0:	2164      	movs	r1, #100	; 0x64
 80071b2:	fb01 f202 	mul.w	r2, r1, r2
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80071be:	2301      	movs	r3, #1
 80071c0:	e00f      	b.n	80071e2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80071c2:	88fb      	ldrh	r3, [r7, #6]
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <RTC_IsLeapYear+0x60>)
 80071c6:	fba2 1203 	umull	r1, r2, r2, r3
 80071ca:	09d2      	lsrs	r2, r2, #7
 80071cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071d0:	fb01 f202 	mul.w	r2, r1, r2
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80071e0:	2300      	movs	r3, #0
  }
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	51eb851f 	.word	0x51eb851f

080071f0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
 80071fc:	4613      	mov	r3, r2
 80071fe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800720e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d82d      	bhi.n	8007272 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4613      	mov	r3, r2
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	4413      	add	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	4a2c      	ldr	r2, [pc, #176]	; (80072d4 <RTC_WeekDayNum+0xe4>)
 8007224:	fba2 2303 	umull	r2, r3, r2, r3
 8007228:	085a      	lsrs	r2, r3, #1
 800722a:	78bb      	ldrb	r3, [r7, #2]
 800722c:	441a      	add	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	441a      	add	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	3b01      	subs	r3, #1
 8007236:	089b      	lsrs	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3b01      	subs	r3, #1
 800723e:	4926      	ldr	r1, [pc, #152]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 8007240:	fba1 1303 	umull	r1, r3, r1, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3b01      	subs	r3, #1
 800724c:	4922      	ldr	r1, [pc, #136]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 800724e:	fba1 1303 	umull	r1, r3, r1, r3
 8007252:	09db      	lsrs	r3, r3, #7
 8007254:	4413      	add	r3, r2
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	4b20      	ldr	r3, [pc, #128]	; (80072dc <RTC_WeekDayNum+0xec>)
 800725a:	fba3 1302 	umull	r1, r3, r3, r2
 800725e:	1ad1      	subs	r1, r2, r3
 8007260:	0849      	lsrs	r1, r1, #1
 8007262:	440b      	add	r3, r1
 8007264:	0899      	lsrs	r1, r3, #2
 8007266:	460b      	mov	r3, r1
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	1a5b      	subs	r3, r3, r1
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e029      	b.n	80072c6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <RTC_WeekDayNum+0xe4>)
 8007280:	fba2 2303 	umull	r2, r3, r2, r3
 8007284:	085a      	lsrs	r2, r3, #1
 8007286:	78bb      	ldrb	r3, [r7, #2]
 8007288:	441a      	add	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	441a      	add	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	089b      	lsrs	r3, r3, #2
 8007292:	441a      	add	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4910      	ldr	r1, [pc, #64]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 8007298:	fba1 1303 	umull	r1, r3, r1, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	490d      	ldr	r1, [pc, #52]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 80072a4:	fba1 1303 	umull	r1, r3, r1, r3
 80072a8:	09db      	lsrs	r3, r3, #7
 80072aa:	4413      	add	r3, r2
 80072ac:	1c9a      	adds	r2, r3, #2
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <RTC_WeekDayNum+0xec>)
 80072b0:	fba3 1302 	umull	r1, r3, r3, r2
 80072b4:	1ad1      	subs	r1, r2, r3
 80072b6:	0849      	lsrs	r1, r1, #1
 80072b8:	440b      	add	r3, r1
 80072ba:	0899      	lsrs	r1, r3, #2
 80072bc:	460b      	mov	r3, r1
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	1a5b      	subs	r3, r3, r1
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	b2db      	uxtb	r3, r3
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	38e38e39 	.word	0x38e38e39
 80072d8:	51eb851f 	.word	0x51eb851f
 80072dc:	24924925 	.word	0x24924925

080072e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e076      	b.n	80073e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007302:	d009      	beq.n	8007318 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	61da      	str	r2, [r3, #28]
 800730a:	e005      	b.n	8007318 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fa ff92 	bl	800225c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800734e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739c:	ea42 0103 	orr.w	r1, r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	0c1a      	lsrs	r2, r3, #16
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f002 0204 	and.w	r2, r2, #4
 80073be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_SPI_Transmit+0x22>
 8007406:	2302      	movs	r3, #2
 8007408:	e126      	b.n	8007658 <HAL_SPI_Transmit+0x270>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007412:	f7fd fa61 	bl	80048d8 <HAL_GetTick>
 8007416:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	d002      	beq.n	800742e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007428:	2302      	movs	r3, #2
 800742a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800742c:	e10b      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_SPI_Transmit+0x52>
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800743e:	e102      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2203      	movs	r2, #3
 8007444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	88fa      	ldrh	r2, [r7, #6]
 800745e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007486:	d10f      	bne.n	80074a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007496:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d007      	beq.n	80074c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ce:	d14b      	bne.n	8007568 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_SPI_Transmit+0xf6>
 80074d8:	8afb      	ldrh	r3, [r7, #22]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d13e      	bne.n	800755c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007502:	e02b      	b.n	800755c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d112      	bne.n	8007538 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	881a      	ldrh	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	1c9a      	adds	r2, r3, #2
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	86da      	strh	r2, [r3, #54]	; 0x36
 8007536:	e011      	b.n	800755c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007538:	f7fd f9ce 	bl	80048d8 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d803      	bhi.n	8007550 <HAL_SPI_Transmit+0x168>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d102      	bne.n	8007556 <HAL_SPI_Transmit+0x16e>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d102      	bne.n	800755c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	77fb      	strb	r3, [r7, #31]
          goto error;
 800755a:	e074      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1ce      	bne.n	8007504 <HAL_SPI_Transmit+0x11c>
 8007566:	e04c      	b.n	8007602 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_SPI_Transmit+0x18e>
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d140      	bne.n	80075f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	330c      	adds	r3, #12
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800759c:	e02c      	b.n	80075f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d113      	bne.n	80075d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80075d2:	e011      	b.n	80075f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d4:	f7fd f980 	bl	80048d8 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d803      	bhi.n	80075ec <HAL_SPI_Transmit+0x204>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ea:	d102      	bne.n	80075f2 <HAL_SPI_Transmit+0x20a>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d102      	bne.n	80075f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075f6:	e026      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1cd      	bne.n	800759e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fa54 	bl	8007ab4 <SPI_EndRxTxTransaction>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e000      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007644:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007656:	7ffb      	ldrb	r3, [r7, #31]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08c      	sub	sp, #48	; 0x30
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800766e:	2301      	movs	r3, #1
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x26>
 8007682:	2302      	movs	r3, #2
 8007684:	e18a      	b.n	800799c <HAL_SPI_TransmitReceive+0x33c>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800768e:	f7fd f923 	bl	80048d8 <HAL_GetTick>
 8007692:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076a4:	887b      	ldrh	r3, [r7, #2]
 80076a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d00f      	beq.n	80076d0 <HAL_SPI_TransmitReceive+0x70>
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076b6:	d107      	bne.n	80076c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <HAL_SPI_TransmitReceive+0x68>
 80076c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d003      	beq.n	80076d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ce:	e15b      	b.n	8007988 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <HAL_SPI_TransmitReceive+0x82>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_SPI_TransmitReceive+0x82>
 80076dc:	887b      	ldrh	r3, [r7, #2]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076e8:	e14e      	b.n	8007988 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d003      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2205      	movs	r2, #5
 80076fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	887a      	ldrh	r2, [r7, #2]
 800770e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	887a      	ldrh	r2, [r7, #2]
 8007714:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	887a      	ldrh	r2, [r7, #2]
 8007720:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	887a      	ldrh	r2, [r7, #2]
 8007726:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d007      	beq.n	8007752 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775a:	d178      	bne.n	800784e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_SPI_TransmitReceive+0x10a>
 8007764:	8b7b      	ldrh	r3, [r7, #26]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d166      	bne.n	8007838 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	881a      	ldrh	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800778e:	e053      	b.n	8007838 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b02      	cmp	r3, #2
 800779c:	d11b      	bne.n	80077d6 <HAL_SPI_TransmitReceive+0x176>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d016      	beq.n	80077d6 <HAL_SPI_TransmitReceive+0x176>
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d113      	bne.n	80077d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	881a      	ldrh	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	1c9a      	adds	r2, r3, #2
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d119      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x1b8>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d014      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	b292      	uxth	r2, r2
 80077fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	1c9a      	adds	r2, r3, #2
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007814:	2301      	movs	r3, #1
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007818:	f7fd f85e 	bl	80048d8 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007824:	429a      	cmp	r2, r3
 8007826:	d807      	bhi.n	8007838 <HAL_SPI_TransmitReceive+0x1d8>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d003      	beq.n	8007838 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007836:	e0a7      	b.n	8007988 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1a6      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x130>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1a1      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x130>
 800784c:	e07c      	b.n	8007948 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <HAL_SPI_TransmitReceive+0x1fc>
 8007856:	8b7b      	ldrh	r3, [r7, #26]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d16b      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	7812      	ldrb	r2, [r2, #0]
 8007868:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007878:	b29b      	uxth	r3, r3
 800787a:	3b01      	subs	r3, #1
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007882:	e057      	b.n	8007934 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b02      	cmp	r3, #2
 8007890:	d11c      	bne.n	80078cc <HAL_SPI_TransmitReceive+0x26c>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d017      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x26c>
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d114      	bne.n	80078cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	7812      	ldrb	r2, [r2, #0]
 80078ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d119      	bne.n	800790e <HAL_SPI_TransmitReceive+0x2ae>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d014      	beq.n	800790e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800790a:	2301      	movs	r3, #1
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800790e:	f7fc ffe3 	bl	80048d8 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800791a:	429a      	cmp	r2, r3
 800791c:	d803      	bhi.n	8007926 <HAL_SPI_TransmitReceive+0x2c6>
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d102      	bne.n	800792c <HAL_SPI_TransmitReceive+0x2cc>
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d103      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007932:	e029      	b.n	8007988 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1a2      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x224>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d19d      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f8b1 	bl	8007ab4 <SPI_EndRxTxTransaction>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d006      	beq.n	8007966 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007964:	e010      	b.n	8007988 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	e000      	b.n	8007988 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800799c:	4618      	mov	r0, r3
 800799e:	3730      	adds	r7, #48	; 0x30
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079b4:	f7fc ff90 	bl	80048d8 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	4413      	add	r3, r2
 80079c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079c4:	f7fc ff88 	bl	80048d8 <HAL_GetTick>
 80079c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079ca:	4b39      	ldr	r3, [pc, #228]	; (8007ab0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	015b      	lsls	r3, r3, #5
 80079d0:	0d1b      	lsrs	r3, r3, #20
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	fb02 f303 	mul.w	r3, r2, r3
 80079d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079da:	e054      	b.n	8007a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d050      	beq.n	8007a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079e4:	f7fc ff78 	bl	80048d8 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d902      	bls.n	80079fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d13d      	bne.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a12:	d111      	bne.n	8007a38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1c:	d004      	beq.n	8007a28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a26:	d107      	bne.n	8007a38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a40:	d10f      	bne.n	8007a62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e017      	b.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	bf0c      	ite	eq
 8007a96:	2301      	moveq	r3, #1
 8007a98:	2300      	movne	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d19b      	bne.n	80079dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3720      	adds	r7, #32
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000004 	.word	0x20000004

08007ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7ff ff6a 	bl	80079a4 <SPI_WaitFlagStateUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f043 0220 	orr.w	r2, r3, #32
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e000      	b.n	8007ae8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e041      	b.n	8007b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fa fbea 	bl	80022f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f000 fa70 	bl	8008014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d001      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e03a      	b.n	8007c1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <HAL_TIM_Base_Start_IT+0x98>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00e      	beq.n	8007be8 <HAL_TIM_Base_Start_IT+0x58>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd2:	d009      	beq.n	8007be8 <HAL_TIM_Base_Start_IT+0x58>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a14      	ldr	r2, [pc, #80]	; (8007c2c <HAL_TIM_Base_Start_IT+0x9c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_TIM_Base_Start_IT+0x58>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <HAL_TIM_Base_Start_IT+0xa0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d111      	bne.n	8007c0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b06      	cmp	r3, #6
 8007bf8:	d010      	beq.n	8007c1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f042 0201 	orr.w	r2, r2, #1
 8007c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0a:	e007      	b.n	8007c1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0201 	orr.w	r2, r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr
 8007c28:	40012c00 	.word	0x40012c00
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800

08007c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d122      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d11b      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0202 	mvn.w	r2, #2
 8007c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9b1 	bl	8007fde <HAL_TIM_IC_CaptureCallback>
 8007c7c:	e005      	b.n	8007c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f9a4 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f9b3 	bl	8007ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0304 	and.w	r3, r3, #4
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d122      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d11b      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f06f 0204 	mvn.w	r2, #4
 8007cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f987 	bl	8007fde <HAL_TIM_IC_CaptureCallback>
 8007cd0:	e005      	b.n	8007cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f97a 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f989 	bl	8007ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d122      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d11b      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0208 	mvn.w	r2, #8
 8007d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2204      	movs	r2, #4
 8007d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f95d 	bl	8007fde <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f950 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f95f 	bl	8007ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d122      	bne.n	8007d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d11b      	bne.n	8007d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0210 	mvn.w	r2, #16
 8007d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2208      	movs	r2, #8
 8007d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f933 	bl	8007fde <HAL_TIM_IC_CaptureCallback>
 8007d78:	e005      	b.n	8007d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f926 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f935 	bl	8007ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d10e      	bne.n	8007db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d107      	bne.n	8007db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0201 	mvn.w	r2, #1
 8007db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7f9 fed0 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc2:	2b80      	cmp	r3, #128	; 0x80
 8007dc4:	d10e      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d107      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa77 	bl	80082d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dee:	2b40      	cmp	r3, #64	; 0x40
 8007df0:	d10e      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d107      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f8f9 	bl	8008002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d10e      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d107      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0220 	mvn.w	r2, #32
 8007e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa42 	bl	80082c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_TIM_ConfigClockSource+0x18>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e0b3      	b.n	8007fc4 <HAL_TIM_ConfigClockSource+0x180>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e94:	d03e      	beq.n	8007f14 <HAL_TIM_ConfigClockSource+0xd0>
 8007e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e9a:	f200 8087 	bhi.w	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea2:	f000 8085 	beq.w	8007fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eaa:	d87f      	bhi.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007eac:	2b70      	cmp	r3, #112	; 0x70
 8007eae:	d01a      	beq.n	8007ee6 <HAL_TIM_ConfigClockSource+0xa2>
 8007eb0:	2b70      	cmp	r3, #112	; 0x70
 8007eb2:	d87b      	bhi.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007eb4:	2b60      	cmp	r3, #96	; 0x60
 8007eb6:	d050      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x116>
 8007eb8:	2b60      	cmp	r3, #96	; 0x60
 8007eba:	d877      	bhi.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007ebc:	2b50      	cmp	r3, #80	; 0x50
 8007ebe:	d03c      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0xf6>
 8007ec0:	2b50      	cmp	r3, #80	; 0x50
 8007ec2:	d873      	bhi.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	d058      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0x136>
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d86f      	bhi.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007ecc:	2b30      	cmp	r3, #48	; 0x30
 8007ece:	d064      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x156>
 8007ed0:	2b30      	cmp	r3, #48	; 0x30
 8007ed2:	d86b      	bhi.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d060      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x156>
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d867      	bhi.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d05c      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x156>
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d05a      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ee4:	e062      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	6899      	ldr	r1, [r3, #8]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f000 f966 	bl	80081c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	609a      	str	r2, [r3, #8]
      break;
 8007f12:	e04e      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6818      	ldr	r0, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	6899      	ldr	r1, [r3, #8]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f000 f94f 	bl	80081c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f36:	609a      	str	r2, [r3, #8]
      break;
 8007f38:	e03b      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	6859      	ldr	r1, [r3, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f000 f8c6 	bl	80080d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2150      	movs	r1, #80	; 0x50
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f91d 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 8007f58:	e02b      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f000 f8e4 	bl	8008134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2160      	movs	r1, #96	; 0x60
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f90d 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 8007f78:	e01b      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f000 f8a6 	bl	80080d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2140      	movs	r1, #64	; 0x40
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f8fd 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 8007f98:	e00b      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	f000 f8f4 	bl	8008192 <TIM_ITRx_SetConfig>
        break;
 8007faa:	e002      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fac:	bf00      	nop
 8007fae:	e000      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bc80      	pop	{r7}
 8007fdc:	4770      	bx	lr

08007fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr

08008002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr

08008014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a29      	ldr	r2, [pc, #164]	; (80080cc <TIM_Base_SetConfig+0xb8>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d00b      	beq.n	8008044 <TIM_Base_SetConfig+0x30>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008032:	d007      	beq.n	8008044 <TIM_Base_SetConfig+0x30>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a26      	ldr	r2, [pc, #152]	; (80080d0 <TIM_Base_SetConfig+0xbc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_Base_SetConfig+0x30>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a25      	ldr	r2, [pc, #148]	; (80080d4 <TIM_Base_SetConfig+0xc0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d108      	bne.n	8008056 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <TIM_Base_SetConfig+0xb8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00b      	beq.n	8008076 <TIM_Base_SetConfig+0x62>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008064:	d007      	beq.n	8008076 <TIM_Base_SetConfig+0x62>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <TIM_Base_SetConfig+0xbc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d003      	beq.n	8008076 <TIM_Base_SetConfig+0x62>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a18      	ldr	r2, [pc, #96]	; (80080d4 <TIM_Base_SetConfig+0xc0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d108      	bne.n	8008088 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800807c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a07      	ldr	r2, [pc, #28]	; (80080cc <TIM_Base_SetConfig+0xb8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d103      	bne.n	80080bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	615a      	str	r2, [r3, #20]
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr
 80080cc:	40012c00 	.word	0x40012c00
 80080d0:	40000400 	.word	0x40000400
 80080d4:	40000800 	.word	0x40000800

080080d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	f023 0201 	bic.w	r2, r3, #1
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f023 030a 	bic.w	r3, r3, #10
 8008114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	621a      	str	r2, [r3, #32]
}
 800812a:	bf00      	nop
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr

08008134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	f023 0210 	bic.w	r2, r3, #16
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800815e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	031b      	lsls	r3, r3, #12
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	621a      	str	r2, [r3, #32]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f043 0307 	orr.w	r3, r3, #7
 80081b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	609a      	str	r2, [r3, #8]
}
 80081bc:	bf00      	nop
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b087      	sub	sp, #28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	607a      	str	r2, [r7, #4]
 80081d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	021a      	lsls	r2, r3, #8
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	431a      	orrs	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	609a      	str	r2, [r3, #8]
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008218:	2302      	movs	r3, #2
 800821a:	e046      	b.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a16      	ldr	r2, [pc, #88]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00e      	beq.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008268:	d009      	beq.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a12      	ldr	r2, [pc, #72]	; (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d004      	beq.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a10      	ldr	r2, [pc, #64]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d10c      	bne.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4313      	orrs	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr
 80082b4:	40012c00 	.word	0x40012c00
 80082b8:	40000400 	.word	0x40000400
 80082bc:	40000800 	.word	0x40000800

080082c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr

080082e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e03f      	b.n	8008376 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7fa f816 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2224      	movs	r2, #36	; 0x24
 8008314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc63 	bl	8008bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800833c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	695a      	ldr	r2, [r3, #20]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800834c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68da      	ldr	r2, [r3, #12]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800835c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b08a      	sub	sp, #40	; 0x28
 8008382:	af02      	add	r7, sp, #8
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	603b      	str	r3, [r7, #0]
 800838a:	4613      	mov	r3, r2
 800838c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b20      	cmp	r3, #32
 800839c:	d17c      	bne.n	8008498 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <HAL_UART_Transmit+0x2c>
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e075      	b.n	800849a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_UART_Transmit+0x3e>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e06e      	b.n	800849a <HAL_UART_Transmit+0x11c>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2221      	movs	r2, #33	; 0x21
 80083ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80083d2:	f7fc fa81 	bl	80048d8 <HAL_GetTick>
 80083d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	88fa      	ldrh	r2, [r7, #6]
 80083e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ec:	d108      	bne.n	8008400 <HAL_UART_Transmit+0x82>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	e003      	b.n	8008408 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008410:	e02a      	b.n	8008468 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2200      	movs	r2, #0
 800841a:	2180      	movs	r1, #128	; 0x80
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 fa71 	bl	8008904 <UART_WaitOnFlagUntilTimeout>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e036      	b.n	800849a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10b      	bne.n	800844a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	3302      	adds	r3, #2
 8008446:	61bb      	str	r3, [r7, #24]
 8008448:	e007      	b.n	800845a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	3301      	adds	r3, #1
 8008458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1cf      	bne.n	8008412 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2200      	movs	r2, #0
 800847a:	2140      	movs	r1, #64	; 0x40
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fa41 	bl	8008904 <UART_WaitOnFlagUntilTimeout>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e006      	b.n	800849a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e000      	b.n	800849a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008498:	2302      	movs	r3, #2
  }
}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	4613      	mov	r3, r2
 80084b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d166      	bne.n	800858c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <HAL_UART_Receive_DMA+0x26>
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e05f      	b.n	800858e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_UART_Receive_DMA+0x38>
 80084d8:	2302      	movs	r3, #2
 80084da:	e058      	b.n	800858e <HAL_UART_Receive_DMA+0xea>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	88fa      	ldrh	r2, [r7, #6]
 80084ee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2222      	movs	r2, #34	; 0x22
 80084fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	4a25      	ldr	r2, [pc, #148]	; (8008598 <HAL_UART_Receive_DMA+0xf4>)
 8008504:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850a:	4a24      	ldr	r2, [pc, #144]	; (800859c <HAL_UART_Receive_DMA+0xf8>)
 800850c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008512:	4a23      	ldr	r2, [pc, #140]	; (80085a0 <HAL_UART_Receive_DMA+0xfc>)
 8008514:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851a:	2200      	movs	r2, #0
 800851c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800851e:	f107 0308 	add.w	r3, r7, #8
 8008522:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3304      	adds	r3, #4
 800852e:	4619      	mov	r1, r3
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	f7fc fb65 	bl	8004c04 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800853a:	2300      	movs	r3, #0
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008566:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695a      	ldr	r2, [r3, #20]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695a      	ldr	r2, [r3, #20]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008586:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	e000      	b.n	800858e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800858c:	2302      	movs	r3, #2
  }
}
 800858e:	4618      	mov	r0, r3
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	080087ed 	.word	0x080087ed
 800859c:	08008855 	.word	0x08008855
 80085a0:	08008871 	.word	0x08008871

080085a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10d      	bne.n	80085f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_UART_IRQHandler+0x52>
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa7f 	bl	8008af2 <UART_Receive_IT>
      return;
 80085f4:	e0d0      	b.n	8008798 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80b0 	beq.w	800875e <HAL_UART_IRQHandler+0x1ba>
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d105      	bne.n	8008614 <HAL_UART_IRQHandler+0x70>
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80a5 	beq.w	800875e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <HAL_UART_IRQHandler+0x90>
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	f043 0201 	orr.w	r2, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00a      	beq.n	8008654 <HAL_UART_IRQHandler+0xb0>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864c:	f043 0202 	orr.w	r2, r3, #2
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <HAL_UART_IRQHandler+0xd0>
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866c:	f043 0204 	orr.w	r2, r3, #4
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00f      	beq.n	800869e <HAL_UART_IRQHandler+0xfa>
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b00      	cmp	r3, #0
 8008686:	d104      	bne.n	8008692 <HAL_UART_IRQHandler+0xee>
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	f043 0208 	orr.w	r2, r3, #8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d077      	beq.n	8008796 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <HAL_UART_IRQHandler+0x11c>
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa19 	bl	8008af2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bf14      	ite	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	2300      	moveq	r3, #0
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <HAL_UART_IRQHandler+0x144>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d031      	beq.n	800874c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f96a 	bl	80089c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d023      	beq.n	8008744 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695a      	ldr	r2, [r3, #20]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800870a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008718:	4a21      	ldr	r2, [pc, #132]	; (80087a0 <HAL_UART_IRQHandler+0x1fc>)
 800871a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008720:	4618      	mov	r0, r3
 8008722:	f7fc facf 	bl	8004cc4 <HAL_DMA_Abort_IT>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d016      	beq.n	800875a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008736:	4610      	mov	r0, r2
 8008738:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873a:	e00e      	b.n	800875a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f84c 	bl	80087da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008742:	e00a      	b.n	800875a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f848 	bl	80087da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874a:	e006      	b.n	800875a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f844 	bl	80087da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008758:	e01d      	b.n	8008796 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875a:	bf00      	nop
    return;
 800875c:	e01b      	b.n	8008796 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008764:	2b00      	cmp	r3, #0
 8008766:	d008      	beq.n	800877a <HAL_UART_IRQHandler+0x1d6>
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f956 	bl	8008a24 <UART_Transmit_IT>
    return;
 8008778:	e00e      	b.n	8008798 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <HAL_UART_IRQHandler+0x1f4>
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f997 	bl	8008ac2 <UART_EndTransmit_IT>
    return;
 8008794:	e000      	b.n	8008798 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008796:	bf00      	nop
  }
}
 8008798:	3720      	adds	r7, #32
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	080089fd 	.word	0x080089fd

080087a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr

080087b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr

080087da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0320 	and.w	r3, r3, #32
 8008804:	2b00      	cmp	r3, #0
 8008806:	d11e      	bne.n	8008846 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800881c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695a      	ldr	r2, [r3, #20]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0201 	bic.w	r2, r2, #1
 800882c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800883c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff ffb5 	bl	80087b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff ffb0 	bl	80087c8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008868:	bf00      	nop
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888c:	2b00      	cmp	r3, #0
 800888e:	bf14      	ite	ne
 8008890:	2301      	movne	r3, #1
 8008892:	2300      	moveq	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b21      	cmp	r3, #33	; 0x21
 80088a2:	d108      	bne.n	80088b6 <UART_DMAError+0x46>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2200      	movs	r2, #0
 80088ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80088b0:	68b8      	ldr	r0, [r7, #8]
 80088b2:	f000 f871 	bl	8008998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bf14      	ite	ne
 80088c4:	2301      	movne	r3, #1
 80088c6:	2300      	moveq	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b22      	cmp	r3, #34	; 0x22
 80088d6:	d108      	bne.n	80088ea <UART_DMAError+0x7a>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2200      	movs	r2, #0
 80088e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088e4:	68b8      	ldr	r0, [r7, #8]
 80088e6:	f000 f86c 	bl	80089c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ee:	f043 0210 	orr.w	r2, r3, #16
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088f6:	68b8      	ldr	r0, [r7, #8]
 80088f8:	f7ff ff6f 	bl	80087da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088fc:	bf00      	nop
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	4613      	mov	r3, r2
 8008912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008914:	e02c      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891c:	d028      	beq.n	8008970 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d007      	beq.n	8008934 <UART_WaitOnFlagUntilTimeout+0x30>
 8008924:	f7fb ffd8 	bl	80048d8 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	429a      	cmp	r2, r3
 8008932:	d21d      	bcs.n	8008970 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008942:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695a      	ldr	r2, [r3, #20]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2220      	movs	r2, #32
 8008960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e00f      	b.n	8008990 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	4013      	ands	r3, r2
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	429a      	cmp	r2, r3
 800897e:	bf0c      	ite	eq
 8008980:	2301      	moveq	r3, #1
 8008982:	2300      	movne	r3, #0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	461a      	mov	r2, r3
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	429a      	cmp	r2, r3
 800898c:	d0c3      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80089ae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr

080089c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089d8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695a      	ldr	r2, [r3, #20]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0201 	bic.w	r2, r2, #1
 80089e8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr

080089fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fedf 	bl	80087da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b21      	cmp	r3, #33	; 0x21
 8008a36:	d13e      	bne.n	8008ab6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a40:	d114      	bne.n	8008a6c <UART_Transmit_IT+0x48>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d110      	bne.n	8008a6c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	1c9a      	adds	r2, r3, #2
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	621a      	str	r2, [r3, #32]
 8008a6a:	e008      	b.n	8008a7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	1c59      	adds	r1, r3, #1
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6211      	str	r1, [r2, #32]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10f      	bne.n	8008ab2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aa0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ab0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e000      	b.n	8008ab8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ab6:	2302      	movs	r3, #2
  }
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bc80      	pop	{r7}
 8008ac0:	4770      	bx	lr

08008ac2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ad8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff fe5e 	bl	80087a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b22      	cmp	r3, #34	; 0x22
 8008b04:	d170      	bne.n	8008be8 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b0e:	d117      	bne.n	8008b40 <UART_Receive_IT+0x4e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d113      	bne.n	8008b40 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	1c9a      	adds	r2, r3, #2
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8008b3e:	e026      	b.n	8008b8e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b52:	d007      	beq.n	8008b64 <UART_Receive_IT+0x72>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <UART_Receive_IT+0x80>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d106      	bne.n	8008b72 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	e008      	b.n	8008b84 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d120      	bne.n	8008be4 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 0220 	bic.w	r2, r2, #32
 8008bb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0201 	bic.w	r2, r2, #1
 8008bd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff fdeb 	bl	80087b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e002      	b.n	8008bea <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	e000      	b.n	8008bea <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8008be8:	2302      	movs	r3, #2
  }
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008c2e:	f023 030c 	bic.w	r3, r3, #12
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a2c      	ldr	r2, [pc, #176]	; (8008d08 <UART_SetConfig+0x114>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d103      	bne.n	8008c64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008c5c:	f7fd fbe6 	bl	800642c <HAL_RCC_GetPCLK2Freq>
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	e002      	b.n	8008c6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008c64:	f7fd fbce 	bl	8006404 <HAL_RCC_GetPCLK1Freq>
 8008c68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009a      	lsls	r2, r3, #2
 8008c74:	441a      	add	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c80:	4a22      	ldr	r2, [pc, #136]	; (8008d0c <UART_SetConfig+0x118>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	0119      	lsls	r1, r3, #4
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	009a      	lsls	r2, r3, #2
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <UART_SetConfig+0x118>)
 8008ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	2064      	movs	r0, #100	; 0x64
 8008caa:	fb00 f303 	mul.w	r3, r0, r3
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	011b      	lsls	r3, r3, #4
 8008cb2:	3332      	adds	r3, #50	; 0x32
 8008cb4:	4a15      	ldr	r2, [pc, #84]	; (8008d0c <UART_SetConfig+0x118>)
 8008cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cba:	095b      	lsrs	r3, r3, #5
 8008cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cc0:	4419      	add	r1, r3
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009a      	lsls	r2, r3, #2
 8008ccc:	441a      	add	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <UART_SetConfig+0x118>)
 8008cda:	fba3 0302 	umull	r0, r3, r3, r2
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	2064      	movs	r0, #100	; 0x64
 8008ce2:	fb00 f303 	mul.w	r3, r0, r3
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	3332      	adds	r3, #50	; 0x32
 8008cec:	4a07      	ldr	r2, [pc, #28]	; (8008d0c <UART_SetConfig+0x118>)
 8008cee:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf2:	095b      	lsrs	r3, r3, #5
 8008cf4:	f003 020f 	and.w	r2, r3, #15
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	440a      	add	r2, r1
 8008cfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40013800 	.word	0x40013800
 8008d0c:	51eb851f 	.word	0x51eb851f

08008d10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008d14:	4904      	ldr	r1, [pc, #16]	; (8008d28 <MX_FATFS_Init+0x18>)
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <MX_FATFS_Init+0x1c>)
 8008d18:	f004 f8ee 	bl	800cef8 <FATFS_LinkDriver>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4b03      	ldr	r3, [pc, #12]	; (8008d30 <MX_FATFS_Init+0x20>)
 8008d22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d24:	bf00      	nop
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000928 	.word	0x20000928
 8008d2c:	20000010 	.word	0x20000010
 8008d30:	20000924 	.word	0x20000924

08008d34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008d38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr

08008d42 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	4603      	mov	r3, r0
 8008d4a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7f8 fbe8 	bl	8001524 <SD_disk_initialize>
 8008d54:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	4603      	mov	r3, r0
 8008d66:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7f8 fcc6 	bl	80016fc <SD_disk_status>
 8008d70:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8008d8a:	7bf8      	ldrb	r0, [r7, #15]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	f7f8 fcc7 	bl	8001724 <SD_disk_read>
 8008d96:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	607a      	str	r2, [r7, #4]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8008db0:	7bf8      	ldrb	r0, [r7, #15]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	f7f8 fd1e 	bl	80017f8 <SD_disk_write>
 8008dbc:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	4603      	mov	r3, r0
 8008dce:	603a      	str	r2, [r7, #0]
 8008dd0:	71fb      	strb	r3, [r7, #7]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8008dd6:	79b9      	ldrb	r1, [r7, #6]
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7f8 fd8f 	bl	8001900 <SD_disk_ioctl>
 8008de2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	4a08      	ldr	r2, [pc, #32]	; (8008e1c <disk_status+0x30>)
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	79fa      	ldrb	r2, [r7, #7]
 8008e04:	4905      	ldr	r1, [pc, #20]	; (8008e1c <disk_status+0x30>)
 8008e06:	440a      	add	r2, r1
 8008e08:	7a12      	ldrb	r2, [r2, #8]
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000b4c 	.word	0x20000b4c

08008e20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	4a0d      	ldr	r2, [pc, #52]	; (8008e68 <disk_initialize+0x48>)
 8008e32:	5cd3      	ldrb	r3, [r2, r3]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d111      	bne.n	8008e5c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	4a0b      	ldr	r2, [pc, #44]	; (8008e68 <disk_initialize+0x48>)
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <disk_initialize+0x48>)
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	79fa      	ldrb	r2, [r7, #7]
 8008e4e:	4906      	ldr	r1, [pc, #24]	; (8008e68 <disk_initialize+0x48>)
 8008e50:	440a      	add	r2, r1
 8008e52:	7a12      	ldrb	r2, [r2, #8]
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000b4c 	.word	0x20000b4c

08008e6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e6c:	b590      	push	{r4, r7, lr}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	4a0a      	ldr	r2, [pc, #40]	; (8008ea8 <disk_read+0x3c>)
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	689c      	ldr	r4, [r3, #8]
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	4a07      	ldr	r2, [pc, #28]	; (8008ea8 <disk_read+0x3c>)
 8008e8c:	4413      	add	r3, r2
 8008e8e:	7a18      	ldrb	r0, [r3, #8]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	47a0      	blx	r4
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	371c      	adds	r7, #28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd90      	pop	{r4, r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000b4c 	.word	0x20000b4c

08008eac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <disk_write+0x3c>)
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	68dc      	ldr	r4, [r3, #12]
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	4a07      	ldr	r2, [pc, #28]	; (8008ee8 <disk_write+0x3c>)
 8008ecc:	4413      	add	r3, r2
 8008ece:	7a18      	ldrb	r0, [r3, #8]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	47a0      	blx	r4
 8008ed8:	4603      	mov	r3, r0
 8008eda:	75fb      	strb	r3, [r7, #23]
  return res;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd90      	pop	{r4, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000b4c 	.word	0x20000b4c

08008eec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	603a      	str	r2, [r7, #0]
 8008ef6:	71fb      	strb	r3, [r7, #7]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	4a09      	ldr	r2, [pc, #36]	; (8008f24 <disk_ioctl+0x38>)
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	79fa      	ldrb	r2, [r7, #7]
 8008f0a:	4906      	ldr	r1, [pc, #24]	; (8008f24 <disk_ioctl+0x38>)
 8008f0c:	440a      	add	r2, r1
 8008f0e:	7a10      	ldrb	r0, [r2, #8]
 8008f10:	79b9      	ldrb	r1, [r7, #6]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4798      	blx	r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]
  return res;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000b4c 	.word	0x20000b4c

08008f28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008f3c:	e007      	b.n	8008f4e <mem_cpy+0x26>
		*d++ = *s++;
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	1c53      	adds	r3, r2, #1
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	1c59      	adds	r1, r3, #1
 8008f48:	6179      	str	r1, [r7, #20]
 8008f4a:	7812      	ldrb	r2, [r2, #0]
 8008f4c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	1e5a      	subs	r2, r3, #1
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1f2      	bne.n	8008f3e <mem_cpy+0x16>
}
 8008f58:	bf00      	nop
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr

08008f64 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008f74:	e005      	b.n	8008f82 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	617a      	str	r2, [r7, #20]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1e5a      	subs	r2, r3, #1
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1f4      	bne.n	8008f76 <mem_set+0x12>
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr

08008f98 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008f98:	b480      	push	{r7}
 8008f9a:	b089      	sub	sp, #36	; 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008fb0:	bf00      	nop
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	1e5a      	subs	r2, r3, #1
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00d      	beq.n	8008fd8 <mem_cmp+0x40>
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	61fa      	str	r2, [r7, #28]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	61ba      	str	r2, [r7, #24]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	1acb      	subs	r3, r1, r3
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0ec      	beq.n	8008fb2 <mem_cmp+0x1a>
	return r;
 8008fd8:	697b      	ldr	r3, [r7, #20]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3724      	adds	r7, #36	; 0x24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bc80      	pop	{r7}
 8008fe2:	4770      	bx	lr

08008fe4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008fee:	e002      	b.n	8008ff6 <chk_chr+0x12>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	607b      	str	r3, [r7, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <chk_chr+0x26>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	4293      	cmp	r3, r2
 8009008:	d1f2      	bne.n	8008ff0 <chk_chr+0xc>
	return *str;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	781b      	ldrb	r3, [r3, #0]
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	bc80      	pop	{r7}
 8009016:	4770      	bx	lr

08009018 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009022:	2300      	movs	r3, #0
 8009024:	60bb      	str	r3, [r7, #8]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	e03b      	b.n	80090a4 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800902c:	4931      	ldr	r1, [pc, #196]	; (80090f4 <chk_lock+0xdc>)
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d02c      	beq.n	800909a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009040:	492c      	ldr	r1, [pc, #176]	; (80090f4 <chk_lock+0xdc>)
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4613      	mov	r3, r2
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	440b      	add	r3, r1
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d120      	bne.n	800909e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800905c:	4925      	ldr	r1, [pc, #148]	; (80090f4 <chk_lock+0xdc>)
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4613      	mov	r3, r2
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	3304      	adds	r3, #4
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009074:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009076:	429a      	cmp	r2, r3
 8009078:	d111      	bne.n	800909e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800907a:	491e      	ldr	r1, [pc, #120]	; (80090f4 <chk_lock+0xdc>)
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4613      	mov	r3, r2
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	440b      	add	r3, r1
 8009088:	3308      	adds	r3, #8
 800908a:	881a      	ldrh	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009092:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8009094:	429a      	cmp	r2, r3
 8009096:	d102      	bne.n	800909e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009098:	e007      	b.n	80090aa <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800909a:	2301      	movs	r3, #1
 800909c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3301      	adds	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d9c0      	bls.n	800902c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d109      	bne.n	80090c4 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d102      	bne.n	80090bc <chk_lock+0xa4>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d101      	bne.n	80090c0 <chk_lock+0xa8>
 80090bc:	2300      	movs	r3, #0
 80090be:	e013      	b.n	80090e8 <chk_lock+0xd0>
 80090c0:	2312      	movs	r3, #18
 80090c2:	e011      	b.n	80090e8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <chk_lock+0xca>
 80090ca:	490a      	ldr	r1, [pc, #40]	; (80090f4 <chk_lock+0xdc>)
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4613      	mov	r3, r2
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	4413      	add	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	440b      	add	r3, r1
 80090d8:	330a      	adds	r3, #10
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e0:	d101      	bne.n	80090e6 <chk_lock+0xce>
 80090e2:	2310      	movs	r3, #16
 80090e4:	e000      	b.n	80090e8 <chk_lock+0xd0>
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000934 	.word	0x20000934

080090f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090fe:	2300      	movs	r3, #0
 8009100:	607b      	str	r3, [r7, #4]
 8009102:	e002      	b.n	800910a <enq_lock+0x12>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3301      	adds	r3, #1
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d809      	bhi.n	8009124 <enq_lock+0x2c>
 8009110:	490a      	ldr	r1, [pc, #40]	; (800913c <enq_lock+0x44>)
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	4613      	mov	r3, r2
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ef      	bne.n	8009104 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b02      	cmp	r3, #2
 8009128:	bf14      	ite	ne
 800912a:	2301      	movne	r3, #1
 800912c:	2300      	moveq	r3, #0
 800912e:	b2db      	uxtb	r3, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20000934 	.word	0x20000934

08009140 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	e02e      	b.n	80091ae <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8009150:	4958      	ldr	r1, [pc, #352]	; (80092b4 <inc_lock+0x174>)
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	4613      	mov	r3, r2
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d11d      	bne.n	80091a8 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800916c:	4951      	ldr	r1, [pc, #324]	; (80092b4 <inc_lock+0x174>)
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4613      	mov	r3, r2
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	440b      	add	r3, r1
 800917a:	3304      	adds	r3, #4
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009184:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8009186:	429a      	cmp	r2, r3
 8009188:	d10e      	bne.n	80091a8 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800918a:	494a      	ldr	r1, [pc, #296]	; (80092b4 <inc_lock+0x174>)
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4613      	mov	r3, r2
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	440b      	add	r3, r1
 8009198:	3308      	adds	r3, #8
 800919a:	881a      	ldrh	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a2:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d006      	beq.n	80091b6 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d9cd      	bls.n	8009150 <inc_lock+0x10>
 80091b4:	e000      	b.n	80091b8 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80091b6:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d148      	bne.n	8009250 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	e002      	b.n	80091ca <inc_lock+0x8a>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d809      	bhi.n	80091e4 <inc_lock+0xa4>
 80091d0:	4938      	ldr	r1, [pc, #224]	; (80092b4 <inc_lock+0x174>)
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	4613      	mov	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1ef      	bne.n	80091c4 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d101      	bne.n	80091ee <inc_lock+0xae>
 80091ea:	2300      	movs	r3, #0
 80091ec:	e05d      	b.n	80092aa <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	6819      	ldr	r1, [r3, #0]
 80091f6:	482f      	ldr	r0, [pc, #188]	; (80092b4 <inc_lock+0x174>)
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4613      	mov	r3, r2
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4403      	add	r3, r0
 8009204:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800920c:	6899      	ldr	r1, [r3, #8]
 800920e:	4829      	ldr	r0, [pc, #164]	; (80092b4 <inc_lock+0x174>)
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	4613      	mov	r3, r2
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4403      	add	r3, r0
 800921c:	3304      	adds	r3, #4
 800921e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009226:	88d8      	ldrh	r0, [r3, #6]
 8009228:	4922      	ldr	r1, [pc, #136]	; (80092b4 <inc_lock+0x174>)
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4613      	mov	r3, r2
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	3308      	adds	r3, #8
 8009238:	4602      	mov	r2, r0
 800923a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800923c:	491d      	ldr	r1, [pc, #116]	; (80092b4 <inc_lock+0x174>)
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	4613      	mov	r3, r2
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	330a      	adds	r3, #10
 800924c:	2200      	movs	r2, #0
 800924e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00c      	beq.n	8009270 <inc_lock+0x130>
 8009256:	4917      	ldr	r1, [pc, #92]	; (80092b4 <inc_lock+0x174>)
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4613      	mov	r3, r2
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	330a      	adds	r3, #10
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <inc_lock+0x130>
 800926c:	2300      	movs	r3, #0
 800926e:	e01c      	b.n	80092aa <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10b      	bne.n	800928e <inc_lock+0x14e>
 8009276:	490f      	ldr	r1, [pc, #60]	; (80092b4 <inc_lock+0x174>)
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4613      	mov	r3, r2
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	330a      	adds	r3, #10
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	b299      	uxth	r1, r3
 800928c:	e001      	b.n	8009292 <inc_lock+0x152>
 800928e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009292:	4808      	ldr	r0, [pc, #32]	; (80092b4 <inc_lock+0x174>)
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4613      	mov	r3, r2
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4403      	add	r3, r0
 80092a0:	330a      	adds	r3, #10
 80092a2:	460a      	mov	r2, r1
 80092a4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bc80      	pop	{r7}
 80092b2:	4770      	bx	lr
 80092b4:	20000934 	.word	0x20000934

080092b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d82e      	bhi.n	800932a <dec_lock+0x72>
		n = Files[i].ctr;
 80092cc:	491b      	ldr	r1, [pc, #108]	; (800933c <dec_lock+0x84>)
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4613      	mov	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	330a      	adds	r3, #10
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80092e0:	89fb      	ldrh	r3, [r7, #14]
 80092e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e6:	d101      	bne.n	80092ec <dec_lock+0x34>
 80092e8:	2300      	movs	r3, #0
 80092ea:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80092ec:	89fb      	ldrh	r3, [r7, #14]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <dec_lock+0x40>
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80092f8:	4910      	ldr	r1, [pc, #64]	; (800933c <dec_lock+0x84>)
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	4613      	mov	r3, r2
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	330a      	adds	r3, #10
 8009308:	89fa      	ldrh	r2, [r7, #14]
 800930a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800930c:	89fb      	ldrh	r3, [r7, #14]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d108      	bne.n	8009324 <dec_lock+0x6c>
 8009312:	490a      	ldr	r1, [pc, #40]	; (800933c <dec_lock+0x84>)
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	4613      	mov	r3, r2
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	737b      	strb	r3, [r7, #13]
 8009328:	e001      	b.n	800932e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800932a:	2302      	movs	r3, #2
 800932c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800932e:	7b7b      	ldrb	r3, [r7, #13]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000934 	.word	0x20000934

08009340 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009348:	2300      	movs	r3, #0
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	e016      	b.n	800937c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800934e:	4910      	ldr	r1, [pc, #64]	; (8009390 <clear_lock+0x50>)
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4613      	mov	r3, r2
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d108      	bne.n	8009376 <clear_lock+0x36>
 8009364:	490a      	ldr	r1, [pc, #40]	; (8009390 <clear_lock+0x50>)
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	4613      	mov	r3, r2
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d9e5      	bls.n	800934e <clear_lock+0xe>
	}
}
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	bc80      	pop	{r7}
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	20000934 	.word	0x20000934

08009394 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a6:	791b      	ldrb	r3, [r3, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d040      	beq.n	800942e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093bc:	7858      	ldrb	r0, [r3, #1]
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	2301      	movs	r3, #1
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	f7ff fd72 	bl	8008eac <disk_write>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <sync_window+0x40>
			res = FR_DISK_ERR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	73fb      	strb	r3, [r7, #15]
 80093d2:	e02c      	b.n	800942e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093da:	2200      	movs	r2, #0
 80093dc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	1ad2      	subs	r2, r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d21b      	bcs.n	800942e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fc:	78db      	ldrb	r3, [r3, #3]
 80093fe:	613b      	str	r3, [r7, #16]
 8009400:	e012      	b.n	8009428 <sync_window+0x94>
					wsect += fs->fsize;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4413      	add	r3, r2
 800940e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009416:	7858      	ldrb	r0, [r3, #1]
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	2301      	movs	r3, #1
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	f7ff fd45 	bl	8008eac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	3b01      	subs	r3, #1
 8009426:	613b      	str	r3, [r7, #16]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d8e9      	bhi.n	8009402 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d01e      	beq.n	8009492 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ff9d 	bl	8009394 <sync_window>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d116      	bne.n	8009492 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946a:	7858      	ldrb	r0, [r3, #1]
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	2301      	movs	r3, #1
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	f7ff fcfb 	bl	8008e6c <disk_read>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800947c:	f04f 33ff 	mov.w	r3, #4294967295
 8009480:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009482:	2301      	movs	r3, #1
 8009484:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800948c:	461a      	mov	r2, r3
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff ff75 	bl	8009394 <sync_window>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f040 80ad 	bne.w	8009610 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b03      	cmp	r3, #3
 80094c0:	f040 8098 	bne.w	80095f4 <sync_fs+0x158>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ca:	795b      	ldrb	r3, [r3, #5]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	f040 8091 	bne.w	80095f4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094da:	895b      	ldrh	r3, [r3, #10]
 80094dc:	461a      	mov	r2, r3
 80094de:	2100      	movs	r1, #0
 80094e0:	f7ff fd40 	bl	8008f64 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2255      	movs	r2, #85	; 0x55
 80094e8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	22aa      	movs	r2, #170	; 0xaa
 80094f0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2252      	movs	r2, #82	; 0x52
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2252      	movs	r2, #82	; 0x52
 80094fe:	705a      	strb	r2, [r3, #1]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2261      	movs	r2, #97	; 0x61
 8009504:	709a      	strb	r2, [r3, #2]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2241      	movs	r2, #65	; 0x41
 800950a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2272      	movs	r2, #114	; 0x72
 8009510:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2272      	movs	r2, #114	; 0x72
 8009518:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2241      	movs	r2, #65	; 0x41
 8009520:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2261      	movs	r2, #97	; 0x61
 8009528:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	b2da      	uxtb	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	b29b      	uxth	r3, r3
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	b29b      	uxth	r3, r3
 800954a:	b2da      	uxtb	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	0e1b      	lsrs	r3, r3, #24
 800956e:	b2da      	uxtb	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	b2da      	uxtb	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	b29b      	uxth	r3, r3
 8009590:	0a1b      	lsrs	r3, r3, #8
 8009592:	b29b      	uxth	r3, r3
 8009594:	b2da      	uxtb	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	0e1b      	lsrs	r3, r3, #24
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	3301      	adds	r3, #1
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095d0:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d8:	7858      	ldrb	r0, [r3, #1]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	2301      	movs	r3, #1
 80095e6:	f7ff fc61 	bl	8008eac <disk_write>
			fs->fsi_flag = 0;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f0:	2200      	movs	r2, #0
 80095f2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2200      	movs	r2, #0
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fc73 	bl	8008eec <disk_ioctl>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800960c:	2301      	movs	r3, #1
 800960e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800961a:	b480      	push	{r7}
 800961c:	b083      	sub	sp, #12
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	3b02      	subs	r3, #2
 8009628:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	3b02      	subs	r3, #2
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d301      	bcc.n	800963e <clust2sect+0x24>
 800963a:	2300      	movs	r3, #0
 800963c:	e00c      	b.n	8009658 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009644:	789b      	ldrb	r3, [r3, #2]
 8009646:	461a      	mov	r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	fb03 f202 	mul.w	r2, r3, r2
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	4413      	add	r3, r2
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bc80      	pop	{r7}
 8009660:	4770      	bx	lr

08009662 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d906      	bls.n	8009680 <get_fat+0x1e>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <get_fat+0x24>
		val = 1;	/* Internal error */
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e0e4      	b.n	8009850 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
 800968a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b03      	cmp	r3, #3
 8009696:	f000 8098 	beq.w	80097ca <get_fat+0x168>
 800969a:	2b03      	cmp	r3, #3
 800969c:	f300 80ce 	bgt.w	800983c <get_fat+0x1da>
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d002      	beq.n	80096aa <get_fat+0x48>
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d05f      	beq.n	8009768 <get_fat+0x106>
 80096a8:	e0c8      	b.n	800983c <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	085b      	lsrs	r3, r3, #1
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096be:	6a1a      	ldr	r2, [r3, #32]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c6:	895b      	ldrh	r3, [r3, #10]
 80096c8:	4619      	mov	r1, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80096d0:	4413      	add	r3, r2
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff feaf 	bl	8009438 <move_window>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 80b0 	bne.w	8009842 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	60fa      	str	r2, [r7, #12]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096ee:	8952      	ldrh	r2, [r2, #10]
 80096f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80096f4:	fb01 f202 	mul.w	r2, r1, r2
 80096f8:	1a9b      	subs	r3, r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	5cd3      	ldrb	r3, [r2, r3]
 80096fe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009706:	6a1a      	ldr	r2, [r3, #32]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800970e:	895b      	ldrh	r3, [r3, #10]
 8009710:	4619      	mov	r1, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	fbb3 f3f1 	udiv	r3, r3, r1
 8009718:	4413      	add	r3, r2
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff fe8b 	bl	8009438 <move_window>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	f040 808e 	bne.w	8009846 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009730:	895b      	ldrh	r3, [r3, #10]
 8009732:	461a      	mov	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	fbb3 f1f2 	udiv	r1, r3, r2
 800973a:	fb01 f202 	mul.w	r2, r1, r2
 800973e:	1a9b      	subs	r3, r3, r2
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	5cd3      	ldrb	r3, [r2, r3]
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	461a      	mov	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4313      	orrs	r3, r2
 800974c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <get_fat+0xfc>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	091b      	lsrs	r3, r3, #4
 800975c:	e002      	b.n	8009764 <get_fat+0x102>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009764:	617b      	str	r3, [r7, #20]
			break;
 8009766:	e073      	b.n	8009850 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800976e:	6a1a      	ldr	r2, [r3, #32]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009776:	895b      	ldrh	r3, [r3, #10]
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	b29b      	uxth	r3, r3
 800977c:	4619      	mov	r1, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	fbb3 f3f1 	udiv	r3, r3, r1
 8009784:	4413      	add	r3, r2
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff fe55 	bl	8009438 <move_window>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d15a      	bne.n	800984a <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800979e:	8952      	ldrh	r2, [r2, #10]
 80097a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80097a4:	fb01 f202 	mul.w	r2, r1, r2
 80097a8:	1a9b      	subs	r3, r3, r2
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	4413      	add	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	3301      	adds	r3, #1
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	b21a      	sxth	r2, r3
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b21b      	sxth	r3, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	b21b      	sxth	r3, r3
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	617b      	str	r3, [r7, #20]
			break;
 80097c8:	e042      	b.n	8009850 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d0:	6a1a      	ldr	r2, [r3, #32]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d8:	895b      	ldrh	r3, [r3, #10]
 80097da:	089b      	lsrs	r3, r3, #2
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4619      	mov	r1, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80097e6:	4413      	add	r3, r2
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff fe24 	bl	8009438 <move_window>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d12b      	bne.n	800984e <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009800:	8952      	ldrh	r2, [r2, #10]
 8009802:	fbb3 f1f2 	udiv	r1, r3, r2
 8009806:	fb01 f202 	mul.w	r2, r1, r2
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	4413      	add	r3, r2
 8009810:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	3303      	adds	r3, #3
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	061a      	lsls	r2, r3, #24
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3302      	adds	r3, #2
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	041b      	lsls	r3, r3, #16
 8009822:	4313      	orrs	r3, r2
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	3201      	adds	r2, #1
 8009828:	7812      	ldrb	r2, [r2, #0]
 800982a:	0212      	lsls	r2, r2, #8
 800982c:	4313      	orrs	r3, r2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	7812      	ldrb	r2, [r2, #0]
 8009832:	4313      	orrs	r3, r2
 8009834:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009838:	617b      	str	r3, [r7, #20]
			break;
 800983a:	e009      	b.n	8009850 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800983c:	2301      	movs	r3, #1
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	e006      	b.n	8009850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009842:	bf00      	nop
 8009844:	e004      	b.n	8009850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009846:	bf00      	nop
 8009848:	e002      	b.n	8009850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800984a:	bf00      	nop
 800984c:	e000      	b.n	8009850 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800984e:	bf00      	nop
		}
	}

	return val;
 8009850:	697b      	ldr	r3, [r7, #20]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b088      	sub	sp, #32
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d906      	bls.n	800987a <put_fat+0x20>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	429a      	cmp	r2, r3
 8009878:	d302      	bcc.n	8009880 <put_fat+0x26>
		res = FR_INT_ERR;
 800987a:	2302      	movs	r3, #2
 800987c:	77fb      	strb	r3, [r7, #31]
 800987e:	e13a      	b.n	8009af6 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b03      	cmp	r3, #3
 800988a:	f000 80d0 	beq.w	8009a2e <put_fat+0x1d4>
 800988e:	2b03      	cmp	r3, #3
 8009890:	f300 8127 	bgt.w	8009ae2 <put_fat+0x288>
 8009894:	2b01      	cmp	r3, #1
 8009896:	d003      	beq.n	80098a0 <put_fat+0x46>
 8009898:	2b02      	cmp	r3, #2
 800989a:	f000 808f 	beq.w	80099bc <put_fat+0x162>
 800989e:	e120      	b.n	8009ae2 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	085b      	lsrs	r3, r3, #1
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b4:	6a1a      	ldr	r2, [r3, #32]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098bc:	895b      	ldrh	r3, [r3, #10]
 80098be:	4619      	mov	r1, r3
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80098c6:	4413      	add	r3, r2
 80098c8:	4619      	mov	r1, r3
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff fdb4 	bl	8009438 <move_window>
 80098d0:	4603      	mov	r3, r0
 80098d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098d4:	7ffb      	ldrb	r3, [r7, #31]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 8106 	bne.w	8009ae8 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	617a      	str	r2, [r7, #20]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098e8:	8952      	ldrh	r2, [r2, #10]
 80098ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80098ee:	fb01 f202 	mul.w	r2, r1, r2
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00d      	beq.n	8009920 <put_fat+0xc6>
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	b25b      	sxtb	r3, r3
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	b25a      	sxtb	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	b25b      	sxtb	r3, r3
 8009918:	4313      	orrs	r3, r2
 800991a:	b25b      	sxtb	r3, r3
 800991c:	b2db      	uxtb	r3, r3
 800991e:	e001      	b.n	8009924 <put_fat+0xca>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992e:	2201      	movs	r2, #1
 8009930:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009938:	6a1a      	ldr	r2, [r3, #32]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009940:	895b      	ldrh	r3, [r3, #10]
 8009942:	4619      	mov	r1, r3
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	fbb3 f3f1 	udiv	r3, r3, r1
 800994a:	4413      	add	r3, r2
 800994c:	4619      	mov	r1, r3
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff fd72 	bl	8009438 <move_window>
 8009954:	4603      	mov	r3, r0
 8009956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009958:	7ffb      	ldrb	r3, [r7, #31]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f040 80c6 	bne.w	8009aec <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009966:	895b      	ldrh	r3, [r3, #10]
 8009968:	461a      	mov	r2, r3
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009970:	fb01 f202 	mul.w	r2, r1, r2
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <put_fat+0x134>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	091b      	lsrs	r3, r3, #4
 800998a:	b2db      	uxtb	r3, r3
 800998c:	e00e      	b.n	80099ac <put_fat+0x152>
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	b25b      	sxtb	r3, r3
 8009994:	f023 030f 	bic.w	r3, r3, #15
 8009998:	b25a      	sxtb	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	0a1b      	lsrs	r3, r3, #8
 800999e:	b25b      	sxtb	r3, r3
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	b25b      	sxtb	r3, r3
 80099a6:	4313      	orrs	r3, r2
 80099a8:	b25b      	sxtb	r3, r3
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b6:	2201      	movs	r2, #1
 80099b8:	711a      	strb	r2, [r3, #4]
			break;
 80099ba:	e09c      	b.n	8009af6 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c2:	6a1a      	ldr	r2, [r3, #32]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ca:	895b      	ldrh	r3, [r3, #10]
 80099cc:	085b      	lsrs	r3, r3, #1
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4619      	mov	r1, r3
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80099d8:	4413      	add	r3, r2
 80099da:	4619      	mov	r1, r3
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7ff fd2b 	bl	8009438 <move_window>
 80099e2:	4603      	mov	r3, r0
 80099e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099e6:	7ffb      	ldrb	r3, [r7, #31]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 8081 	bne.w	8009af0 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099f8:	8952      	ldrh	r2, [r2, #10]
 80099fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80099fe:	fb01 f202 	mul.w	r2, r1, r2
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	0a1b      	lsrs	r3, r3, #8
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a28:	2201      	movs	r2, #1
 8009a2a:	711a      	strb	r2, [r3, #4]
			break;
 8009a2c:	e063      	b.n	8009af6 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a34:	6a1a      	ldr	r2, [r3, #32]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a3c:	895b      	ldrh	r3, [r3, #10]
 8009a3e:	089b      	lsrs	r3, r3, #2
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	4619      	mov	r1, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a4a:	4413      	add	r3, r2
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7ff fcf2 	bl	8009438 <move_window>
 8009a54:	4603      	mov	r3, r0
 8009a56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a58:	7ffb      	ldrb	r3, [r7, #31]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d14a      	bne.n	8009af4 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a68:	8952      	ldrh	r2, [r2, #10]
 8009a6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a6e:	fb01 f202 	mul.w	r2, r1, r2
 8009a72:	1a9b      	subs	r3, r3, r2
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	3303      	adds	r3, #3
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	061a      	lsls	r2, r3, #24
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	3302      	adds	r3, #2
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	041b      	lsls	r3, r3, #16
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	3201      	adds	r2, #1
 8009a90:	7812      	ldrb	r2, [r2, #0]
 8009a92:	0212      	lsls	r2, r2, #8
 8009a94:	4313      	orrs	r3, r2
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	0a1b      	lsrs	r3, r3, #8
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	701a      	strb	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	0c1a      	lsrs	r2, r3, #16
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	3302      	adds	r3, #2
 8009ac6:	b2d2      	uxtb	r2, r2
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	0e1a      	lsrs	r2, r3, #24
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	3303      	adds	r3, #3
 8009ad2:	b2d2      	uxtb	r2, r2
 8009ad4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009adc:	2201      	movs	r2, #1
 8009ade:	711a      	strb	r2, [r3, #4]
			break;
 8009ae0:	e009      	b.n	8009af6 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	77fb      	strb	r3, [r7, #31]
 8009ae6:	e006      	b.n	8009af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009ae8:	bf00      	nop
 8009aea:	e004      	b.n	8009af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009aec:	bf00      	nop
 8009aee:	e002      	b.n	8009af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009af0:	bf00      	nop
 8009af2:	e000      	b.n	8009af6 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009af4:	bf00      	nop
		}
	}

	return res;
 8009af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3720      	adds	r7, #32
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d906      	bls.n	8009b1e <remove_chain+0x1e>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d302      	bcc.n	8009b24 <remove_chain+0x24>
		res = FR_INT_ERR;
 8009b1e:	2302      	movs	r3, #2
 8009b20:	73fb      	strb	r3, [r7, #15]
 8009b22:	e049      	b.n	8009bb8 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009b28:	e03b      	b.n	8009ba2 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff fd98 	bl	8009662 <get_fat>
 8009b32:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d03b      	beq.n	8009bb2 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d102      	bne.n	8009b46 <remove_chain+0x46>
 8009b40:	2302      	movs	r3, #2
 8009b42:	73fb      	strb	r3, [r7, #15]
 8009b44:	e038      	b.n	8009bb8 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d102      	bne.n	8009b54 <remove_chain+0x54>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	73fb      	strb	r3, [r7, #15]
 8009b52:	e031      	b.n	8009bb8 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009b54:	2200      	movs	r2, #0
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff fe7e 	bl	800985a <put_fat>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d126      	bne.n	8009bb6 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b74:	d013      	beq.n	8009b9e <remove_chain+0x9e>
				fs->free_clust++;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b86:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8e:	795b      	ldrb	r3, [r3, #5]
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d3bc      	bcc.n	8009b2a <remove_chain+0x2a>
 8009bb0:	e002      	b.n	8009bb8 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8009bb6:	bf00      	nop
		}
	}

	return res;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d111      	bne.n	8009bf6 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d006      	beq.n	8009bf0 <create_chain+0x2e>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d31d      	bcc.n	8009c2c <create_chain+0x6a>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	e01a      	b.n	8009c2c <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff fd32 	bl	8009662 <get_fat>
 8009bfe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d801      	bhi.n	8009c0a <create_chain+0x48>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e07f      	b.n	8009d0a <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c10:	d101      	bne.n	8009c16 <create_chain+0x54>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	e079      	b.n	8009d0a <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d201      	bcs.n	8009c28 <create_chain+0x66>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	e070      	b.n	8009d0a <create_chain+0x148>
		scl = clst;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	3301      	adds	r3, #1
 8009c34:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d307      	bcc.n	8009c54 <create_chain+0x92>
			ncl = 2;
 8009c44:	2302      	movs	r3, #2
 8009c46:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d901      	bls.n	8009c54 <create_chain+0x92>
 8009c50:	2300      	movs	r3, #0
 8009c52:	e05a      	b.n	8009d0a <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009c54:	6979      	ldr	r1, [r7, #20]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fd03 	bl	8009662 <get_fat>
 8009c5c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00e      	beq.n	8009c82 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d002      	beq.n	8009c72 <create_chain+0xb0>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <create_chain+0xb4>
			return cs;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	e049      	b.n	8009d0a <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d1d8      	bne.n	8009c30 <create_chain+0x6e>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e043      	b.n	8009d0a <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8009c82:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009c84:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009c88:	6979      	ldr	r1, [r7, #20]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff fde5 	bl	800985a <put_fat>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <create_chain+0xec>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d006      	beq.n	8009cae <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7ff fdd8 	bl	800985a <put_fat>
 8009caa:	4603      	mov	r3, r0
 8009cac:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d121      	bne.n	8009cf8 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cba:	461a      	mov	r2, r3
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ccc:	d01c      	beq.n	8009d08 <create_chain+0x146>
			fs->free_clust--;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cde:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce6:	795b      	ldrb	r3, [r3, #5]
 8009ce8:	f043 0301 	orr.w	r3, r3, #1
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf4:	715a      	strb	r2, [r3, #5]
 8009cf6:	e007      	b.n	8009d08 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d102      	bne.n	8009d04 <create_chain+0x142>
 8009cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009d02:	e000      	b.n	8009d06 <create_chain+0x144>
 8009d04:	2301      	movs	r3, #1
 8009d06:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8009d08:	697b      	ldr	r3, [r7, #20]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b087      	sub	sp, #28
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	3304      	adds	r3, #4
 8009d26:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d34:	895b      	ldrh	r3, [r3, #10]
 8009d36:	461a      	mov	r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d4a:	7892      	ldrb	r2, [r2, #2]
 8009d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1d1a      	adds	r2, r3, #4
 8009d56:	613a      	str	r2, [r7, #16]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <clmt_clust+0x54>
 8009d62:	2300      	movs	r3, #0
 8009d64:	e010      	b.n	8009d88 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d307      	bcc.n	8009d7e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	617b      	str	r3, [r7, #20]
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d7c:	e7e9      	b.n	8009d52 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8009d7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	4413      	add	r3, r2
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bc80      	pop	{r7}
 8009d90:	4770      	bx	lr

08009d92 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b086      	sub	sp, #24
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da6:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d009      	beq.n	8009dcc <dir_sdi+0x3a>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d301      	bcc.n	8009dd0 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e0aa      	b.n	8009f26 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d110      	bne.n	8009df8 <dir_sdi+0x66>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d107      	bne.n	8009df8 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d115      	bne.n	8009e2a <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0a:	891b      	ldrh	r3, [r3, #8]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d301      	bcc.n	8009e18 <dir_sdi+0x86>
			return FR_INT_ERR;
 8009e14:	2302      	movs	r3, #2
 8009e16:	e086      	b.n	8009f26 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	613b      	str	r3, [r7, #16]
 8009e28:	e043      	b.n	8009eb2 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e36:	895b      	ldrh	r3, [r3, #10]
 8009e38:	095b      	lsrs	r3, r3, #5
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e4a:	789b      	ldrb	r3, [r3, #2]
 8009e4c:	fb02 f303 	mul.w	r3, r2, r3
 8009e50:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8009e52:	e021      	b.n	8009e98 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6979      	ldr	r1, [r7, #20]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff fbff 	bl	8009662 <get_fat>
 8009e64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6c:	d101      	bne.n	8009e72 <dir_sdi+0xe0>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e059      	b.n	8009f26 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d909      	bls.n	8009e8c <dir_sdi+0xfa>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d301      	bcc.n	8009e90 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e04a      	b.n	8009f26 <dir_sdi+0x194>
			idx -= ic;
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d2d9      	bcs.n	8009e54 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6979      	ldr	r1, [r7, #20]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff fbb5 	bl	800961a <clust2sect>
 8009eb0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb8:	461a      	mov	r2, r3
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <dir_sdi+0x136>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	e02e      	b.n	8009f26 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed4:	895b      	ldrh	r3, [r3, #10]
 8009ed6:	095b      	lsrs	r3, r3, #5
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	461a      	mov	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009eec:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f04:	895b      	ldrh	r3, [r3, #10]
 8009f06:	095b      	lsrs	r3, r3, #5
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f12:	fb01 f202 	mul.w	r2, r1, r2
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	015b      	lsls	r3, r3, #5
 8009f1a:	4403      	add	r3, r0
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f22:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009f2e:	b590      	push	{r4, r7, lr}
 8009f30:	b087      	sub	sp, #28
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f3e:	88db      	ldrh	r3, [r3, #6]
 8009f40:	3301      	adds	r3, #1
 8009f42:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d005      	beq.n	8009f58 <dir_next+0x2a>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <dir_next+0x2e>
		return FR_NO_FILE;
 8009f58:	2304      	movs	r3, #4
 8009f5a:	e12e      	b.n	800a1ba <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f68:	895b      	ldrh	r3, [r3, #10]
 8009f6a:	095b      	lsrs	r3, r3, #5
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f76:	fb01 f202 	mul.w	r2, r1, r2
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f040 80fa 	bne.w	800a176 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f92:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10d      	bne.n	8009fbc <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fac:	891b      	ldrh	r3, [r3, #8]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	f0c0 80df 	bcc.w	800a176 <dir_next+0x248>
				return FR_NO_FILE;
 8009fb8:	2304      	movs	r3, #4
 8009fba:	e0fe      	b.n	800a1ba <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc8:	895b      	ldrh	r3, [r3, #10]
 8009fca:	095b      	lsrs	r3, r3, #5
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fe2:	7892      	ldrb	r2, [r2, #2]
 8009fe4:	3a01      	subs	r2, #1
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f040 80c4 	bne.w	800a176 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f7ff fb2e 	bl	8009662 <get_fat>
 800a006:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d801      	bhi.n	800a012 <dir_next+0xe4>
 800a00e:	2302      	movs	r3, #2
 800a010:	e0d3      	b.n	800a1ba <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a018:	d101      	bne.n	800a01e <dir_next+0xf0>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e0cd      	b.n	800a1ba <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	429a      	cmp	r2, r3
 800a030:	f0c0 808e 	bcc.w	800a150 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <dir_next+0x110>
 800a03a:	2304      	movs	r3, #4
 800a03c:	e0bd      	b.n	800a1ba <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f7ff fdb6 	bl	8009bc2 <create_chain>
 800a056:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <dir_next+0x134>
 800a05e:	2307      	movs	r3, #7
 800a060:	e0ab      	b.n	800a1ba <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d101      	bne.n	800a06c <dir_next+0x13e>
 800a068:	2302      	movs	r3, #2
 800a06a:	e0a6      	b.n	800a1ba <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d101      	bne.n	800a078 <dir_next+0x14a>
 800a074:	2301      	movs	r3, #1
 800a076:	e0a0      	b.n	800a1ba <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff f987 	bl	8009394 <sync_window>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <dir_next+0x162>
 800a08c:	2301      	movs	r3, #1
 800a08e:	e094      	b.n	800a1ba <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a6:	895b      	ldrh	r3, [r3, #10]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	f7fe ff5a 	bl	8008f64 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0be:	681c      	ldr	r4, [r3, #0]
 800a0c0:	6979      	ldr	r1, [r7, #20]
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f7ff faa9 	bl	800961a <clust2sect>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800a0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	613b      	str	r3, [r7, #16]
 800a0d4:	e021      	b.n	800a11a <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7ff f950 	bl	8009394 <sync_window>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <dir_next+0x1d0>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e05d      	b.n	800a1ba <dir_next+0x28c>
						dp->fs->winsect++;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a10a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a10c:	3201      	adds	r2, #1
 800a10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a112:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	3301      	adds	r3, #1
 800a118:	613b      	str	r3, [r7, #16]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a126:	789b      	ldrb	r3, [r3, #2]
 800a128:	461a      	mov	r2, r3
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d3d2      	bcc.n	800a0d6 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	1acb      	subs	r3, r1, r3
 800a14a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a14e:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a156:	461a      	mov	r2, r3
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fa57 	bl	800961a <clust2sect>
 800a16c:	4602      	mov	r2, r0
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a174:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	b29a      	uxth	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a198:	895b      	ldrh	r3, [r3, #10]
 800a19a:	095b      	lsrs	r3, r3, #5
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	461a      	mov	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1a6:	fb01 f202 	mul.w	r2, r1, r2
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	015b      	lsls	r3, r3, #5
 800a1ae:	4403      	add	r3, r0
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1b6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	371c      	adds	r7, #28
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd90      	pop	{r4, r7, pc}

0800a1c2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff fddf 	bl	8009d92 <dir_sdi>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d135      	bne.n	800a24a <dir_alloc+0x88>
		n = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	f7ff f91f 	bl	8009438 <move_window>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d121      	bne.n	800a248 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2be5      	cmp	r3, #229	; 0xe5
 800a210:	d006      	beq.n	800a220 <dir_alloc+0x5e>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d107      	bne.n	800a230 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	3301      	adds	r3, #1
 800a224:	60bb      	str	r3, [r7, #8]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d102      	bne.n	800a234 <dir_alloc+0x72>
 800a22e:	e00c      	b.n	800a24a <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a230:	2300      	movs	r3, #0
 800a232:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a234:	2101      	movs	r1, #1
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff fe79 	bl	8009f2e <dir_next>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0cd      	beq.n	800a1e2 <dir_alloc+0x20>
 800a246:	e000      	b.n	800a24a <dir_alloc+0x88>
			if (res != FR_OK) break;
 800a248:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d101      	bne.n	800a254 <dir_alloc+0x92>
 800a250:	2307      	movs	r3, #7
 800a252:	73fb      	strb	r3, [r7, #15]
	return res;
 800a254:	7bfb      	ldrb	r3, [r7, #15]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a25e:	b480      	push	{r7}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	331b      	adds	r3, #27
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	b21a      	sxth	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	331a      	adds	r3, #26
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	b21b      	sxth	r3, r3
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b21b      	sxth	r3, r3
 800a27e:	b29b      	uxth	r3, r3
 800a280:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d10f      	bne.n	800a2ae <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	3315      	adds	r3, #21
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	b21a      	sxth	r2, r3
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	3314      	adds	r3, #20
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b21b      	sxth	r3, r3
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	b21b      	sxth	r3, r3
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]

	return cl;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bc80      	pop	{r7}
 800a2b8:	4770      	bx	lr

0800a2ba <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	331a      	adds	r3, #26
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	331b      	adds	r3, #27
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	0c1a      	lsrs	r2, r3, #16
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3314      	adds	r3, #20
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	0a1b      	lsrs	r3, r3, #8
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3315      	adds	r3, #21
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	701a      	strb	r2, [r3, #0]
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	bc80      	pop	{r7}
 800a304:	4770      	bx	lr
	...

0800a308 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a31a:	1e5a      	subs	r2, r3, #1
 800a31c:	4613      	mov	r3, r2
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a328:	2300      	movs	r3, #0
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	2301      	movs	r3, #1
 800a32e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a330:	4a2b      	ldr	r2, [pc, #172]	; (800a3e0 <cmp_lfn+0xd8>)
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	4413      	add	r3, r2
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	3301      	adds	r3, #1
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	4413      	add	r3, r2
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	b21a      	sxth	r2, r3
 800a344:	4926      	ldr	r1, [pc, #152]	; (800a3e0 <cmp_lfn+0xd8>)
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	440b      	add	r3, r1
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	4619      	mov	r1, r3
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	440b      	add	r3, r1
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	b21b      	sxth	r3, r3
 800a356:	4313      	orrs	r3, r2
 800a358:	b21b      	sxth	r3, r3
 800a35a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a35c:	89fb      	ldrh	r3, [r7, #14]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d019      	beq.n	800a396 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a362:	89bb      	ldrh	r3, [r7, #12]
 800a364:	4618      	mov	r0, r3
 800a366:	f002 fe11 	bl	800cf8c <ff_wtoupper>
 800a36a:	4603      	mov	r3, r0
 800a36c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2bfe      	cmp	r3, #254	; 0xfe
 800a372:	d80e      	bhi.n	800a392 <cmp_lfn+0x8a>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	617a      	str	r2, [r7, #20]
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	4413      	add	r3, r2
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f002 fe02 	bl	800cf8c <ff_wtoupper>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	89fb      	ldrh	r3, [r7, #14]
 800a38e:	4293      	cmp	r3, r2
 800a390:	d008      	beq.n	800a3a4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800a392:	2300      	movs	r3, #0
 800a394:	e01f      	b.n	800a3d6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800a396:	89bb      	ldrh	r3, [r7, #12]
 800a398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d001      	beq.n	800a3a4 <cmp_lfn+0x9c>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e018      	b.n	800a3d6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	613b      	str	r3, [r7, #16]
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2b0c      	cmp	r3, #12
 800a3ae:	d9bf      	bls.n	800a330 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00b      	beq.n	800a3d4 <cmp_lfn+0xcc>
 800a3bc:	89fb      	ldrh	r3, [r7, #14]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d008      	beq.n	800a3d4 <cmp_lfn+0xcc>
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <cmp_lfn+0xcc>
		return 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e000      	b.n	800a3d6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800a3d4:	2301      	movs	r3, #1
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	0800daec 	.word	0x0800daec

0800a3e4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b089      	sub	sp, #36	; 0x24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	71fb      	strb	r3, [r7, #7]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	330d      	adds	r3, #13
 800a3fe:	79ba      	ldrb	r2, [r7, #6]
 800a400:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	330b      	adds	r3, #11
 800a406:	220f      	movs	r2, #15
 800a408:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	330c      	adds	r3, #12
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	331a      	adds	r3, #26
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	331b      	adds	r3, #27
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	1e5a      	subs	r2, r3, #1
 800a426:	4613      	mov	r3, r2
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	82fb      	strh	r3, [r7, #22]
 800a436:	2300      	movs	r3, #0
 800a438:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a43a:	8afb      	ldrh	r3, [r7, #22]
 800a43c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a440:	4293      	cmp	r3, r2
 800a442:	d007      	beq.n	800a454 <fit_lfn+0x70>
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	61fa      	str	r2, [r7, #28]
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a454:	4a1c      	ldr	r2, [pc, #112]	; (800a4c8 <fit_lfn+0xe4>)
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	4413      	add	r3, r2
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	8afa      	ldrh	r2, [r7, #22]
 800a464:	b2d2      	uxtb	r2, r2
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	8afb      	ldrh	r3, [r7, #22]
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	b299      	uxth	r1, r3
 800a46e:	4a16      	ldr	r2, [pc, #88]	; (800a4c8 <fit_lfn+0xe4>)
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	4413      	add	r3, r2
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	3301      	adds	r3, #1
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	4413      	add	r3, r2
 800a47c:	b2ca      	uxtb	r2, r1
 800a47e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a480:	8afb      	ldrh	r3, [r7, #22]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d102      	bne.n	800a48c <fit_lfn+0xa8>
 800a486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a48a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	3301      	adds	r3, #1
 800a490:	61bb      	str	r3, [r7, #24]
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	2b0c      	cmp	r3, #12
 800a496:	d9d0      	bls.n	800a43a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a498:	8afb      	ldrh	r3, [r7, #22]
 800a49a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d006      	beq.n	800a4b0 <fit_lfn+0xcc>
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d103      	bne.n	800a4b8 <fit_lfn+0xd4>
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	79fa      	ldrb	r2, [r7, #7]
 800a4bc:	701a      	strb	r2, [r3, #0]
}
 800a4be:	bf00      	nop
 800a4c0:	3724      	adds	r7, #36	; 0x24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bc80      	pop	{r7}
 800a4c6:	4770      	bx	lr
 800a4c8:	0800daec 	.word	0x0800daec

0800a4cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08c      	sub	sp, #48	; 0x30
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a4da:	220b      	movs	r2, #11
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7fe fd22 	bl	8008f28 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b05      	cmp	r3, #5
 800a4e8:	d92b      	bls.n	800a542 <gen_numname+0x76>
		sr = seq;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a4ee:	e022      	b.n	800a536 <gen_numname+0x6a>
			wc = *lfn++;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	1c9a      	adds	r2, r3, #2
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fe:	e017      	b.n	800a530 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	005a      	lsls	r2, r3, #1
 800a504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	4413      	add	r3, r2
 800a50c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a50e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a510:	085b      	lsrs	r3, r3, #1
 800a512:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <gen_numname+0x5e>
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a524:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a528:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	3301      	adds	r3, #1
 800a52e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	2b0f      	cmp	r3, #15
 800a534:	d9e4      	bls.n	800a500 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1d8      	bne.n	800a4f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a542:	2307      	movs	r3, #7
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	3330      	adds	r3, #48	; 0x30
 800a552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a55a:	2b39      	cmp	r3, #57	; 0x39
 800a55c:	d904      	bls.n	800a568 <gen_numname+0x9c>
 800a55e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a562:	3307      	adds	r3, #7
 800a564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	1e5a      	subs	r2, r3, #1
 800a56c:	62ba      	str	r2, [r7, #40]	; 0x28
 800a56e:	3330      	adds	r3, #48	; 0x30
 800a570:	443b      	add	r3, r7
 800a572:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a576:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	091b      	lsrs	r3, r3, #4
 800a57e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1df      	bne.n	800a546 <gen_numname+0x7a>
	ns[i] = '~';
 800a586:	f107 0214 	add.w	r2, r7, #20
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	4413      	add	r3, r2
 800a58e:	227e      	movs	r2, #126	; 0x7e
 800a590:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a592:	2300      	movs	r3, #0
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
 800a596:	e002      	b.n	800a59e <gen_numname+0xd2>
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	3301      	adds	r3, #1
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
 800a59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d205      	bcs.n	800a5b2 <gen_numname+0xe6>
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	4413      	add	r3, r2
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	2b20      	cmp	r3, #32
 800a5b0:	d1f2      	bne.n	800a598 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	2b07      	cmp	r3, #7
 800a5b6:	d807      	bhi.n	800a5c8 <gen_numname+0xfc>
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800a5be:	3330      	adds	r3, #48	; 0x30
 800a5c0:	443b      	add	r3, r7
 800a5c2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a5c6:	e000      	b.n	800a5ca <gen_numname+0xfe>
 800a5c8:	2120      	movs	r1, #32
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	627a      	str	r2, [r7, #36]	; 0x24
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	460a      	mov	r2, r1
 800a5d6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	2b07      	cmp	r3, #7
 800a5dc:	d9e9      	bls.n	800a5b2 <gen_numname+0xe6>
}
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	3730      	adds	r7, #48	; 0x30
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a5f4:	230b      	movs	r3, #11
 800a5f6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	0852      	lsrs	r2, r2, #1
 800a5fe:	01db      	lsls	r3, r3, #7
 800a600:	4313      	orrs	r3, r2
 800a602:	b2da      	uxtb	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	1c59      	adds	r1, r3, #1
 800a608:	6079      	str	r1, [r7, #4]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	4413      	add	r3, r2
 800a60e:	73fb      	strb	r3, [r7, #15]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	3b01      	subs	r3, #1
 800a614:	60bb      	str	r3, [r7, #8]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1ed      	bne.n	800a5f8 <sum_sfn+0x10>
	return sum;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr

0800a628 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a630:	2100      	movs	r1, #0
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fbad 	bl	8009d92 <dir_sdi>
 800a638:	4603      	mov	r3, r0
 800a63a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <dir_find+0x1e>
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	e0b8      	b.n	800a7b8 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a646:	23ff      	movs	r3, #255	; 0xff
 800a648:	753b      	strb	r3, [r7, #20]
 800a64a:	7d3b      	ldrb	r3, [r7, #20]
 800a64c:	757b      	strb	r3, [r7, #21]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a658:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f7fe fee3 	bl	8009438 <move_window>
 800a672:	4603      	mov	r3, r0
 800a674:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f040 8097 	bne.w	800a7ac <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a68e:	7dbb      	ldrb	r3, [r7, #22]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d102      	bne.n	800a69a <dir_find+0x72>
 800a694:	2304      	movs	r3, #4
 800a696:	75fb      	strb	r3, [r7, #23]
 800a698:	e08d      	b.n	800a7b6 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	330b      	adds	r3, #11
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6a4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a6a6:	7dbb      	ldrb	r3, [r7, #22]
 800a6a8:	2be5      	cmp	r3, #229	; 0xe5
 800a6aa:	d007      	beq.n	800a6bc <dir_find+0x94>
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	f003 0308 	and.w	r3, r3, #8
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00b      	beq.n	800a6ce <dir_find+0xa6>
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
 800a6b8:	2b0f      	cmp	r3, #15
 800a6ba:	d008      	beq.n	800a6ce <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a6bc:	23ff      	movs	r3, #255	; 0xff
 800a6be:	757b      	strb	r3, [r7, #21]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6ca:	849a      	strh	r2, [r3, #36]	; 0x24
 800a6cc:	e063      	b.n	800a796 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	2b0f      	cmp	r3, #15
 800a6d2:	d137      	bne.n	800a744 <dir_find+0x11c>
				if (dp->lfn) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d05a      	beq.n	800a796 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a6e0:	7dbb      	ldrb	r3, [r7, #22]
 800a6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d010      	beq.n	800a70c <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	7b5b      	ldrb	r3, [r3, #13]
 800a6ee:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800a6f0:	7dbb      	ldrb	r3, [r7, #22]
 800a6f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6f6:	75bb      	strb	r3, [r7, #22]
 800a6f8:	7dbb      	ldrb	r3, [r7, #22]
 800a6fa:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a702:	88da      	ldrh	r2, [r3, #6]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a70a:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800a70c:	7dba      	ldrb	r2, [r7, #22]
 800a70e:	7d7b      	ldrb	r3, [r7, #21]
 800a710:	429a      	cmp	r2, r3
 800a712:	d114      	bne.n	800a73e <dir_find+0x116>
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	330d      	adds	r3, #13
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	7d3a      	ldrb	r2, [r7, #20]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d10e      	bne.n	800a73e <dir_find+0x116>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	6939      	ldr	r1, [r7, #16]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff fdec 	bl	800a308 <cmp_lfn>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <dir_find+0x116>
 800a736:	7d7b      	ldrb	r3, [r7, #21]
 800a738:	3b01      	subs	r3, #1
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	e000      	b.n	800a740 <dir_find+0x118>
 800a73e:	23ff      	movs	r3, #255	; 0xff
 800a740:	757b      	strb	r3, [r7, #21]
 800a742:	e028      	b.n	800a796 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a744:	7d7b      	ldrb	r3, [r7, #21]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d107      	bne.n	800a75a <dir_find+0x132>
 800a74a:	6938      	ldr	r0, [r7, #16]
 800a74c:	f7ff ff4c 	bl	800a5e8 <sum_sfn>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	7d3b      	ldrb	r3, [r7, #20]
 800a756:	4293      	cmp	r3, r2
 800a758:	d02a      	beq.n	800a7b0 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	330b      	adds	r3, #11
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10b      	bne.n	800a786 <dir_find+0x15e>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	220b      	movs	r2, #11
 800a778:	4619      	mov	r1, r3
 800a77a:	6938      	ldr	r0, [r7, #16]
 800a77c:	f7fe fc0c 	bl	8008f98 <mem_cmp>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a786:	23ff      	movs	r3, #255	; 0xff
 800a788:	757b      	strb	r3, [r7, #21]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a794:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a796:	2100      	movs	r1, #0
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff fbc8 	bl	8009f2e <dir_next>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f43f af58 	beq.w	800a65a <dir_find+0x32>
 800a7aa:	e004      	b.n	800a7b6 <dir_find+0x18e>
		if (res != FR_OK) break;
 800a7ac:	bf00      	nop
 800a7ae:	e002      	b.n	800a7b6 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a7b0:	bf00      	nop
 800a7b2:	e000      	b.n	800a7b6 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a7b4:	bf00      	nop

	return res;
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b08c      	sub	sp, #48	; 0x30
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	623b      	str	r3, [r7, #32]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800a7dc:	f107 030c 	add.w	r3, r7, #12
 800a7e0:	220c      	movs	r2, #12
 800a7e2:	6a39      	ldr	r1, [r7, #32]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fe fb9f 	bl	8008f28 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d03b      	beq.n	800a86c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	330b      	adds	r3, #11
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a802:	461a      	mov	r2, r3
 800a804:	2300      	movs	r3, #0
 800a806:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800a808:	2301      	movs	r3, #1
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a80c:	e013      	b.n	800a836 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800a80e:	f107 010c 	add.w	r1, r7, #12
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	69fa      	ldr	r2, [r7, #28]
 800a816:	6a38      	ldr	r0, [r7, #32]
 800a818:	f7ff fe58 	bl	800a4cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff ff03 	bl	800a628 <dir_find>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	3301      	adds	r3, #1
 800a834:	62bb      	str	r3, [r7, #40]	; 0x28
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	2b63      	cmp	r3, #99	; 0x63
 800a83a:	d9e8      	bls.n	800a80e <dir_register+0x4e>
 800a83c:	e000      	b.n	800a840 <dir_register+0x80>
			if (res != FR_OK) break;
 800a83e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	2b64      	cmp	r3, #100	; 0x64
 800a844:	d101      	bne.n	800a84a <dir_register+0x8a>
 800a846:	2307      	movs	r3, #7
 800a848:	e0d8      	b.n	800a9fc <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a84a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d002      	beq.n	800a858 <dir_register+0x98>
 800a852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a856:	e0d1      	b.n	800a9fc <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	330b      	adds	r3, #11
 800a85c:	7dfa      	ldrb	r2, [r7, #23]
 800a85e:	701a      	strb	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a866:	461a      	mov	r2, r3
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d014      	beq.n	800a8a0 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800a876:	2300      	movs	r3, #0
 800a878:	62bb      	str	r3, [r7, #40]	; 0x28
 800a87a:	e002      	b.n	800a882 <dir_register+0xc2>
 800a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87e:	3301      	adds	r3, #1
 800a880:	62bb      	str	r3, [r7, #40]	; 0x28
 800a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	69fa      	ldr	r2, [r7, #28]
 800a888:	4413      	add	r3, r2
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1f5      	bne.n	800a87c <dir_register+0xbc>
		nent = (n + 25) / 13;
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	3319      	adds	r3, #25
 800a894:	4a5b      	ldr	r2, [pc, #364]	; (800aa04 <dir_register+0x244>)
 800a896:	fba2 2303 	umull	r2, r3, r2, r3
 800a89a:	089b      	lsrs	r3, r3, #2
 800a89c:	627b      	str	r3, [r7, #36]	; 0x24
 800a89e:	e001      	b.n	800a8a4 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a8a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fc8b 	bl	800a1c2 <dir_alloc>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a8b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d15b      	bne.n	800a972 <dir_register+0x1b2>
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	627b      	str	r3, [r7, #36]	; 0x24
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d055      	beq.n	800a972 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8cc:	88db      	ldrh	r3, [r3, #6]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7ff fa5b 	bl	8009d92 <dir_sdi>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d143      	bne.n	800a972 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fe78 	bl	800a5e8 <sum_sfn>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	4619      	mov	r1, r3
 800a90e:	4610      	mov	r0, r2
 800a910:	f7fe fd92 	bl	8009438 <move_window>
 800a914:	4603      	mov	r3, r0
 800a916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d126      	bne.n	800a970 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a928:	6a18      	ldr	r0, [r3, #32]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a930:	6959      	ldr	r1, [r3, #20]
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	b2da      	uxtb	r2, r3
 800a936:	7efb      	ldrb	r3, [r7, #27]
 800a938:	f7ff fd54 	bl	800a3e4 <fit_lfn>
				dp->fs->wflag = 1;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a948:	2201      	movs	r2, #1
 800a94a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800a94c:	2100      	movs	r1, #0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff faed 	bl	8009f2e <dir_next>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a95a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d107      	bne.n	800a972 <dir_register+0x1b2>
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	3b01      	subs	r3, #1
 800a966:	627b      	str	r3, [r7, #36]	; 0x24
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1c6      	bne.n	800a8fc <dir_register+0x13c>
 800a96e:	e000      	b.n	800a972 <dir_register+0x1b2>
				if (res != FR_OK) break;
 800a970:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800a972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a976:	2b00      	cmp	r3, #0
 800a978:	d13e      	bne.n	800a9f8 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	4619      	mov	r1, r3
 800a98c:	4610      	mov	r0, r2
 800a98e:	f7fe fd53 	bl	8009438 <move_window>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d12b      	bne.n	800a9f8 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fad9 	bl	8008f64 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b8:	6958      	ldr	r0, [r3, #20]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	220b      	movs	r2, #11
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	f7fe faaf 	bl	8008f28 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	330b      	adds	r3, #11
 800a9d4:	781a      	ldrb	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	330c      	adds	r3, #12
 800a9e0:	f002 0218 	and.w	r2, r2, #24
 800a9e4:	b2d2      	uxtb	r2, r2
 800a9e6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800a9f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3730      	adds	r7, #48	; 0x30
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	4ec4ec4f 	.word	0x4ec4ec4f

0800aa08 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08a      	sub	sp, #40	; 0x28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	e002      	b.n	800aa20 <create_name+0x18>
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	613b      	str	r3, [r7, #16]
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2b2f      	cmp	r3, #47	; 0x2f
 800aa26:	d0f8      	beq.n	800aa1a <create_name+0x12>
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b5c      	cmp	r3, #92	; 0x5c
 800aa2e:	d0f4      	beq.n	800aa1a <create_name+0x12>
	lfn = dp->lfn;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	61ba      	str	r2, [r7, #24]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800aa50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa52:	2b1f      	cmp	r3, #31
 800aa54:	d92f      	bls.n	800aab6 <create_name+0xae>
 800aa56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa58:	2b2f      	cmp	r3, #47	; 0x2f
 800aa5a:	d02c      	beq.n	800aab6 <create_name+0xae>
 800aa5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa5e:	2b5c      	cmp	r3, #92	; 0x5c
 800aa60:	d029      	beq.n	800aab6 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2bfe      	cmp	r3, #254	; 0xfe
 800aa66:	d901      	bls.n	800aa6c <create_name+0x64>
			return FR_INVALID_NAME;
 800aa68:	2306      	movs	r3, #6
 800aa6a:	e186      	b.n	800ad7a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aa6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aa72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa74:	2101      	movs	r1, #1
 800aa76:	4618      	mov	r0, r3
 800aa78:	f002 fa4e 	bl	800cf18 <ff_convert>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aa80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <create_name+0x82>
 800aa86:	2306      	movs	r3, #6
 800aa88:	e177      	b.n	800ad7a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800aa8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa8c:	2b7f      	cmp	r3, #127	; 0x7f
 800aa8e:	d809      	bhi.n	800aaa4 <create_name+0x9c>
 800aa90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa92:	4619      	mov	r1, r3
 800aa94:	488e      	ldr	r0, [pc, #568]	; (800acd0 <create_name+0x2c8>)
 800aa96:	f7fe faa5 	bl	8008fe4 <chk_chr>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <create_name+0x9c>
			return FR_INVALID_NAME;
 800aaa0:	2306      	movs	r3, #6
 800aaa2:	e16a      	b.n	800ad7a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	617a      	str	r2, [r7, #20]
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aab2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aab4:	e7c5      	b.n	800aa42 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	441a      	add	r2, r3
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800aac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aac2:	2b1f      	cmp	r3, #31
 800aac4:	d801      	bhi.n	800aaca <create_name+0xc2>
 800aac6:	2304      	movs	r3, #4
 800aac8:	e000      	b.n	800aacc <create_name+0xc4>
 800aaca:	2300      	movs	r3, #0
 800aacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800aad0:	e011      	b.n	800aaf6 <create_name+0xee>
		w = lfn[di - 1];
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aad8:	3b01      	subs	r3, #1
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800aae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aae6:	2b20      	cmp	r3, #32
 800aae8:	d002      	beq.n	800aaf0 <create_name+0xe8>
 800aaea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaec:	2b2e      	cmp	r3, #46	; 0x2e
 800aaee:	d106      	bne.n	800aafe <create_name+0xf6>
		di--;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1ea      	bne.n	800aad2 <create_name+0xca>
 800aafc:	e000      	b.n	800ab00 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800aafe:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <create_name+0x102>
 800ab06:	2306      	movs	r3, #6
 800ab08:	e137      	b.n	800ad7a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	220b      	movs	r2, #11
 800ab20:	2120      	movs	r1, #32
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fa1e 	bl	8008f64 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ab28:	2300      	movs	r3, #0
 800ab2a:	61bb      	str	r3, [r7, #24]
 800ab2c:	e002      	b.n	800ab34 <create_name+0x12c>
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	3301      	adds	r3, #1
 800ab32:	61bb      	str	r3, [r7, #24]
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d0f5      	beq.n	800ab2e <create_name+0x126>
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4413      	add	r3, r2
 800ab4a:	881b      	ldrh	r3, [r3, #0]
 800ab4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab4e:	d0ee      	beq.n	800ab2e <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <create_name+0x162>
 800ab56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab5a:	f043 0303 	orr.w	r3, r3, #3
 800ab5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ab62:	e002      	b.n	800ab6a <create_name+0x162>
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	617b      	str	r3, [r7, #20]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d009      	beq.n	800ab84 <create_name+0x17c>
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab76:	3b01      	subs	r3, #1
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	2b2e      	cmp	r3, #46	; 0x2e
 800ab82:	d1ef      	bne.n	800ab64 <create_name+0x15c>

	b = i = 0; ni = 8;
 800ab84:	2300      	movs	r3, #0
 800ab86:	623b      	str	r3, [r7, #32]
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab8e:	2308      	movs	r3, #8
 800ab90:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	61ba      	str	r2, [r7, #24]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800aba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 8091 	beq.w	800accc <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800abaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abac:	2b20      	cmp	r3, #32
 800abae:	d006      	beq.n	800abbe <create_name+0x1b6>
 800abb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abb2:	2b2e      	cmp	r3, #46	; 0x2e
 800abb4:	d10a      	bne.n	800abcc <create_name+0x1c4>
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d006      	beq.n	800abcc <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800abbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abc2:	f043 0303 	orr.w	r3, r3, #3
 800abc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abca:	e07e      	b.n	800acca <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800abcc:	6a3a      	ldr	r2, [r7, #32]
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d203      	bcs.n	800abdc <create_name+0x1d4>
 800abd4:	69ba      	ldr	r2, [r7, #24]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d123      	bne.n	800ac24 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b0b      	cmp	r3, #11
 800abe0:	d106      	bne.n	800abf0 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800abe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe6:	f043 0303 	orr.w	r3, r3, #3
 800abea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abee:	e076      	b.n	800acde <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d005      	beq.n	800ac04 <create_name+0x1fc>
 800abf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abfc:	f043 0303 	orr.w	r3, r3, #3
 800ac00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d867      	bhi.n	800acdc <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	61bb      	str	r3, [r7, #24]
 800ac10:	2308      	movs	r3, #8
 800ac12:	623b      	str	r3, [r7, #32]
 800ac14:	230b      	movs	r3, #11
 800ac16:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ac18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac22:	e052      	b.n	800acca <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ac24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac26:	2b7f      	cmp	r3, #127	; 0x7f
 800ac28:	d914      	bls.n	800ac54 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ac2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f002 f972 	bl	800cf18 <ff_convert>
 800ac34:	4603      	mov	r3, r0
 800ac36:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ac38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d004      	beq.n	800ac48 <create_name+0x240>
 800ac3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac40:	3b80      	subs	r3, #128	; 0x80
 800ac42:	4a24      	ldr	r2, [pc, #144]	; (800acd4 <create_name+0x2cc>)
 800ac44:	5cd3      	ldrb	r3, [r2, r3]
 800ac46:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ac48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac4c:	f043 0302 	orr.w	r3, r3, #2
 800ac50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ac54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d007      	beq.n	800ac6a <create_name+0x262>
 800ac5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	481e      	ldr	r0, [pc, #120]	; (800acd8 <create_name+0x2d0>)
 800ac60:	f7fe f9c0 	bl	8008fe4 <chk_chr>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d008      	beq.n	800ac7c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ac6a:	235f      	movs	r3, #95	; 0x5f
 800ac6c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ac6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac72:	f043 0303 	orr.w	r3, r3, #3
 800ac76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac7a:	e01b      	b.n	800acb4 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ac7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac7e:	2b40      	cmp	r3, #64	; 0x40
 800ac80:	d909      	bls.n	800ac96 <create_name+0x28e>
 800ac82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac84:	2b5a      	cmp	r3, #90	; 0x5a
 800ac86:	d806      	bhi.n	800ac96 <create_name+0x28e>
					b |= 2;
 800ac88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac8c:	f043 0302 	orr.w	r3, r3, #2
 800ac90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac94:	e00e      	b.n	800acb4 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ac96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac98:	2b60      	cmp	r3, #96	; 0x60
 800ac9a:	d90b      	bls.n	800acb4 <create_name+0x2ac>
 800ac9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac9e:	2b7a      	cmp	r3, #122	; 0x7a
 800aca0:	d808      	bhi.n	800acb4 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800aca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800acae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acb0:	3b20      	subs	r3, #32
 800acb2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acba:	699a      	ldr	r2, [r3, #24]
 800acbc:	6a3b      	ldr	r3, [r7, #32]
 800acbe:	1c59      	adds	r1, r3, #1
 800acc0:	6239      	str	r1, [r7, #32]
 800acc2:	4413      	add	r3, r2
 800acc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800acca:	e762      	b.n	800ab92 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800accc:	bf00      	nop
 800acce:	e006      	b.n	800acde <create_name+0x2d6>
 800acd0:	0800d174 	.word	0x0800d174
 800acd4:	0800da6c 	.word	0x0800da6c
 800acd8:	0800d180 	.word	0x0800d180
			if (si > di) break;			/* No extension */
 800acdc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2be5      	cmp	r3, #229	; 0xe5
 800acea:	d105      	bne.n	800acf8 <create_name+0x2f0>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	2205      	movs	r2, #5
 800acf6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	2b08      	cmp	r3, #8
 800acfc:	d104      	bne.n	800ad08 <create_name+0x300>
 800acfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800ad08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad0c:	f003 030c 	and.w	r3, r3, #12
 800ad10:	2b0c      	cmp	r3, #12
 800ad12:	d005      	beq.n	800ad20 <create_name+0x318>
 800ad14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d105      	bne.n	800ad2c <create_name+0x324>
		cf |= NS_LFN;
 800ad20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad24:	f043 0302 	orr.w	r3, r3, #2
 800ad28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ad2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad30:	f003 0302 	and.w	r3, r3, #2
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d117      	bne.n	800ad68 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ad38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad3c:	f003 0303 	and.w	r3, r3, #3
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d105      	bne.n	800ad50 <create_name+0x348>
 800ad44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad48:	f043 0310 	orr.w	r3, r3, #16
 800ad4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ad50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad54:	f003 030c 	and.w	r3, r3, #12
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d105      	bne.n	800ad68 <create_name+0x360>
 800ad5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad60:	f043 0308 	orr.w	r3, r3, #8
 800ad64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	330b      	adds	r3, #11
 800ad72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ad78:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3728      	adds	r7, #40	; 0x28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop

0800ad84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	2b2f      	cmp	r3, #47	; 0x2f
 800ad94:	d003      	beq.n	800ad9e <follow_path+0x1a>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b5c      	cmp	r3, #92	; 0x5c
 800ad9c:	d102      	bne.n	800ada4 <follow_path+0x20>
		path++;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	3301      	adds	r3, #1
 800ada2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adaa:	461a      	mov	r2, r3
 800adac:	2300      	movs	r3, #0
 800adae:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2b1f      	cmp	r3, #31
 800adb6:	d80c      	bhi.n	800add2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7fe ffe9 	bl	8009d92 <dir_sdi>
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adca:	461a      	mov	r2, r3
 800adcc:	2300      	movs	r3, #0
 800adce:	6153      	str	r3, [r2, #20]
 800add0:	e049      	b.n	800ae66 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800add2:	463b      	mov	r3, r7
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff fe16 	bl	800aa08 <create_name>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d13a      	bne.n	800ae5c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff fc1e 	bl	800a628 <dir_find>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	7adb      	ldrb	r3, [r3, #11]
 800adfa:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	d12b      	bne.n	800ae60 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	f003 0304 	and.w	r3, r3, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d126      	bne.n	800ae60 <follow_path+0xdc>
 800ae12:	2305      	movs	r3, #5
 800ae14:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800ae16:	e023      	b.n	800ae60 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d120      	bne.n	800ae64 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	330b      	adds	r3, #11
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	f003 0310 	and.w	r3, r3, #16
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d102      	bne.n	800ae40 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800ae3a:	2305      	movs	r3, #5
 800ae3c:	73fb      	strb	r3, [r7, #15]
 800ae3e:	e012      	b.n	800ae66 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68b9      	ldr	r1, [r7, #8]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff fa07 	bl	800a25e <ld_clust>
 800ae50:	4602      	mov	r2, r0
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae58:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae5a:	e7ba      	b.n	800add2 <follow_path+0x4e>
			if (res != FR_OK) break;
 800ae5c:	bf00      	nop
 800ae5e:	e002      	b.n	800ae66 <follow_path+0xe2>
				break;
 800ae60:	bf00      	nop
 800ae62:	e000      	b.n	800ae66 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae64:	bf00      	nop
		}
	}

	return res;
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d031      	beq.n	800aeea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	617b      	str	r3, [r7, #20]
 800ae8c:	e002      	b.n	800ae94 <get_ldnumber+0x24>
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	3301      	adds	r3, #1
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b1f      	cmp	r3, #31
 800ae9a:	d903      	bls.n	800aea4 <get_ldnumber+0x34>
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b3a      	cmp	r3, #58	; 0x3a
 800aea2:	d1f4      	bne.n	800ae8e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b3a      	cmp	r3, #58	; 0x3a
 800aeaa:	d11c      	bne.n	800aee6 <get_ldnumber+0x76>
			tp = *path;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	60fa      	str	r2, [r7, #12]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	3b30      	subs	r3, #48	; 0x30
 800aebc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2b09      	cmp	r3, #9
 800aec2:	d80e      	bhi.n	800aee2 <get_ldnumber+0x72>
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d10a      	bne.n	800aee2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d107      	bne.n	800aee2 <get_ldnumber+0x72>
					vol = (int)i;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	3301      	adds	r3, #1
 800aeda:	617b      	str	r3, [r7, #20]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	e002      	b.n	800aeec <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aee6:	2300      	movs	r3, #0
 800aee8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aeea:	693b      	ldr	r3, [r7, #16]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	371c      	adds	r7, #28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bc80      	pop	{r7}
 800aef4:	4770      	bx	lr
	...

0800aef8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af08:	2200      	movs	r2, #0
 800af0a:	711a      	strb	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af12:	461a      	mov	r2, r3
 800af14:	f04f 33ff 	mov.w	r3, #4294967295
 800af18:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7fe fa8b 	bl	8009438 <move_window>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <check_fs+0x34>
		return 3;
 800af28:	2303      	movs	r3, #3
 800af2a:	e04a      	b.n	800afc2 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af32:	3301      	adds	r3, #1
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	021b      	lsls	r3, r3, #8
 800af38:	b21a      	sxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800af40:	b21b      	sxth	r3, r3
 800af42:	4313      	orrs	r3, r2
 800af44:	b21b      	sxth	r3, r3
 800af46:	4a21      	ldr	r2, [pc, #132]	; (800afcc <check_fs+0xd4>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d001      	beq.n	800af50 <check_fs+0x58>
		return 2;
 800af4c:	2302      	movs	r3, #2
 800af4e:	e038      	b.n	800afc2 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3336      	adds	r3, #54	; 0x36
 800af54:	3303      	adds	r3, #3
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	061a      	lsls	r2, r3, #24
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3336      	adds	r3, #54	; 0x36
 800af5e:	3302      	adds	r3, #2
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	041b      	lsls	r3, r3, #16
 800af64:	4313      	orrs	r3, r2
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	3236      	adds	r2, #54	; 0x36
 800af6a:	3201      	adds	r2, #1
 800af6c:	7812      	ldrb	r2, [r2, #0]
 800af6e:	0212      	lsls	r2, r2, #8
 800af70:	4313      	orrs	r3, r2
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800af78:	4313      	orrs	r3, r2
 800af7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af7e:	4a14      	ldr	r2, [pc, #80]	; (800afd0 <check_fs+0xd8>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d101      	bne.n	800af88 <check_fs+0x90>
		return 0;
 800af84:	2300      	movs	r3, #0
 800af86:	e01c      	b.n	800afc2 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3352      	adds	r3, #82	; 0x52
 800af8c:	3303      	adds	r3, #3
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	061a      	lsls	r2, r3, #24
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3352      	adds	r3, #82	; 0x52
 800af96:	3302      	adds	r3, #2
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	041b      	lsls	r3, r3, #16
 800af9c:	4313      	orrs	r3, r2
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	3252      	adds	r2, #82	; 0x52
 800afa2:	3201      	adds	r2, #1
 800afa4:	7812      	ldrb	r2, [r2, #0]
 800afa6:	0212      	lsls	r2, r2, #8
 800afa8:	4313      	orrs	r3, r2
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800afb0:	4313      	orrs	r3, r2
 800afb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afb6:	4a06      	ldr	r2, [pc, #24]	; (800afd0 <check_fs+0xd8>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d101      	bne.n	800afc0 <check_fs+0xc8>
		return 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e000      	b.n	800afc2 <check_fs+0xca>

	return 1;
 800afc0:	2301      	movs	r3, #1
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	ffffaa55 	.word	0xffffaa55
 800afd0:	00544146 	.word	0x00544146

0800afd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b096      	sub	sp, #88	; 0x58
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	4613      	mov	r3, r2
 800afe0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800afe8:	68b8      	ldr	r0, [r7, #8]
 800afea:	f7ff ff41 	bl	800ae70 <get_ldnumber>
 800afee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da01      	bge.n	800affa <find_volume+0x26>
 800aff6:	230b      	movs	r3, #11
 800aff8:	e311      	b.n	800b61e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800affa:	4a98      	ldr	r2, [pc, #608]	; (800b25c <find_volume+0x288>)
 800affc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b002:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <find_volume+0x3a>
 800b00a:	230c      	movs	r3, #12
 800b00c:	e307      	b.n	800b61e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b012:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d01c      	beq.n	800b05a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fd fedf 	bl	8008dec <disk_status>
 800b02e:	4603      	mov	r3, r0
 800b030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10c      	bne.n	800b05a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d007      	beq.n	800b056 <find_volume+0x82>
 800b046:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b04a:	f003 0304 	and.w	r3, r3, #4
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b052:	230a      	movs	r3, #10
 800b054:	e2e3      	b.n	800b61e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800b056:	2300      	movs	r3, #0
 800b058:	e2e1      	b.n	800b61e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b060:	2200      	movs	r2, #0
 800b062:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b066:	b2da      	uxtb	r2, r3
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b06e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b076:	785b      	ldrb	r3, [r3, #1]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fd fed1 	bl	8008e20 <disk_initialize>
 800b07e:	4603      	mov	r3, r0
 800b080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b090:	2303      	movs	r3, #3
 800b092:	e2c4      	b.n	800b61e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b094:	79fb      	ldrb	r3, [r7, #7]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d007      	beq.n	800b0aa <find_volume+0xd6>
 800b09a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800b0a6:	230a      	movs	r3, #10
 800b0a8:	e2b9      	b.n	800b61e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b0:	7858      	ldrb	r0, [r3, #1]
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b8:	330a      	adds	r3, #10
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	2102      	movs	r1, #2
 800b0be:	f7fd ff15 	bl	8008eec <disk_ioctl>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10d      	bne.n	800b0e4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ce:	895b      	ldrh	r3, [r3, #10]
 800b0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0d4:	d306      	bcc.n	800b0e4 <find_volume+0x110>
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0dc:	895b      	ldrh	r3, [r3, #10]
 800b0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e2:	d901      	bls.n	800b0e8 <find_volume+0x114>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e29a      	b.n	800b61e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b0ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0f0:	f7ff ff02 	bl	800aef8 <check_fs>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b0fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d153      	bne.n	800b1aa <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b102:	2300      	movs	r3, #0
 800b104:	643b      	str	r3, [r7, #64]	; 0x40
 800b106:	e028      	b.n	800b15a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b10c:	011b      	lsls	r3, r3, #4
 800b10e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b112:	4413      	add	r3, r2
 800b114:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	3304      	adds	r3, #4
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d012      	beq.n	800b146 <find_volume+0x172>
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	330b      	adds	r3, #11
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	061a      	lsls	r2, r3, #24
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	330a      	adds	r3, #10
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	041b      	lsls	r3, r3, #16
 800b130:	4313      	orrs	r3, r2
 800b132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b134:	3209      	adds	r2, #9
 800b136:	7812      	ldrb	r2, [r2, #0]
 800b138:	0212      	lsls	r2, r2, #8
 800b13a:	4313      	orrs	r3, r2
 800b13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b13e:	3208      	adds	r2, #8
 800b140:	7812      	ldrb	r2, [r2, #0]
 800b142:	431a      	orrs	r2, r3
 800b144:	e000      	b.n	800b148 <find_volume+0x174>
 800b146:	2200      	movs	r2, #0
 800b148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	3358      	adds	r3, #88	; 0x58
 800b14e:	443b      	add	r3, r7
 800b150:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b156:	3301      	adds	r3, #1
 800b158:	643b      	str	r3, [r7, #64]	; 0x40
 800b15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d9d3      	bls.n	800b108 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b160:	2300      	movs	r3, #0
 800b162:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <find_volume+0x19c>
 800b16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b16c:	3b01      	subs	r3, #1
 800b16e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	3358      	adds	r3, #88	; 0x58
 800b176:	443b      	add	r3, r7
 800b178:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b17c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b180:	2b00      	cmp	r3, #0
 800b182:	d005      	beq.n	800b190 <find_volume+0x1bc>
 800b184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b188:	f7ff feb6 	bl	800aef8 <check_fs>
 800b18c:	4603      	mov	r3, r0
 800b18e:	e000      	b.n	800b192 <find_volume+0x1be>
 800b190:	2302      	movs	r3, #2
 800b192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d005      	beq.n	800b1aa <find_volume+0x1d6>
 800b19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d9e2      	bls.n	800b170 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d101      	bne.n	800b1b6 <find_volume+0x1e2>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e233      	b.n	800b61e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b1b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <find_volume+0x1ee>
 800b1be:	230d      	movs	r3, #13
 800b1c0:	e22d      	b.n	800b61e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	7b1b      	ldrb	r3, [r3, #12]
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	b21a      	sxth	r2, r3
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	7adb      	ldrb	r3, [r3, #11]
 800b1ce:	b21b      	sxth	r3, r3
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	b21a      	sxth	r2, r3
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1da:	895b      	ldrh	r3, [r3, #10]
 800b1dc:	b21b      	sxth	r3, r3
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d001      	beq.n	800b1e6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800b1e2:	230d      	movs	r3, #13
 800b1e4:	e21b      	b.n	800b61e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	7ddb      	ldrb	r3, [r3, #23]
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	b21a      	sxth	r2, r3
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	7d9b      	ldrb	r3, [r3, #22]
 800b1f2:	b21b      	sxth	r3, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	b21b      	sxth	r3, r3
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d112      	bne.n	800b228 <find_volume+0x254>
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b208:	061a      	lsls	r2, r3, #24
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b210:	041b      	lsls	r3, r3, #16
 800b212:	4313      	orrs	r3, r2
 800b214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b216:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b21a:	0212      	lsls	r2, r2, #8
 800b21c:	4313      	orrs	r3, r2
 800b21e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b220:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b224:	4313      	orrs	r3, r2
 800b226:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b22e:	461a      	mov	r2, r3
 800b230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b232:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b236:	7c1a      	ldrb	r2, [r3, #16]
 800b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b246:	78db      	ldrb	r3, [r3, #3]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d009      	beq.n	800b260 <find_volume+0x28c>
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b252:	78db      	ldrb	r3, [r3, #3]
 800b254:	2b02      	cmp	r3, #2
 800b256:	d003      	beq.n	800b260 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800b258:	230d      	movs	r3, #13
 800b25a:	e1e0      	b.n	800b61e <find_volume+0x64a>
 800b25c:	2000092c 	.word	0x2000092c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b266:	78db      	ldrb	r3, [r3, #3]
 800b268:	461a      	mov	r2, r3
 800b26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26c:	fb02 f303 	mul.w	r3, r2, r3
 800b270:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	7b5a      	ldrb	r2, [r3, #13]
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b27c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b284:	789b      	ldrb	r3, [r3, #2]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00c      	beq.n	800b2a4 <find_volume+0x2d0>
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b290:	789b      	ldrb	r3, [r3, #2]
 800b292:	461a      	mov	r2, r3
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b29a:	789b      	ldrb	r3, [r3, #2]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	4013      	ands	r3, r2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d001      	beq.n	800b2a8 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800b2a4:	230d      	movs	r3, #13
 800b2a6:	e1ba      	b.n	800b61e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	7c9b      	ldrb	r3, [r3, #18]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	b21a      	sxth	r2, r3
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	7c5b      	ldrb	r3, [r3, #17]
 800b2b4:	b21b      	sxth	r3, r3
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	b21b      	sxth	r3, r3
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ca:	891b      	ldrh	r3, [r3, #8]
 800b2cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b2d2:	8952      	ldrh	r2, [r2, #10]
 800b2d4:	0952      	lsrs	r2, r2, #5
 800b2d6:	b292      	uxth	r2, r2
 800b2d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2dc:	fb01 f202 	mul.w	r2, r1, r2
 800b2e0:	1a9b      	subs	r3, r3, r2
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800b2e8:	230d      	movs	r3, #13
 800b2ea:	e198      	b.n	800b61e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	7d1b      	ldrb	r3, [r3, #20]
 800b2f0:	021b      	lsls	r3, r3, #8
 800b2f2:	b21a      	sxth	r2, r3
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	7cdb      	ldrb	r3, [r3, #19]
 800b2f8:	b21b      	sxth	r3, r3
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	b21b      	sxth	r3, r3
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b304:	2b00      	cmp	r3, #0
 800b306:	d112      	bne.n	800b32e <find_volume+0x35a>
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b30e:	061a      	lsls	r2, r3, #24
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b316:	041b      	lsls	r3, r3, #16
 800b318:	4313      	orrs	r3, r2
 800b31a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b31c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b320:	0212      	lsls	r2, r2, #8
 800b322:	4313      	orrs	r3, r2
 800b324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b326:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b330:	7bdb      	ldrb	r3, [r3, #15]
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	b21a      	sxth	r2, r3
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	7b9b      	ldrb	r3, [r3, #14]
 800b33a:	b21b      	sxth	r3, r3
 800b33c:	4313      	orrs	r3, r2
 800b33e:	b21b      	sxth	r3, r3
 800b340:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <find_volume+0x378>
 800b348:	230d      	movs	r3, #13
 800b34a:	e168      	b.n	800b61e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b34c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b350:	4413      	add	r3, r2
 800b352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b354:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b358:	8911      	ldrh	r1, [r2, #8]
 800b35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b35c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b360:	8952      	ldrh	r2, [r2, #10]
 800b362:	0952      	lsrs	r2, r2, #5
 800b364:	b292      	uxth	r2, r2
 800b366:	fbb1 f2f2 	udiv	r2, r1, r2
 800b36a:	b292      	uxth	r2, r2
 800b36c:	4413      	add	r3, r2
 800b36e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	429a      	cmp	r2, r3
 800b376:	d201      	bcs.n	800b37c <find_volume+0x3a8>
 800b378:	230d      	movs	r3, #13
 800b37a:	e150      	b.n	800b61e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b37c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b384:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b388:	7892      	ldrb	r2, [r2, #2]
 800b38a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b38e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <find_volume+0x3c6>
 800b396:	230d      	movs	r3, #13
 800b398:	e141      	b.n	800b61e <find_volume+0x64a>
	fmt = FS_FAT12;
 800b39a:	2301      	movs	r3, #1
 800b39c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d902      	bls.n	800b3b0 <find_volume+0x3dc>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d902      	bls.n	800b3c0 <find_volume+0x3ec>
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	3302      	adds	r3, #2
 800b3c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b3ca:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d6:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b3d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3dc:	4413      	add	r3, r2
 800b3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b3e4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800b3e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	4413      	add	r3, r2
 800b3ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b3f2:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800b3f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3f8:	2b03      	cmp	r3, #3
 800b3fa:	d124      	bne.n	800b446 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b402:	891b      	ldrh	r3, [r3, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <find_volume+0x438>
 800b408:	230d      	movs	r3, #13
 800b40a:	e108      	b.n	800b61e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b412:	061a      	lsls	r2, r3, #24
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b41a:	041b      	lsls	r3, r3, #16
 800b41c:	4313      	orrs	r3, r2
 800b41e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b420:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b424:	0212      	lsls	r2, r2, #8
 800b426:	4313      	orrs	r3, r2
 800b428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b42a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b42e:	4313      	orrs	r3, r2
 800b430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b436:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	647b      	str	r3, [r7, #68]	; 0x44
 800b444:	e02b      	b.n	800b49e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b44c:	891b      	ldrh	r3, [r3, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <find_volume+0x482>
 800b452:	230d      	movs	r3, #13
 800b454:	e0e3      	b.n	800b61e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b45c:	6a1a      	ldr	r2, [r3, #32]
 800b45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b460:	4413      	add	r3, r2
 800b462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b468:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b46a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d105      	bne.n	800b47e <find_volume+0x4aa>
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	e00e      	b.n	800b49c <find_volume+0x4c8>
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b484:	695a      	ldr	r2, [r3, #20]
 800b486:	4613      	mov	r3, r2
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	4413      	add	r3, r2
 800b48c:	085a      	lsrs	r2, r3, #1
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b49c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ac:	895b      	ldrh	r3, [r3, #10]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b2:	440b      	add	r3, r1
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4b8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800b4bc:	8949      	ldrh	r1, [r1, #10]
 800b4be:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d201      	bcs.n	800b4ca <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800b4c6:	230d      	movs	r3, #13
 800b4c8:	e0a9      	b.n	800b61e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d6:	6113      	str	r3, [r2, #16]
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4e6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ee:	2280      	movs	r2, #128	; 0x80
 800b4f0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b4f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d17a      	bne.n	800b5f0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b500:	021b      	lsls	r3, r3, #8
 800b502:	b21a      	sxth	r2, r3
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b50a:	b21b      	sxth	r3, r3
 800b50c:	4313      	orrs	r3, r2
 800b50e:	b21b      	sxth	r3, r3
 800b510:	2b01      	cmp	r3, #1
 800b512:	d16d      	bne.n	800b5f0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b516:	3301      	adds	r3, #1
 800b518:	4619      	mov	r1, r3
 800b51a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b51c:	f7fd ff8c 	bl	8009438 <move_window>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d164      	bne.n	800b5f0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800b526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b52c:	2200      	movs	r2, #0
 800b52e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	b21a      	sxth	r2, r3
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b540:	b21b      	sxth	r3, r3
 800b542:	4313      	orrs	r3, r2
 800b544:	b21b      	sxth	r3, r3
 800b546:	4a38      	ldr	r2, [pc, #224]	; (800b628 <find_volume+0x654>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d151      	bne.n	800b5f0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54e:	78db      	ldrb	r3, [r3, #3]
 800b550:	061a      	lsls	r2, r3, #24
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	789b      	ldrb	r3, [r3, #2]
 800b556:	041b      	lsls	r3, r3, #16
 800b558:	4313      	orrs	r3, r2
 800b55a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b55c:	7852      	ldrb	r2, [r2, #1]
 800b55e:	0212      	lsls	r2, r2, #8
 800b560:	4313      	orrs	r3, r2
 800b562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b564:	7812      	ldrb	r2, [r2, #0]
 800b566:	4313      	orrs	r3, r2
 800b568:	4a30      	ldr	r2, [pc, #192]	; (800b62c <find_volume+0x658>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d140      	bne.n	800b5f0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b574:	061a      	lsls	r2, r3, #24
 800b576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b578:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b57c:	041b      	lsls	r3, r3, #16
 800b57e:	4313      	orrs	r3, r2
 800b580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b582:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b586:	0212      	lsls	r2, r2, #8
 800b588:	4313      	orrs	r3, r2
 800b58a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b58c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b590:	4313      	orrs	r3, r2
 800b592:	4a27      	ldr	r2, [pc, #156]	; (800b630 <find_volume+0x65c>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d12b      	bne.n	800b5f0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b59e:	061a      	lsls	r2, r3, #24
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b5a6:	041b      	lsls	r3, r3, #16
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5ac:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b5b0:	0212      	lsls	r2, r2, #8
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5b6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b5c2:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b5ca:	061a      	lsls	r2, r3, #24
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ce:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b5d2:	041b      	lsls	r3, r3, #16
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5d8:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b5dc:	0212      	lsls	r2, r2, #8
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5e2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b5ee:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5fc:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <find_volume+0x660>)
 800b600:	881b      	ldrh	r3, [r3, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <find_volume+0x660>)
 800b608:	801a      	strh	r2, [r3, #0]
 800b60a:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <find_volume+0x660>)
 800b60c:	881a      	ldrh	r2, [r3, #0]
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b614:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b616:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b618:	f7fd fe92 	bl	8009340 <clear_lock>
#endif

	return FR_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3758      	adds	r7, #88	; 0x58
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	ffffaa55 	.word	0xffffaa55
 800b62c:	41615252 	.word	0x41615252
 800b630:	61417272 	.word	0x61417272
 800b634:	20000930 	.word	0x20000930

0800b638 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d02a      	beq.n	800b6a0 <validate+0x68>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d024      	beq.n	800b6a0 <validate+0x68>
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01b      	beq.n	800b6a0 <validate+0x68>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b674:	88da      	ldrh	r2, [r3, #6]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b67c:	889b      	ldrh	r3, [r3, #4]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d10e      	bne.n	800b6a0 <validate+0x68>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b68e:	785b      	ldrb	r3, [r3, #1]
 800b690:	4618      	mov	r0, r3
 800b692:	f7fd fbab 	bl	8008dec <disk_status>
 800b696:	4603      	mov	r3, r0
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800b6a0:	2309      	movs	r3, #9
 800b6a2:	e000      	b.n	800b6a6 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b6c2:	f107 0310 	add.w	r3, r7, #16
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7ff fbd2 	bl	800ae70 <get_ldnumber>
 800b6cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	da01      	bge.n	800b6d8 <f_mount+0x28>
 800b6d4:	230b      	movs	r3, #11
 800b6d6:	e02f      	b.n	800b738 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b6d8:	4a19      	ldr	r2, [pc, #100]	; (800b740 <f_mount+0x90>)
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d007      	beq.n	800b6f8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800b6e8:	69b8      	ldr	r0, [r7, #24]
 800b6ea:	f7fd fe29 	bl	8009340 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d004      	beq.n	800b708 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b704:	2200      	movs	r2, #0
 800b706:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	490d      	ldr	r1, [pc, #52]	; (800b740 <f_mount+0x90>)
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <f_mount+0x6e>
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d001      	beq.n	800b722 <f_mount+0x72>
 800b71e:	2300      	movs	r3, #0
 800b720:	e00a      	b.n	800b738 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b722:	f107 0108 	add.w	r1, r7, #8
 800b726:	f107 030c 	add.w	r3, r7, #12
 800b72a:	2200      	movs	r2, #0
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fc51 	bl	800afd4 <find_volume>
 800b732:	4603      	mov	r3, r0
 800b734:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b736:	7dfb      	ldrb	r3, [r7, #23]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3720      	adds	r7, #32
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	2000092c 	.word	0x2000092c

0800b744 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b752:	f843 0c4c 	str.w	r0, [r3, #-76]
 800b756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b75a:	f843 1c50 	str.w	r1, [r3, #-80]
 800b75e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b762:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b76a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <f_open+0x32>
 800b772:	2309      	movs	r3, #9
 800b774:	e2f7      	b.n	800bd66 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800b776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b77a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b782:	461a      	mov	r2, r3
 800b784:	2300      	movs	r3, #0
 800b786:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b78c:	461a      	mov	r2, r3
 800b78e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b792:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b796:	f003 031f 	and.w	r3, r3, #31
 800b79a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b79e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7a2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b7a6:	f023 0301 	bic.w	r3, r3, #1
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	f107 0118 	add.w	r1, r7, #24
 800b7b0:	3910      	subs	r1, #16
 800b7b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7b6:	3b18      	subs	r3, #24
 800b7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7ff fc09 	bl	800afd4 <find_volume>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b7c8:	f102 0217 	add.w	r2, r2, #23
 800b7cc:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b7ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b7d2:	f103 0317 	add.w	r3, r3, #23
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f040 82bf 	bne.w	800bd5c <f_open+0x618>
		INIT_BUF(dj);
 800b7de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f107 0318 	add.w	r3, r7, #24
 800b7e8:	3b04      	subs	r3, #4
 800b7ea:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800b7ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4bd4      	ldr	r3, [pc, #848]	; (800bb48 <f_open+0x404>)
 800b7f6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7fe:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800b802:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b806:	3b18      	subs	r3, #24
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff faba 	bl	800ad84 <follow_path>
 800b810:	4603      	mov	r3, r0
 800b812:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b816:	f102 0217 	add.w	r2, r2, #23
 800b81a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800b81c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b820:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800b824:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b828:	f102 0210 	add.w	r2, r2, #16
 800b82c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b82e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b832:	f103 0317 	add.w	r3, r3, #23
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d126      	bne.n	800b88a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800b83c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b840:	f103 0310 	add.w	r3, r3, #16
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <f_open+0x114>
				res = FR_INVALID_NAME;
 800b84a:	2306      	movs	r3, #6
 800b84c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b850:	f102 0217 	add.w	r2, r2, #23
 800b854:	7013      	strb	r3, [r2, #0]
 800b856:	e018      	b.n	800b88a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b858:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b85c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b860:	f023 0301 	bic.w	r3, r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	bf14      	ite	ne
 800b868:	2301      	movne	r3, #1
 800b86a:	2300      	moveq	r3, #0
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	461a      	mov	r2, r3
 800b870:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b874:	3b18      	subs	r3, #24
 800b876:	4611      	mov	r1, r2
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fd fbcd 	bl	8009018 <chk_lock>
 800b87e:	4603      	mov	r3, r0
 800b880:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b884:	f102 0217 	add.w	r2, r2, #23
 800b888:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b88a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b88e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b892:	f003 031c 	and.w	r3, r3, #28
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 813c 	beq.w	800bb14 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800b89c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8a0:	f103 0317 	add.w	r3, r3, #23
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d02e      	beq.n	800b908 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b8aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8ae:	f103 0317 	add.w	r3, r3, #23
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b04      	cmp	r3, #4
 800b8b6:	d112      	bne.n	800b8de <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b8b8:	f7fd fc1e 	bl	80090f8 <enq_lock>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d007      	beq.n	800b8d2 <f_open+0x18e>
 800b8c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b8c6:	3b18      	subs	r3, #24
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe ff79 	bl	800a7c0 <dir_register>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	e000      	b.n	800b8d4 <f_open+0x190>
 800b8d2:	2312      	movs	r3, #18
 800b8d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b8d8:	f102 0217 	add.w	r2, r2, #23
 800b8dc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b8de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8e8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b8ec:	f043 0308 	orr.w	r3, r3, #8
 800b8f0:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800b8f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8f8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800b8fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b900:	f102 0210 	add.w	r2, r2, #16
 800b904:	6013      	str	r3, [r2, #0]
 800b906:	e01f      	b.n	800b948 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b908:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b90c:	f103 0310 	add.w	r3, r3, #16
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	330b      	adds	r3, #11
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	f003 0311 	and.w	r3, r3, #17
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d006      	beq.n	800b92c <f_open+0x1e8>
					res = FR_DENIED;
 800b91e:	2307      	movs	r3, #7
 800b920:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b924:	f102 0217 	add.w	r2, r2, #23
 800b928:	7013      	strb	r3, [r2, #0]
 800b92a:	e00d      	b.n	800b948 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b92c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b930:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d005      	beq.n	800b948 <f_open+0x204>
						res = FR_EXIST;
 800b93c:	2308      	movs	r3, #8
 800b93e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b942:	f102 0217 	add.w	r2, r2, #23
 800b946:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b948:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b94c:	f103 0317 	add.w	r3, r3, #23
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	f040 8113 	bne.w	800bb7e <f_open+0x43a>
 800b958:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b95c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b960:	f003 0308 	and.w	r3, r3, #8
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 810a 	beq.w	800bb7e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800b96a:	f7fd f9e3 	bl	8008d34 <get_fattime>
 800b96e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b972:	f103 030c 	add.w	r3, r3, #12
 800b976:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b978:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b97c:	f103 0310 	add.w	r3, r3, #16
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	330e      	adds	r3, #14
 800b984:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b988:	f102 020c 	add.w	r2, r2, #12
 800b98c:	6812      	ldr	r2, [r2, #0]
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b996:	f103 030c 	add.w	r3, r3, #12
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	0a1b      	lsrs	r3, r3, #8
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9a6:	f103 0310 	add.w	r3, r3, #16
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	330f      	adds	r3, #15
 800b9ae:	b2d2      	uxtb	r2, r2
 800b9b0:	701a      	strb	r2, [r3, #0]
 800b9b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9b6:	f103 030c 	add.w	r3, r3, #12
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	0c1a      	lsrs	r2, r3, #16
 800b9be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9c2:	f103 0310 	add.w	r3, r3, #16
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3310      	adds	r3, #16
 800b9ca:	b2d2      	uxtb	r2, r2
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9d2:	f103 030c 	add.w	r3, r3, #12
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	0e1a      	lsrs	r2, r3, #24
 800b9da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9de:	f103 0310 	add.w	r3, r3, #16
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3311      	adds	r3, #17
 800b9e6:	b2d2      	uxtb	r2, r2
 800b9e8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b9ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9ee:	f103 0310 	add.w	r3, r3, #16
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	330b      	adds	r3, #11
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b9fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9fe:	f103 0310 	add.w	r3, r3, #16
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	331c      	adds	r3, #28
 800ba06:	2200      	movs	r2, #0
 800ba08:	701a      	strb	r2, [r3, #0]
 800ba0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba0e:	f103 0310 	add.w	r3, r3, #16
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	331d      	adds	r3, #29
 800ba16:	2200      	movs	r2, #0
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba1e:	f103 0310 	add.w	r3, r3, #16
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	331e      	adds	r3, #30
 800ba26:	2200      	movs	r2, #0
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba2e:	f103 0310 	add.w	r3, r3, #16
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	331f      	adds	r3, #31
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800ba3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba3e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800ba42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ba46:	f102 0210 	add.w	r2, r2, #16
 800ba4a:	6811      	ldr	r1, [r2, #0]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fc06 	bl	800a25e <ld_clust>
 800ba52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba56:	f103 0308 	add.w	r3, r3, #8
 800ba5a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba62:	f103 0310 	add.w	r3, r3, #16
 800ba66:	6818      	ldr	r0, [r3, #0]
 800ba68:	f7fe fc27 	bl	800a2ba <st_clust>
				dj.fs->wflag = 1;
 800ba6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba70:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800ba74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba78:	2201      	movs	r2, #1
 800ba7a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800ba7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba80:	f103 0308 	add.w	r3, r3, #8
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d079      	beq.n	800bb7e <f_open+0x43a>
					dw = dj.fs->winsect;
 800ba8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba8e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800ba92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ba9c:	f102 020c 	add.w	r2, r2, #12
 800baa0:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800baa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800baa6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800baaa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800baae:	f102 0208 	add.w	r2, r2, #8
 800bab2:	6811      	ldr	r1, [r2, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fe f823 	bl	8009b00 <remove_chain>
 800baba:	4603      	mov	r3, r0
 800babc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bac0:	f102 0217 	add.w	r2, r2, #23
 800bac4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800bac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800baca:	f103 0317 	add.w	r3, r3, #23
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d154      	bne.n	800bb7e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bad8:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800badc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bae0:	f103 0308 	add.w	r3, r3, #8
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800baec:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800baee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800baf2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800baf6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bafa:	f102 020c 	add.w	r2, r2, #12
 800bafe:	6811      	ldr	r1, [r2, #0]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fd fc99 	bl	8009438 <move_window>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bb0c:	f102 0217 	add.w	r2, r2, #23
 800bb10:	7013      	strb	r3, [r2, #0]
 800bb12:	e034      	b.n	800bb7e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bb14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb18:	f103 0317 	add.w	r3, r3, #23
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d12d      	bne.n	800bb7e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800bb22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb26:	f103 0310 	add.w	r3, r3, #16
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	330b      	adds	r3, #11
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	f003 0310 	and.w	r3, r3, #16
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d009      	beq.n	800bb4c <f_open+0x408>
					res = FR_NO_FILE;
 800bb38:	2304      	movs	r3, #4
 800bb3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bb3e:	f102 0217 	add.w	r2, r2, #23
 800bb42:	7013      	strb	r3, [r2, #0]
 800bb44:	e01b      	b.n	800bb7e <f_open+0x43a>
 800bb46:	bf00      	nop
 800bb48:	2000094c 	.word	0x2000094c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bb4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bb50:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bb54:	f003 0302 	and.w	r3, r3, #2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d010      	beq.n	800bb7e <f_open+0x43a>
 800bb5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb60:	f103 0310 	add.w	r3, r3, #16
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	330b      	adds	r3, #11
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d005      	beq.n	800bb7e <f_open+0x43a>
						res = FR_DENIED;
 800bb72:	2307      	movs	r3, #7
 800bb74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bb78:	f102 0217 	add.w	r2, r2, #23
 800bb7c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800bb7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb82:	f103 0317 	add.w	r3, r3, #23
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d157      	bne.n	800bc3c <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bb90:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00a      	beq.n	800bbb2 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800bb9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bba0:	461a      	mov	r2, r3
 800bba2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bba6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bbaa:	f043 0320 	orr.w	r3, r3, #32
 800bbae:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bbb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bbb6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800bbba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bbc4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800bbc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbcc:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800bbce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bbd2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bbd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbda:	461a      	mov	r2, r3
 800bbdc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bbe0:	f103 0310 	add.w	r3, r3, #16
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bbe8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bbec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bbf0:	f023 0301 	bic.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	bf14      	ite	ne
 800bbf8:	2301      	movne	r3, #1
 800bbfa:	2300      	moveq	r3, #0
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bc04:	3b18      	subs	r3, #24
 800bc06:	4611      	mov	r1, r2
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fd fa99 	bl	8009140 <inc_lock>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc14:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1c:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800bc1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc22:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bc26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d105      	bne.n	800bc3c <f_open+0x4f8>
 800bc30:	2302      	movs	r3, #2
 800bc32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bc36:	f102 0217 	add.w	r2, r2, #23
 800bc3a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bc3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bc40:	f103 0317 	add.w	r3, r3, #23
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f040 8088 	bne.w	800bd5c <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800bc4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc50:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bc54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc5e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800bc62:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800bc64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc68:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bc6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc70:	2200      	movs	r2, #0
 800bc72:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bc74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc78:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800bc7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bc80:	f102 0210 	add.w	r2, r2, #16
 800bc84:	6811      	ldr	r1, [r2, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fe fae9 	bl	800a25e <ld_clust>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc92:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bc96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bc9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bca0:	f103 0310 	add.w	r3, r3, #16
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	331f      	adds	r3, #31
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	061a      	lsls	r2, r3, #24
 800bcac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bcb0:	f103 0310 	add.w	r3, r3, #16
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	331e      	adds	r3, #30
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	041b      	lsls	r3, r3, #16
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bcc2:	f102 0210 	add.w	r2, r2, #16
 800bcc6:	6812      	ldr	r2, [r2, #0]
 800bcc8:	321d      	adds	r2, #29
 800bcca:	7812      	ldrb	r2, [r2, #0]
 800bccc:	0212      	lsls	r2, r2, #8
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bcd4:	f102 0210 	add.w	r2, r2, #16
 800bcd8:	6812      	ldr	r2, [r2, #0]
 800bcda:	321c      	adds	r2, #28
 800bcdc:	7812      	ldrb	r2, [r2, #0]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bce4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800bce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bcec:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800bcee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bcf2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bcf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800bd00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd04:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bd08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	2300      	movs	r3, #0
 800bd10:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bd12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd16:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bd1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd1e:	461a      	mov	r2, r3
 800bd20:	2300      	movs	r3, #0
 800bd22:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bd24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd28:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800bd2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bd30:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800bd34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd38:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800bd3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd3e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bd42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd4c:	88da      	ldrh	r2, [r3, #6]
 800bd4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd52:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd5a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800bd5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bd60:	f103 0317 	add.w	r3, r3, #23
 800bd64:	781b      	ldrb	r3, [r3, #0]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop

0800bd74 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08a      	sub	sp, #40	; 0x28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f7ff fc53 	bl	800b638 <validate>
 800bd92:	4603      	mov	r3, r0
 800bd94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <f_write+0x2c>
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	e21e      	b.n	800c1de <f_write+0x46a>
	if (fp->err)							/* Check error */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda6:	79db      	ldrb	r3, [r3, #7]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb2:	79db      	ldrb	r3, [r3, #7]
 800bdb4:	e213      	b.n	800c1de <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdbc:	799b      	ldrb	r3, [r3, #6]
 800bdbe:	f003 0302 	and.w	r3, r3, #2
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800bdc6:	2307      	movs	r3, #7
 800bdc8:	e209      	b.n	800c1de <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd0:	689a      	ldr	r2, [r3, #8]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	441a      	add	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	f080 81d9 	bcs.w	800c196 <f_write+0x422>
 800bde4:	2300      	movs	r3, #0
 800bde6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800bde8:	e1d5      	b.n	800c196 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bdf8:	6812      	ldr	r2, [r2, #0]
 800bdfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bdfe:	8952      	ldrh	r2, [r2, #10]
 800be00:	fbb3 f1f2 	udiv	r1, r3, r2
 800be04:	fb01 f202 	mul.w	r2, r1, r2
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f040 8169 	bne.w	800c0e2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be1e:	6812      	ldr	r2, [r2, #0]
 800be20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be24:	8952      	ldrh	r2, [r2, #10]
 800be26:	fbb3 f3f2 	udiv	r3, r3, r2
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be38:	789b      	ldrb	r3, [r3, #2]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	4013      	ands	r3, r2
 800be40:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800be42:	7dbb      	ldrb	r3, [r7, #22]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d15f      	bne.n	800bf08 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d111      	bne.n	800be78 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	2b00      	cmp	r3, #0
 800be62:	d126      	bne.n	800beb2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2100      	movs	r1, #0
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fd fea7 	bl	8009bc2 <create_chain>
 800be74:	6278      	str	r0, [r7, #36]	; 0x24
 800be76:	e01c      	b.n	800beb2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d009      	beq.n	800be98 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	4619      	mov	r1, r3
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f7fd ff3f 	bl	8009d12 <clmt_clust>
 800be94:	6278      	str	r0, [r7, #36]	; 0x24
 800be96:	e00c      	b.n	800beb2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f7fd fe89 	bl	8009bc2 <create_chain>
 800beb0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 8173 	beq.w	800c1a0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d106      	bne.n	800bece <f_write+0x15a>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec6:	2202      	movs	r2, #2
 800bec8:	71da      	strb	r2, [r3, #7]
 800beca:	2302      	movs	r3, #2
 800becc:	e187      	b.n	800c1de <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d106      	bne.n	800bee4 <f_write+0x170>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bedc:	2201      	movs	r2, #1
 800bede:	71da      	strb	r2, [r3, #7]
 800bee0:	2301      	movs	r3, #1
 800bee2:	e17c      	b.n	800c1de <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beea:	461a      	mov	r2, r3
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d105      	bne.n	800bf08 <f_write+0x194>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf02:	461a      	mov	r2, r3
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0e:	799b      	ldrb	r3, [r3, #6]
 800bf10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d023      	beq.n	800bf60 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf24:	7858      	ldrb	r0, [r3, #1]
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf2e:	699a      	ldr	r2, [r3, #24]
 800bf30:	2301      	movs	r3, #1
 800bf32:	f7fc ffbb 	bl	8008eac <disk_write>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d006      	beq.n	800bf4a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf42:	2201      	movs	r2, #1
 800bf44:	71da      	strb	r2, [r3, #7]
 800bf46:	2301      	movs	r3, #1
 800bf48:	e149      	b.n	800c1de <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf50:	799b      	ldrb	r3, [r3, #6]
 800bf52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf5e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7fd fb51 	bl	800961a <clust2sect>
 800bf78:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d106      	bne.n	800bf8e <f_write+0x21a>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf86:	2202      	movs	r2, #2
 800bf88:	71da      	strb	r2, [r3, #7]
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	e127      	b.n	800c1de <f_write+0x46a>
			sect += csect;
 800bf8e:	7dbb      	ldrb	r3, [r7, #22]
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4413      	add	r3, r2
 800bf94:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa2:	895b      	ldrh	r3, [r3, #10]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfac:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d069      	beq.n	800c088 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bfb4:	7dba      	ldrb	r2, [r7, #22]
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	4413      	add	r3, r2
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bfc0:	6812      	ldr	r2, [r2, #0]
 800bfc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bfc6:	7892      	ldrb	r2, [r2, #2]
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d90a      	bls.n	800bfe2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfd8:	789b      	ldrb	r3, [r3, #2]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	7dbb      	ldrb	r3, [r7, #22]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfee:	7858      	ldrb	r0, [r3, #1]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	69b9      	ldr	r1, [r7, #24]
 800bff6:	f7fc ff59 	bl	8008eac <disk_write>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d006      	beq.n	800c00e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c006:	2201      	movs	r2, #1
 800c008:	71da      	strb	r2, [r3, #7]
 800c00a:	2301      	movs	r3, #1
 800c00c:	e0e7      	b.n	800c1de <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c014:	699a      	ldr	r2, [r3, #24]
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d926      	bls.n	800c06e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c028:	699a      	ldr	r2, [r3, #24]
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c034:	6812      	ldr	r2, [r2, #0]
 800c036:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c03a:	8952      	ldrh	r2, [r2, #10]
 800c03c:	fb02 f303 	mul.w	r3, r2, r3
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	18d1      	adds	r1, r2, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c050:	895b      	ldrh	r3, [r3, #10]
 800c052:	461a      	mov	r2, r3
 800c054:	f7fc ff68 	bl	8008f28 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c05e:	799b      	ldrb	r3, [r3, #6]
 800c060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c064:	b2da      	uxtb	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c06c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c07a:	895b      	ldrh	r3, [r3, #10]
 800c07c:	461a      	mov	r2, r3
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	fb02 f303 	mul.w	r3, r2, r3
 800c084:	623b      	str	r3, [r7, #32]
				continue;
 800c086:	e06e      	b.n	800c166 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	429a      	cmp	r2, r3
 800c094:	d01f      	beq.n	800c0d6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09c:	689a      	ldr	r2, [r3, #8]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d215      	bcs.n	800c0d6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b6:	7858      	ldrb	r0, [r3, #1]
 800c0b8:	68f9      	ldr	r1, [r7, #12]
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	693a      	ldr	r2, [r7, #16]
 800c0be:	f7fc fed5 	bl	8008e6c <disk_read>
 800c0c2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d006      	beq.n	800c0d6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	71da      	strb	r2, [r3, #7]
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e083      	b.n	800c1de <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0dc:	461a      	mov	r2, r3
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ee:	895b      	ldrh	r3, [r3, #10]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c100:	6812      	ldr	r2, [r2, #0]
 800c102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c106:	8952      	ldrh	r2, [r2, #10]
 800c108:	fbb3 f1f2 	udiv	r1, r3, r2
 800c10c:	fb01 f202 	mul.w	r2, r1, r2
 800c110:	1a9b      	subs	r3, r3, r2
 800c112:	1ac3      	subs	r3, r0, r3
 800c114:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800c116:	6a3a      	ldr	r2, [r7, #32]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d901      	bls.n	800c122 <f_write+0x3ae>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c130:	6812      	ldr	r2, [r2, #0]
 800c132:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c136:	8952      	ldrh	r2, [r2, #10]
 800c138:	fbb3 f1f2 	udiv	r1, r3, r2
 800c13c:	fb01 f202 	mul.w	r2, r1, r2
 800c140:	1a9b      	subs	r3, r3, r2
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	4413      	add	r3, r2
 800c146:	6a3a      	ldr	r2, [r7, #32]
 800c148:	69b9      	ldr	r1, [r7, #24]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fc feec 	bl	8008f28 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c156:	799b      	ldrb	r3, [r3, #6]
 800c158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c164:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800c166:	69ba      	ldr	r2, [r7, #24]
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	4413      	add	r3, r2
 800c16c:	61bb      	str	r3, [r7, #24]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c174:	689a      	ldr	r2, [r3, #8]
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	4413      	add	r3, r2
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c180:	6093      	str	r3, [r2, #8]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	441a      	add	r2, r3
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f47f ae26 	bne.w	800bdea <f_write+0x76>
 800c19e:	e000      	b.n	800c1a2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c1a0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d907      	bls.n	800c1c6 <f_write+0x452>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c1c4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1cc:	799b      	ldrb	r3, [r3, #6]
 800c1ce:	f043 0320 	orr.w	r3, r3, #32
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1da:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3728      	adds	r7, #40	; 0x28
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b086      	sub	sp, #24
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7ff fa22 	bl	800b638 <validate>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f040 80bc 	bne.w	800c378 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c206:	799b      	ldrb	r3, [r3, #6]
 800c208:	f003 0320 	and.w	r3, r3, #32
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 80b3 	beq.w	800c378 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c218:	799b      	ldrb	r3, [r3, #6]
 800c21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d01e      	beq.n	800c260 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c22e:	7858      	ldrb	r0, [r3, #1]
 800c230:	6879      	ldr	r1, [r7, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c238:	699a      	ldr	r2, [r3, #24]
 800c23a:	2301      	movs	r3, #1
 800c23c:	f7fc fe36 	bl	8008eac <disk_write>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c246:	2301      	movs	r3, #1
 800c248:	e097      	b.n	800c37a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c250:	799b      	ldrb	r3, [r3, #6]
 800c252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c256:	b2da      	uxtb	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c25e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c26e:	69db      	ldr	r3, [r3, #28]
 800c270:	4619      	mov	r1, r3
 800c272:	4610      	mov	r0, r2
 800c274:	f7fd f8e0 	bl	8009438 <move_window>
 800c278:	4603      	mov	r3, r0
 800c27a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d17a      	bne.n	800c378 <f_sync+0x192>
				dir = fp->dir_ptr;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	330b      	adds	r3, #11
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	330b      	adds	r3, #11
 800c296:	f042 0220 	orr.w	r2, r2, #32
 800c29a:	b2d2      	uxtb	r2, r2
 800c29c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	331c      	adds	r3, #28
 800c2aa:	b2d2      	uxtb	r2, r2
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	0a1b      	lsrs	r3, r3, #8
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	331d      	adds	r3, #29
 800c2c0:	b2d2      	uxtb	r2, r2
 800c2c2:	701a      	strb	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	0c1a      	lsrs	r2, r3, #16
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	331e      	adds	r3, #30
 800c2d2:	b2d2      	uxtb	r2, r2
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	0e1a      	lsrs	r2, r3, #24
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	331f      	adds	r3, #31
 800c2e4:	b2d2      	uxtb	r2, r2
 800c2e6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6938      	ldr	r0, [r7, #16]
 800c2f4:	f7fd ffe1 	bl	800a2ba <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c2f8:	f7fc fd1c 	bl	8008d34 <get_fattime>
 800c2fc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	3316      	adds	r3, #22
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	b2d2      	uxtb	r2, r2
 800c306:	701a      	strb	r2, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	0a1b      	lsrs	r3, r3, #8
 800c30e:	b29a      	uxth	r2, r3
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	3317      	adds	r3, #23
 800c314:	b2d2      	uxtb	r2, r2
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	0c1a      	lsrs	r2, r3, #16
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	3318      	adds	r3, #24
 800c320:	b2d2      	uxtb	r2, r2
 800c322:	701a      	strb	r2, [r3, #0]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	0e1a      	lsrs	r2, r3, #24
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	3319      	adds	r3, #25
 800c32c:	b2d2      	uxtb	r2, r2
 800c32e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	3312      	adds	r3, #18
 800c334:	2200      	movs	r2, #0
 800c336:	701a      	strb	r2, [r3, #0]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	3313      	adds	r3, #19
 800c33c:	2200      	movs	r2, #0
 800c33e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c346:	799b      	ldrb	r3, [r3, #6]
 800c348:	f023 0320 	bic.w	r3, r3, #32
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c354:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c362:	2201      	movs	r2, #1
 800c364:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fd f894 	bl	800949c <sync_fs>
 800c374:	4603      	mov	r3, r0
 800c376:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c378:	7dfb      	ldrb	r3, [r7, #23]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff ff2b 	bl	800c1e6 <f_sync>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d119      	bne.n	800c3ce <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff f94c 	bl	800b638 <validate>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d111      	bne.n	800c3ce <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fc ff80 	bl	80092b8 <dec_lock>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d105      	bne.n	800c3ce <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b090      	sub	sp, #64	; 0x40
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff f928 	bl	800b638 <validate>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c3ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <f_lseek+0x24>
 800c3f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3fa:	e2da      	b.n	800c9b2 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c402:	79db      	ldrb	r3, [r3, #7]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d004      	beq.n	800c412 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c40e:	79db      	ldrb	r3, [r3, #7]
 800c410:	e2cf      	b.n	800c9b2 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 8124 	beq.w	800c668 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c426:	d16c      	bne.n	800c502 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	1d1a      	adds	r2, r3, #4
 800c436:	627a      	str	r2, [r7, #36]	; 0x24
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	2302      	movs	r3, #2
 800c43e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d046      	beq.n	800c4de <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c452:	613b      	str	r3, [r7, #16]
 800c454:	2300      	movs	r3, #0
 800c456:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	3302      	adds	r3, #2
 800c45c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	3301      	adds	r3, #1
 800c466:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c472:	4618      	mov	r0, r3
 800c474:	f7fd f8f5 	bl	8009662 <get_fat>
 800c478:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d806      	bhi.n	800c48e <f_lseek+0xb6>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c486:	2202      	movs	r2, #2
 800c488:	71da      	strb	r2, [r3, #7]
 800c48a:	2302      	movs	r3, #2
 800c48c:	e291      	b.n	800c9b2 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c494:	d106      	bne.n	800c4a4 <f_lseek+0xcc>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c49c:	2201      	movs	r2, #1
 800c49e:	71da      	strb	r2, [r3, #7]
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e286      	b.n	800c9b2 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d0d7      	beq.n	800c45e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c4ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d809      	bhi.n	800c4ca <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	1d1a      	adds	r2, r3, #4
 800c4ba:	627a      	str	r2, [r7, #36]	; 0x24
 800c4bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4be:	601a      	str	r2, [r3, #0]
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	1d1a      	adds	r2, r3, #4
 800c4c4:	627a      	str	r2, [r7, #36]	; 0x24
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d3b8      	bcc.n	800c450 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800c4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d803      	bhi.n	800c4fa <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	e259      	b.n	800c9ae <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c4fa:	2311      	movs	r3, #17
 800c4fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c500:	e255      	b.n	800c9ae <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d904      	bls.n	800c51a <f_lseek+0x142>
				ofs = fp->fsize;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c520:	461a      	mov	r2, r3
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f000 8240 	beq.w	800c9ae <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	3b01      	subs	r3, #1
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7fd fbec 	bl	8009d12 <clmt_clust>
 800c53a:	4602      	mov	r2, r0
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c542:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7fd f85f 	bl	800961a <clust2sect>
 800c55c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <f_lseek+0x19a>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c56a:	2202      	movs	r2, #2
 800c56c:	71da      	strb	r2, [r3, #7]
 800c56e:	2302      	movs	r3, #2
 800c570:	e21f      	b.n	800c9b2 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	3b01      	subs	r3, #1
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c57c:	6812      	ldr	r2, [r2, #0]
 800c57e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c582:	8952      	ldrh	r2, [r2, #10]
 800c584:	fbb3 f3f2 	udiv	r3, r3, r2
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c58e:	6812      	ldr	r2, [r2, #0]
 800c590:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c594:	7892      	ldrb	r2, [r2, #2]
 800c596:	3a01      	subs	r2, #1
 800c598:	4013      	ands	r3, r2
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	4413      	add	r3, r2
 800c59e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5ae:	6812      	ldr	r2, [r2, #0]
 800c5b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5b4:	8952      	ldrh	r2, [r2, #10]
 800c5b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5ba:	fb01 f202 	mul.w	r2, r1, r2
 800c5be:	1a9b      	subs	r3, r3, r2
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 81f4 	beq.w	800c9ae <f_lseek+0x5d6>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5cc:	699b      	ldr	r3, [r3, #24]
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	f000 81ec 	beq.w	800c9ae <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5dc:	799b      	ldrb	r3, [r3, #6]
 800c5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d023      	beq.n	800c62e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f2:	7858      	ldrb	r0, [r3, #1]
 800c5f4:	6879      	ldr	r1, [r7, #4]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fc:	699a      	ldr	r2, [r3, #24]
 800c5fe:	2301      	movs	r3, #1
 800c600:	f7fc fc54 	bl	8008eac <disk_write>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d006      	beq.n	800c618 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c610:	2201      	movs	r2, #1
 800c612:	71da      	strb	r2, [r3, #7]
 800c614:	2301      	movs	r3, #1
 800c616:	e1cc      	b.n	800c9b2 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c61e:	799b      	ldrb	r3, [r3, #6]
 800c620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c624:	b2da      	uxtb	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c62c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c63a:	7858      	ldrb	r0, [r3, #1]
 800c63c:	6879      	ldr	r1, [r7, #4]
 800c63e:	2301      	movs	r3, #1
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	f7fc fc13 	bl	8008e6c <disk_read>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d006      	beq.n	800c65a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c652:	2201      	movs	r2, #1
 800c654:	71da      	strb	r2, [r3, #7]
 800c656:	2301      	movs	r3, #1
 800c658:	e1ab      	b.n	800c9b2 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c660:	461a      	mov	r2, r3
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	6193      	str	r3, [r2, #24]
 800c666:	e1a2      	b.n	800c9ae <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	683a      	ldr	r2, [r7, #0]
 800c672:	429a      	cmp	r2, r3
 800c674:	d90c      	bls.n	800c690 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c67c:	799b      	ldrb	r3, [r3, #6]
 800c67e:	f003 0302 	and.w	r3, r3, #2
 800c682:	2b00      	cmp	r3, #0
 800c684:	d104      	bne.n	800c690 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	637b      	str	r3, [r7, #52]	; 0x34
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a8:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 8100 	beq.w	800c8b2 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6be:	789b      	ldrb	r3, [r3, #2]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ce:	895b      	ldrh	r3, [r3, #10]
 800c6d0:	fb02 f303 	mul.w	r3, r2, r3
 800c6d4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d021      	beq.n	800c720 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	1e5a      	subs	r2, r3, #1
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	1e59      	subs	r1, r3, #1
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d315      	bcc.n	800c720 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c6f4:	6a3b      	ldr	r3, [r7, #32]
 800c6f6:	1e5a      	subs	r2, r3, #1
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	425b      	negs	r3, r3
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c704:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c71e:	e031      	b.n	800c784 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d123      	bne.n	800c778 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2100      	movs	r1, #0
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fd fa41 	bl	8009bc2 <create_chain>
 800c740:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c744:	2b01      	cmp	r3, #1
 800c746:	d106      	bne.n	800c756 <f_lseek+0x37e>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c74e:	2202      	movs	r2, #2
 800c750:	71da      	strb	r2, [r3, #7]
 800c752:	2302      	movs	r3, #2
 800c754:	e12d      	b.n	800c9b2 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75c:	d106      	bne.n	800c76c <f_lseek+0x394>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c764:	2201      	movs	r2, #1
 800c766:	71da      	strb	r2, [r3, #7]
 800c768:	2301      	movs	r3, #1
 800c76a:	e122      	b.n	800c9b2 <f_lseek+0x5da>
					fp->sclust = clst;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c772:	461a      	mov	r2, r3
 800c774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c776:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c77e:	461a      	mov	r2, r3
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800c784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 8093 	beq.w	800c8b2 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800c78c:	e052      	b.n	800c834 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c794:	799b      	ldrb	r3, [r3, #6]
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00e      	beq.n	800c7bc <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fd fa0a 	bl	8009bc2 <create_chain>
 800c7ae:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10b      	bne.n	800c7ce <f_lseek+0x3f6>
							ofs = bcs; break;
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	603b      	str	r3, [r7, #0]
 800c7ba:	e03f      	b.n	800c83c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fc ff4b 	bl	8009662 <get_fat>
 800c7cc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d4:	d106      	bne.n	800c7e4 <f_lseek+0x40c>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7dc:	2201      	movs	r2, #1
 800c7de:	71da      	strb	r2, [r3, #7]
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e0e6      	b.n	800c9b2 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d909      	bls.n	800c7fe <f_lseek+0x426>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d306      	bcc.n	800c80c <f_lseek+0x434>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c804:	2202      	movs	r2, #2
 800c806:	71da      	strb	r2, [r3, #7]
 800c808:	2302      	movs	r3, #2
 800c80a:	e0d2      	b.n	800c9b2 <f_lseek+0x5da>
					fp->clust = clst;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c812:	461a      	mov	r2, r3
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c81e:	689a      	ldr	r2, [r3, #8]
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	4413      	add	r3, r2
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c82a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d8a8      	bhi.n	800c78e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	4413      	add	r3, r2
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c84e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c85c:	895b      	ldrh	r3, [r3, #10]
 800c85e:	461a      	mov	r2, r3
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	fbb3 f1f2 	udiv	r1, r3, r2
 800c866:	fb01 f202 	mul.w	r2, r1, r2
 800c86a:	1a9b      	subs	r3, r3, r2
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d020      	beq.n	800c8b2 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fc fecd 	bl	800961a <clust2sect>
 800c880:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800c882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c884:	2b00      	cmp	r3, #0
 800c886:	d106      	bne.n	800c896 <f_lseek+0x4be>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c88e:	2202      	movs	r2, #2
 800c890:	71da      	strb	r2, [r3, #7]
 800c892:	2302      	movs	r3, #2
 800c894:	e08d      	b.n	800c9b2 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8a2:	895b      	ldrh	r3, [r3, #10]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8ae:	4413      	add	r3, r2
 800c8b0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c8c0:	6812      	ldr	r2, [r2, #0]
 800c8c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c8c6:	8952      	ldrh	r2, [r2, #10]
 800c8c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8cc:	fb01 f202 	mul.w	r2, r1, r2
 800c8d0:	1a9b      	subs	r3, r3, r2
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d04e      	beq.n	800c974 <f_lseek+0x59c>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d047      	beq.n	800c974 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ea:	799b      	ldrb	r3, [r3, #6]
 800c8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d023      	beq.n	800c93c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c900:	7858      	ldrb	r0, [r3, #1]
 800c902:	6879      	ldr	r1, [r7, #4]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c90a:	699a      	ldr	r2, [r3, #24]
 800c90c:	2301      	movs	r3, #1
 800c90e:	f7fc facd 	bl	8008eac <disk_write>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d006      	beq.n	800c926 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c91e:	2201      	movs	r2, #1
 800c920:	71da      	strb	r2, [r3, #7]
 800c922:	2301      	movs	r3, #1
 800c924:	e045      	b.n	800c9b2 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c92c:	799b      	ldrb	r3, [r3, #6]
 800c92e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c932:	b2da      	uxtb	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c93a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c948:	7858      	ldrb	r0, [r3, #1]
 800c94a:	6879      	ldr	r1, [r7, #4]
 800c94c:	2301      	movs	r3, #1
 800c94e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c950:	f7fc fa8c 	bl	8008e6c <disk_read>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d006      	beq.n	800c968 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c960:	2201      	movs	r2, #1
 800c962:	71da      	strb	r2, [r3, #7]
 800c964:	2301      	movs	r3, #1
 800c966:	e024      	b.n	800c9b2 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c96e:	461a      	mov	r2, r3
 800c970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c972:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	429a      	cmp	r2, r3
 800c986:	d912      	bls.n	800c9ae <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c996:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c99e:	799b      	ldrb	r3, [r3, #6]
 800c9a0:	f043 0320 	orr.w	r3, r3, #32
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ac:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800c9ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3740      	adds	r7, #64	; 0x40
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800c9c6:	78fb      	ldrb	r3, [r7, #3]
 800c9c8:	2b0a      	cmp	r3, #10
 800c9ca:	d103      	bne.n	800c9d4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c9cc:	210d      	movs	r1, #13
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff fff3 	bl	800c9ba <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	db25      	blt.n	800ca2c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	60fa      	str	r2, [r7, #12]
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	78fa      	ldrb	r2, [r7, #3]
 800c9ec:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b3c      	cmp	r3, #60	; 0x3c
 800c9f2:	dd12      	ble.n	800ca1a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6818      	ldr	r0, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f103 010c 	add.w	r1, r3, #12
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	f107 0308 	add.w	r3, r7, #8
 800ca04:	f7ff f9b6 	bl	800bd74 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d101      	bne.n	800ca14 <putc_bfd+0x5a>
 800ca10:	2300      	movs	r3, #0
 800ca12:	e001      	b.n	800ca18 <putc_bfd+0x5e>
 800ca14:	f04f 33ff 	mov.w	r3, #4294967295
 800ca18:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	609a      	str	r2, [r3, #8]
 800ca2a:	e000      	b.n	800ca2e <putc_bfd+0x74>
	if (i < 0) return;
 800ca2c:	bf00      	nop
}
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800ca34:	b40e      	push	{r1, r2, r3}
 800ca36:	b590      	push	{r4, r7, lr}
 800ca38:	b0a2      	sub	sp, #136	; 0x88
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60bb      	str	r3, [r7, #8]
	pb.nchr = pb.idx = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	60fb      	str	r3, [r7, #12]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	613b      	str	r3, [r7, #16]

	va_start(arp, fmt);
 800ca4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ca4e:	66bb      	str	r3, [r7, #104]	; 0x68

	for (;;) {
		c = *fmt++;
 800ca50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if (c == 0) break;			/* End of string */
 800ca60:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f000 81d7 	beq.w	800ce18 <f_printf+0x3e4>
		if (c != '%') {				/* Non escape character */
 800ca6a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ca6e:	2b25      	cmp	r3, #37	; 0x25
 800ca70:	d008      	beq.n	800ca84 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ca72:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800ca76:	f107 0308 	add.w	r3, r7, #8
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7ff ff9c 	bl	800c9ba <putc_bfd>
			continue;
 800ca82:	e1c8      	b.n	800ce16 <f_printf+0x3e2>
		}
		w = f = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	67bb      	str	r3, [r7, #120]	; 0x78
		c = *fmt++;
 800ca8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if (c == '0') {				/* Flag: '0' padding */
 800ca9e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800caa2:	2b30      	cmp	r3, #48	; 0x30
 800caa4:	d10b      	bne.n	800cabe <f_printf+0x8a>
			f = 1; c = *fmt++;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800caac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800cabc:	e022      	b.n	800cb04 <f_printf+0xd0>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800cabe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cac2:	2b2d      	cmp	r3, #45	; 0x2d
 800cac4:	d11e      	bne.n	800cb04 <f_printf+0xd0>
				f = 2; c = *fmt++;
 800cac6:	2302      	movs	r3, #2
 800cac8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cacc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cad0:	1c5a      	adds	r2, r3, #1
 800cad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800cadc:	e012      	b.n	800cb04 <f_printf+0xd0>
			w = w * 10 + c - '0';
 800cade:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cae0:	4613      	mov	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	461a      	mov	r2, r3
 800caea:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800caee:	4413      	add	r3, r2
 800caf0:	3b30      	subs	r3, #48	; 0x30
 800caf2:	67bb      	str	r3, [r7, #120]	; 0x78
			c = *fmt++;
 800caf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		while (IsDigit(c)) {		/* Precision */
 800cb04:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cb08:	2b2f      	cmp	r3, #47	; 0x2f
 800cb0a:	d903      	bls.n	800cb14 <f_printf+0xe0>
 800cb0c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cb10:	2b39      	cmp	r3, #57	; 0x39
 800cb12:	d9e4      	bls.n	800cade <f_printf+0xaa>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800cb14:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cb18:	2b6c      	cmp	r3, #108	; 0x6c
 800cb1a:	d003      	beq.n	800cb24 <f_printf+0xf0>
 800cb1c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cb20:	2b4c      	cmp	r3, #76	; 0x4c
 800cb22:	d10d      	bne.n	800cb40 <f_printf+0x10c>
			f |= 4; c = *fmt++;
 800cb24:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cb28:	f043 0304 	orr.w	r3, r3, #4
 800cb2c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cb30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		}
		if (!c) break;
 800cb40:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f000 8169 	beq.w	800ce1c <f_printf+0x3e8>
		d = c;
 800cb4a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cb4e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		if (IsLower(d)) d -= 0x20;
 800cb52:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800cb56:	2b60      	cmp	r3, #96	; 0x60
 800cb58:	d908      	bls.n	800cb6c <f_printf+0x138>
 800cb5a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800cb5e:	2b7a      	cmp	r3, #122	; 0x7a
 800cb60:	d804      	bhi.n	800cb6c <f_printf+0x138>
 800cb62:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800cb66:	3b20      	subs	r3, #32
 800cb68:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		switch (d) {				/* Type is... */
 800cb6c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800cb70:	3b42      	subs	r3, #66	; 0x42
 800cb72:	2b16      	cmp	r3, #22
 800cb74:	f200 808f 	bhi.w	800cc96 <f_printf+0x262>
 800cb78:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <f_printf+0x14c>)
 800cb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7e:	bf00      	nop
 800cb80:	0800cc77 	.word	0x0800cc77
 800cb84:	0800cc5f 	.word	0x0800cc5f
 800cb88:	0800cc87 	.word	0x0800cc87
 800cb8c:	0800cc97 	.word	0x0800cc97
 800cb90:	0800cc97 	.word	0x0800cc97
 800cb94:	0800cc97 	.word	0x0800cc97
 800cb98:	0800cc97 	.word	0x0800cc97
 800cb9c:	0800cc97 	.word	0x0800cc97
 800cba0:	0800cc97 	.word	0x0800cc97
 800cba4:	0800cc97 	.word	0x0800cc97
 800cba8:	0800cc97 	.word	0x0800cc97
 800cbac:	0800cc97 	.word	0x0800cc97
 800cbb0:	0800cc97 	.word	0x0800cc97
 800cbb4:	0800cc7f 	.word	0x0800cc7f
 800cbb8:	0800cc97 	.word	0x0800cc97
 800cbbc:	0800cc97 	.word	0x0800cc97
 800cbc0:	0800cc97 	.word	0x0800cc97
 800cbc4:	0800cbdd 	.word	0x0800cbdd
 800cbc8:	0800cc97 	.word	0x0800cc97
 800cbcc:	0800cc87 	.word	0x0800cc87
 800cbd0:	0800cc97 	.word	0x0800cc97
 800cbd4:	0800cc97 	.word	0x0800cc97
 800cbd8:	0800cc8f 	.word	0x0800cc8f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800cbdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbde:	1d1a      	adds	r2, r3, #4
 800cbe0:	66ba      	str	r2, [r7, #104]	; 0x68
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	66fb      	str	r3, [r7, #108]	; 0x6c
			for (j = 0; p[j]; j++) ;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cbea:	e002      	b.n	800cbf2 <f_printf+0x1be>
 800cbec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbee:	3301      	adds	r3, #1
 800cbf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cbf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cbf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbf6:	4413      	add	r3, r2
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1f6      	bne.n	800cbec <f_printf+0x1b8>
			if (!(f & 2)) {
 800cbfe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d117      	bne.n	800cc3a <f_printf+0x206>
				while (j++ < w) putc_bfd(&pb, ' ');
 800cc0a:	e005      	b.n	800cc18 <f_printf+0x1e4>
 800cc0c:	f107 0308 	add.w	r3, r7, #8
 800cc10:	2120      	movs	r1, #32
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff fed1 	bl	800c9ba <putc_bfd>
 800cc18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cc1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d8f3      	bhi.n	800cc0c <f_printf+0x1d8>
			}
			while (*p) putc_bfd(&pb, *p++);
 800cc24:	e009      	b.n	800cc3a <f_printf+0x206>
 800cc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc2c:	781a      	ldrb	r2, [r3, #0]
 800cc2e:	f107 0308 	add.w	r3, r7, #8
 800cc32:	4611      	mov	r1, r2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fec0 	bl	800c9ba <putc_bfd>
 800cc3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1f1      	bne.n	800cc26 <f_printf+0x1f2>
			while (j++ < w) putc_bfd(&pb, ' ');
 800cc42:	e005      	b.n	800cc50 <f_printf+0x21c>
 800cc44:	f107 0308 	add.w	r3, r7, #8
 800cc48:	2120      	movs	r1, #32
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff feb5 	bl	800c9ba <putc_bfd>
 800cc50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cc56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d8f3      	bhi.n	800cc44 <f_printf+0x210>
			continue;
 800cc5c:	e0db      	b.n	800ce16 <f_printf+0x3e2>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800cc5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc60:	1d1a      	adds	r2, r3, #4
 800cc62:	66ba      	str	r2, [r7, #104]	; 0x68
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	b2da      	uxtb	r2, r3
 800cc68:	f107 0308 	add.w	r3, r7, #8
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7ff fea3 	bl	800c9ba <putc_bfd>
 800cc74:	e0cf      	b.n	800ce16 <f_printf+0x3e2>
		case 'B' :					/* Binary */
			r = 2; break;
 800cc76:	2302      	movs	r3, #2
 800cc78:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800cc7c:	e014      	b.n	800cca8 <f_printf+0x274>
		case 'O' :					/* Octal */
			r = 8; break;
 800cc7e:	2308      	movs	r3, #8
 800cc80:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800cc84:	e010      	b.n	800cca8 <f_printf+0x274>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800cc86:	230a      	movs	r3, #10
 800cc88:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800cc8c:	e00c      	b.n	800cca8 <f_printf+0x274>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800cc8e:	2310      	movs	r3, #16
 800cc90:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800cc94:	e008      	b.n	800cca8 <f_printf+0x274>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800cc96:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800cc9a:	f107 0308 	add.w	r3, r7, #8
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff fe8a 	bl	800c9ba <putc_bfd>
 800cca6:	e0b6      	b.n	800ce16 <f_printf+0x3e2>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800cca8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ccac:	f003 0304 	and.w	r3, r3, #4
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d004      	beq.n	800ccbe <f_printf+0x28a>
 800ccb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccb6:	1d1a      	adds	r2, r3, #4
 800ccb8:	66ba      	str	r2, [r7, #104]	; 0x68
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	e00c      	b.n	800ccd8 <f_printf+0x2a4>
 800ccbe:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800ccc2:	2b44      	cmp	r3, #68	; 0x44
 800ccc4:	d104      	bne.n	800ccd0 <f_printf+0x29c>
 800ccc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccc8:	1d1a      	adds	r2, r3, #4
 800ccca:	66ba      	str	r2, [r7, #104]	; 0x68
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	e003      	b.n	800ccd8 <f_printf+0x2a4>
 800ccd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccd2:	1d1a      	adds	r2, r3, #4
 800ccd4:	66ba      	str	r2, [r7, #104]	; 0x68
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	677b      	str	r3, [r7, #116]	; 0x74
		if (d == 'D' && (v & 0x80000000)) {
 800ccda:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800ccde:	2b44      	cmp	r3, #68	; 0x44
 800cce0:	d10b      	bne.n	800ccfa <f_printf+0x2c6>
 800cce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da08      	bge.n	800ccfa <f_printf+0x2c6>
			v = 0 - v;
 800cce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccea:	425b      	negs	r3, r3
 800ccec:	677b      	str	r3, [r7, #116]	; 0x74
			f |= 8;
 800ccee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ccf2:	f043 0308 	orr.w	r3, r3, #8
 800ccf6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		i = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		do {
			d = (TCHAR)(v % r); v /= r;
 800cd00:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800cd04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd06:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd0a:	fb01 f202 	mul.w	r2, r1, r2
 800cd0e:	1a9b      	subs	r3, r3, r2
 800cd10:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800cd14:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800cd18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd1e:	677b      	str	r3, [r7, #116]	; 0x74
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800cd20:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800cd24:	2b09      	cmp	r3, #9
 800cd26:	d90b      	bls.n	800cd40 <f_printf+0x30c>
 800cd28:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800cd2c:	2b78      	cmp	r3, #120	; 0x78
 800cd2e:	d101      	bne.n	800cd34 <f_printf+0x300>
 800cd30:	2227      	movs	r2, #39	; 0x27
 800cd32:	e000      	b.n	800cd36 <f_printf+0x302>
 800cd34:	2207      	movs	r2, #7
 800cd36:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			s[i++] = d + '0';
 800cd40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cd4a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800cd4e:	3230      	adds	r2, #48	; 0x30
 800cd50:	b2d2      	uxtb	r2, r2
 800cd52:	3388      	adds	r3, #136	; 0x88
 800cd54:	443b      	add	r3, r7
 800cd56:	f803 2c34 	strb.w	r2, [r3, #-52]
		} while (v && i < sizeof s / sizeof s[0]);
 800cd5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <f_printf+0x334>
 800cd60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd64:	2b0f      	cmp	r3, #15
 800cd66:	d9cb      	bls.n	800cd00 <f_printf+0x2cc>
		if (f & 8) s[i++] = '-';
 800cd68:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cd6c:	f003 0308 	and.w	r3, r3, #8
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d009      	beq.n	800cd88 <f_printf+0x354>
 800cd74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cd7e:	3388      	adds	r3, #136	; 0x88
 800cd80:	443b      	add	r3, r7
 800cd82:	222d      	movs	r2, #45	; 0x2d
 800cd84:	f803 2c34 	strb.w	r2, [r3, #-52]
		j = i; d = (f & 1) ? '0' : ' ';
 800cd88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cd92:	f003 0301 	and.w	r3, r3, #1
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <f_printf+0x36a>
 800cd9a:	2330      	movs	r3, #48	; 0x30
 800cd9c:	e000      	b.n	800cda0 <f_printf+0x36c>
 800cd9e:	2320      	movs	r3, #32
 800cda0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800cda4:	e007      	b.n	800cdb6 <f_printf+0x382>
 800cda6:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	4611      	mov	r1, r2
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff fe02 	bl	800c9ba <putc_bfd>
 800cdb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cdba:	f003 0302 	and.w	r3, r3, #2
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d105      	bne.n	800cdce <f_printf+0x39a>
 800cdc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cdc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d8eb      	bhi.n	800cda6 <f_printf+0x372>
		do putc_bfd(&pb, s[--i]); while (i);
 800cdce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdd8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800cddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cde0:	4413      	add	r3, r2
 800cde2:	781a      	ldrb	r2, [r3, #0]
 800cde4:	f107 0308 	add.w	r3, r7, #8
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff fde5 	bl	800c9ba <putc_bfd>
 800cdf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1ea      	bne.n	800cdce <f_printf+0x39a>
		while (j++ < w) putc_bfd(&pb, d);
 800cdf8:	e007      	b.n	800ce0a <f_printf+0x3d6>
 800cdfa:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800cdfe:	f107 0308 	add.w	r3, r7, #8
 800ce02:	4611      	mov	r1, r2
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7ff fdd8 	bl	800c9ba <putc_bfd>
 800ce0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ce10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d8f1      	bhi.n	800cdfa <f_printf+0x3c6>
		c = *fmt++;
 800ce16:	e61b      	b.n	800ca50 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ce18:	bf00      	nop
 800ce1a:	e000      	b.n	800ce1e <f_printf+0x3ea>
		if (!c) break;
 800ce1c:	bf00      	nop
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	db15      	blt.n	800ce50 <f_printf+0x41c>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800ce24:	68b8      	ldr	r0, [r7, #8]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	461c      	mov	r4, r3
 800ce2a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ce2e:	f107 0308 	add.w	r3, r7, #8
 800ce32:	f103 010c 	add.w	r1, r3, #12
 800ce36:	4613      	mov	r3, r2
 800ce38:	4622      	mov	r2, r4
 800ce3a:	f7fe ff9b 	bl	800bd74 <f_write>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d105      	bne.n	800ce50 <f_printf+0x41c>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d101      	bne.n	800ce50 <f_printf+0x41c>
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	e001      	b.n	800ce54 <f_printf+0x420>
	return EOF;
 800ce50:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3788      	adds	r7, #136	; 0x88
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ce5e:	b003      	add	sp, #12
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop

0800ce64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b087      	sub	sp, #28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce72:	2301      	movs	r3, #1
 800ce74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ce7a:	4b1e      	ldr	r3, [pc, #120]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800ce7c:	7a5b      	ldrb	r3, [r3, #9]
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d831      	bhi.n	800cee8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce84:	4b1b      	ldr	r3, [pc, #108]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800ce86:	7a5b      	ldrb	r3, [r3, #9]
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	4b19      	ldr	r3, [pc, #100]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800ce8e:	2100      	movs	r1, #0
 800ce90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800ce92:	4b18      	ldr	r3, [pc, #96]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800ce94:	7a5b      	ldrb	r3, [r3, #9]
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	4a16      	ldr	r2, [pc, #88]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800cea2:	4b14      	ldr	r3, [pc, #80]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800cea4:	7a5b      	ldrb	r3, [r3, #9]
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4b12      	ldr	r3, [pc, #72]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800ceac:	4413      	add	r3, r2
 800ceae:	79fa      	ldrb	r2, [r7, #7]
 800ceb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ceb2:	4b10      	ldr	r3, [pc, #64]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800ceb4:	7a5b      	ldrb	r3, [r3, #9]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	b2d1      	uxtb	r1, r2
 800cebc:	4a0d      	ldr	r2, [pc, #52]	; (800cef4 <FATFS_LinkDriverEx+0x90>)
 800cebe:	7251      	strb	r1, [r2, #9]
 800cec0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cec2:	7dbb      	ldrb	r3, [r7, #22]
 800cec4:	3330      	adds	r3, #48	; 0x30
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	3301      	adds	r3, #1
 800ced0:	223a      	movs	r2, #58	; 0x3a
 800ced2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	3302      	adds	r3, #2
 800ced8:	222f      	movs	r2, #47	; 0x2f
 800ceda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	3303      	adds	r3, #3
 800cee0:	2200      	movs	r2, #0
 800cee2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	371c      	adds	r7, #28
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bc80      	pop	{r7}
 800cef2:	4770      	bx	lr
 800cef4:	20000b4c 	.word	0x20000b4c

0800cef8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf02:	2200      	movs	r2, #0
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff ffac 	bl	800ce64 <FATFS_LinkDriverEx>
 800cf0c:	4603      	mov	r3, r0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
	...

0800cf18 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	6039      	str	r1, [r7, #0]
 800cf22:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cf24:	88fb      	ldrh	r3, [r7, #6]
 800cf26:	2b7f      	cmp	r3, #127	; 0x7f
 800cf28:	d802      	bhi.n	800cf30 <ff_convert+0x18>
		c = chr;
 800cf2a:	88fb      	ldrh	r3, [r7, #6]
 800cf2c:	81fb      	strh	r3, [r7, #14]
 800cf2e:	e025      	b.n	800cf7c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00b      	beq.n	800cf4e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cf36:	88fb      	ldrh	r3, [r7, #6]
 800cf38:	2bff      	cmp	r3, #255	; 0xff
 800cf3a:	d805      	bhi.n	800cf48 <ff_convert+0x30>
 800cf3c:	88fb      	ldrh	r3, [r7, #6]
 800cf3e:	3b80      	subs	r3, #128	; 0x80
 800cf40:	4a11      	ldr	r2, [pc, #68]	; (800cf88 <ff_convert+0x70>)
 800cf42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf46:	e000      	b.n	800cf4a <ff_convert+0x32>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	81fb      	strh	r3, [r7, #14]
 800cf4c:	e016      	b.n	800cf7c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800cf4e:	2300      	movs	r3, #0
 800cf50:	81fb      	strh	r3, [r7, #14]
 800cf52:	e009      	b.n	800cf68 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cf54:	89fb      	ldrh	r3, [r7, #14]
 800cf56:	4a0c      	ldr	r2, [pc, #48]	; (800cf88 <ff_convert+0x70>)
 800cf58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf5c:	88fa      	ldrh	r2, [r7, #6]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d006      	beq.n	800cf70 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cf62:	89fb      	ldrh	r3, [r7, #14]
 800cf64:	3301      	adds	r3, #1
 800cf66:	81fb      	strh	r3, [r7, #14]
 800cf68:	89fb      	ldrh	r3, [r7, #14]
 800cf6a:	2b7f      	cmp	r3, #127	; 0x7f
 800cf6c:	d9f2      	bls.n	800cf54 <ff_convert+0x3c>
 800cf6e:	e000      	b.n	800cf72 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cf70:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cf72:	89fb      	ldrh	r3, [r7, #14]
 800cf74:	3380      	adds	r3, #128	; 0x80
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cf7c:	89fb      	ldrh	r3, [r7, #14]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bc80      	pop	{r7}
 800cf86:	4770      	bx	lr
 800cf88:	0800dafc 	.word	0x0800dafc

0800cf8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4603      	mov	r3, r0
 800cf94:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	e002      	b.n	800cfa2 <ff_wtoupper+0x16>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	60fb      	str	r3, [r7, #12]
 800cfa2:	4a0f      	ldr	r2, [pc, #60]	; (800cfe0 <ff_wtoupper+0x54>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d006      	beq.n	800cfbc <ff_wtoupper+0x30>
 800cfae:	4a0c      	ldr	r2, [pc, #48]	; (800cfe0 <ff_wtoupper+0x54>)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfb6:	88fa      	ldrh	r2, [r7, #6]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d1ef      	bne.n	800cf9c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800cfbc:	4a08      	ldr	r2, [pc, #32]	; (800cfe0 <ff_wtoupper+0x54>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d004      	beq.n	800cfd2 <ff_wtoupper+0x46>
 800cfc8:	4a06      	ldr	r2, [pc, #24]	; (800cfe4 <ff_wtoupper+0x58>)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfd0:	e000      	b.n	800cfd4 <ff_wtoupper+0x48>
 800cfd2:	88fb      	ldrh	r3, [r7, #6]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bc80      	pop	{r7}
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	0800dbfc 	.word	0x0800dbfc
 800cfe4:	0800dddc 	.word	0x0800dddc

0800cfe8 <__libc_init_array>:
 800cfe8:	b570      	push	{r4, r5, r6, lr}
 800cfea:	2600      	movs	r6, #0
 800cfec:	4d0c      	ldr	r5, [pc, #48]	; (800d020 <__libc_init_array+0x38>)
 800cfee:	4c0d      	ldr	r4, [pc, #52]	; (800d024 <__libc_init_array+0x3c>)
 800cff0:	1b64      	subs	r4, r4, r5
 800cff2:	10a4      	asrs	r4, r4, #2
 800cff4:	42a6      	cmp	r6, r4
 800cff6:	d109      	bne.n	800d00c <__libc_init_array+0x24>
 800cff8:	f000 f830 	bl	800d05c <_init>
 800cffc:	2600      	movs	r6, #0
 800cffe:	4d0a      	ldr	r5, [pc, #40]	; (800d028 <__libc_init_array+0x40>)
 800d000:	4c0a      	ldr	r4, [pc, #40]	; (800d02c <__libc_init_array+0x44>)
 800d002:	1b64      	subs	r4, r4, r5
 800d004:	10a4      	asrs	r4, r4, #2
 800d006:	42a6      	cmp	r6, r4
 800d008:	d105      	bne.n	800d016 <__libc_init_array+0x2e>
 800d00a:	bd70      	pop	{r4, r5, r6, pc}
 800d00c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d010:	4798      	blx	r3
 800d012:	3601      	adds	r6, #1
 800d014:	e7ee      	b.n	800cff4 <__libc_init_array+0xc>
 800d016:	f855 3b04 	ldr.w	r3, [r5], #4
 800d01a:	4798      	blx	r3
 800d01c:	3601      	adds	r6, #1
 800d01e:	e7f2      	b.n	800d006 <__libc_init_array+0x1e>
 800d020:	0800dfbc 	.word	0x0800dfbc
 800d024:	0800dfbc 	.word	0x0800dfbc
 800d028:	0800dfbc 	.word	0x0800dfbc
 800d02c:	0800dfc0 	.word	0x0800dfc0

0800d030 <memcpy>:
 800d030:	440a      	add	r2, r1
 800d032:	4291      	cmp	r1, r2
 800d034:	f100 33ff 	add.w	r3, r0, #4294967295
 800d038:	d100      	bne.n	800d03c <memcpy+0xc>
 800d03a:	4770      	bx	lr
 800d03c:	b510      	push	{r4, lr}
 800d03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d042:	4291      	cmp	r1, r2
 800d044:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d048:	d1f9      	bne.n	800d03e <memcpy+0xe>
 800d04a:	bd10      	pop	{r4, pc}

0800d04c <memset>:
 800d04c:	4603      	mov	r3, r0
 800d04e:	4402      	add	r2, r0
 800d050:	4293      	cmp	r3, r2
 800d052:	d100      	bne.n	800d056 <memset+0xa>
 800d054:	4770      	bx	lr
 800d056:	f803 1b01 	strb.w	r1, [r3], #1
 800d05a:	e7f9      	b.n	800d050 <memset+0x4>

0800d05c <_init>:
 800d05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05e:	bf00      	nop
 800d060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d062:	bc08      	pop	{r3}
 800d064:	469e      	mov	lr, r3
 800d066:	4770      	bx	lr

0800d068 <_fini>:
 800d068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06a:	bf00      	nop
 800d06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d06e:	bc08      	pop	{r3}
 800d070:	469e      	mov	lr, r3
 800d072:	4770      	bx	lr
