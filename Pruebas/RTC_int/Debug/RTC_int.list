
RTC_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003240  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001394  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e0  080046e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080046e0  080046e0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046e0  080046e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080046e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000014  080046fc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080046fc  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009af3  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea1  00000000  00000000  00029b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017621  00000000  00000000  0002cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6f4  00000000  00000000  00044379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e0e  00000000  00000000  00050a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d487b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002868  00000000  00000000  000d48cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003334 	.word	0x08003334

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003334 	.word	0x08003334

0800014c <HAL_RTC_AlarmAEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 8000154:	f000 fd24 	bl	8000ba0 <HAL_ResumeTick>
}
 8000158:	bf00      	nop
 800015a:	3708      	adds	r7, #8
 800015c:	46bd      	mov	sp, r7
 800015e:	bd80      	pop	{r7, pc}

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fc87 	bl	8000a78 <HAL_Init>

  /* USER CODE BEGIN Init */
  RTC_TimeTypeDef time = {0};
 800016a:	f107 030c 	add.w	r3, r7, #12
 800016e:	2100      	movs	r1, #0
 8000170:	460a      	mov	r2, r1
 8000172:	801a      	strh	r2, [r3, #0]
 8000174:	460a      	mov	r2, r1
 8000176:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef date = {0};
 8000178:	2300      	movs	r3, #0
 800017a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800017c:	463b      	mov	r3, r7
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f866 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f94a 	bl	8000420 <MX_GPIO_Init>
  MX_I2C1_Init();
 800018c:	f000 f8b6 	bl	80002fc <MX_I2C1_Init>
  MX_RTC_Init();
 8000190:	f000 f8e2 	bl	8000358 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SSD1306_GotoXY (0,0);
 8000194:	2100      	movs	r1, #0
 8000196:	2000      	movs	r0, #0
 8000198:	f000 fa1a 	bl	80005d0 <SSD1306_GotoXY>
	  SSD1306_Puts ("HELLO", &Font_16x26, 1);
 800019c:	2201      	movs	r2, #1
 800019e:	4929      	ldr	r1, [pc, #164]	; (8000244 <main+0xe4>)
 80001a0:	4829      	ldr	r0, [pc, #164]	; (8000248 <main+0xe8>)
 80001a2:	f000 faab 	bl	80006fc <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80001a6:	f000 f96f 	bl	8000488 <SSD1306_UpdateScreen>
	  HAL_Delay (2000);
 80001aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ae:	f000 fcc5 	bl	8000b3c <HAL_Delay>

	  SSD1306_GotoXY (0,0);
 80001b2:	2100      	movs	r1, #0
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 fa0b 	bl	80005d0 <SSD1306_GotoXY>
	  SSD1306_Puts ("SLEEP", &Font_16x26, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	4921      	ldr	r1, [pc, #132]	; (8000244 <main+0xe4>)
 80001be:	4823      	ldr	r0, [pc, #140]	; (800024c <main+0xec>)
 80001c0:	f000 fa9c 	bl	80006fc <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80001c4:	f000 f960 	bl	8000488 <SSD1306_UpdateScreen>
	  HAL_Delay (2000);
 80001c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001cc:	f000 fcb6 	bl	8000b3c <HAL_Delay>

	  SSD1306_Clear();
 80001d0:	f000 fab9 	bl	8000746 <SSD1306_Clear>

	  HAL_SuspendTick();
 80001d4:	f000 fcd6 	bl	8000b84 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80001d8:	2101      	movs	r1, #1
 80001da:	2001      	movs	r0, #1
 80001dc:	f001 fbde 	bl	800199c <HAL_PWR_EnterSTOPMode>

    /* USER CODE END WHILE */
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80001e0:	f107 030c 	add.w	r3, r7, #12
 80001e4:	2200      	movs	r2, #0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4819      	ldr	r0, [pc, #100]	; (8000250 <main+0xf0>)
 80001ea:	f002 fac7 	bl	800277c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80001ee:	f107 0308 	add.w	r3, r7, #8
 80001f2:	2200      	movs	r2, #0
 80001f4:	4619      	mov	r1, r3
 80001f6:	4816      	ldr	r0, [pc, #88]	; (8000250 <main+0xf0>)
 80001f8:	f002 fc4e 	bl	8002a98 <HAL_RTC_GetDate>
	  time.Minutes += 1;
 80001fc:	7b7b      	ldrb	r3, [r7, #13]
 80001fe:	3301      	adds	r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	737b      	strb	r3, [r7, #13]

	  if(time.Minutes >= 60)
 8000204:	7b7b      	ldrb	r3, [r7, #13]
 8000206:	2b3b      	cmp	r3, #59	; 0x3b
 8000208:	d907      	bls.n	800021a <main+0xba>
	  {
	  time.Hours++;
 800020a:	7b3b      	ldrb	r3, [r7, #12]
 800020c:	3301      	adds	r3, #1
 800020e:	b2db      	uxtb	r3, r3
 8000210:	733b      	strb	r3, [r7, #12]
	  time.Minutes = time.Minutes - 60;
 8000212:	7b7b      	ldrb	r3, [r7, #13]
 8000214:	3b3c      	subs	r3, #60	; 0x3c
 8000216:	b2db      	uxtb	r3, r3
 8000218:	737b      	strb	r3, [r7, #13]
	  }
	  if(time.Hours > 23)
 800021a:	7b3b      	ldrb	r3, [r7, #12]
 800021c:	2b17      	cmp	r3, #23
 800021e:	d901      	bls.n	8000224 <main+0xc4>
	  {
	  time.Hours = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	733b      	strb	r3, [r7, #12]
	  }
	  sAlarm.Alarm = RTC_ALARM_A;
 8000224:	2300      	movs	r3, #0
 8000226:	607b      	str	r3, [r7, #4]
	  sAlarm.AlarmTime.Hours = time.Hours;
 8000228:	7b3b      	ldrb	r3, [r7, #12]
 800022a:	703b      	strb	r3, [r7, #0]
	  sAlarm.AlarmTime.Minutes = time.Minutes;
 800022c:	7b7b      	ldrb	r3, [r7, #13]
 800022e:	707b      	strb	r3, [r7, #1]
	  sAlarm.AlarmTime.Seconds = time.Seconds;
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	70bb      	strb	r3, [r7, #2]
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8000234:	463b      	mov	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	4619      	mov	r1, r3
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <main+0xf0>)
 800023c:	f002 fc80 	bl	8002b40 <HAL_RTC_SetAlarm_IT>
	  SSD1306_GotoXY (0,0);
 8000240:	e7a8      	b.n	8000194 <main+0x34>
 8000242:	bf00      	nop
 8000244:	20000000 	.word	0x20000000
 8000248:	0800334c 	.word	0x0800334c
 800024c:	08003354 	.word	0x08003354
 8000250:	20000084 	.word	0x20000084

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b094      	sub	sp, #80	; 0x50
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 f85e 	bl	8003324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000284:	230a      	movs	r3, #10
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	2310      	movs	r3, #16
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	2300      	movs	r3, #0
 8000296:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029c:	4618      	mov	r0, r3
 800029e:	f001 fbaf 	bl	8001a00 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a8:	f000 f8e8 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fe1c 	bl	8001f04 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d2:	f000 f8d3 	bl	800047c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80002d6:	2301      	movs	r3, #1
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002de:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 ffa6 	bl	8002234 <HAL_RCCEx_PeriphCLKConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002ee:	f000 f8c5 	bl	800047c <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3750      	adds	r7, #80	; 0x50
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x50>)
 8000302:	4a13      	ldr	r2, [pc, #76]	; (8000350 <MX_I2C1_Init+0x54>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x50>)
 8000308:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_I2C1_Init+0x58>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_I2C1_Init+0x50>)
 800031a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800031e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_I2C1_Init+0x50>)
 800033a:	f000 fed1 	bl	80010e0 <HAL_I2C_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f89a 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000030 	.word	0x20000030
 8000350:	40005400 	.word	0x40005400
 8000354:	00061a80 	.word	0x00061a80

08000358 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	2100      	movs	r1, #0
 8000364:	460a      	mov	r2, r1
 8000366:	801a      	strh	r2, [r3, #0]
 8000368:	460a      	mov	r2, r1
 800036a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000378:	4b27      	ldr	r3, [pc, #156]	; (8000418 <MX_RTC_Init+0xc0>)
 800037a:	4a28      	ldr	r2, [pc, #160]	; (800041c <MX_RTC_Init+0xc4>)
 800037c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_RTC_Init+0xc0>)
 8000380:	f04f 32ff 	mov.w	r2, #4294967295
 8000384:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000386:	4b24      	ldr	r3, [pc, #144]	; (8000418 <MX_RTC_Init+0xc0>)
 8000388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800038c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800038e:	4822      	ldr	r0, [pc, #136]	; (8000418 <MX_RTC_Init+0xc0>)
 8000390:	f002 f8c6 	bl	8002520 <HAL_RTC_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800039a:	f000 f86f 	bl	800047c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800039e:	2300      	movs	r3, #0
 80003a0:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2201      	movs	r2, #1
 80003b0:	4619      	mov	r1, r3
 80003b2:	4819      	ldr	r0, [pc, #100]	; (8000418 <MX_RTC_Init+0xc0>)
 80003b4:	f002 f94a 	bl	800264c <HAL_RTC_SetTime>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80003be:	f000 f85d 	bl	800047c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003c2:	2301      	movs	r3, #1
 80003c4:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80003c6:	2301      	movs	r3, #1
 80003c8:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	2201      	movs	r2, #1
 80003d8:	4619      	mov	r1, r3
 80003da:	480f      	ldr	r0, [pc, #60]	; (8000418 <MX_RTC_Init+0xc0>)
 80003dc:	f002 faa6 	bl	800292c <HAL_RTC_SetDate>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80003e6:	f000 f849 	bl	800047c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80003fa:	463b      	mov	r3, r7
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_RTC_Init+0xc0>)
 8000402:	f002 fb9d 	bl	8002b40 <HAL_RTC_SetAlarm_IT>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800040c:	f000 f836 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000084 	.word	0x20000084
 800041c:	40002800 	.word	0x40002800

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_GPIO_Init+0x58>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a13      	ldr	r2, [pc, #76]	; (8000478 <MX_GPIO_Init+0x58>)
 800042c:	f043 0310 	orr.w	r3, r3, #16
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_GPIO_Init+0x58>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0310 	and.w	r3, r3, #16
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_GPIO_Init+0x58>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <MX_GPIO_Init+0x58>)
 8000444:	f043 0304 	orr.w	r3, r3, #4
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_GPIO_Init+0x58>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0304 	and.w	r3, r3, #4
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_GPIO_Init+0x58>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a07      	ldr	r2, [pc, #28]	; (8000478 <MX_GPIO_Init+0x58>)
 800045c:	f043 0308 	orr.w	r3, r3, #8
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_GPIO_Init+0x58>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0308 	and.w	r3, r3, #8
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <SSD1306_UpdateScreen>:
	
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800048e:	2300      	movs	r3, #0
 8000490:	71fb      	strb	r3, [r7, #7]
 8000492:	e01d      	b.n	80004d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	3b50      	subs	r3, #80	; 0x50
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	2078      	movs	r0, #120	; 0x78
 80004a0:	f000 f9c0 	bl	8000824 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2078      	movs	r0, #120	; 0x78
 80004aa:	f000 f9bb 	bl	8000824 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80004ae:	2210      	movs	r2, #16
 80004b0:	2100      	movs	r1, #0
 80004b2:	2078      	movs	r0, #120	; 0x78
 80004b4:	f000 f9b6 	bl	8000824 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	01db      	lsls	r3, r3, #7
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <SSD1306_UpdateScreen+0x58>)
 80004be:	441a      	add	r2, r3
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	2140      	movs	r1, #64	; 0x40
 80004c4:	2078      	movs	r0, #120	; 0x78
 80004c6:	f000 f947 	bl	8000758 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	3301      	adds	r3, #1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b07      	cmp	r3, #7
 80004d4:	d9de      	bls.n	8000494 <SSD1306_UpdateScreen+0xc>
	}
}
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000098 	.word	0x20000098

080004e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d101      	bne.n	80004f8 <SSD1306_Fill+0x14>
 80004f4:	2300      	movs	r3, #0
 80004f6:	e000      	b.n	80004fa <SSD1306_Fill+0x16>
 80004f8:	23ff      	movs	r3, #255	; 0xff
 80004fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004fe:	4619      	mov	r1, r3
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <SSD1306_Fill+0x2c>)
 8000502:	f002 ff0f 	bl	8003324 <memset>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000098 	.word	0x20000098

08000514 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
 800051e:	460b      	mov	r3, r1
 8000520:	80bb      	strh	r3, [r7, #4]
 8000522:	4613      	mov	r3, r2
 8000524:	70fb      	strb	r3, [r7, #3]
	if (
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	2b7f      	cmp	r3, #127	; 0x7f
 800052a:	d848      	bhi.n	80005be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	2b3f      	cmp	r3, #63	; 0x3f
 8000530:	d845      	bhi.n	80005be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <SSD1306_DrawPixel+0xb4>)
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d006      	beq.n	8000548 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf0c      	ite	eq
 8000540:	2301      	moveq	r3, #1
 8000542:	2300      	movne	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d11a      	bne.n	8000584 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800054e:	88fa      	ldrh	r2, [r7, #6]
 8000550:	88bb      	ldrh	r3, [r7, #4]
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b298      	uxth	r0, r3
 8000556:	4603      	mov	r3, r0
 8000558:	01db      	lsls	r3, r3, #7
 800055a:	4413      	add	r3, r2
 800055c:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <SSD1306_DrawPixel+0xb8>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	b25a      	sxtb	r2, r3
 8000562:	88bb      	ldrh	r3, [r7, #4]
 8000564:	f003 0307 	and.w	r3, r3, #7
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	b25b      	sxtb	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b259      	sxtb	r1, r3
 8000574:	88fa      	ldrh	r2, [r7, #6]
 8000576:	4603      	mov	r3, r0
 8000578:	01db      	lsls	r3, r3, #7
 800057a:	4413      	add	r3, r2
 800057c:	b2c9      	uxtb	r1, r1
 800057e:	4a13      	ldr	r2, [pc, #76]	; (80005cc <SSD1306_DrawPixel+0xb8>)
 8000580:	54d1      	strb	r1, [r2, r3]
 8000582:	e01d      	b.n	80005c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000584:	88fa      	ldrh	r2, [r7, #6]
 8000586:	88bb      	ldrh	r3, [r7, #4]
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	b298      	uxth	r0, r3
 800058c:	4603      	mov	r3, r0
 800058e:	01db      	lsls	r3, r3, #7
 8000590:	4413      	add	r3, r2
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <SSD1306_DrawPixel+0xb8>)
 8000594:	5cd3      	ldrb	r3, [r2, r3]
 8000596:	b25a      	sxtb	r2, r3
 8000598:	88bb      	ldrh	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	2101      	movs	r1, #1
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	b259      	sxtb	r1, r3
 80005ae:	88fa      	ldrh	r2, [r7, #6]
 80005b0:	4603      	mov	r3, r0
 80005b2:	01db      	lsls	r3, r3, #7
 80005b4:	4413      	add	r3, r2
 80005b6:	b2c9      	uxtb	r1, r1
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <SSD1306_DrawPixel+0xb8>)
 80005ba:	54d1      	strb	r1, [r2, r3]
 80005bc:	e000      	b.n	80005c0 <SSD1306_DrawPixel+0xac>
		return;
 80005be:	bf00      	nop
	}
}
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000498 	.word	0x20000498
 80005cc:	20000098 	.word	0x20000098

080005d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	80fb      	strh	r3, [r7, #6]
 80005dc:	4613      	mov	r3, r2
 80005de:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <SSD1306_GotoXY+0x28>)
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <SSD1306_GotoXY+0x28>)
 80005e8:	88bb      	ldrh	r3, [r7, #4]
 80005ea:	8053      	strh	r3, [r2, #2]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000498 	.word	0x20000498

080005fc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800060c:	4b3a      	ldr	r3, [pc, #232]	; (80006f8 <SSD1306_Putc+0xfc>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
	if (
 8000618:	2b7f      	cmp	r3, #127	; 0x7f
 800061a:	dc07      	bgt.n	800062c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800061c:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <SSD1306_Putc+0xfc>)
 800061e:	885b      	ldrh	r3, [r3, #2]
 8000620:	461a      	mov	r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000628:	2b3f      	cmp	r3, #63	; 0x3f
 800062a:	dd01      	ble.n	8000630 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800062c:	2300      	movs	r3, #0
 800062e:	e05e      	b.n	80006ee <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e04b      	b.n	80006ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	3b20      	subs	r3, #32
 800063e:	6839      	ldr	r1, [r7, #0]
 8000640:	7849      	ldrb	r1, [r1, #1]
 8000642:	fb01 f303 	mul.w	r3, r1, r3
 8000646:	4619      	mov	r1, r3
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	440b      	add	r3, r1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	e030      	b.n	80006bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d010      	beq.n	800068c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SSD1306_Putc+0xfc>)
 800066c:	881a      	ldrh	r2, [r3, #0]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	b29b      	uxth	r3, r3
 8000672:	4413      	add	r3, r2
 8000674:	b298      	uxth	r0, r3
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <SSD1306_Putc+0xfc>)
 8000678:	885a      	ldrh	r2, [r3, #2]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	b29b      	uxth	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	b29b      	uxth	r3, r3
 8000682:	79ba      	ldrb	r2, [r7, #6]
 8000684:	4619      	mov	r1, r3
 8000686:	f7ff ff45 	bl	8000514 <SSD1306_DrawPixel>
 800068a:	e014      	b.n	80006b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <SSD1306_Putc+0xfc>)
 800068e:	881a      	ldrh	r2, [r3, #0]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	b29b      	uxth	r3, r3
 8000694:	4413      	add	r3, r2
 8000696:	b298      	uxth	r0, r3
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <SSD1306_Putc+0xfc>)
 800069a:	885a      	ldrh	r2, [r3, #2]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b299      	uxth	r1, r3
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f7ff ff2f 	bl	8000514 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3301      	adds	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d3c8      	bcc.n	800065a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	461a      	mov	r2, r3
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d3ad      	bcc.n	8000636 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <SSD1306_Putc+0xfc>)
 80006dc:	881a      	ldrh	r2, [r3, #0]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	4413      	add	r3, r2
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <SSD1306_Putc+0xfc>)
 80006ea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000498 	.word	0x20000498

080006fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800070a:	e012      	b.n	8000732 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff71 	bl	80005fc <SSD1306_Putc>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	429a      	cmp	r2, r3
 8000724:	d002      	beq.n	800072c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	e008      	b.n	800073e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1e8      	bne.n	800070c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	781b      	ldrb	r3, [r3, #0]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff feca 	bl	80004e4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000750:	f7ff fe9a 	bl	8000488 <SSD1306_UpdateScreen>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b0c7      	sub	sp, #284	; 0x11c
 800075c:	af02      	add	r7, sp, #8
 800075e:	4604      	mov	r4, r0
 8000760:	4608      	mov	r0, r1
 8000762:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000766:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800076a:	600a      	str	r2, [r1, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000772:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000776:	4622      	mov	r2, r4
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800077e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000782:	4602      	mov	r2, r0
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800078a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800078e:	460a      	mov	r2, r1
 8000790:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800079a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800079e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80007ac:	e015      	b.n	80007da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80007ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	441a      	add	r2, r3
 80007be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007c2:	3301      	adds	r3, #1
 80007c4:	7811      	ldrb	r1, [r2, #0]
 80007c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007ca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80007ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80007d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007d4:	3301      	adds	r3, #1
 80007d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80007da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007e8:	8812      	ldrh	r2, [r2, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d8df      	bhi.n	80007ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80007ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b299      	uxth	r1, r3
 80007fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	b29b      	uxth	r3, r3
 8000808:	f107 020c 	add.w	r2, r7, #12
 800080c:	200a      	movs	r0, #10
 800080e:	9000      	str	r0, [sp, #0]
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <ssd1306_I2C_WriteMulti+0xc8>)
 8000812:	f000 fda9 	bl	8001368 <HAL_I2C_Master_Transmit>
}
 8000816:	bf00      	nop
 8000818:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800081c:	46bd      	mov	sp, r7
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	20000030 	.word	0x20000030

08000824 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	460b      	mov	r3, r1
 8000830:	71bb      	strb	r3, [r7, #6]
 8000832:	4613      	mov	r3, r2
 8000834:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800083a:	797b      	ldrb	r3, [r7, #5]
 800083c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	b299      	uxth	r1, r3
 8000842:	f107 020c 	add.w	r2, r7, #12
 8000846:	230a      	movs	r3, #10
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2302      	movs	r3, #2
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <ssd1306_I2C_Write+0x38>)
 800084e:	f000 fd8b 	bl	8001368 <HAL_I2C_Master_Transmit>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000030 	.word	0x20000030

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_MspInit+0x5c>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_MspInit+0x5c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_MspInit+0x5c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x5c>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x5c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x5c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_MspInit+0x60>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_MspInit+0x60>)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010000 	.word	0x40010000

080008c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <HAL_I2C_MspInit+0x70>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d123      	bne.n	800092c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_I2C_MspInit+0x74>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <HAL_I2C_MspInit+0x74>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_I2C_MspInit+0x74>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008fc:	23c0      	movs	r3, #192	; 0xc0
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000900:	2312      	movs	r3, #18
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <HAL_I2C_MspInit+0x78>)
 8000910:	f000 fa62 	bl	8000dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_I2C_MspInit+0x74>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_I2C_MspInit+0x74>)
 800091a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091e:	61d3      	str	r3, [r2, #28]
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_I2C_MspInit+0x74>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40005400 	.word	0x40005400
 8000938:	40021000 	.word	0x40021000
 800093c:	40010c00 	.word	0x40010c00

08000940 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_RTC_MspInit+0x5c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d120      	bne.n	8000994 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000952:	f001 f817 	bl	8001984 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_RTC_MspInit+0x60>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_RTC_MspInit+0x60>)
 800095c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_RTC_MspInit+0x60>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_RTC_MspInit+0x64>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f9f6 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800097e:	2003      	movs	r0, #3
 8000980:	f000 fa0f 	bl	8000da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2029      	movs	r0, #41	; 0x29
 800098a:	f000 f9ee 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800098e:	2029      	movs	r0, #41	; 0x29
 8000990:	f000 fa07 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40002800 	.word	0x40002800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	4242043c 	.word	0x4242043c

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ee:	f000 f889 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <RTC_IRQHandler+0x10>)
 80009fe:	f002 fc23 	bl	8003248 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000084 	.word	0x20000084

08000a0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <RTC_Alarm_IRQHandler+0x10>)
 8000a12:	f002 f94d 	bl	8002cb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000084 	.word	0x20000084

08000a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a52:	f7ff ffe5 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f002 fc41 	bl	80032dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5a:	f7ff fb81 	bl	8000160 <main>
  bx lr
 8000a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a68:	080046e8 	.word	0x080046e8
  ldr r2, =_sbss
 8000a6c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a70:	200004a4 	.word	0x200004a4

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x28>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f963 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fee4 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f97b 	bl	8000dbe <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f943 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000010 	.word	0x20000010
 8000b00:	2000000c 	.word	0x2000000c

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000010 	.word	0x20000010
 8000b24:	200004a0 	.word	0x200004a0

08000b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200004a0 	.word	0x200004a0

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff fff0 	bl	8000b28 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffe0 	bl	8000b28 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000010 	.word	0x20000010

08000b84 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <HAL_SuspendTick+0x18>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_SuspendTick+0x18>)
 8000b8e:	f023 0302 	bic.w	r3, r3, #2
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <HAL_ResumeTick+0x18>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <HAL_ResumeTick+0x18>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <__NVIC_EnableIRQ+0x34>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff2d 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff42 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff35 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b08b      	sub	sp, #44	; 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e169      	b.n	80010c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dec:	2201      	movs	r2, #1
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8158 	bne.w	80010ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a9a      	ldr	r2, [pc, #616]	; (8001078 <HAL_GPIO_Init+0x2a0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d05e      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e14:	4a98      	ldr	r2, [pc, #608]	; (8001078 <HAL_GPIO_Init+0x2a0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d875      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e1a:	4a98      	ldr	r2, [pc, #608]	; (800107c <HAL_GPIO_Init+0x2a4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d058      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e20:	4a96      	ldr	r2, [pc, #600]	; (800107c <HAL_GPIO_Init+0x2a4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d86f      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e26:	4a96      	ldr	r2, [pc, #600]	; (8001080 <HAL_GPIO_Init+0x2a8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d052      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e2c:	4a94      	ldr	r2, [pc, #592]	; (8001080 <HAL_GPIO_Init+0x2a8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d869      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e32:	4a94      	ldr	r2, [pc, #592]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d04c      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e38:	4a92      	ldr	r2, [pc, #584]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d863      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e3e:	4a92      	ldr	r2, [pc, #584]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d046      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e44:	4a90      	ldr	r2, [pc, #576]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d85d      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d82a      	bhi.n	8000ea4 <HAL_GPIO_Init+0xcc>
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d859      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <HAL_GPIO_Init+0x80>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000ed3 	.word	0x08000ed3
 8000e5c:	08000ead 	.word	0x08000ead
 8000e60:	08000ebf 	.word	0x08000ebf
 8000e64:	08000f01 	.word	0x08000f01
 8000e68:	08000f07 	.word	0x08000f07
 8000e6c:	08000f07 	.word	0x08000f07
 8000e70:	08000f07 	.word	0x08000f07
 8000e74:	08000f07 	.word	0x08000f07
 8000e78:	08000f07 	.word	0x08000f07
 8000e7c:	08000f07 	.word	0x08000f07
 8000e80:	08000f07 	.word	0x08000f07
 8000e84:	08000f07 	.word	0x08000f07
 8000e88:	08000f07 	.word	0x08000f07
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000f07 	.word	0x08000f07
 8000e94:	08000f07 	.word	0x08000f07
 8000e98:	08000f07 	.word	0x08000f07
 8000e9c:	08000eb5 	.word	0x08000eb5
 8000ea0:	08000ec9 	.word	0x08000ec9
 8000ea4:	4a79      	ldr	r2, [pc, #484]	; (800108c <HAL_GPIO_Init+0x2b4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eaa:	e02c      	b.n	8000f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e029      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e024      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e01f      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	330c      	adds	r3, #12
 8000ece:	623b      	str	r3, [r7, #32]
          break;
 8000ed0:	e01a      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eda:	2304      	movs	r3, #4
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e013      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d105      	bne.n	8000ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	611a      	str	r2, [r3, #16]
          break;
 8000ef2:	e009      	b.n	8000f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	615a      	str	r2, [r3, #20]
          break;
 8000efe:	e003      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          break;
 8000f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d801      	bhi.n	8000f12 <HAL_GPIO_Init+0x13a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	e001      	b.n	8000f16 <HAL_GPIO_Init+0x13e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3304      	adds	r3, #4
 8000f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d802      	bhi.n	8000f24 <HAL_GPIO_Init+0x14c>
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x152>
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	3b08      	subs	r3, #8
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	210f      	movs	r1, #15
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	6a39      	ldr	r1, [r7, #32]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80b1 	beq.w	80010ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_GPIO_Init+0x2b8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x2b8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f70:	4a48      	ldr	r2, [pc, #288]	; (8001094 <HAL_GPIO_Init+0x2bc>)
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a40      	ldr	r2, [pc, #256]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d013      	beq.n	8000fc4 <HAL_GPIO_Init+0x1ec>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a3f      	ldr	r2, [pc, #252]	; (800109c <HAL_GPIO_Init+0x2c4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_GPIO_Init+0x1e8>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <HAL_GPIO_Init+0x2c8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d007      	beq.n	8000fbc <HAL_GPIO_Init+0x1e4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a3d      	ldr	r2, [pc, #244]	; (80010a4 <HAL_GPIO_Init+0x2cc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d101      	bne.n	8000fb8 <HAL_GPIO_Init+0x1e0>
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e006      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e004      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e002      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <HAL_GPIO_Init+0x1ee>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc8:	f002 0203 	and.w	r2, r2, #3
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	4093      	lsls	r3, r2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fd6:	492f      	ldr	r1, [pc, #188]	; (8001094 <HAL_GPIO_Init+0x2bc>)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	492c      	ldr	r1, [pc, #176]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	43db      	mvns	r3, r3
 8001006:	4928      	ldr	r1, [pc, #160]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001008:	4013      	ands	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4922      	ldr	r1, [pc, #136]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	491e      	ldr	r1, [pc, #120]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001030:	4013      	ands	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	4918      	ldr	r1, [pc, #96]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	608b      	str	r3, [r1, #8]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4914      	ldr	r1, [pc, #80]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d021      	beq.n	80010ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	490e      	ldr	r1, [pc, #56]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
 8001074:	e021      	b.n	80010ba <HAL_GPIO_Init+0x2e2>
 8001076:	bf00      	nop
 8001078:	10320000 	.word	0x10320000
 800107c:	10310000 	.word	0x10310000
 8001080:	10220000 	.word	0x10220000
 8001084:	10210000 	.word	0x10210000
 8001088:	10120000 	.word	0x10120000
 800108c:	10110000 	.word	0x10110000
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40011000 	.word	0x40011000
 80010a4:	40011400 	.word	0x40011400
 80010a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_GPIO_Init+0x304>)
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	4909      	ldr	r1, [pc, #36]	; (80010dc <HAL_GPIO_Init+0x304>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3301      	adds	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f47f ae8e 	bne.w	8000dec <HAL_GPIO_Init+0x14>
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	372c      	adds	r7, #44	; 0x2c
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e12b      	b.n	800134a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fbdc 	bl	80008c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2224      	movs	r2, #36	; 0x24
 8001110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001144:	f001 f830 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8001148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a81      	ldr	r2, [pc, #516]	; (8001354 <HAL_I2C_Init+0x274>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d807      	bhi.n	8001164 <HAL_I2C_Init+0x84>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a80      	ldr	r2, [pc, #512]	; (8001358 <HAL_I2C_Init+0x278>)
 8001158:	4293      	cmp	r3, r2
 800115a:	bf94      	ite	ls
 800115c:	2301      	movls	r3, #1
 800115e:	2300      	movhi	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e006      	b.n	8001172 <HAL_I2C_Init+0x92>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a7d      	ldr	r2, [pc, #500]	; (800135c <HAL_I2C_Init+0x27c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	bf94      	ite	ls
 800116c:	2301      	movls	r3, #1
 800116e:	2300      	movhi	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0e7      	b.n	800134a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4a78      	ldr	r2, [pc, #480]	; (8001360 <HAL_I2C_Init+0x280>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	430a      	orrs	r2, r1
 8001198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a6a      	ldr	r2, [pc, #424]	; (8001354 <HAL_I2C_Init+0x274>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d802      	bhi.n	80011b4 <HAL_I2C_Init+0xd4>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3301      	adds	r3, #1
 80011b2:	e009      	b.n	80011c8 <HAL_I2C_Init+0xe8>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	4a69      	ldr	r2, [pc, #420]	; (8001364 <HAL_I2C_Init+0x284>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	099b      	lsrs	r3, r3, #6
 80011c6:	3301      	adds	r3, #1
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	430b      	orrs	r3, r1
 80011ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	495c      	ldr	r1, [pc, #368]	; (8001354 <HAL_I2C_Init+0x274>)
 80011e4:	428b      	cmp	r3, r1
 80011e6:	d819      	bhi.n	800121c <HAL_I2C_Init+0x13c>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1e59      	subs	r1, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011fc:	400b      	ands	r3, r1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_I2C_Init+0x138>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1e59      	subs	r1, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001210:	3301      	adds	r3, #1
 8001212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001216:	e051      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 8001218:	2304      	movs	r3, #4
 800121a:	e04f      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d111      	bne.n	8001248 <HAL_I2C_Init+0x168>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	440b      	add	r3, r1
 8001232:	fbb0 f3f3 	udiv	r3, r0, r3
 8001236:	3301      	adds	r3, #1
 8001238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e012      	b.n	800126e <HAL_I2C_Init+0x18e>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	0099      	lsls	r1, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2C_Init+0x196>
 8001272:	2301      	movs	r3, #1
 8001274:	e022      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10e      	bne.n	800129c <HAL_I2C_Init+0x1bc>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1e58      	subs	r0, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6859      	ldr	r1, [r3, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	440b      	add	r3, r1
 800128c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001290:	3301      	adds	r3, #1
 8001292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129a:	e00f      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	6809      	ldr	r1, [r1, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69da      	ldr	r2, [r3, #28]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6911      	ldr	r1, [r2, #16]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68d2      	ldr	r2, [r2, #12]
 80012f6:	4311      	orrs	r1, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	000186a0 	.word	0x000186a0
 8001358:	001e847f 	.word	0x001e847f
 800135c:	003d08ff 	.word	0x003d08ff
 8001360:	431bde83 	.word	0x431bde83
 8001364:	10624dd3 	.word	0x10624dd3

08001368 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	461a      	mov	r2, r3
 8001374:	460b      	mov	r3, r1
 8001376:	817b      	strh	r3, [r7, #10]
 8001378:	4613      	mov	r3, r2
 800137a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff fbd4 	bl	8000b28 <HAL_GetTick>
 8001380:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b20      	cmp	r3, #32
 800138c:	f040 80e0 	bne.w	8001550 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2319      	movs	r3, #25
 8001396:	2201      	movs	r2, #1
 8001398:	4970      	ldr	r1, [pc, #448]	; (800155c <HAL_I2C_Master_Transmit+0x1f4>)
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f964 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0d3      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_I2C_Master_Transmit+0x50>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e0cc      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d007      	beq.n	80013de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2221      	movs	r2, #33	; 0x21
 80013f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2210      	movs	r2, #16
 80013fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	893a      	ldrh	r2, [r7, #8]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a50      	ldr	r2, [pc, #320]	; (8001560 <HAL_I2C_Master_Transmit+0x1f8>)
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001420:	8979      	ldrh	r1, [r7, #10]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	6a3a      	ldr	r2, [r7, #32]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 f89c 	bl	8001564 <I2C_MasterRequestWrite>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e08d      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800144c:	e066      	b.n	800151c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	6a39      	ldr	r1, [r7, #32]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f9de 	bl	8001814 <I2C_WaitOnTXEFlagUntilTimeout>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00d      	beq.n	800147a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b04      	cmp	r3, #4
 8001464:	d107      	bne.n	8001476 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d11b      	bne.n	80014f0 <HAL_I2C_Master_Transmit+0x188>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d017      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	6a39      	ldr	r1, [r7, #32]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f9ce 	bl	8001896 <I2C_WaitOnBTFFlagUntilTimeout>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00d      	beq.n	800151c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	2b04      	cmp	r3, #4
 8001506:	d107      	bne.n	8001518 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e01a      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d194      	bne.n	800144e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2220      	movs	r2, #32
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001550:	2302      	movs	r3, #2
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	00100002 	.word	0x00100002
 8001560:	ffff0000 	.word	0xffff0000

08001564 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af02      	add	r7, sp, #8
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	460b      	mov	r3, r1
 8001572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b08      	cmp	r3, #8
 800157e:	d006      	beq.n	800158e <I2C_MasterRequestWrite+0x2a>
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d003      	beq.n	800158e <I2C_MasterRequestWrite+0x2a>
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800158c:	d108      	bne.n	80015a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e00b      	b.n	80015b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d107      	bne.n	80015b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f84f 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015de:	d103      	bne.n	80015e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e035      	b.n	8001658 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f4:	d108      	bne.n	8001608 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015f6:	897b      	ldrh	r3, [r7, #10]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	e01b      	b.n	8001640 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001608:	897b      	ldrh	r3, [r7, #10]
 800160a:	11db      	asrs	r3, r3, #7
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f003 0306 	and.w	r3, r3, #6
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f063 030f 	orn	r3, r3, #15
 8001618:	b2da      	uxtb	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	490e      	ldr	r1, [pc, #56]	; (8001660 <I2C_MasterRequestWrite+0xfc>)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f875 	bl	8001716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e010      	b.n	8001658 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001636:	897b      	ldrh	r3, [r7, #10]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <I2C_MasterRequestWrite+0x100>)
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f865 	bl	8001716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	00010008 	.word	0x00010008
 8001664:	00010002 	.word	0x00010002

08001668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001678:	e025      	b.n	80016c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d021      	beq.n	80016c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001682:	f7ff fa51 	bl	8000b28 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d302      	bcc.n	8001698 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d116      	bne.n	80016c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f043 0220 	orr.w	r2, r3, #32
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e023      	b.n	800170e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d10d      	bne.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4013      	ands	r3, r2
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	e00c      	b.n	8001706 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4013      	ands	r3, r2
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	429a      	cmp	r2, r3
 800170a:	d0b6      	beq.n	800167a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001724:	e051      	b.n	80017ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001734:	d123      	bne.n	800177e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001744:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800174e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2220      	movs	r2, #32
 800175a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f043 0204 	orr.w	r2, r3, #4
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e046      	b.n	800180c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d021      	beq.n	80017ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001786:	f7ff f9cf 	bl	8000b28 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	d302      	bcc.n	800179c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d116      	bne.n	80017ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f043 0220 	orr.w	r2, r3, #32
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e020      	b.n	800180c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10c      	bne.n	80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4013      	ands	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	e00b      	b.n	8001806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	43da      	mvns	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	4013      	ands	r3, r2
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d18d      	bne.n	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001820:	e02d      	b.n	800187e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f878 	bl	8001918 <I2C_IsAcknowledgeFailed>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e02d      	b.n	800188e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d021      	beq.n	800187e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183a:	f7ff f975 	bl	8000b28 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	429a      	cmp	r2, r3
 8001848:	d302      	bcc.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d116      	bne.n	800187e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2220      	movs	r2, #32
 800185a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f043 0220 	orr.w	r2, r3, #32
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e007      	b.n	800188e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d1ca      	bne.n	8001822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018a2:	e02d      	b.n	8001900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f837 	bl	8001918 <I2C_IsAcknowledgeFailed>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e02d      	b.n	8001910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ba:	d021      	beq.n	8001900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018bc:	f7ff f934 	bl	8000b28 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d302      	bcc.n	80018d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f043 0220 	orr.w	r2, r3, #32
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e007      	b.n	8001910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b04      	cmp	r3, #4
 800190c:	d1ca      	bne.n	80018a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192e:	d11b      	bne.n	8001968 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001938:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f043 0204 	orr.w	r2, r3, #4
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8001978:	bf20      	wfe
  __asm volatile( "nop" );
 800197a:	bf00      	nop
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_PWR_EnableBkUpAccess+0x14>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	420e0020 	.word	0x420e0020

0800199c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80019ae:	f023 0302 	bic.w	r3, r3, #2
 80019b2:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 0201 	bic.w	r2, r3, #1
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_PWR_EnterSTOPMode+0x60>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_PWR_EnterSTOPMode+0x60>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80019d6:	bf30      	wfi
 80019d8:	e004      	b.n	80019e4 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80019da:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80019dc:	f7ff ffca 	bl	8001974 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80019e0:	f7ff ffc8 	bl	8001974 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_PWR_EnterSTOPMode+0x60>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_PWR_EnterSTOPMode+0x60>)
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	6113      	str	r3, [r2, #16]
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40007000 	.word	0x40007000
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e272      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8087 	beq.w	8001b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a20:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a2c:	4b8f      	ldr	r3, [pc, #572]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
 8001a38:	4b8c      	ldr	r3, [pc, #560]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d10b      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d06c      	beq.n	8001b2c <HAL_RCC_OscConfig+0x12c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d168      	bne.n	8001b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e24c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x76>
 8001a68:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a7f      	ldr	r2, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e02e      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7a      	ldr	r2, [pc, #488]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b78      	ldr	r3, [pc, #480]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a77      	ldr	r2, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0xbc>
 8001aa2:	4b72      	ldr	r3, [pc, #456]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a71      	ldr	r2, [pc, #452]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6a      	ldr	r2, [pc, #424]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a67      	ldr	r2, [pc, #412]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f824 	bl	8000b28 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f820 	bl	8000b28 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e200      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe4>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f810 	bl	8000b28 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f80c 	bl	8000b28 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1ec      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x10c>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3a:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1c0      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4939      	ldr	r1, [pc, #228]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7fe ffc5 	bl	8000b28 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7fe ffc1 	bl	8000b28 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1a1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe ffa4 	bl	8000b28 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7fe ffa0 	bl	8000b28 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e180      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03a      	beq.n	8001c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7fe ff84 	bl	8000b28 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7fe ff80 	bl	8000b28 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e160      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f000 fad8 	bl	80021f8 <RCC_Delay>
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7fe ff6a 	bl	8000b28 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7fe ff66 	bl	8000b28 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d908      	bls.n	8001c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e146      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	42420000 	.word	0x42420000
 8001c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e9      	bne.n	8001c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a6 	beq.w	8001dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a87      	ldr	r2, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b82      	ldr	r3, [pc, #520]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7e      	ldr	r2, [pc, #504]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ff27 	bl	8000b28 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7fe ff23 	bl	8000b28 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e103      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x312>
 8001d04:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a6e      	ldr	r2, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a66      	ldr	r2, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	e01c      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x356>
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a60      	ldr	r2, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7fe fed7 	bl	8000b28 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7fe fed3 	bl	8000b28 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0b1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ee      	beq.n	8001d7e <HAL_RCC_OscConfig+0x37e>
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7fe fec1 	bl	8000b28 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7fe febd 	bl	8000b28 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e09b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a3b      	ldr	r2, [pc, #236]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d061      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d146      	bne.n	8001e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe fe91 	bl	8000b28 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7fe fe8d 	bl	8000b28 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e06d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4921      	ldr	r1, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a19      	ldr	r1, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	430b      	orrs	r3, r1
 8001e56:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe fe61 	bl	8000b28 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe fe5d 	bl	8000b28 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e03d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46a>
 8001e88:	e035      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7fe fe4a 	bl	8000b28 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fe46 	bl	8000b28 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e026      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x498>
 8001eb6:	e01e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e019      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x500>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4965      	ldr	r1, [pc, #404]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e073      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fd98 	bl	8000b28 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7fe fd94 	bl	8000b28 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e053      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fcf6 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080046c8 	.word	0x080046c8
 80020d0:	20000008 	.word	0x20000008
 80020d4:	2000000c 	.word	0x2000000c

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b490      	push	{r4, r7}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_RCC_GetSysClockFreq+0xac>)
 80020e0:	1d3c      	adds	r4, r7, #4
 80020e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020e8:	f240 2301 	movw	r3, #513	; 0x201
 80020ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d002      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x40>
 8002112:	2b08      	cmp	r3, #8
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x46>
 8002116:	e02b      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_RCC_GetSysClockFreq+0xb4>)
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	e02b      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	0c9b      	lsrs	r3, r3, #18
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3328      	adds	r3, #40	; 0x28
 8002128:	443b      	add	r3, r7
 800212a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800212e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb0>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	0c5b      	lsrs	r3, r3, #17
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	3328      	adds	r3, #40	; 0x28
 8002146:	443b      	add	r3, r7
 8002148:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800214c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002152:	fb03 f202 	mul.w	r2, r3, r2
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	e004      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	623b      	str	r3, [r7, #32]
      break;
 800216e:	e002      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002172:	623b      	str	r3, [r7, #32]
      break;
 8002174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002176:	6a3b      	ldr	r3, [r7, #32]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bc90      	pop	{r4, r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	0800335c 	.word	0x0800335c
 8002188:	40021000 	.word	0x40021000
 800218c:	007a1200 	.word	0x007a1200
 8002190:	003d0900 	.word	0x003d0900

08002194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	20000008 	.word	0x20000008

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ac:	f7ff fff2 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	080046d8 	.word	0x080046d8

080021d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d4:	f7ff ffde 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0adb      	lsrs	r3, r3, #11
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	080046d8 	.word	0x080046d8

080021f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <RCC_Delay+0x34>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <RCC_Delay+0x38>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0a5b      	lsrs	r3, r3, #9
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002214:	bf00      	nop
  }
  while (Delay --);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	60fa      	str	r2, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f9      	bne.n	8002214 <RCC_Delay+0x1c>
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	20000008 	.word	0x20000008
 8002230:	10624dd3 	.word	0x10624dd3

08002234 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d07d      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002254:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	4a4b      	ldr	r2, [pc, #300]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	61d3      	str	r3, [r2, #28]
 800226c:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d118      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a42      	ldr	r2, [pc, #264]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002294:	f7fe fc48 	bl	8000b28 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	e008      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7fe fc44 	bl	8000b28 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e06d      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02e      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d027      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ee:	4a29      	ldr	r2, [pc, #164]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d014      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fc13 	bl	8000b28 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fc0f 	bl	8000b28 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e036      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ee      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4917      	ldr	r1, [pc, #92]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	4313      	orrs	r3, r2
 8002338:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4a13      	ldr	r2, [pc, #76]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	490b      	ldr	r1, [pc, #44]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	4904      	ldr	r1, [pc, #16]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	40007000 	.word	0x40007000
 800239c:	42420440 	.word	0x42420440

080023a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b08d      	sub	sp, #52	; 0x34
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023a8:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80023aa:	f107 040c 	add.w	r4, r7, #12
 80023ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023b4:	f240 2301 	movw	r3, #513	; 0x201
 80023b8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	2300      	movs	r3, #0
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	f200 808e 	bhi.w	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d049      	beq.n	8002476 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d079      	beq.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023e8:	e086      	b.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d07f      	beq.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	0c9b      	lsrs	r3, r3, #18
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	3330      	adds	r3, #48	; 0x30
 8002406:	443b      	add	r3, r7
 8002408:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800240c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d017      	beq.n	8002448 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002418:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0c5b      	lsrs	r3, r3, #17
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	3330      	adds	r3, #48	; 0x30
 8002424:	443b      	add	r3, r7
 8002426:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002436:	4a37      	ldr	r2, [pc, #220]	; (8002514 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	fbb2 f2f3 	udiv	r2, r2, r3
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002446:	e004      	b.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	4a33      	ldr	r2, [pc, #204]	; (8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d102      	bne.n	8002466 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002464:	e04a      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4a2c      	ldr	r2, [pc, #176]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002474:	e042      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002486:	d108      	bne.n	800249a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
 8002498:	e01f      	b.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a4:	d109      	bne.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80024b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b8:	e00f      	b.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c4:	d11c      	bne.n	8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80024d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024d8:	e012      	b.n	8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80024da:	e011      	b.n	8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024dc:	f7ff fe78 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0b9b      	lsrs	r3, r3, #14
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	3301      	adds	r3, #1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024f6:	e004      	b.n	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80024f8:	bf00      	nop
 80024fa:	e002      	b.n	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80024fc:	bf00      	nop
 80024fe:	e000      	b.n	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002500:	bf00      	nop
    }
  }
  return (frequency);
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002504:	4618      	mov	r0, r3
 8002506:	3734      	adds	r7, #52	; 0x34
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}
 800250c:	0800336c 	.word	0x0800336c
 8002510:	40021000 	.word	0x40021000
 8002514:	007a1200 	.word	0x007a1200
 8002518:	003d0900 	.word	0x003d0900
 800251c:	aaaaaaab 	.word	0xaaaaaaab

08002520 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e084      	b.n	8002640 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7c5b      	ldrb	r3, [r3, #17]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe f9fa 	bl	8000940 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fbd6 	bl	8002d04 <HAL_RTC_WaitForSynchro>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e06b      	b.n	8002640 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fc8f 	bl	8002e8c <RTC_EnterInitMode>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2204      	movs	r2, #4
 8002578:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e060      	b.n	8002640 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0207 	bic.w	r2, r2, #7
 800258c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002596:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <HAL_RTC_Init+0x128>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <HAL_RTC_Init+0x128>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80025a2:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_RTC_Init+0x128>)
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4926      	ldr	r1, [pc, #152]	; (8002648 <HAL_RTC_Init+0x128>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d003      	beq.n	80025c6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e00e      	b.n	80025e4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff feea 	bl	80023a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80025cc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e030      	b.n	8002640 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 010f 	bic.w	r1, r3, #15
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0c1a      	lsrs	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	b291      	uxth	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fc63 	bl	8002edc <RTC_ExitInitMode>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00c      	b.n	8002640 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800263e:	2300      	movs	r3, #0
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40006c00 	.word	0x40006c00

0800264c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_RTC_SetTime+0x20>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e080      	b.n	8002772 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	7c1b      	ldrb	r3, [r3, #16]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_RTC_SetTime+0x30>
 8002678:	2302      	movs	r3, #2
 800267a:	e07a      	b.n	8002772 <HAL_RTC_SetTime+0x126>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2202      	movs	r2, #2
 8002686:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d113      	bne.n	80026b6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002698:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	4619      	mov	r1, r3
 80026a2:	460b      	mov	r3, r1
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a5b      	subs	r3, r3, r1
 80026a8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026aa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026b0:	4413      	add	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e01e      	b.n	80026f4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fc53 	bl	8002f66 <RTC_Bcd2ToByte>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026c8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fc48 	bl	8002f66 <RTC_Bcd2ToByte>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026e2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	789b      	ldrb	r3, [r3, #2]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fc3c 	bl	8002f66 <RTC_Bcd2ToByte>
 80026ee:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026f0:	4423      	add	r3, r4
 80026f2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80026f4:	6979      	ldr	r1, [r7, #20]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fb61 	bl	8002dbe <RTC_WriteTimeCounter>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2204      	movs	r2, #4
 8002706:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e02f      	b.n	8002772 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0205 	bic.w	r2, r2, #5
 8002720:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fb72 	bl	8002e0c <RTC_ReadAlarmCounter>
 8002728:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d018      	beq.n	8002764 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	429a      	cmp	r2, r3
 8002738:	d214      	bcs.n	8002764 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002740:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002744:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002746:	6939      	ldr	r1, [r7, #16]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fb78 	bl	8002e3e <RTC_WriteAlarmCounter>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2204      	movs	r2, #4
 8002758:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e006      	b.n	8002772 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
	...

0800277c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_RTC_GetTime+0x28>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b5      	b.n	8002914 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0ac      	b.n	8002914 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 facf 	bl	8002d5e <RTC_ReadTimeCounter>
 80027c0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4a55      	ldr	r2, [pc, #340]	; (800291c <HAL_RTC_GetTime+0x1a0>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0adb      	lsrs	r3, r3, #11
 80027cc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4b52      	ldr	r3, [pc, #328]	; (800291c <HAL_RTC_GetTime+0x1a0>)
 80027d2:	fba3 1302 	umull	r1, r3, r3, r2
 80027d6:	0adb      	lsrs	r3, r3, #11
 80027d8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	4a4f      	ldr	r2, [pc, #316]	; (8002920 <HAL_RTC_GetTime+0x1a4>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4a4a      	ldr	r2, [pc, #296]	; (800291c <HAL_RTC_GetTime+0x1a0>)
 80027f4:	fba2 1203 	umull	r1, r2, r2, r3
 80027f8:	0ad2      	lsrs	r2, r2, #11
 80027fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80027fe:	fb01 f202 	mul.w	r2, r1, r2
 8002802:	1a9a      	subs	r2, r3, r2
 8002804:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RTC_GetTime+0x1a4>)
 8002806:	fba3 1302 	umull	r1, r3, r3, r2
 800280a:	0959      	lsrs	r1, r3, #5
 800280c:	460b      	mov	r3, r1
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a5b      	subs	r3, r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	1ad1      	subs	r1, r2, r3
 8002816:	b2ca      	uxtb	r2, r1
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b17      	cmp	r3, #23
 8002820:	d955      	bls.n	80028ce <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <HAL_RTC_GetTime+0x1a8>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800282e:	6939      	ldr	r1, [r7, #16]
 8002830:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <HAL_RTC_GetTime+0x1a8>)
 8002832:	fba3 2301 	umull	r2, r3, r3, r1
 8002836:	091a      	lsrs	r2, r3, #4
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	1aca      	subs	r2, r1, r3
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fadf 	bl	8002e0c <RTC_ReadAlarmCounter>
 800284e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d008      	beq.n	800286a <HAL_RTC_GetTime+0xee>
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	429a      	cmp	r2, r3
 800285e:	d904      	bls.n	800286a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	e002      	b.n	8002870 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_RTC_GetTime+0x1ac>)
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fa9c 	bl	8002dbe <RTC_WriteTimeCounter>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e041      	b.n	8002914 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d00c      	beq.n	80028b2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80028a0:	69f9      	ldr	r1, [r7, #28]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 facb 	bl	8002e3e <RTC_WriteAlarmCounter>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e030      	b.n	8002914 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80028b2:	69f9      	ldr	r1, [r7, #28]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fac2 	bl	8002e3e <RTC_WriteAlarmCounter>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e027      	b.n	8002914 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80028c4:	6979      	ldr	r1, [r7, #20]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fb6a 	bl	8002fa0 <RTC_DateUpdate>
 80028cc:	e003      	b.n	80028d6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01a      	beq.n	8002912 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fb23 	bl	8002f2c <RTC_ByteToBcd2>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fb1a 	bl	8002f2c <RTC_ByteToBcd2>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	789b      	ldrb	r3, [r3, #2]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fb11 	bl	8002f2c <RTC_ByteToBcd2>
 800290a:	4603      	mov	r3, r0
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	91a2b3c5 	.word	0x91a2b3c5
 8002920:	88888889 	.word	0x88888889
 8002924:	aaaaaaab 	.word	0xaaaaaaab
 8002928:	00015180 	.word	0x00015180

0800292c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_RTC_SetDate+0x24>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e097      	b.n	8002a84 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	7c1b      	ldrb	r3, [r3, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_RTC_SetDate+0x34>
 800295c:	2302      	movs	r3, #2
 800295e:	e091      	b.n	8002a84 <HAL_RTC_SetDate+0x158>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2202      	movs	r2, #2
 800296a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	78da      	ldrb	r2, [r3, #3]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	785a      	ldrb	r2, [r3, #1]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	789a      	ldrb	r2, [r3, #2]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	739a      	strb	r2, [r3, #14]
 800298a:	e01a      	b.n	80029c2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fae8 	bl	8002f66 <RTC_Bcd2ToByte>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fadf 	bl	8002f66 <RTC_Bcd2ToByte>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	789b      	ldrb	r3, [r3, #2]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fad6 	bl	8002f66 <RTC_Bcd2ToByte>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	7bdb      	ldrb	r3, [r3, #15]
 80029c6:	4618      	mov	r0, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	7b59      	ldrb	r1, [r3, #13]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	7b9b      	ldrb	r3, [r3, #14]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f000 fbc1 	bl	8003158 <RTC_WeekDayNum>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	7b1a      	ldrb	r2, [r3, #12]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f9b9 	bl	8002d5e <RTC_ReadTimeCounter>
 80029ec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <HAL_RTC_SetDate+0x160>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b18      	cmp	r3, #24
 80029fe:	d93a      	bls.n	8002a76 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <HAL_RTC_SetDate+0x164>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_RTC_SetDate+0x168>)
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a16:	69f9      	ldr	r1, [r7, #28]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f9d0 	bl	8002dbe <RTC_WriteTimeCounter>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2204      	movs	r2, #4
 8002a28:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e027      	b.n	8002a84 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f9e9 	bl	8002e0c <RTC_ReadAlarmCounter>
 8002a3a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d018      	beq.n	8002a76 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d214      	bcs.n	8002a76 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002a52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a56:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002a58:	69b9      	ldr	r1, [r7, #24]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f9ef 	bl	8002e3e <RTC_WriteAlarmCounter>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e006      	b.n	8002a84 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	91a2b3c5 	.word	0x91a2b3c5
 8002a90:	aaaaaaab 	.word	0xaaaaaaab
 8002a94:	00015180 	.word	0x00015180

08002a98 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	460a      	mov	r2, r1
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	460a      	mov	r2, r1
 8002ab0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_RTC_GetDate+0x26>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e03a      	b.n	8002b38 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	4619      	mov	r1, r3
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fe56 	bl	800277c <HAL_RTC_GetTime>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e02e      	b.n	8002b38 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	7b1a      	ldrb	r2, [r3, #12]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	7bda      	ldrb	r2, [r3, #15]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	7b5a      	ldrb	r2, [r3, #13]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	7b9a      	ldrb	r2, [r3, #14]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01a      	beq.n	8002b36 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	78db      	ldrb	r3, [r3, #3]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fa11 	bl	8002f2c <RTC_ByteToBcd2>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fa08 	bl	8002f2c <RTC_ByteToBcd2>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	789b      	ldrb	r3, [r3, #2]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f9ff 	bl	8002f2c <RTC_ByteToBcd2>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2100      	movs	r1, #0
 8002b56:	460a      	mov	r2, r1
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_RTC_SetAlarm_IT+0x2a>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e099      	b.n	8002ca2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	7c1b      	ldrb	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_RTC_SetAlarm_IT+0x3a>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e093      	b.n	8002ca2 <HAL_RTC_SetAlarm_IT+0x162>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2202      	movs	r2, #2
 8002b84:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff fdf4 	bl	800277c <HAL_RTC_GetTime>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e081      	b.n	8002ca2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002b9e:	7d3b      	ldrb	r3, [r7, #20]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002ba6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002baa:	7d7b      	ldrb	r3, [r7, #21]
 8002bac:	4619      	mov	r1, r3
 8002bae:	460b      	mov	r3, r1
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a5b      	subs	r3, r3, r1
 8002bb4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002bb6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002bb8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002bba:	4413      	add	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d113      	bne.n	8002bec <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002bce:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	785b      	ldrb	r3, [r3, #1]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a5b      	subs	r3, r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002be0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002be6:	4413      	add	r3, r2
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e01e      	b.n	8002c2a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f9b8 	bl	8002f66 <RTC_Bcd2ToByte>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002bfe:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f9ad 	bl	8002f66 <RTC_Bcd2ToByte>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c18:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	789b      	ldrb	r3, [r3, #2]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f9a1 	bl	8002f66 <RTC_Bcd2ToByte>
 8002c24:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c26:	4423      	add	r3, r4
 8002c28:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d205      	bcs.n	8002c3e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002c38:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c3c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c3e:	69f9      	ldr	r1, [r7, #28]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f8fc 	bl	8002e3e <RTC_WriteAlarmCounter>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e022      	b.n	8002ca2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0202 	bic.w	r2, r2, #2
 8002c6a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0202 	orr.w	r2, r2, #2
 8002c7a:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c86:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a07      	ldr	r2, [pc, #28]	; (8002cac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c92:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd90      	pop	{r4, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40010400 	.word	0x40010400

08002cb0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d011      	beq.n	8002cea <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fd fa39 	bl	800014c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0202 	bic.w	r2, r2, #2
 8002ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002cec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	745a      	strb	r2, [r3, #17]
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e01d      	b.n	8002d56 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0208 	bic.w	r2, r2, #8
 8002d28:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002d2a:	f7fd fefd 	bl	8000b28 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002d30:	e009      	b.n	8002d46 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d32:	f7fd fef9 	bl	8000b28 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d40:	d901      	bls.n	8002d46 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e007      	b.n	8002d56 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	827b      	strh	r3, [r7, #18]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	823b      	strh	r3, [r7, #16]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002d8e:	8a7a      	ldrh	r2, [r7, #18]
 8002d90:	8a3b      	ldrh	r3, [r7, #16]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d008      	beq.n	8002da8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002d96:	8a3b      	ldrh	r3, [r7, #16]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e004      	b.n	8002db2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002da8:	8a7b      	ldrh	r3, [r7, #18]
 8002daa:	041a      	lsls	r2, r3, #16
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002db2:	697b      	ldr	r3, [r7, #20]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f85d 	bl	8002e8c <RTC_EnterInitMode>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e011      	b.n	8002e02 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	0c12      	lsrs	r2, r2, #16
 8002de6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	b292      	uxth	r2, r2
 8002df0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f872 	bl	8002edc <RTC_ExitInitMode>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	81fb      	strh	r3, [r7, #14]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002e2c:	89fb      	ldrh	r3, [r7, #14]
 8002e2e:	041a      	lsls	r2, r3, #16
 8002e30:	89bb      	ldrh	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f81d 	bl	8002e8c <RTC_EnterInitMode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e011      	b.n	8002e82 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	0c12      	lsrs	r2, r2, #16
 8002e66:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f832 	bl	8002edc <RTC_ExitInitMode>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002e98:	f7fd fe46 	bl	8000b28 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e9e:	e009      	b.n	8002eb4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ea0:	f7fd fe42 	bl	8000b28 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eae:	d901      	bls.n	8002eb4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e00f      	b.n	8002ed4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ee      	beq.n	8002ea0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0210 	orr.w	r2, r2, #16
 8002ed0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0210 	bic.w	r2, r2, #16
 8002ef6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ef8:	f7fd fe16 	bl	8000b28 <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002efe:	e009      	b.n	8002f14 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f00:	f7fd fe12 	bl	8000b28 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0e:	d901      	bls.n	8002f14 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e007      	b.n	8002f24 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ee      	beq.n	8002f00 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002f3a:	e005      	b.n	8002f48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	3b0a      	subs	r3, #10
 8002f46:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d8f6      	bhi.n	8002f3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b2db      	uxtb	r3, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7bdb      	ldrb	r3, [r3, #15]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7b5b      	ldrb	r3, [r3, #13]
 8002fc4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7b9b      	ldrb	r3, [r3, #14]
 8002fca:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	e06f      	b.n	80030b2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d011      	beq.n	8002ffc <RTC_DateUpdate+0x5c>
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d00e      	beq.n	8002ffc <RTC_DateUpdate+0x5c>
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d00b      	beq.n	8002ffc <RTC_DateUpdate+0x5c>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b07      	cmp	r3, #7
 8002fe8:	d008      	beq.n	8002ffc <RTC_DateUpdate+0x5c>
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d005      	beq.n	8002ffc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0a      	cmp	r3, #10
 8002ff4:	d002      	beq.n	8002ffc <RTC_DateUpdate+0x5c>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d117      	bne.n	800302c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b1e      	cmp	r3, #30
 8003000:	d803      	bhi.n	800300a <RTC_DateUpdate+0x6a>
      {
        day++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3301      	adds	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003008:	e050      	b.n	80030ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d005      	beq.n	800301c <RTC_DateUpdate+0x7c>
        {
          month++;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	3301      	adds	r3, #1
 8003014:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003016:	2301      	movs	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800301a:	e047      	b.n	80030ac <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800301c:	2301      	movs	r3, #1
 800301e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003020:	2301      	movs	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
          year++;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3301      	adds	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800302a:	e03f      	b.n	80030ac <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b04      	cmp	r3, #4
 8003030:	d008      	beq.n	8003044 <RTC_DateUpdate+0xa4>
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d005      	beq.n	8003044 <RTC_DateUpdate+0xa4>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b09      	cmp	r3, #9
 800303c:	d002      	beq.n	8003044 <RTC_DateUpdate+0xa4>
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b0b      	cmp	r3, #11
 8003042:	d10c      	bne.n	800305e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b1d      	cmp	r3, #29
 8003048:	d803      	bhi.n	8003052 <RTC_DateUpdate+0xb2>
      {
        day++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3301      	adds	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003050:	e02c      	b.n	80030ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	3301      	adds	r3, #1
 8003056:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003058:	2301      	movs	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800305c:	e026      	b.n	80030ac <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d123      	bne.n	80030ac <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b1b      	cmp	r3, #27
 8003068:	d803      	bhi.n	8003072 <RTC_DateUpdate+0xd2>
      {
        day++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3301      	adds	r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	e01c      	b.n	80030ac <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b1c      	cmp	r3, #28
 8003076:	d111      	bne.n	800309c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f839 	bl	80030f4 <RTC_IsLeapYear>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e00d      	b.n	80030ac <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3301      	adds	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e007      	b.n	80030ac <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b1d      	cmp	r3, #29
 80030a0:	d104      	bne.n	80030ac <RTC_DateUpdate+0x10c>
      {
        month++;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3301      	adds	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80030a8:	2301      	movs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d38b      	bcc.n	8002fd2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6978      	ldr	r0, [r7, #20]
 80030de:	f000 f83b 	bl	8003158 <RTC_WeekDayNum>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	731a      	strb	r2, [r3, #12]
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	e01d      	b.n	800314a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	4a10      	ldr	r2, [pc, #64]	; (8003154 <RTC_IsLeapYear+0x60>)
 8003112:	fba2 1203 	umull	r1, r2, r2, r3
 8003116:	0952      	lsrs	r2, r2, #5
 8003118:	2164      	movs	r1, #100	; 0x64
 800311a:	fb01 f202 	mul.w	r2, r1, r2
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003126:	2301      	movs	r3, #1
 8003128:	e00f      	b.n	800314a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	4a09      	ldr	r2, [pc, #36]	; (8003154 <RTC_IsLeapYear+0x60>)
 800312e:	fba2 1203 	umull	r1, r2, r2, r3
 8003132:	09d2      	lsrs	r2, r2, #7
 8003134:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003138:	fb01 f202 	mul.w	r2, r1, r2
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003148:	2300      	movs	r3, #0
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	51eb851f 	.word	0x51eb851f

08003158 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
 8003164:	4613      	mov	r3, r2
 8003166:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003176:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d82d      	bhi.n	80031da <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <RTC_WeekDayNum+0xe4>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	085a      	lsrs	r2, r3, #1
 8003192:	78bb      	ldrb	r3, [r7, #2]
 8003194:	441a      	add	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	441a      	add	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3b01      	subs	r3, #1
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	4926      	ldr	r1, [pc, #152]	; (8003240 <RTC_WeekDayNum+0xe8>)
 80031a8:	fba1 1303 	umull	r1, r3, r1, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	4922      	ldr	r1, [pc, #136]	; (8003240 <RTC_WeekDayNum+0xe8>)
 80031b6:	fba1 1303 	umull	r1, r3, r1, r3
 80031ba:	09db      	lsrs	r3, r3, #7
 80031bc:	4413      	add	r3, r2
 80031be:	1d1a      	adds	r2, r3, #4
 80031c0:	4b20      	ldr	r3, [pc, #128]	; (8003244 <RTC_WeekDayNum+0xec>)
 80031c2:	fba3 1302 	umull	r1, r3, r3, r2
 80031c6:	1ad1      	subs	r1, r2, r3
 80031c8:	0849      	lsrs	r1, r1, #1
 80031ca:	440b      	add	r3, r1
 80031cc:	0899      	lsrs	r1, r3, #2
 80031ce:	460b      	mov	r3, r1
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a5b      	subs	r3, r3, r1
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e029      	b.n	800322e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <RTC_WeekDayNum+0xe4>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	085a      	lsrs	r2, r3, #1
 80031ee:	78bb      	ldrb	r3, [r7, #2]
 80031f0:	441a      	add	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	441a      	add	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4910      	ldr	r1, [pc, #64]	; (8003240 <RTC_WeekDayNum+0xe8>)
 8003200:	fba1 1303 	umull	r1, r3, r1, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	490d      	ldr	r1, [pc, #52]	; (8003240 <RTC_WeekDayNum+0xe8>)
 800320c:	fba1 1303 	umull	r1, r3, r1, r3
 8003210:	09db      	lsrs	r3, r3, #7
 8003212:	4413      	add	r3, r2
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <RTC_WeekDayNum+0xec>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	1ad1      	subs	r1, r2, r3
 800321e:	0849      	lsrs	r1, r1, #1
 8003220:	440b      	add	r3, r1
 8003222:	0899      	lsrs	r1, r3, #2
 8003224:	460b      	mov	r3, r1
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	1a5b      	subs	r3, r3, r1
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	b2db      	uxtb	r3, r3
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	38e38e39 	.word	0x38e38e39
 8003240:	51eb851f 	.word	0x51eb851f
 8003244:	24924925 	.word	0x24924925

08003248 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d027      	beq.n	80032ae <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f824 	bl	80032c8 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0204 	mvn.w	r2, #4
 8003288:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2204      	movs	r2, #4
 800328e:	745a      	strb	r2, [r3, #17]
 8003290:	e005      	b.n	800329e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f80f 	bl	80032b6 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	605a      	str	r2, [r3, #4]
    }
  }
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
	...

080032dc <__libc_init_array>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	2600      	movs	r6, #0
 80032e0:	4d0c      	ldr	r5, [pc, #48]	; (8003314 <__libc_init_array+0x38>)
 80032e2:	4c0d      	ldr	r4, [pc, #52]	; (8003318 <__libc_init_array+0x3c>)
 80032e4:	1b64      	subs	r4, r4, r5
 80032e6:	10a4      	asrs	r4, r4, #2
 80032e8:	42a6      	cmp	r6, r4
 80032ea:	d109      	bne.n	8003300 <__libc_init_array+0x24>
 80032ec:	f000 f822 	bl	8003334 <_init>
 80032f0:	2600      	movs	r6, #0
 80032f2:	4d0a      	ldr	r5, [pc, #40]	; (800331c <__libc_init_array+0x40>)
 80032f4:	4c0a      	ldr	r4, [pc, #40]	; (8003320 <__libc_init_array+0x44>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	42a6      	cmp	r6, r4
 80032fc:	d105      	bne.n	800330a <__libc_init_array+0x2e>
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	f855 3b04 	ldr.w	r3, [r5], #4
 8003304:	4798      	blx	r3
 8003306:	3601      	adds	r6, #1
 8003308:	e7ee      	b.n	80032e8 <__libc_init_array+0xc>
 800330a:	f855 3b04 	ldr.w	r3, [r5], #4
 800330e:	4798      	blx	r3
 8003310:	3601      	adds	r6, #1
 8003312:	e7f2      	b.n	80032fa <__libc_init_array+0x1e>
 8003314:	080046e0 	.word	0x080046e0
 8003318:	080046e0 	.word	0x080046e0
 800331c:	080046e0 	.word	0x080046e0
 8003320:	080046e4 	.word	0x080046e4

08003324 <memset>:
 8003324:	4603      	mov	r3, r0
 8003326:	4402      	add	r2, r0
 8003328:	4293      	cmp	r3, r2
 800332a:	d100      	bne.n	800332e <memset+0xa>
 800332c:	4770      	bx	lr
 800332e:	f803 1b01 	strb.w	r1, [r3], #1
 8003332:	e7f9      	b.n	8003328 <memset+0x4>

08003334 <_init>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr

08003340 <_fini>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	bf00      	nop
 8003344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003346:	bc08      	pop	{r3}
 8003348:	469e      	mov	lr, r3
 800334a:	4770      	bx	lr
